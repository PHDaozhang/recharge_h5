// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2gstate_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2gstate_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2gstate_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2gs_player_connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2gs_player_connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_player_connect_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_player_connect_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2gs_player_disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2gs_player_disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_player_disconnect_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_player_disconnect_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2gs_game_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2gs_game_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_base_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_base_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_cows_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_cows_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_cows_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_cows_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_cows_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_cows_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_shcd_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_shcd_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_shcd_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_shcd_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_shcd_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_shcd_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_baccarat_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_baccarat_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_baccarat_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_baccarat_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_baccarat_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_baccarat_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_goldshark_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_goldshark_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_goldshark_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_goldshark_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_goldshark_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_goldshark_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_lhd_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_lhd_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_lhd_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_lhd_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_lhd_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_lhd_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_benzbmw_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_benzbmw_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_benzbmw_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_benzbmw_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_benzbmw_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_benzbmw_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_multiredblack_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_multiredblack_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_multiredblack_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_multiredblack_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_multiredblack_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_multiredblack_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_ebg_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_ebg_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_ebg_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_ebg_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_ebg_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_ebg_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_dice_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_dice_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_dice_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_dice_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_dice_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_dice_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_qznn_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_qznn_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_qznn_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_qznn_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_tbnn_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_tbnn_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_tbnn_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_tbnn_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_carsmagnate_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_carsmagnate_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_carsmagnate_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_carsmagnate_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_carsmagnate_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_carsmagnate_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_multitexas_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_multitexas_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_multitexas_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_multitexas_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_multitexas_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_multitexas_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_fruits_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_fruits_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_fruits_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_fruits_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_fruits_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_fruits_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_forest_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_forest_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_forest_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_forest_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_forest_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_forest_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_fourcolorball_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_fourcolorball_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_fourcolorball_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_fourcolorball_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_fourcolorball_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_fourcolorball_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_happySupremacy_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_happySupremacy_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_happySupremacy_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_happySupremacy_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_happySupremacy_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_happySupremacy_game_history_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_ttz_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_ttz_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_msg_ttz_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_msg_ttz_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetgs2c_ttz_game_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetgs2c_ttz_game_history_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2gstate_5fprotocol_2eproto() {
  protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2gstate_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2gs_player_connect_descriptor_ = file->message_type(0);
  static const int packetc2gs_player_connect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_player_connect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_player_connect, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_player_connect, gameid_),
  };
  packetc2gs_player_connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2gs_player_connect_descriptor_,
      packetc2gs_player_connect::default_instance_,
      packetc2gs_player_connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_player_connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_player_connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2gs_player_connect));
  packetgs2c_player_connect_result_descriptor_ = file->message_type(1);
  static const int packetgs2c_player_connect_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_player_connect_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_player_connect_result, result_),
  };
  packetgs2c_player_connect_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_player_connect_result_descriptor_,
      packetgs2c_player_connect_result::default_instance_,
      packetgs2c_player_connect_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_player_connect_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_player_connect_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_player_connect_result));
  packetc2gs_player_disconnect_descriptor_ = file->message_type(2);
  static const int packetc2gs_player_disconnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_player_disconnect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_player_disconnect, playerid_),
  };
  packetc2gs_player_disconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2gs_player_disconnect_descriptor_,
      packetc2gs_player_disconnect::default_instance_,
      packetc2gs_player_disconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_player_disconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_player_disconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2gs_player_disconnect));
  packetgs2c_player_disconnect_result_descriptor_ = file->message_type(3);
  static const int packetgs2c_player_disconnect_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_player_disconnect_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_player_disconnect_result, result_),
  };
  packetgs2c_player_disconnect_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_player_disconnect_result_descriptor_,
      packetgs2c_player_disconnect_result::default_instance_,
      packetgs2c_player_disconnect_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_player_disconnect_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_player_disconnect_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_player_disconnect_result));
  packetc2gs_game_history_descriptor_ = file->message_type(4);
  static const int packetc2gs_game_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_game_history, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_game_history, gameid_),
  };
  packetc2gs_game_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2gs_game_history_descriptor_,
      packetc2gs_game_history::default_instance_,
      packetc2gs_game_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_game_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2gs_game_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2gs_game_history));
  gs_base_room_info_descriptor_ = file->message_type(5);
  static const int gs_base_room_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_base_room_info, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_base_room_info, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_base_room_info, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_base_room_info, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_base_room_info, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_base_room_info, calc_time_),
  };
  gs_base_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_base_room_info_descriptor_,
      gs_base_room_info::default_instance_,
      gs_base_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_base_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_base_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_base_room_info));
  gs_msg_cows_history_descriptor_ = file->message_type(6);
  static const int gs_msg_cows_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_history, is_win_),
  };
  gs_msg_cows_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_cows_history_descriptor_,
      gs_msg_cows_history::default_instance_,
      gs_msg_cows_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_cows_history));
  gs_msg_cows_room_history_descriptor_ = file->message_type(7);
  static const int gs_msg_cows_room_history_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_room_history, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_room_history, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_room_history, win_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_room_history, lose_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_room_history, history_list_),
  };
  gs_msg_cows_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_cows_room_history_descriptor_,
      gs_msg_cows_room_history::default_instance_,
      gs_msg_cows_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_cows_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_cows_room_history));
  packetgs2c_cows_game_history_result_descriptor_ = file->message_type(8);
  static const int packetgs2c_cows_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_cows_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_cows_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_cows_game_history_result, room_history_),
  };
  packetgs2c_cows_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_cows_game_history_result_descriptor_,
      packetgs2c_cows_game_history_result::default_instance_,
      packetgs2c_cows_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_cows_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_cows_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_cows_game_history_result));
  gs_msg_shcd_history_descriptor_ = file->message_type(9);
  static const int gs_msg_shcd_history_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_shcd_history, card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_shcd_history, card_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_shcd_history, open_type_),
  };
  gs_msg_shcd_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_shcd_history_descriptor_,
      gs_msg_shcd_history::default_instance_,
      gs_msg_shcd_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_shcd_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_shcd_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_shcd_history));
  gs_msg_shcd_room_info_descriptor_ = file->message_type(10);
  static const int gs_msg_shcd_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_shcd_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_shcd_room_info, shcd_info_),
  };
  gs_msg_shcd_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_shcd_room_info_descriptor_,
      gs_msg_shcd_room_info::default_instance_,
      gs_msg_shcd_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_shcd_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_shcd_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_shcd_room_info));
  packetgs2c_shcd_game_history_result_descriptor_ = file->message_type(11);
  static const int packetgs2c_shcd_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_shcd_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_shcd_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_shcd_game_history_result, room_history_),
  };
  packetgs2c_shcd_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_shcd_game_history_result_descriptor_,
      packetgs2c_shcd_game_history_result::default_instance_,
      packetgs2c_shcd_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_shcd_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_shcd_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_shcd_game_history_result));
  gs_msg_baccarat_history_descriptor_ = file->message_type(12);
  static const int gs_msg_baccarat_history_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_history, is_tie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_history, is_player_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_history, is_player_pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_history, is_banker_pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_history, is_banker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_history, win_point_),
  };
  gs_msg_baccarat_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_baccarat_history_descriptor_,
      gs_msg_baccarat_history::default_instance_,
      gs_msg_baccarat_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_baccarat_history));
  gs_msg_baccarat_room_info_descriptor_ = file->message_type(13);
  static const int gs_msg_baccarat_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_room_info, baccarat_info_),
  };
  gs_msg_baccarat_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_baccarat_room_info_descriptor_,
      gs_msg_baccarat_room_info::default_instance_,
      gs_msg_baccarat_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_baccarat_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_baccarat_room_info));
  packetgs2c_baccarat_game_history_result_descriptor_ = file->message_type(14);
  static const int packetgs2c_baccarat_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_baccarat_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_baccarat_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_baccarat_game_history_result, room_history_),
  };
  packetgs2c_baccarat_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_baccarat_game_history_result_descriptor_,
      packetgs2c_baccarat_game_history_result::default_instance_,
      packetgs2c_baccarat_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_baccarat_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_baccarat_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_baccarat_game_history_result));
  gs_msg_goldshark_history_descriptor_ = file->message_type(15);
  static const int gs_msg_goldshark_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_goldshark_history, result_),
  };
  gs_msg_goldshark_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_goldshark_history_descriptor_,
      gs_msg_goldshark_history::default_instance_,
      gs_msg_goldshark_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_goldshark_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_goldshark_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_goldshark_history));
  gs_msg_goldshark_room_info_descriptor_ = file->message_type(16);
  static const int gs_msg_goldshark_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_goldshark_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_goldshark_room_info, goldshark_info_),
  };
  gs_msg_goldshark_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_goldshark_room_info_descriptor_,
      gs_msg_goldshark_room_info::default_instance_,
      gs_msg_goldshark_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_goldshark_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_goldshark_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_goldshark_room_info));
  packetgs2c_goldshark_game_history_result_descriptor_ = file->message_type(17);
  static const int packetgs2c_goldshark_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_goldshark_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_goldshark_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_goldshark_game_history_result, room_history_),
  };
  packetgs2c_goldshark_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_goldshark_game_history_result_descriptor_,
      packetgs2c_goldshark_game_history_result::default_instance_,
      packetgs2c_goldshark_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_goldshark_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_goldshark_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_goldshark_game_history_result));
  gs_msg_lhd_history_descriptor_ = file->message_type(18);
  static const int gs_msg_lhd_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_lhd_history, cards_info_),
  };
  gs_msg_lhd_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_lhd_history_descriptor_,
      gs_msg_lhd_history::default_instance_,
      gs_msg_lhd_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_lhd_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_lhd_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_lhd_history));
  gs_msg_lhd_room_info_descriptor_ = file->message_type(19);
  static const int gs_msg_lhd_room_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_lhd_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_lhd_room_info, total_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_lhd_room_info, total_lose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_lhd_room_info, lhd_info_),
  };
  gs_msg_lhd_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_lhd_room_info_descriptor_,
      gs_msg_lhd_room_info::default_instance_,
      gs_msg_lhd_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_lhd_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_lhd_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_lhd_room_info));
  packetgs2c_lhd_game_history_result_descriptor_ = file->message_type(20);
  static const int packetgs2c_lhd_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_lhd_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_lhd_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_lhd_game_history_result, room_history_),
  };
  packetgs2c_lhd_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_lhd_game_history_result_descriptor_,
      packetgs2c_lhd_game_history_result::default_instance_,
      packetgs2c_lhd_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_lhd_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_lhd_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_lhd_game_history_result));
  gs_msg_benzbmw_history_descriptor_ = file->message_type(21);
  static const int gs_msg_benzbmw_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_benzbmw_history, result_),
  };
  gs_msg_benzbmw_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_benzbmw_history_descriptor_,
      gs_msg_benzbmw_history::default_instance_,
      gs_msg_benzbmw_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_benzbmw_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_benzbmw_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_benzbmw_history));
  gs_msg_benzbmw_room_info_descriptor_ = file->message_type(22);
  static const int gs_msg_benzbmw_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_benzbmw_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_benzbmw_room_info, card_road_info_),
  };
  gs_msg_benzbmw_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_benzbmw_room_info_descriptor_,
      gs_msg_benzbmw_room_info::default_instance_,
      gs_msg_benzbmw_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_benzbmw_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_benzbmw_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_benzbmw_room_info));
  packetgs2c_benzbmw_game_history_result_descriptor_ = file->message_type(23);
  static const int packetgs2c_benzbmw_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_benzbmw_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_benzbmw_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_benzbmw_game_history_result, room_history_),
  };
  packetgs2c_benzbmw_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_benzbmw_game_history_result_descriptor_,
      packetgs2c_benzbmw_game_history_result::default_instance_,
      packetgs2c_benzbmw_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_benzbmw_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_benzbmw_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_benzbmw_game_history_result));
  gs_msg_multiredblack_history_descriptor_ = file->message_type(24);
  static const int gs_msg_multiredblack_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multiredblack_history, result_),
  };
  gs_msg_multiredblack_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_multiredblack_history_descriptor_,
      gs_msg_multiredblack_history::default_instance_,
      gs_msg_multiredblack_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multiredblack_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multiredblack_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_multiredblack_history));
  gs_msg_multiredblack_room_info_descriptor_ = file->message_type(25);
  static const int gs_msg_multiredblack_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multiredblack_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multiredblack_room_info, card_road_info_),
  };
  gs_msg_multiredblack_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_multiredblack_room_info_descriptor_,
      gs_msg_multiredblack_room_info::default_instance_,
      gs_msg_multiredblack_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multiredblack_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multiredblack_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_multiredblack_room_info));
  packetgs2c_multiredblack_game_history_result_descriptor_ = file->message_type(26);
  static const int packetgs2c_multiredblack_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multiredblack_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multiredblack_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multiredblack_game_history_result, room_history_),
  };
  packetgs2c_multiredblack_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_multiredblack_game_history_result_descriptor_,
      packetgs2c_multiredblack_game_history_result::default_instance_,
      packetgs2c_multiredblack_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multiredblack_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multiredblack_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_multiredblack_game_history_result));
  gs_msg_ebg_history_descriptor_ = file->message_type(27);
  static const int gs_msg_ebg_history_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_history, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_history, cards_id_),
  };
  gs_msg_ebg_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_ebg_history_descriptor_,
      gs_msg_ebg_history::default_instance_,
      gs_msg_ebg_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_ebg_history));
  gs_msg_ebg_room_info_descriptor_ = file->message_type(28);
  static const int gs_msg_ebg_room_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_room_info, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_room_info, win_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_room_info, lose_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_room_info, card_road_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_room_info, banker_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_room_info, out_cards_),
  };
  gs_msg_ebg_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_ebg_room_info_descriptor_,
      gs_msg_ebg_room_info::default_instance_,
      gs_msg_ebg_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ebg_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_ebg_room_info));
  packetgs2c_ebg_game_history_result_descriptor_ = file->message_type(29);
  static const int packetgs2c_ebg_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ebg_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ebg_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ebg_game_history_result, room_history_),
  };
  packetgs2c_ebg_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_ebg_game_history_result_descriptor_,
      packetgs2c_ebg_game_history_result::default_instance_,
      packetgs2c_ebg_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ebg_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ebg_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_ebg_game_history_result));
  gs_msg_dice_history_descriptor_ = file->message_type(30);
  static const int gs_msg_dice_history_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_dice_history, dice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_dice_history, dice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_dice_history, dice3_),
  };
  gs_msg_dice_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_dice_history_descriptor_,
      gs_msg_dice_history::default_instance_,
      gs_msg_dice_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_dice_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_dice_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_dice_history));
  gs_msg_dice_room_info_descriptor_ = file->message_type(31);
  static const int gs_msg_dice_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_dice_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_dice_room_info, card_road_info_),
  };
  gs_msg_dice_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_dice_room_info_descriptor_,
      gs_msg_dice_room_info::default_instance_,
      gs_msg_dice_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_dice_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_dice_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_dice_room_info));
  packetgs2c_dice_game_history_result_descriptor_ = file->message_type(32);
  static const int packetgs2c_dice_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_dice_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_dice_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_dice_game_history_result, room_history_),
  };
  packetgs2c_dice_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_dice_game_history_result_descriptor_,
      packetgs2c_dice_game_history_result::default_instance_,
      packetgs2c_dice_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_dice_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_dice_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_dice_game_history_result));
  gs_msg_qznn_room_info_descriptor_ = file->message_type(33);
  static const int gs_msg_qznn_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_qznn_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_qznn_room_info, total_award_),
  };
  gs_msg_qznn_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_qznn_room_info_descriptor_,
      gs_msg_qznn_room_info::default_instance_,
      gs_msg_qznn_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_qznn_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_qznn_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_qznn_room_info));
  packetgs2c_qznn_game_history_result_descriptor_ = file->message_type(34);
  static const int packetgs2c_qznn_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_qznn_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_qznn_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_qznn_game_history_result, room_history_),
  };
  packetgs2c_qznn_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_qznn_game_history_result_descriptor_,
      packetgs2c_qznn_game_history_result::default_instance_,
      packetgs2c_qznn_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_qznn_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_qznn_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_qznn_game_history_result));
  gs_msg_tbnn_room_info_descriptor_ = file->message_type(35);
  static const int gs_msg_tbnn_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_tbnn_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_tbnn_room_info, total_award_),
  };
  gs_msg_tbnn_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_tbnn_room_info_descriptor_,
      gs_msg_tbnn_room_info::default_instance_,
      gs_msg_tbnn_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_tbnn_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_tbnn_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_tbnn_room_info));
  packetgs2c_tbnn_game_history_result_descriptor_ = file->message_type(36);
  static const int packetgs2c_tbnn_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_tbnn_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_tbnn_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_tbnn_game_history_result, room_history_),
  };
  packetgs2c_tbnn_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_tbnn_game_history_result_descriptor_,
      packetgs2c_tbnn_game_history_result::default_instance_,
      packetgs2c_tbnn_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_tbnn_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_tbnn_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_tbnn_game_history_result));
  gs_msg_carsmagnate_history_descriptor_ = file->message_type(37);
  static const int gs_msg_carsmagnate_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_carsmagnate_history, history_val_),
  };
  gs_msg_carsmagnate_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_carsmagnate_history_descriptor_,
      gs_msg_carsmagnate_history::default_instance_,
      gs_msg_carsmagnate_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_carsmagnate_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_carsmagnate_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_carsmagnate_history));
  gs_msg_carsmagnate_room_info_descriptor_ = file->message_type(38);
  static const int gs_msg_carsmagnate_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_carsmagnate_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_carsmagnate_room_info, card_road_info_),
  };
  gs_msg_carsmagnate_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_carsmagnate_room_info_descriptor_,
      gs_msg_carsmagnate_room_info::default_instance_,
      gs_msg_carsmagnate_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_carsmagnate_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_carsmagnate_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_carsmagnate_room_info));
  packetgs2c_carsmagnate_game_history_result_descriptor_ = file->message_type(39);
  static const int packetgs2c_carsmagnate_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_carsmagnate_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_carsmagnate_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_carsmagnate_game_history_result, room_history_),
  };
  packetgs2c_carsmagnate_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_carsmagnate_game_history_result_descriptor_,
      packetgs2c_carsmagnate_game_history_result::default_instance_,
      packetgs2c_carsmagnate_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_carsmagnate_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_carsmagnate_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_carsmagnate_game_history_result));
  gs_msg_multitexas_history_descriptor_ = file->message_type(40);
  static const int gs_msg_multitexas_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multitexas_history, win_),
  };
  gs_msg_multitexas_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_multitexas_history_descriptor_,
      gs_msg_multitexas_history::default_instance_,
      gs_msg_multitexas_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multitexas_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multitexas_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_multitexas_history));
  gs_msg_multitexas_room_info_descriptor_ = file->message_type(41);
  static const int gs_msg_multitexas_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multitexas_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multitexas_room_info, card_road_info_),
  };
  gs_msg_multitexas_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_multitexas_room_info_descriptor_,
      gs_msg_multitexas_room_info::default_instance_,
      gs_msg_multitexas_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multitexas_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_multitexas_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_multitexas_room_info));
  packetgs2c_multitexas_game_history_result_descriptor_ = file->message_type(42);
  static const int packetgs2c_multitexas_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multitexas_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multitexas_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multitexas_game_history_result, room_history_),
  };
  packetgs2c_multitexas_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_multitexas_game_history_result_descriptor_,
      packetgs2c_multitexas_game_history_result::default_instance_,
      packetgs2c_multitexas_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multitexas_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_multitexas_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_multitexas_game_history_result));
  gs_msg_fruits_history_descriptor_ = file->message_type(43);
  static const int gs_msg_fruits_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fruits_history, history_val_),
  };
  gs_msg_fruits_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_fruits_history_descriptor_,
      gs_msg_fruits_history::default_instance_,
      gs_msg_fruits_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fruits_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fruits_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_fruits_history));
  gs_msg_fruits_room_info_descriptor_ = file->message_type(44);
  static const int gs_msg_fruits_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fruits_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fruits_room_info, card_road_info_),
  };
  gs_msg_fruits_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_fruits_room_info_descriptor_,
      gs_msg_fruits_room_info::default_instance_,
      gs_msg_fruits_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fruits_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fruits_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_fruits_room_info));
  packetgs2c_fruits_game_history_result_descriptor_ = file->message_type(45);
  static const int packetgs2c_fruits_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fruits_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fruits_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fruits_game_history_result, room_history_),
  };
  packetgs2c_fruits_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_fruits_game_history_result_descriptor_,
      packetgs2c_fruits_game_history_result::default_instance_,
      packetgs2c_fruits_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fruits_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fruits_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_fruits_game_history_result));
  gs_msg_forest_history_descriptor_ = file->message_type(46);
  static const int gs_msg_forest_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_forest_history, history_val_),
  };
  gs_msg_forest_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_forest_history_descriptor_,
      gs_msg_forest_history::default_instance_,
      gs_msg_forest_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_forest_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_forest_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_forest_history));
  gs_msg_forest_room_info_descriptor_ = file->message_type(47);
  static const int gs_msg_forest_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_forest_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_forest_room_info, card_road_info_),
  };
  gs_msg_forest_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_forest_room_info_descriptor_,
      gs_msg_forest_room_info::default_instance_,
      gs_msg_forest_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_forest_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_forest_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_forest_room_info));
  packetgs2c_forest_game_history_result_descriptor_ = file->message_type(48);
  static const int packetgs2c_forest_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_forest_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_forest_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_forest_game_history_result, room_history_),
  };
  packetgs2c_forest_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_forest_game_history_result_descriptor_,
      packetgs2c_forest_game_history_result::default_instance_,
      packetgs2c_forest_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_forest_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_forest_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_forest_game_history_result));
  gs_msg_fourcolorball_history_descriptor_ = file->message_type(49);
  static const int gs_msg_fourcolorball_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fourcolorball_history, history_val_),
  };
  gs_msg_fourcolorball_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_fourcolorball_history_descriptor_,
      gs_msg_fourcolorball_history::default_instance_,
      gs_msg_fourcolorball_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fourcolorball_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fourcolorball_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_fourcolorball_history));
  gs_msg_fourcolorball_room_info_descriptor_ = file->message_type(50);
  static const int gs_msg_fourcolorball_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fourcolorball_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fourcolorball_room_info, card_road_info_),
  };
  gs_msg_fourcolorball_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_fourcolorball_room_info_descriptor_,
      gs_msg_fourcolorball_room_info::default_instance_,
      gs_msg_fourcolorball_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fourcolorball_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_fourcolorball_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_fourcolorball_room_info));
  packetgs2c_fourcolorball_game_history_result_descriptor_ = file->message_type(51);
  static const int packetgs2c_fourcolorball_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fourcolorball_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fourcolorball_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fourcolorball_game_history_result, room_history_),
  };
  packetgs2c_fourcolorball_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_fourcolorball_game_history_result_descriptor_,
      packetgs2c_fourcolorball_game_history_result::default_instance_,
      packetgs2c_fourcolorball_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fourcolorball_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_fourcolorball_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_fourcolorball_game_history_result));
  gs_msg_happySupremacy_history_descriptor_ = file->message_type(52);
  static const int gs_msg_happySupremacy_history_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_history, is_forward_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_history, is_reverse_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_history, is_opposite_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_history, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_history, cards_type_),
  };
  gs_msg_happySupremacy_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_happySupremacy_history_descriptor_,
      gs_msg_happySupremacy_history::default_instance_,
      gs_msg_happySupremacy_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_happySupremacy_history));
  gs_msg_happySupremacy_room_info_descriptor_ = file->message_type(53);
  static const int gs_msg_happySupremacy_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_room_info, card_road_info_),
  };
  gs_msg_happySupremacy_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_happySupremacy_room_info_descriptor_,
      gs_msg_happySupremacy_room_info::default_instance_,
      gs_msg_happySupremacy_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_happySupremacy_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_happySupremacy_room_info));
  packetgs2c_happySupremacy_game_history_result_descriptor_ = file->message_type(54);
  static const int packetgs2c_happySupremacy_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_happySupremacy_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_happySupremacy_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_happySupremacy_game_history_result, room_history_),
  };
  packetgs2c_happySupremacy_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_happySupremacy_game_history_result_descriptor_,
      packetgs2c_happySupremacy_game_history_result::default_instance_,
      packetgs2c_happySupremacy_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_happySupremacy_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_happySupremacy_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_happySupremacy_game_history_result));
  gs_msg_ttz_history_descriptor_ = file->message_type(55);
  static const int gs_msg_ttz_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ttz_history, cardid_),
  };
  gs_msg_ttz_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_ttz_history_descriptor_,
      gs_msg_ttz_history::default_instance_,
      gs_msg_ttz_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ttz_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ttz_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_ttz_history));
  gs_msg_ttz_room_info_descriptor_ = file->message_type(56);
  static const int gs_msg_ttz_room_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ttz_room_info, base_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ttz_room_info, card_road_info_),
  };
  gs_msg_ttz_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_msg_ttz_room_info_descriptor_,
      gs_msg_ttz_room_info::default_instance_,
      gs_msg_ttz_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ttz_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_msg_ttz_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_msg_ttz_room_info));
  packetgs2c_ttz_game_history_result_descriptor_ = file->message_type(57);
  static const int packetgs2c_ttz_game_history_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ttz_game_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ttz_game_history_result, all_data_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ttz_game_history_result, room_history_),
  };
  packetgs2c_ttz_game_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetgs2c_ttz_game_history_result_descriptor_,
      packetgs2c_ttz_game_history_result::default_instance_,
      packetgs2c_ttz_game_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ttz_game_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetgs2c_ttz_game_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetgs2c_ttz_game_history_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2gstate_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2gs_player_connect_descriptor_, &packetc2gs_player_connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_player_connect_result_descriptor_, &packetgs2c_player_connect_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2gs_player_disconnect_descriptor_, &packetc2gs_player_disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_player_disconnect_result_descriptor_, &packetgs2c_player_disconnect_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2gs_game_history_descriptor_, &packetc2gs_game_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_base_room_info_descriptor_, &gs_base_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_cows_history_descriptor_, &gs_msg_cows_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_cows_room_history_descriptor_, &gs_msg_cows_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_cows_game_history_result_descriptor_, &packetgs2c_cows_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_shcd_history_descriptor_, &gs_msg_shcd_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_shcd_room_info_descriptor_, &gs_msg_shcd_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_shcd_game_history_result_descriptor_, &packetgs2c_shcd_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_baccarat_history_descriptor_, &gs_msg_baccarat_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_baccarat_room_info_descriptor_, &gs_msg_baccarat_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_baccarat_game_history_result_descriptor_, &packetgs2c_baccarat_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_goldshark_history_descriptor_, &gs_msg_goldshark_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_goldshark_room_info_descriptor_, &gs_msg_goldshark_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_goldshark_game_history_result_descriptor_, &packetgs2c_goldshark_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_lhd_history_descriptor_, &gs_msg_lhd_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_lhd_room_info_descriptor_, &gs_msg_lhd_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_lhd_game_history_result_descriptor_, &packetgs2c_lhd_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_benzbmw_history_descriptor_, &gs_msg_benzbmw_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_benzbmw_room_info_descriptor_, &gs_msg_benzbmw_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_benzbmw_game_history_result_descriptor_, &packetgs2c_benzbmw_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_multiredblack_history_descriptor_, &gs_msg_multiredblack_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_multiredblack_room_info_descriptor_, &gs_msg_multiredblack_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_multiredblack_game_history_result_descriptor_, &packetgs2c_multiredblack_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_ebg_history_descriptor_, &gs_msg_ebg_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_ebg_room_info_descriptor_, &gs_msg_ebg_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_ebg_game_history_result_descriptor_, &packetgs2c_ebg_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_dice_history_descriptor_, &gs_msg_dice_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_dice_room_info_descriptor_, &gs_msg_dice_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_dice_game_history_result_descriptor_, &packetgs2c_dice_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_qznn_room_info_descriptor_, &gs_msg_qznn_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_qznn_game_history_result_descriptor_, &packetgs2c_qznn_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_tbnn_room_info_descriptor_, &gs_msg_tbnn_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_tbnn_game_history_result_descriptor_, &packetgs2c_tbnn_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_carsmagnate_history_descriptor_, &gs_msg_carsmagnate_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_carsmagnate_room_info_descriptor_, &gs_msg_carsmagnate_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_carsmagnate_game_history_result_descriptor_, &packetgs2c_carsmagnate_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_multitexas_history_descriptor_, &gs_msg_multitexas_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_multitexas_room_info_descriptor_, &gs_msg_multitexas_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_multitexas_game_history_result_descriptor_, &packetgs2c_multitexas_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_fruits_history_descriptor_, &gs_msg_fruits_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_fruits_room_info_descriptor_, &gs_msg_fruits_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_fruits_game_history_result_descriptor_, &packetgs2c_fruits_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_forest_history_descriptor_, &gs_msg_forest_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_forest_room_info_descriptor_, &gs_msg_forest_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_forest_game_history_result_descriptor_, &packetgs2c_forest_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_fourcolorball_history_descriptor_, &gs_msg_fourcolorball_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_fourcolorball_room_info_descriptor_, &gs_msg_fourcolorball_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_fourcolorball_game_history_result_descriptor_, &packetgs2c_fourcolorball_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_happySupremacy_history_descriptor_, &gs_msg_happySupremacy_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_happySupremacy_room_info_descriptor_, &gs_msg_happySupremacy_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_happySupremacy_game_history_result_descriptor_, &packetgs2c_happySupremacy_game_history_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_ttz_history_descriptor_, &gs_msg_ttz_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_msg_ttz_room_info_descriptor_, &gs_msg_ttz_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetgs2c_ttz_game_history_result_descriptor_, &packetgs2c_ttz_game_history_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto() {
  delete packetc2gs_player_connect::default_instance_;
  delete packetc2gs_player_connect_reflection_;
  delete packetgs2c_player_connect_result::default_instance_;
  delete packetgs2c_player_connect_result_reflection_;
  delete packetc2gs_player_disconnect::default_instance_;
  delete packetc2gs_player_disconnect_reflection_;
  delete packetgs2c_player_disconnect_result::default_instance_;
  delete packetgs2c_player_disconnect_result_reflection_;
  delete packetc2gs_game_history::default_instance_;
  delete packetc2gs_game_history_reflection_;
  delete gs_base_room_info::default_instance_;
  delete gs_base_room_info_reflection_;
  delete gs_msg_cows_history::default_instance_;
  delete gs_msg_cows_history_reflection_;
  delete gs_msg_cows_room_history::default_instance_;
  delete gs_msg_cows_room_history_reflection_;
  delete packetgs2c_cows_game_history_result::default_instance_;
  delete packetgs2c_cows_game_history_result_reflection_;
  delete gs_msg_shcd_history::default_instance_;
  delete gs_msg_shcd_history_reflection_;
  delete gs_msg_shcd_room_info::default_instance_;
  delete gs_msg_shcd_room_info_reflection_;
  delete packetgs2c_shcd_game_history_result::default_instance_;
  delete packetgs2c_shcd_game_history_result_reflection_;
  delete gs_msg_baccarat_history::default_instance_;
  delete gs_msg_baccarat_history_reflection_;
  delete gs_msg_baccarat_room_info::default_instance_;
  delete gs_msg_baccarat_room_info_reflection_;
  delete packetgs2c_baccarat_game_history_result::default_instance_;
  delete packetgs2c_baccarat_game_history_result_reflection_;
  delete gs_msg_goldshark_history::default_instance_;
  delete gs_msg_goldshark_history_reflection_;
  delete gs_msg_goldshark_room_info::default_instance_;
  delete gs_msg_goldshark_room_info_reflection_;
  delete packetgs2c_goldshark_game_history_result::default_instance_;
  delete packetgs2c_goldshark_game_history_result_reflection_;
  delete gs_msg_lhd_history::default_instance_;
  delete gs_msg_lhd_history_reflection_;
  delete gs_msg_lhd_room_info::default_instance_;
  delete gs_msg_lhd_room_info_reflection_;
  delete packetgs2c_lhd_game_history_result::default_instance_;
  delete packetgs2c_lhd_game_history_result_reflection_;
  delete gs_msg_benzbmw_history::default_instance_;
  delete gs_msg_benzbmw_history_reflection_;
  delete gs_msg_benzbmw_room_info::default_instance_;
  delete gs_msg_benzbmw_room_info_reflection_;
  delete packetgs2c_benzbmw_game_history_result::default_instance_;
  delete packetgs2c_benzbmw_game_history_result_reflection_;
  delete gs_msg_multiredblack_history::default_instance_;
  delete gs_msg_multiredblack_history_reflection_;
  delete gs_msg_multiredblack_room_info::default_instance_;
  delete gs_msg_multiredblack_room_info_reflection_;
  delete packetgs2c_multiredblack_game_history_result::default_instance_;
  delete packetgs2c_multiredblack_game_history_result_reflection_;
  delete gs_msg_ebg_history::default_instance_;
  delete gs_msg_ebg_history_reflection_;
  delete gs_msg_ebg_room_info::default_instance_;
  delete gs_msg_ebg_room_info_reflection_;
  delete packetgs2c_ebg_game_history_result::default_instance_;
  delete packetgs2c_ebg_game_history_result_reflection_;
  delete gs_msg_dice_history::default_instance_;
  delete gs_msg_dice_history_reflection_;
  delete gs_msg_dice_room_info::default_instance_;
  delete gs_msg_dice_room_info_reflection_;
  delete packetgs2c_dice_game_history_result::default_instance_;
  delete packetgs2c_dice_game_history_result_reflection_;
  delete gs_msg_qznn_room_info::default_instance_;
  delete gs_msg_qznn_room_info_reflection_;
  delete packetgs2c_qznn_game_history_result::default_instance_;
  delete packetgs2c_qznn_game_history_result_reflection_;
  delete gs_msg_tbnn_room_info::default_instance_;
  delete gs_msg_tbnn_room_info_reflection_;
  delete packetgs2c_tbnn_game_history_result::default_instance_;
  delete packetgs2c_tbnn_game_history_result_reflection_;
  delete gs_msg_carsmagnate_history::default_instance_;
  delete gs_msg_carsmagnate_history_reflection_;
  delete gs_msg_carsmagnate_room_info::default_instance_;
  delete gs_msg_carsmagnate_room_info_reflection_;
  delete packetgs2c_carsmagnate_game_history_result::default_instance_;
  delete packetgs2c_carsmagnate_game_history_result_reflection_;
  delete gs_msg_multitexas_history::default_instance_;
  delete gs_msg_multitexas_history_reflection_;
  delete gs_msg_multitexas_room_info::default_instance_;
  delete gs_msg_multitexas_room_info_reflection_;
  delete packetgs2c_multitexas_game_history_result::default_instance_;
  delete packetgs2c_multitexas_game_history_result_reflection_;
  delete gs_msg_fruits_history::default_instance_;
  delete gs_msg_fruits_history_reflection_;
  delete gs_msg_fruits_room_info::default_instance_;
  delete gs_msg_fruits_room_info_reflection_;
  delete packetgs2c_fruits_game_history_result::default_instance_;
  delete packetgs2c_fruits_game_history_result_reflection_;
  delete gs_msg_forest_history::default_instance_;
  delete gs_msg_forest_history_reflection_;
  delete gs_msg_forest_room_info::default_instance_;
  delete gs_msg_forest_room_info_reflection_;
  delete packetgs2c_forest_game_history_result::default_instance_;
  delete packetgs2c_forest_game_history_result_reflection_;
  delete gs_msg_fourcolorball_history::default_instance_;
  delete gs_msg_fourcolorball_history_reflection_;
  delete gs_msg_fourcolorball_room_info::default_instance_;
  delete gs_msg_fourcolorball_room_info_reflection_;
  delete packetgs2c_fourcolorball_game_history_result::default_instance_;
  delete packetgs2c_fourcolorball_game_history_result_reflection_;
  delete gs_msg_happySupremacy_history::default_instance_;
  delete gs_msg_happySupremacy_history_reflection_;
  delete gs_msg_happySupremacy_room_info::default_instance_;
  delete gs_msg_happySupremacy_room_info_reflection_;
  delete packetgs2c_happySupremacy_game_history_result::default_instance_;
  delete packetgs2c_happySupremacy_game_history_result_reflection_;
  delete gs_msg_ttz_history::default_instance_;
  delete gs_msg_ttz_history_reflection_;
  delete gs_msg_ttz_room_info::default_instance_;
  delete gs_msg_ttz_room_info_reflection_;
  delete packetgs2c_ttz_game_history_result::default_instance_;
  delete packetgs2c_ttz_game_history_result_reflection_;
}

void protobuf_AddDesc_client2gstate_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2gstate_protocols::protobuf_AddDesc_client2gstate_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034client2gstate_protocol.proto\022\027client2g"
    "state_protocols\032\034client2gstate_msg_type."
    "proto\032\022msg_type_def.proto\032\022msg_info_def."
    "proto\"\227\001\n\031packetc2gs_player_connect\022X\n\tp"
    "acket_id\030\001 \001(\0162*.client2gstate_protocols"
    ".e_server_msg_type:\031e_mst_c2gs_player_co"
    "nnect\022\020\n\010playerid\030\002 \001(\005\022\016\n\006gameid\030\003 \001(\005\""
    "\301\001\n packetgs2c_player_connect_result\022_\n\t"
    "packet_id\030\001 \001(\0162*.client2gstate_protocol"
    "s.e_server_msg_type: e_mst_gs2c_player_c"
    "onnect_result\022<\n\006result\030\002 \001(\0162\036.msg_type"
    "_def.e_msg_result_def:\014e_rmt_unknow\"\215\001\n\034"
    "packetc2gs_player_disconnect\022[\n\tpacket_i"
    "d\030\001 \001(\0162*.client2gstate_protocols.e_serv"
    "er_msg_type:\034e_mst_c2gs_player_disconnec"
    "t\022\020\n\010playerid\030\002 \001(\005\"\307\001\n#packetgs2c_playe"
    "r_disconnect_result\022b\n\tpacket_id\030\001 \001(\0162*"
    ".client2gstate_protocols.e_server_msg_ty"
    "pe:#e_mst_gs2c_player_disconnect_result\022"
    "<\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_res"
    "ult_def:\014e_rmt_unknow\"\201\001\n\027packetc2gs_gam"
    "e_history\022V\n\tpacket_id\030\001 \001(\0162*.client2gs"
    "tate_protocols.e_server_msg_type:\027e_mst_"
    "c2gs_game_history\022\016\n\006gameid\030\002 \001(\005\"\204\001\n\021gs"
    "_base_room_info\022\017\n\007game_id\030\001 \001(\005\022\017\n\007room"
    "_id\030\002 \001(\005\022\022\n\ngame_state\030\003 \001(\005\022\022\n\nstate_t"
    "ime\030\004 \001(\005\022\022\n\ntime_stamp\030\005 \001(\003\022\021\n\tcalc_ti"
    "me\030\006 \001(\005\"%\n\023gs_msg_cows_history\022\016\n\006is_wi"
    "n\030\001 \003(\010\"\340\001\n\030gs_msg_cows_room_history\022B\n\016"
    "base_room_info\030\001 \001(\0132*.client2gstate_pro"
    "tocols.gs_base_room_info\022\023\n\013total_count\030"
    "\002 \001(\005\022\022\n\nwin_counts\030\003 \003(\005\022\023\n\013lose_counts"
    "\030\004 \003(\005\022B\n\014history_list\030\005 \003(\0132,.client2gs"
    "tate_protocols.gs_msg_cows_history\"\344\001\n#p"
    "acketgs2c_cows_game_history_result\022]\n\tpa"
    "cket_id\030\001 \001(\0162*.client2gstate_protocols."
    "e_server_msg_type:\036e_mst_gs2c_cows_histo"
    "ry_result\022\025\n\rall_data_flag\030\002 \001(\005\022G\n\014room"
    "_history\030\003 \003(\01321.client2gstate_protocols"
    ".gs_msg_cows_room_history\"O\n\023gs_msg_shcd"
    "_history\022\021\n\tcard_type\030\001 \001(\005\022\022\n\ncard_valu"
    "e\030\002 \001(\005\022\021\n\topen_type\030\003 \001(\005\"\234\001\n\025gs_msg_sh"
    "cd_room_info\022B\n\016base_room_info\030\001 \001(\0132*.c"
    "lient2gstate_protocols.gs_base_room_info"
    "\022\?\n\tshcd_info\030\002 \003(\0132,.client2gstate_prot"
    "ocols.gs_msg_shcd_history\"\341\001\n#packetgs2c"
    "_shcd_game_history_result\022]\n\tpacket_id\030\001"
    " \001(\0162*.client2gstate_protocols.e_server_"
    "msg_type:\036e_mst_gs2c_shcd_history_result"
    "\022\025\n\rall_data_flag\030\002 \001(\005\022D\n\014room_history\030"
    "\003 \003(\0132..client2gstate_protocols.gs_msg_s"
    "hcd_room_info\"\232\001\n\027gs_msg_baccarat_histor"
    "y\022\016\n\006is_tie\030\001 \001(\010\022\025\n\ris_player_win\030\002 \001(\010"
    "\022\026\n\016is_player_pair\030\003 \001(\010\022\026\n\016is_banker_pa"
    "ir\030\004 \001(\010\022\025\n\ris_banker_win\030\005 \001(\010\022\021\n\twin_p"
    "oint\030\006 \001(\005\"\250\001\n\031gs_msg_baccarat_room_info"
    "\022B\n\016base_room_info\030\001 \001(\0132*.client2gstate"
    "_protocols.gs_base_room_info\022G\n\rbaccarat"
    "_info\030\002 \003(\01320.client2gstate_protocols.gs"
    "_msg_baccarat_history\"\355\001\n\'packetgs2c_bac"
    "carat_game_history_result\022a\n\tpacket_id\030\001"
    " \001(\0162*.client2gstate_protocols.e_server_"
    "msg_type:\"e_mst_gs2c_baccarat_history_re"
    "sult\022\025\n\rall_data_flag\030\002 \001(\005\022H\n\014room_hist"
    "ory\030\003 \003(\01322.client2gstate_protocols.gs_m"
    "sg_baccarat_room_info\"*\n\030gs_msg_goldshar"
    "k_history\022\016\n\006result\030\001 \001(\005\"\253\001\n\032gs_msg_gol"
    "dshark_room_info\022B\n\016base_room_info\030\001 \001(\013"
    "2*.client2gstate_protocols.gs_base_room_"
    "info\022I\n\016goldshark_info\030\002 \003(\01321.client2gs"
    "tate_protocols.gs_msg_goldshark_history\""
    "\360\001\n(packetgs2c_goldshark_game_history_re"
    "sult\022b\n\tpacket_id\030\001 \001(\0162*.client2gstate_"
    "protocols.e_server_msg_type:#e_mst_gs2c_"
    "goldshark_history_result\022\025\n\rall_data_fla"
    "g\030\002 \001(\005\022I\n\014room_history\030\003 \003(\01323.client2g"
    "state_protocols.gs_msg_goldshark_room_in"
    "fo\"(\n\022gs_msg_lhd_history\022\022\n\ncards_info\030\001"
    " \001(\005\"\300\001\n\024gs_msg_lhd_room_info\022B\n\016base_ro"
    "om_info\030\001 \001(\0132*.client2gstate_protocols."
    "gs_base_room_info\022\021\n\ttotal_win\030\002 \003(\005\022\022\n\n"
    "total_lose\030\003 \003(\005\022=\n\010lhd_info\030\004 \003(\0132+.cli"
    "ent2gstate_protocols.gs_msg_lhd_history\""
    "\336\001\n\"packetgs2c_lhd_game_history_result\022\\"
    "\n\tpacket_id\030\001 \001(\0162*.client2gstate_protoc"
    "ols.e_server_msg_type:\035e_mst_gs2c_lhd_hi"
    "story_result\022\025\n\rall_data_flag\030\002 \001(\005\022C\n\014r"
    "oom_history\030\003 \003(\0132-.client2gstate_protoc"
    "ols.gs_msg_lhd_room_info\"(\n\026gs_msg_benzb"
    "mw_history\022\016\n\006result\030\001 \001(\005\"\247\001\n\030gs_msg_be"
    "nzbmw_room_info\022B\n\016base_room_info\030\001 \001(\0132"
    "*.client2gstate_protocols.gs_base_room_i"
    "nfo\022G\n\016card_road_info\030\002 \003(\0132/.client2gst"
    "ate_protocols.gs_msg_benzbmw_history\"\352\001\n"
    "&packetgs2c_benzbmw_game_history_result\022"
    "`\n\tpacket_id\030\001 \001(\0162*.client2gstate_proto"
    "cols.e_server_msg_type:!e_mst_gs2c_benzb"
    "mw_history_result\022\025\n\rall_data_flag\030\002 \001(\005"
    "\022G\n\014room_history\030\003 \003(\01321.client2gstate_p"
    "rotocols.gs_msg_benzbmw_room_info\".\n\034gs_"
    "msg_multiredblack_history\022\016\n\006result\030\001 \001("
    "\005\"\263\001\n\036gs_msg_multiredblack_room_info\022B\n\016"
    "base_room_info\030\001 \001(\0132*.client2gstate_pro"
    "tocols.gs_base_room_info\022M\n\016card_road_in"
    "fo\030\002 \003(\01325.client2gstate_protocols.gs_ms"
    "g_multiredblack_history\"\374\001\n,packetgs2c_m"
    "ultiredblack_game_history_result\022f\n\tpack"
    "et_id\030\001 \001(\0162*.client2gstate_protocols.e_"
    "server_msg_type:\'e_mst_gs2c_multiredblac"
    "k_history_result\022\025\n\rall_data_flag\030\002 \001(\005\022"
    "M\n\014room_history\030\003 \003(\01327.client2gstate_pr"
    "otocols.gs_msg_multiredblack_room_info\"6"
    "\n\022gs_msg_ebg_history\022\016\n\006is_win\030\001 \003(\010\022\020\n\010"
    "cards_id\030\002 \003(\005\"\204\002\n\024gs_msg_ebg_room_info\022"
    "B\n\016base_room_info\030\001 \001(\0132*.client2gstate_"
    "protocols.gs_base_room_info\022\023\n\013total_cou"
    "nt\030\002 \001(\005\022\022\n\nwin_counts\030\003 \003(\005\022\023\n\013lose_cou"
    "nts\030\004 \003(\005\022C\n\016card_road_info\030\005 \003(\0132+.clie"
    "nt2gstate_protocols.gs_msg_ebg_history\022\022"
    "\n\nbanker_cnt\030\006 \001(\005\022\021\n\tout_cards\030\007 \003(\005\"\336\001"
    "\n\"packetgs2c_ebg_game_history_result\022\\\n\t"
    "packet_id\030\001 \001(\0162*.client2gstate_protocol"
    "s.e_server_msg_type:\035e_mst_gs2c_ebg_hist"
    "ory_result\022\025\n\rall_data_flag\030\002 \001(\005\022C\n\014roo"
    "m_history\030\003 \003(\0132-.client2gstate_protocol"
    "s.gs_msg_ebg_room_info\"B\n\023gs_msg_dice_hi"
    "story\022\r\n\005dice1\030\001 \001(\005\022\r\n\005dice2\030\002 \001(\005\022\r\n\005d"
    "ice3\030\003 \001(\005\"\241\001\n\025gs_msg_dice_room_info\022B\n\016"
    "base_room_info\030\001 \001(\0132*.client2gstate_pro"
    "tocols.gs_base_room_info\022D\n\016card_road_in"
    "fo\030\002 \003(\0132,.client2gstate_protocols.gs_ms"
    "g_dice_history\"\341\001\n#packetgs2c_dice_game_"
    "history_result\022]\n\tpacket_id\030\001 \001(\0162*.clie"
    "nt2gstate_protocols.e_server_msg_type:\036e"
    "_mst_gs2c_dice_history_result\022\025\n\rall_dat"
    "a_flag\030\002 \001(\005\022D\n\014room_history\030\003 \003(\0132..cli"
    "ent2gstate_protocols.gs_msg_dice_room_in"
    "fo\"p\n\025gs_msg_qznn_room_info\022B\n\016base_room"
    "_info\030\001 \001(\0132*.client2gstate_protocols.gs"
    "_base_room_info\022\023\n\013total_award\030\002 \001(\003\"\341\001\n"
    "#packetgs2c_qznn_game_history_result\022]\n\t"
    "packet_id\030\001 \001(\0162*.client2gstate_protocol"
    "s.e_server_msg_type:\036e_mst_gs2c_qznn_his"
    "tory_result\022\025\n\rall_data_flag\030\002 \001(\005\022D\n\014ro"
    "om_history\030\003 \003(\0132..client2gstate_protoco"
    "ls.gs_msg_qznn_room_info\"p\n\025gs_msg_tbnn_"
    "room_info\022B\n\016base_room_info\030\001 \001(\0132*.clie"
    "nt2gstate_protocols.gs_base_room_info\022\023\n"
    "\013total_award\030\002 \001(\003\"\341\001\n#packetgs2c_tbnn_g"
    "ame_history_result\022]\n\tpacket_id\030\001 \001(\0162*."
    "client2gstate_protocols.e_server_msg_typ"
    "e:\036e_mst_gs2c_tbnn_history_result\022\025\n\rall"
    "_data_flag\030\002 \001(\005\022D\n\014room_history\030\003 \003(\0132."
    ".client2gstate_protocols.gs_msg_tbnn_roo"
    "m_info\"1\n\032gs_msg_carsmagnate_history\022\023\n\013"
    "history_val\030\001 \001(\005\"\257\001\n\034gs_msg_carsmagnate"
    "_room_info\022B\n\016base_room_info\030\001 \001(\0132*.cli"
    "ent2gstate_protocols.gs_base_room_info\022K"
    "\n\016card_road_info\030\002 \003(\01323.client2gstate_p"
    "rotocols.gs_msg_carsmagnate_history\"\366\001\n*"
    "packetgs2c_carsmagnate_game_history_resu"
    "lt\022d\n\tpacket_id\030\001 \001(\0162*.client2gstate_pr"
    "otocols.e_server_msg_type:%e_mst_gs2c_ca"
    "rsmagnate_history_result\022\025\n\rall_data_fla"
    "g\030\002 \001(\005\022K\n\014room_history\030\003 \003(\01325.client2g"
    "state_protocols.gs_msg_carsmagnate_room_"
    "info\"(\n\031gs_msg_multitexas_history\022\013\n\003win"
    "\030\001 \003(\005\"\255\001\n\033gs_msg_multitexas_room_info\022B"
    "\n\016base_room_info\030\001 \001(\0132*.client2gstate_p"
    "rotocols.gs_base_room_info\022J\n\016card_road_"
    "info\030\002 \003(\01322.client2gstate_protocols.gs_"
    "msg_multitexas_history\"\363\001\n)packetgs2c_mu"
    "ltitexas_game_history_result\022c\n\tpacket_i"
    "d\030\001 \001(\0162*.client2gstate_protocols.e_serv"
    "er_msg_type:$e_mst_gs2c_multitexas_histo"
    "ry_result\022\025\n\rall_data_flag\030\002 \001(\005\022J\n\014room"
    "_history\030\003 \003(\01324.client2gstate_protocols"
    ".gs_msg_multitexas_room_info\",\n\025gs_msg_f"
    "ruits_history\022\023\n\013history_val\030\001 \001(\005\"\245\001\n\027g"
    "s_msg_fruits_room_info\022B\n\016base_room_info"
    "\030\001 \001(\0132*.client2gstate_protocols.gs_base"
    "_room_info\022F\n\016card_road_info\030\002 \003(\0132..cli"
    "ent2gstate_protocols.gs_msg_fruits_histo"
    "ry\"\347\001\n%packetgs2c_fruits_game_history_re"
    "sult\022_\n\tpacket_id\030\001 \001(\0162*.client2gstate_"
    "protocols.e_server_msg_type: e_mst_gs2c_"
    "fruits_history_result\022\025\n\rall_data_flag\030\002"
    " \001(\005\022F\n\014room_history\030\003 \003(\01320.client2gsta"
    "te_protocols.gs_msg_fruits_room_info\",\n\025"
    "gs_msg_forest_history\022\023\n\013history_val\030\001 \001"
    "(\005\"\245\001\n\027gs_msg_forest_room_info\022B\n\016base_r"
    "oom_info\030\001 \001(\0132*.client2gstate_protocols"
    ".gs_base_room_info\022F\n\016card_road_info\030\002 \003"
    "(\0132..client2gstate_protocols.gs_msg_fore"
    "st_history\"\347\001\n%packetgs2c_forest_game_hi"
    "story_result\022_\n\tpacket_id\030\001 \001(\0162*.client"
    "2gstate_protocols.e_server_msg_type: e_m"
    "st_gs2c_forest_history_result\022\025\n\rall_dat"
    "a_flag\030\002 \001(\005\022F\n\014room_history\030\003 \003(\01320.cli"
    "ent2gstate_protocols.gs_msg_forest_room_"
    "info\"3\n\034gs_msg_fourcolorball_history\022\023\n\013"
    "history_val\030\001 \001(\005\"\263\001\n\036gs_msg_fourcolorba"
    "ll_room_info\022B\n\016base_room_info\030\001 \001(\0132*.c"
    "lient2gstate_protocols.gs_base_room_info"
    "\022M\n\016card_road_info\030\002 \003(\01325.client2gstate"
    "_protocols.gs_msg_fourcolorball_history\""
    "\374\001\n,packetgs2c_fourcolorball_game_histor"
    "y_result\022f\n\tpacket_id\030\001 \001(\0162*.client2gst"
    "ate_protocols.e_server_msg_type:\'e_mst_g"
    "s2c_fourcolorball_history_result\022\025\n\rall_"
    "data_flag\030\002 \001(\005\022M\n\014room_history\030\003 \003(\01327."
    "client2gstate_protocols.gs_msg_fourcolor"
    "ball_room_info\"\213\001\n\035gs_msg_happySupremacy"
    "_history\022\026\n\016is_forward_win\030\001 \001(\010\022\026\n\016is_r"
    "everse_win\030\002 \001(\010\022\027\n\017is_opposite_win\030\003 \001("
    "\010\022\r\n\005cards\030\004 \003(\005\022\022\n\ncards_type\030\005 \003(\005\"\265\001\n"
    "\037gs_msg_happySupremacy_room_info\022B\n\016base"
    "_room_info\030\001 \001(\0132*.client2gstate_protoco"
    "ls.gs_base_room_info\022N\n\016card_road_info\030\002"
    " \003(\01326.client2gstate_protocols.gs_msg_ha"
    "ppySupremacy_history\"\377\001\n-packetgs2c_happ"
    "ySupremacy_game_history_result\022g\n\tpacket"
    "_id\030\001 \001(\0162*.client2gstate_protocols.e_se"
    "rver_msg_type:(e_mst_gs2c_happySupremacy"
    "_history_result\022\025\n\rall_data_flag\030\002 \001(\005\022N"
    "\n\014room_history\030\003 \003(\01328.client2gstate_pro"
    "tocols.gs_msg_happySupremacy_room_info\"$"
    "\n\022gs_msg_ttz_history\022\016\n\006cardid\030\001 \003(\005\"\237\001\n"
    "\024gs_msg_ttz_room_info\022B\n\016base_room_info\030"
    "\001 \001(\0132*.client2gstate_protocols.gs_base_"
    "room_info\022C\n\016card_road_info\030\002 \003(\0132+.clie"
    "nt2gstate_protocols.gs_msg_ttz_history\"\336"
    "\001\n\"packetgs2c_ttz_game_history_result\022\\\n"
    "\tpacket_id\030\001 \001(\0162*.client2gstate_protoco"
    "ls.e_server_msg_type:\035e_mst_gs2c_ttz_his"
    "tory_result\022\025\n\rall_data_flag\030\002 \001(\005\022C\n\014ro"
    "om_history\030\003 \003(\0132-.client2gstate_protoco"
    "ls.gs_msg_ttz_room_info", 9503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2gstate_protocol.proto", &protobuf_RegisterTypes);
  packetc2gs_player_connect::default_instance_ = new packetc2gs_player_connect();
  packetgs2c_player_connect_result::default_instance_ = new packetgs2c_player_connect_result();
  packetc2gs_player_disconnect::default_instance_ = new packetc2gs_player_disconnect();
  packetgs2c_player_disconnect_result::default_instance_ = new packetgs2c_player_disconnect_result();
  packetc2gs_game_history::default_instance_ = new packetc2gs_game_history();
  gs_base_room_info::default_instance_ = new gs_base_room_info();
  gs_msg_cows_history::default_instance_ = new gs_msg_cows_history();
  gs_msg_cows_room_history::default_instance_ = new gs_msg_cows_room_history();
  packetgs2c_cows_game_history_result::default_instance_ = new packetgs2c_cows_game_history_result();
  gs_msg_shcd_history::default_instance_ = new gs_msg_shcd_history();
  gs_msg_shcd_room_info::default_instance_ = new gs_msg_shcd_room_info();
  packetgs2c_shcd_game_history_result::default_instance_ = new packetgs2c_shcd_game_history_result();
  gs_msg_baccarat_history::default_instance_ = new gs_msg_baccarat_history();
  gs_msg_baccarat_room_info::default_instance_ = new gs_msg_baccarat_room_info();
  packetgs2c_baccarat_game_history_result::default_instance_ = new packetgs2c_baccarat_game_history_result();
  gs_msg_goldshark_history::default_instance_ = new gs_msg_goldshark_history();
  gs_msg_goldshark_room_info::default_instance_ = new gs_msg_goldshark_room_info();
  packetgs2c_goldshark_game_history_result::default_instance_ = new packetgs2c_goldshark_game_history_result();
  gs_msg_lhd_history::default_instance_ = new gs_msg_lhd_history();
  gs_msg_lhd_room_info::default_instance_ = new gs_msg_lhd_room_info();
  packetgs2c_lhd_game_history_result::default_instance_ = new packetgs2c_lhd_game_history_result();
  gs_msg_benzbmw_history::default_instance_ = new gs_msg_benzbmw_history();
  gs_msg_benzbmw_room_info::default_instance_ = new gs_msg_benzbmw_room_info();
  packetgs2c_benzbmw_game_history_result::default_instance_ = new packetgs2c_benzbmw_game_history_result();
  gs_msg_multiredblack_history::default_instance_ = new gs_msg_multiredblack_history();
  gs_msg_multiredblack_room_info::default_instance_ = new gs_msg_multiredblack_room_info();
  packetgs2c_multiredblack_game_history_result::default_instance_ = new packetgs2c_multiredblack_game_history_result();
  gs_msg_ebg_history::default_instance_ = new gs_msg_ebg_history();
  gs_msg_ebg_room_info::default_instance_ = new gs_msg_ebg_room_info();
  packetgs2c_ebg_game_history_result::default_instance_ = new packetgs2c_ebg_game_history_result();
  gs_msg_dice_history::default_instance_ = new gs_msg_dice_history();
  gs_msg_dice_room_info::default_instance_ = new gs_msg_dice_room_info();
  packetgs2c_dice_game_history_result::default_instance_ = new packetgs2c_dice_game_history_result();
  gs_msg_qznn_room_info::default_instance_ = new gs_msg_qznn_room_info();
  packetgs2c_qznn_game_history_result::default_instance_ = new packetgs2c_qznn_game_history_result();
  gs_msg_tbnn_room_info::default_instance_ = new gs_msg_tbnn_room_info();
  packetgs2c_tbnn_game_history_result::default_instance_ = new packetgs2c_tbnn_game_history_result();
  gs_msg_carsmagnate_history::default_instance_ = new gs_msg_carsmagnate_history();
  gs_msg_carsmagnate_room_info::default_instance_ = new gs_msg_carsmagnate_room_info();
  packetgs2c_carsmagnate_game_history_result::default_instance_ = new packetgs2c_carsmagnate_game_history_result();
  gs_msg_multitexas_history::default_instance_ = new gs_msg_multitexas_history();
  gs_msg_multitexas_room_info::default_instance_ = new gs_msg_multitexas_room_info();
  packetgs2c_multitexas_game_history_result::default_instance_ = new packetgs2c_multitexas_game_history_result();
  gs_msg_fruits_history::default_instance_ = new gs_msg_fruits_history();
  gs_msg_fruits_room_info::default_instance_ = new gs_msg_fruits_room_info();
  packetgs2c_fruits_game_history_result::default_instance_ = new packetgs2c_fruits_game_history_result();
  gs_msg_forest_history::default_instance_ = new gs_msg_forest_history();
  gs_msg_forest_room_info::default_instance_ = new gs_msg_forest_room_info();
  packetgs2c_forest_game_history_result::default_instance_ = new packetgs2c_forest_game_history_result();
  gs_msg_fourcolorball_history::default_instance_ = new gs_msg_fourcolorball_history();
  gs_msg_fourcolorball_room_info::default_instance_ = new gs_msg_fourcolorball_room_info();
  packetgs2c_fourcolorball_game_history_result::default_instance_ = new packetgs2c_fourcolorball_game_history_result();
  gs_msg_happySupremacy_history::default_instance_ = new gs_msg_happySupremacy_history();
  gs_msg_happySupremacy_room_info::default_instance_ = new gs_msg_happySupremacy_room_info();
  packetgs2c_happySupremacy_game_history_result::default_instance_ = new packetgs2c_happySupremacy_game_history_result();
  gs_msg_ttz_history::default_instance_ = new gs_msg_ttz_history();
  gs_msg_ttz_room_info::default_instance_ = new gs_msg_ttz_room_info();
  packetgs2c_ttz_game_history_result::default_instance_ = new packetgs2c_ttz_game_history_result();
  packetc2gs_player_connect::default_instance_->InitAsDefaultInstance();
  packetgs2c_player_connect_result::default_instance_->InitAsDefaultInstance();
  packetc2gs_player_disconnect::default_instance_->InitAsDefaultInstance();
  packetgs2c_player_disconnect_result::default_instance_->InitAsDefaultInstance();
  packetc2gs_game_history::default_instance_->InitAsDefaultInstance();
  gs_base_room_info::default_instance_->InitAsDefaultInstance();
  gs_msg_cows_history::default_instance_->InitAsDefaultInstance();
  gs_msg_cows_room_history::default_instance_->InitAsDefaultInstance();
  packetgs2c_cows_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_shcd_history::default_instance_->InitAsDefaultInstance();
  gs_msg_shcd_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_shcd_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_baccarat_history::default_instance_->InitAsDefaultInstance();
  gs_msg_baccarat_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_baccarat_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_goldshark_history::default_instance_->InitAsDefaultInstance();
  gs_msg_goldshark_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_goldshark_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_lhd_history::default_instance_->InitAsDefaultInstance();
  gs_msg_lhd_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_lhd_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_benzbmw_history::default_instance_->InitAsDefaultInstance();
  gs_msg_benzbmw_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_benzbmw_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_multiredblack_history::default_instance_->InitAsDefaultInstance();
  gs_msg_multiredblack_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_multiredblack_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_ebg_history::default_instance_->InitAsDefaultInstance();
  gs_msg_ebg_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_ebg_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_dice_history::default_instance_->InitAsDefaultInstance();
  gs_msg_dice_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_dice_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_qznn_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_qznn_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_tbnn_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_tbnn_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_carsmagnate_history::default_instance_->InitAsDefaultInstance();
  gs_msg_carsmagnate_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_carsmagnate_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_multitexas_history::default_instance_->InitAsDefaultInstance();
  gs_msg_multitexas_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_multitexas_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_fruits_history::default_instance_->InitAsDefaultInstance();
  gs_msg_fruits_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_fruits_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_forest_history::default_instance_->InitAsDefaultInstance();
  gs_msg_forest_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_forest_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_fourcolorball_history::default_instance_->InitAsDefaultInstance();
  gs_msg_fourcolorball_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_fourcolorball_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_happySupremacy_history::default_instance_->InitAsDefaultInstance();
  gs_msg_happySupremacy_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_happySupremacy_game_history_result::default_instance_->InitAsDefaultInstance();
  gs_msg_ttz_history::default_instance_->InitAsDefaultInstance();
  gs_msg_ttz_room_info::default_instance_->InitAsDefaultInstance();
  packetgs2c_ttz_game_history_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2gstate_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2gstate_5fprotocol_2eproto {
  StaticDescriptorInitializer_client2gstate_5fprotocol_2eproto() {
    protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  }
} static_descriptor_initializer_client2gstate_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2gs_player_connect::kPacketIdFieldNumber;
const int packetc2gs_player_connect::kPlayeridFieldNumber;
const int packetc2gs_player_connect::kGameidFieldNumber;
#endif  // !_MSC_VER

packetc2gs_player_connect::packetc2gs_player_connect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2gs_player_connect::InitAsDefaultInstance() {
}

packetc2gs_player_connect::packetc2gs_player_connect(const packetc2gs_player_connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2gs_player_connect::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 30001;
  playerid_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2gs_player_connect::~packetc2gs_player_connect() {
  SharedDtor();
}

void packetc2gs_player_connect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2gs_player_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2gs_player_connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2gs_player_connect_descriptor_;
}

const packetc2gs_player_connect& packetc2gs_player_connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2gs_player_connect* packetc2gs_player_connect::default_instance_ = NULL;

packetc2gs_player_connect* packetc2gs_player_connect::New() const {
  return new packetc2gs_player_connect;
}

void packetc2gs_player_connect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 30001;
    playerid_ = 0;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2gs_player_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_connect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional int32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameid;
        break;
      }

      // optional int32 gameid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2gs_player_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_connect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  // optional int32 gameid = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2gs_player_connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_connect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  // optional int32 gameid = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2gs_player_connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_connect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional int32 gameid = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2gs_player_connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2gs_player_connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2gs_player_connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2gs_player_connect::MergeFrom(const packetc2gs_player_connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2gs_player_connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2gs_player_connect::CopyFrom(const packetc2gs_player_connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2gs_player_connect::IsInitialized() const {

  return true;
}

void packetc2gs_player_connect::Swap(packetc2gs_player_connect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(playerid_, other->playerid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2gs_player_connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2gs_player_connect_descriptor_;
  metadata.reflection = packetc2gs_player_connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_player_connect_result::kPacketIdFieldNumber;
const int packetgs2c_player_connect_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetgs2c_player_connect_result::packetgs2c_player_connect_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_player_connect_result::InitAsDefaultInstance() {
}

packetgs2c_player_connect_result::packetgs2c_player_connect_result(const packetgs2c_player_connect_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_player_connect_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31001;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_player_connect_result::~packetgs2c_player_connect_result() {
  SharedDtor();
}

void packetgs2c_player_connect_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_player_connect_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_player_connect_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_player_connect_result_descriptor_;
}

const packetgs2c_player_connect_result& packetgs2c_player_connect_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_player_connect_result* packetgs2c_player_connect_result::default_instance_ = NULL;

packetgs2c_player_connect_result* packetgs2c_player_connect_result::New() const {
  return new packetgs2c_player_connect_result;
}

void packetgs2c_player_connect_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31001;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_player_connect_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_connect_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_player_connect_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_connect_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_player_connect_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_connect_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_player_connect_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_connect_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_player_connect_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_player_connect_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_player_connect_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_player_connect_result::MergeFrom(const packetgs2c_player_connect_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_player_connect_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_player_connect_result::CopyFrom(const packetgs2c_player_connect_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_player_connect_result::IsInitialized() const {

  return true;
}

void packetgs2c_player_connect_result::Swap(packetgs2c_player_connect_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_player_connect_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_player_connect_result_descriptor_;
  metadata.reflection = packetgs2c_player_connect_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2gs_player_disconnect::kPacketIdFieldNumber;
const int packetc2gs_player_disconnect::kPlayeridFieldNumber;
#endif  // !_MSC_VER

packetc2gs_player_disconnect::packetc2gs_player_disconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2gs_player_disconnect::InitAsDefaultInstance() {
}

packetc2gs_player_disconnect::packetc2gs_player_disconnect(const packetc2gs_player_disconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2gs_player_disconnect::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 30002;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2gs_player_disconnect::~packetc2gs_player_disconnect() {
  SharedDtor();
}

void packetc2gs_player_disconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2gs_player_disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2gs_player_disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2gs_player_disconnect_descriptor_;
}

const packetc2gs_player_disconnect& packetc2gs_player_disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2gs_player_disconnect* packetc2gs_player_disconnect::default_instance_ = NULL;

packetc2gs_player_disconnect* packetc2gs_player_disconnect::New() const {
  return new packetc2gs_player_disconnect;
}

void packetc2gs_player_disconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 30002;
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2gs_player_disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_disconnect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional int32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2gs_player_disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_disconnect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2gs_player_disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_disconnect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2gs_player_disconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_player_disconnect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2gs_player_disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2gs_player_disconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2gs_player_disconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2gs_player_disconnect::MergeFrom(const packetc2gs_player_disconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2gs_player_disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2gs_player_disconnect::CopyFrom(const packetc2gs_player_disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2gs_player_disconnect::IsInitialized() const {

  return true;
}

void packetc2gs_player_disconnect::Swap(packetc2gs_player_disconnect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2gs_player_disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2gs_player_disconnect_descriptor_;
  metadata.reflection = packetc2gs_player_disconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_player_disconnect_result::kPacketIdFieldNumber;
const int packetgs2c_player_disconnect_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetgs2c_player_disconnect_result::packetgs2c_player_disconnect_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_player_disconnect_result::InitAsDefaultInstance() {
}

packetgs2c_player_disconnect_result::packetgs2c_player_disconnect_result(const packetgs2c_player_disconnect_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_player_disconnect_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31002;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_player_disconnect_result::~packetgs2c_player_disconnect_result() {
  SharedDtor();
}

void packetgs2c_player_disconnect_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_player_disconnect_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_player_disconnect_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_player_disconnect_result_descriptor_;
}

const packetgs2c_player_disconnect_result& packetgs2c_player_disconnect_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_player_disconnect_result* packetgs2c_player_disconnect_result::default_instance_ = NULL;

packetgs2c_player_disconnect_result* packetgs2c_player_disconnect_result::New() const {
  return new packetgs2c_player_disconnect_result;
}

void packetgs2c_player_disconnect_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31002;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_player_disconnect_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_disconnect_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_player_disconnect_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_disconnect_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_player_disconnect_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_disconnect_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_player_disconnect_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_player_disconnect_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_unknow];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_player_disconnect_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_player_disconnect_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_player_disconnect_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_player_disconnect_result::MergeFrom(const packetgs2c_player_disconnect_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_player_disconnect_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_player_disconnect_result::CopyFrom(const packetgs2c_player_disconnect_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_player_disconnect_result::IsInitialized() const {

  return true;
}

void packetgs2c_player_disconnect_result::Swap(packetgs2c_player_disconnect_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_player_disconnect_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_player_disconnect_result_descriptor_;
  metadata.reflection = packetgs2c_player_disconnect_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2gs_game_history::kPacketIdFieldNumber;
const int packetc2gs_game_history::kGameidFieldNumber;
#endif  // !_MSC_VER

packetc2gs_game_history::packetc2gs_game_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2gs_game_history::InitAsDefaultInstance() {
}

packetc2gs_game_history::packetc2gs_game_history(const packetc2gs_game_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2gs_game_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 30003;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2gs_game_history::~packetc2gs_game_history() {
  SharedDtor();
}

void packetc2gs_game_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2gs_game_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2gs_game_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2gs_game_history_descriptor_;
}

const packetc2gs_game_history& packetc2gs_game_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2gs_game_history* packetc2gs_game_history::default_instance_ = NULL;

packetc2gs_game_history* packetc2gs_game_history::New() const {
  return new packetc2gs_game_history;
}

void packetc2gs_game_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 30003;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2gs_game_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_game_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional int32 gameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2gs_game_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_game_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2gs_game_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_game_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2gs_game_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2gs_game_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2gs_game_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2gs_game_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2gs_game_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2gs_game_history::MergeFrom(const packetc2gs_game_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2gs_game_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2gs_game_history::CopyFrom(const packetc2gs_game_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2gs_game_history::IsInitialized() const {

  return true;
}

void packetc2gs_game_history::Swap(packetc2gs_game_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2gs_game_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2gs_game_history_descriptor_;
  metadata.reflection = packetc2gs_game_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_base_room_info::kGameIdFieldNumber;
const int gs_base_room_info::kRoomIdFieldNumber;
const int gs_base_room_info::kGameStateFieldNumber;
const int gs_base_room_info::kStateTimeFieldNumber;
const int gs_base_room_info::kTimeStampFieldNumber;
const int gs_base_room_info::kCalcTimeFieldNumber;
#endif  // !_MSC_VER

gs_base_room_info::gs_base_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_base_room_info::InitAsDefaultInstance() {
}

gs_base_room_info::gs_base_room_info(const gs_base_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_base_room_info::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0;
  room_id_ = 0;
  game_state_ = 0;
  state_time_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  calc_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_base_room_info::~gs_base_room_info() {
  SharedDtor();
}

void gs_base_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_base_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_base_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_base_room_info_descriptor_;
}

const gs_base_room_info& gs_base_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_base_room_info* gs_base_room_info::default_instance_ = NULL;

gs_base_room_info* gs_base_room_info::New() const {
  return new gs_base_room_info;
}

void gs_base_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0;
    room_id_ = 0;
    game_state_ = 0;
    state_time_ = 0;
    time_stamp_ = GOOGLE_LONGLONG(0);
    calc_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_base_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_state;
        break;
      }

      // optional int32 game_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_state_)));
          set_has_game_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state_time;
        break;
      }

      // optional int32 state_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_stamp;
        break;
      }

      // optional int64 time_stamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_calc_time;
        break;
      }

      // optional int32 calc_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calc_time_)));
          set_has_calc_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_base_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional int32 game_state = 3;
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_state(), output);
  }

  // optional int32 state_time = 4;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state_time(), output);
  }

  // optional int64 time_stamp = 5;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time_stamp(), output);
  }

  // optional int32 calc_time = 6;
  if (has_calc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->calc_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_base_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional int32 game_state = 3;
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_state(), target);
  }

  // optional int32 state_time = 4;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state_time(), target);
  }

  // optional int64 time_stamp = 5;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->time_stamp(), target);
  }

  // optional int32 calc_time = 6;
  if (has_calc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->calc_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_base_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 game_state = 3;
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_state());
    }

    // optional int32 state_time = 4;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_time());
    }

    // optional int64 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // optional int32 calc_time = 6;
    if (has_calc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calc_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_base_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_base_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_base_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_base_room_info::MergeFrom(const gs_base_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_calc_time()) {
      set_calc_time(from.calc_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_base_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_base_room_info::CopyFrom(const gs_base_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_base_room_info::IsInitialized() const {

  return true;
}

void gs_base_room_info::Swap(gs_base_room_info* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_state_, other->game_state_);
    std::swap(state_time_, other->state_time_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(calc_time_, other->calc_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_base_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_base_room_info_descriptor_;
  metadata.reflection = gs_base_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_cows_history::kIsWinFieldNumber;
#endif  // !_MSC_VER

gs_msg_cows_history::gs_msg_cows_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_cows_history::InitAsDefaultInstance() {
}

gs_msg_cows_history::gs_msg_cows_history(const gs_msg_cows_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_cows_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_cows_history::~gs_msg_cows_history() {
  SharedDtor();
}

void gs_msg_cows_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_cows_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_cows_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_cows_history_descriptor_;
}

const gs_msg_cows_history& gs_msg_cows_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_cows_history* gs_msg_cows_history::default_instance_ = NULL;

gs_msg_cows_history* gs_msg_cows_history::New() const {
  return new gs_msg_cows_history;
}

void gs_msg_cows_history::Clear() {
  is_win_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_cows_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_is_win())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_win())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_is_win;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_cows_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool is_win = 1;
  for (int i = 0; i < this->is_win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->is_win(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_cows_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool is_win = 1;
  for (int i = 0; i < this->is_win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->is_win(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_cows_history::ByteSize() const {
  int total_size = 0;

  // repeated bool is_win = 1;
  {
    int data_size = 0;
    data_size = 1 * this->is_win_size();
    total_size += 1 * this->is_win_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_cows_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_cows_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_cows_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_cows_history::MergeFrom(const gs_msg_cows_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  is_win_.MergeFrom(from.is_win_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_cows_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_cows_history::CopyFrom(const gs_msg_cows_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_cows_history::IsInitialized() const {

  return true;
}

void gs_msg_cows_history::Swap(gs_msg_cows_history* other) {
  if (other != this) {
    is_win_.Swap(&other->is_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_cows_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_cows_history_descriptor_;
  metadata.reflection = gs_msg_cows_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_cows_room_history::kBaseRoomInfoFieldNumber;
const int gs_msg_cows_room_history::kTotalCountFieldNumber;
const int gs_msg_cows_room_history::kWinCountsFieldNumber;
const int gs_msg_cows_room_history::kLoseCountsFieldNumber;
const int gs_msg_cows_room_history::kHistoryListFieldNumber;
#endif  // !_MSC_VER

gs_msg_cows_room_history::gs_msg_cows_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_cows_room_history::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_cows_room_history::gs_msg_cows_room_history(const gs_msg_cows_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_cows_room_history::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  total_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_cows_room_history::~gs_msg_cows_room_history() {
  SharedDtor();
}

void gs_msg_cows_room_history::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_cows_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_cows_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_cows_room_history_descriptor_;
}

const gs_msg_cows_room_history& gs_msg_cows_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_cows_room_history* gs_msg_cows_room_history::default_instance_ = NULL;

gs_msg_cows_room_history* gs_msg_cows_room_history::New() const {
  return new gs_msg_cows_room_history;
}

void gs_msg_cows_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
    total_count_ = 0;
  }
  win_counts_.Clear();
  lose_counts_.Clear();
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_cows_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }

      // optional int32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        break;
      }

      // repeated int32 win_counts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_win_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        if (input->ExpectTag(32)) goto parse_lose_counts;
        break;
      }

      // repeated int32 lose_counts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lose_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lose_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lose_counts;
        if (input->ExpectTag(42)) goto parse_history_list;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_cows_history history_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_cows_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_count(), output);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->win_counts(i), output);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lose_counts(i), output);
  }

  // repeated .client2gstate_protocols.gs_msg_cows_history history_list = 5;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_cows_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_count(), target);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->win_counts(i), target);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->lose_counts(i), target);
  }

  // repeated .client2gstate_protocols.gs_msg_cows_history history_list = 5;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_cows_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

    // optional int32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }

  }
  // repeated int32 win_counts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_counts(i));
    }
    total_size += 1 * this->win_counts_size() + data_size;
  }

  // repeated int32 lose_counts = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lose_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lose_counts(i));
    }
    total_size += 1 * this->lose_counts_size() + data_size;
  }

  // repeated .client2gstate_protocols.gs_msg_cows_history history_list = 5;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_cows_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_cows_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_cows_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_cows_room_history::MergeFrom(const gs_msg_cows_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_counts_.MergeFrom(from.win_counts_);
  lose_counts_.MergeFrom(from.lose_counts_);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_cows_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_cows_room_history::CopyFrom(const gs_msg_cows_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_cows_room_history::IsInitialized() const {

  return true;
}

void gs_msg_cows_room_history::Swap(gs_msg_cows_room_history* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    std::swap(total_count_, other->total_count_);
    win_counts_.Swap(&other->win_counts_);
    lose_counts_.Swap(&other->lose_counts_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_cows_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_cows_room_history_descriptor_;
  metadata.reflection = gs_msg_cows_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_cows_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_cows_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_cows_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_cows_game_history_result::packetgs2c_cows_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_cows_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_cows_game_history_result::packetgs2c_cows_game_history_result(const packetgs2c_cows_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_cows_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31005;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_cows_game_history_result::~packetgs2c_cows_game_history_result() {
  SharedDtor();
}

void packetgs2c_cows_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_cows_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_cows_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_cows_game_history_result_descriptor_;
}

const packetgs2c_cows_game_history_result& packetgs2c_cows_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_cows_game_history_result* packetgs2c_cows_game_history_result::default_instance_ = NULL;

packetgs2c_cows_game_history_result* packetgs2c_cows_game_history_result::New() const {
  return new packetgs2c_cows_game_history_result;
}

void packetgs2c_cows_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31005;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_cows_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_cows_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_cows_room_history room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_cows_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_cows_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_cows_room_history room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_cows_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_cows_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_cows_room_history room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_cows_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_cows_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_cows_room_history room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_cows_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_cows_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_cows_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_cows_game_history_result::MergeFrom(const packetgs2c_cows_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_cows_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_cows_game_history_result::CopyFrom(const packetgs2c_cows_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_cows_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_cows_game_history_result::Swap(packetgs2c_cows_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_cows_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_cows_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_cows_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_shcd_history::kCardTypeFieldNumber;
const int gs_msg_shcd_history::kCardValueFieldNumber;
const int gs_msg_shcd_history::kOpenTypeFieldNumber;
#endif  // !_MSC_VER

gs_msg_shcd_history::gs_msg_shcd_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_shcd_history::InitAsDefaultInstance() {
}

gs_msg_shcd_history::gs_msg_shcd_history(const gs_msg_shcd_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_shcd_history::SharedCtor() {
  _cached_size_ = 0;
  card_type_ = 0;
  card_value_ = 0;
  open_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_shcd_history::~gs_msg_shcd_history() {
  SharedDtor();
}

void gs_msg_shcd_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_shcd_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_shcd_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_shcd_history_descriptor_;
}

const gs_msg_shcd_history& gs_msg_shcd_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_shcd_history* gs_msg_shcd_history::default_instance_ = NULL;

gs_msg_shcd_history* gs_msg_shcd_history::New() const {
  return new gs_msg_shcd_history;
}

void gs_msg_shcd_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_type_ = 0;
    card_value_ = 0;
    open_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_shcd_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 card_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_value;
        break;
      }

      // optional int32 card_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_value_)));
          set_has_card_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open_type;
        break;
      }

      // optional int32 open_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_type_)));
          set_has_open_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_shcd_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 card_type = 1;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card_type(), output);
  }

  // optional int32 card_value = 2;
  if (has_card_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_value(), output);
  }

  // optional int32 open_type = 3;
  if (has_open_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_shcd_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 card_type = 1;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card_type(), target);
  }

  // optional int32 card_value = 2;
  if (has_card_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_value(), target);
  }

  // optional int32 open_type = 3;
  if (has_open_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_shcd_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 card_type = 1;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_type());
    }

    // optional int32 card_value = 2;
    if (has_card_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_value());
    }

    // optional int32 open_type = 3;
    if (has_open_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_shcd_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_shcd_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_shcd_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_shcd_history::MergeFrom(const gs_msg_shcd_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
    if (from.has_card_value()) {
      set_card_value(from.card_value());
    }
    if (from.has_open_type()) {
      set_open_type(from.open_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_shcd_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_shcd_history::CopyFrom(const gs_msg_shcd_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_shcd_history::IsInitialized() const {

  return true;
}

void gs_msg_shcd_history::Swap(gs_msg_shcd_history* other) {
  if (other != this) {
    std::swap(card_type_, other->card_type_);
    std::swap(card_value_, other->card_value_);
    std::swap(open_type_, other->open_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_shcd_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_shcd_history_descriptor_;
  metadata.reflection = gs_msg_shcd_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_shcd_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_shcd_room_info::kShcdInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_shcd_room_info::gs_msg_shcd_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_shcd_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_shcd_room_info::gs_msg_shcd_room_info(const gs_msg_shcd_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_shcd_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_shcd_room_info::~gs_msg_shcd_room_info() {
  SharedDtor();
}

void gs_msg_shcd_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_shcd_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_shcd_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_shcd_room_info_descriptor_;
}

const gs_msg_shcd_room_info& gs_msg_shcd_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_shcd_room_info* gs_msg_shcd_room_info::default_instance_ = NULL;

gs_msg_shcd_room_info* gs_msg_shcd_room_info::New() const {
  return new gs_msg_shcd_room_info;
}

void gs_msg_shcd_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  shcd_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_shcd_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shcd_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_shcd_history shcd_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shcd_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shcd_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shcd_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_shcd_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_shcd_history shcd_info = 2;
  for (int i = 0; i < this->shcd_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shcd_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_shcd_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_shcd_history shcd_info = 2;
  for (int i = 0; i < this->shcd_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shcd_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_shcd_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_shcd_history shcd_info = 2;
  total_size += 1 * this->shcd_info_size();
  for (int i = 0; i < this->shcd_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shcd_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_shcd_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_shcd_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_shcd_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_shcd_room_info::MergeFrom(const gs_msg_shcd_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  shcd_info_.MergeFrom(from.shcd_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_shcd_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_shcd_room_info::CopyFrom(const gs_msg_shcd_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_shcd_room_info::IsInitialized() const {

  return true;
}

void gs_msg_shcd_room_info::Swap(gs_msg_shcd_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    shcd_info_.Swap(&other->shcd_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_shcd_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_shcd_room_info_descriptor_;
  metadata.reflection = gs_msg_shcd_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_shcd_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_shcd_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_shcd_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_shcd_game_history_result::packetgs2c_shcd_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_shcd_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_shcd_game_history_result::packetgs2c_shcd_game_history_result(const packetgs2c_shcd_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_shcd_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31004;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_shcd_game_history_result::~packetgs2c_shcd_game_history_result() {
  SharedDtor();
}

void packetgs2c_shcd_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_shcd_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_shcd_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_shcd_game_history_result_descriptor_;
}

const packetgs2c_shcd_game_history_result& packetgs2c_shcd_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_shcd_game_history_result* packetgs2c_shcd_game_history_result::default_instance_ = NULL;

packetgs2c_shcd_game_history_result* packetgs2c_shcd_game_history_result::New() const {
  return new packetgs2c_shcd_game_history_result;
}

void packetgs2c_shcd_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31004;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_shcd_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_shcd_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_shcd_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_shcd_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_shcd_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_shcd_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_shcd_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_shcd_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_shcd_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_shcd_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_shcd_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_shcd_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_shcd_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_shcd_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_shcd_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_shcd_game_history_result::MergeFrom(const packetgs2c_shcd_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_shcd_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_shcd_game_history_result::CopyFrom(const packetgs2c_shcd_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_shcd_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_shcd_game_history_result::Swap(packetgs2c_shcd_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_shcd_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_shcd_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_shcd_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_baccarat_history::kIsTieFieldNumber;
const int gs_msg_baccarat_history::kIsPlayerWinFieldNumber;
const int gs_msg_baccarat_history::kIsPlayerPairFieldNumber;
const int gs_msg_baccarat_history::kIsBankerPairFieldNumber;
const int gs_msg_baccarat_history::kIsBankerWinFieldNumber;
const int gs_msg_baccarat_history::kWinPointFieldNumber;
#endif  // !_MSC_VER

gs_msg_baccarat_history::gs_msg_baccarat_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_baccarat_history::InitAsDefaultInstance() {
}

gs_msg_baccarat_history::gs_msg_baccarat_history(const gs_msg_baccarat_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_baccarat_history::SharedCtor() {
  _cached_size_ = 0;
  is_tie_ = false;
  is_player_win_ = false;
  is_player_pair_ = false;
  is_banker_pair_ = false;
  is_banker_win_ = false;
  win_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_baccarat_history::~gs_msg_baccarat_history() {
  SharedDtor();
}

void gs_msg_baccarat_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_baccarat_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_baccarat_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_baccarat_history_descriptor_;
}

const gs_msg_baccarat_history& gs_msg_baccarat_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_baccarat_history* gs_msg_baccarat_history::default_instance_ = NULL;

gs_msg_baccarat_history* gs_msg_baccarat_history::New() const {
  return new gs_msg_baccarat_history;
}

void gs_msg_baccarat_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_tie_ = false;
    is_player_win_ = false;
    is_player_pair_ = false;
    is_banker_pair_ = false;
    is_banker_win_ = false;
    win_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_baccarat_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_tie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tie_)));
          set_has_is_tie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_player_win;
        break;
      }

      // optional bool is_player_win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_player_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_player_win_)));
          set_has_is_player_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_player_pair;
        break;
      }

      // optional bool is_player_pair = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_player_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_player_pair_)));
          set_has_is_player_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_banker_pair;
        break;
      }

      // optional bool is_banker_pair = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_banker_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_banker_pair_)));
          set_has_is_banker_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_banker_win;
        break;
      }

      // optional bool is_banker_win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_banker_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_banker_win_)));
          set_has_is_banker_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_point;
        break;
      }

      // optional int32 win_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_point_)));
          set_has_win_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_baccarat_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_tie = 1;
  if (has_is_tie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_tie(), output);
  }

  // optional bool is_player_win = 2;
  if (has_is_player_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_player_win(), output);
  }

  // optional bool is_player_pair = 3;
  if (has_is_player_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_player_pair(), output);
  }

  // optional bool is_banker_pair = 4;
  if (has_is_banker_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_banker_pair(), output);
  }

  // optional bool is_banker_win = 5;
  if (has_is_banker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_banker_win(), output);
  }

  // optional int32 win_point = 6;
  if (has_win_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_baccarat_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_tie = 1;
  if (has_is_tie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_tie(), target);
  }

  // optional bool is_player_win = 2;
  if (has_is_player_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_player_win(), target);
  }

  // optional bool is_player_pair = 3;
  if (has_is_player_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_player_pair(), target);
  }

  // optional bool is_banker_pair = 4;
  if (has_is_banker_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_banker_pair(), target);
  }

  // optional bool is_banker_win = 5;
  if (has_is_banker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_banker_win(), target);
  }

  // optional int32 win_point = 6;
  if (has_win_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_baccarat_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_tie = 1;
    if (has_is_tie()) {
      total_size += 1 + 1;
    }

    // optional bool is_player_win = 2;
    if (has_is_player_win()) {
      total_size += 1 + 1;
    }

    // optional bool is_player_pair = 3;
    if (has_is_player_pair()) {
      total_size += 1 + 1;
    }

    // optional bool is_banker_pair = 4;
    if (has_is_banker_pair()) {
      total_size += 1 + 1;
    }

    // optional bool is_banker_win = 5;
    if (has_is_banker_win()) {
      total_size += 1 + 1;
    }

    // optional int32 win_point = 6;
    if (has_win_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_baccarat_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_baccarat_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_baccarat_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_baccarat_history::MergeFrom(const gs_msg_baccarat_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_tie()) {
      set_is_tie(from.is_tie());
    }
    if (from.has_is_player_win()) {
      set_is_player_win(from.is_player_win());
    }
    if (from.has_is_player_pair()) {
      set_is_player_pair(from.is_player_pair());
    }
    if (from.has_is_banker_pair()) {
      set_is_banker_pair(from.is_banker_pair());
    }
    if (from.has_is_banker_win()) {
      set_is_banker_win(from.is_banker_win());
    }
    if (from.has_win_point()) {
      set_win_point(from.win_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_baccarat_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_baccarat_history::CopyFrom(const gs_msg_baccarat_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_baccarat_history::IsInitialized() const {

  return true;
}

void gs_msg_baccarat_history::Swap(gs_msg_baccarat_history* other) {
  if (other != this) {
    std::swap(is_tie_, other->is_tie_);
    std::swap(is_player_win_, other->is_player_win_);
    std::swap(is_player_pair_, other->is_player_pair_);
    std::swap(is_banker_pair_, other->is_banker_pair_);
    std::swap(is_banker_win_, other->is_banker_win_);
    std::swap(win_point_, other->win_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_baccarat_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_baccarat_history_descriptor_;
  metadata.reflection = gs_msg_baccarat_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_baccarat_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_baccarat_room_info::kBaccaratInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_baccarat_room_info::gs_msg_baccarat_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_baccarat_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_baccarat_room_info::gs_msg_baccarat_room_info(const gs_msg_baccarat_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_baccarat_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_baccarat_room_info::~gs_msg_baccarat_room_info() {
  SharedDtor();
}

void gs_msg_baccarat_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_baccarat_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_baccarat_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_baccarat_room_info_descriptor_;
}

const gs_msg_baccarat_room_info& gs_msg_baccarat_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_baccarat_room_info* gs_msg_baccarat_room_info::default_instance_ = NULL;

gs_msg_baccarat_room_info* gs_msg_baccarat_room_info::New() const {
  return new gs_msg_baccarat_room_info;
}

void gs_msg_baccarat_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  baccarat_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_baccarat_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baccarat_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_baccarat_history baccarat_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baccarat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baccarat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baccarat_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_baccarat_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_baccarat_history baccarat_info = 2;
  for (int i = 0; i < this->baccarat_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baccarat_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_baccarat_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_baccarat_history baccarat_info = 2;
  for (int i = 0; i < this->baccarat_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baccarat_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_baccarat_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_baccarat_history baccarat_info = 2;
  total_size += 1 * this->baccarat_info_size();
  for (int i = 0; i < this->baccarat_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baccarat_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_baccarat_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_baccarat_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_baccarat_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_baccarat_room_info::MergeFrom(const gs_msg_baccarat_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  baccarat_info_.MergeFrom(from.baccarat_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_baccarat_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_baccarat_room_info::CopyFrom(const gs_msg_baccarat_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_baccarat_room_info::IsInitialized() const {

  return true;
}

void gs_msg_baccarat_room_info::Swap(gs_msg_baccarat_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    baccarat_info_.Swap(&other->baccarat_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_baccarat_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_baccarat_room_info_descriptor_;
  metadata.reflection = gs_msg_baccarat_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_baccarat_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_baccarat_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_baccarat_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_baccarat_game_history_result::packetgs2c_baccarat_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_baccarat_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_baccarat_game_history_result::packetgs2c_baccarat_game_history_result(const packetgs2c_baccarat_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_baccarat_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31006;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_baccarat_game_history_result::~packetgs2c_baccarat_game_history_result() {
  SharedDtor();
}

void packetgs2c_baccarat_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_baccarat_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_baccarat_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_baccarat_game_history_result_descriptor_;
}

const packetgs2c_baccarat_game_history_result& packetgs2c_baccarat_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_baccarat_game_history_result* packetgs2c_baccarat_game_history_result::default_instance_ = NULL;

packetgs2c_baccarat_game_history_result* packetgs2c_baccarat_game_history_result::New() const {
  return new packetgs2c_baccarat_game_history_result;
}

void packetgs2c_baccarat_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31006;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_baccarat_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_baccarat_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_baccarat_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_baccarat_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_baccarat_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_baccarat_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_baccarat_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_baccarat_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_baccarat_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_baccarat_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_baccarat_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_baccarat_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_baccarat_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_baccarat_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_baccarat_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_baccarat_game_history_result::MergeFrom(const packetgs2c_baccarat_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_baccarat_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_baccarat_game_history_result::CopyFrom(const packetgs2c_baccarat_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_baccarat_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_baccarat_game_history_result::Swap(packetgs2c_baccarat_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_baccarat_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_baccarat_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_baccarat_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_goldshark_history::kResultFieldNumber;
#endif  // !_MSC_VER

gs_msg_goldshark_history::gs_msg_goldshark_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_goldshark_history::InitAsDefaultInstance() {
}

gs_msg_goldshark_history::gs_msg_goldshark_history(const gs_msg_goldshark_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_goldshark_history::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_goldshark_history::~gs_msg_goldshark_history() {
  SharedDtor();
}

void gs_msg_goldshark_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_goldshark_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_goldshark_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_goldshark_history_descriptor_;
}

const gs_msg_goldshark_history& gs_msg_goldshark_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_goldshark_history* gs_msg_goldshark_history::default_instance_ = NULL;

gs_msg_goldshark_history* gs_msg_goldshark_history::New() const {
  return new gs_msg_goldshark_history;
}

void gs_msg_goldshark_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_goldshark_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_goldshark_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_goldshark_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_goldshark_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_goldshark_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_goldshark_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_goldshark_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_goldshark_history::MergeFrom(const gs_msg_goldshark_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_goldshark_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_goldshark_history::CopyFrom(const gs_msg_goldshark_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_goldshark_history::IsInitialized() const {

  return true;
}

void gs_msg_goldshark_history::Swap(gs_msg_goldshark_history* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_goldshark_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_goldshark_history_descriptor_;
  metadata.reflection = gs_msg_goldshark_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_goldshark_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_goldshark_room_info::kGoldsharkInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_goldshark_room_info::gs_msg_goldshark_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_goldshark_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_goldshark_room_info::gs_msg_goldshark_room_info(const gs_msg_goldshark_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_goldshark_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_goldshark_room_info::~gs_msg_goldshark_room_info() {
  SharedDtor();
}

void gs_msg_goldshark_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_goldshark_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_goldshark_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_goldshark_room_info_descriptor_;
}

const gs_msg_goldshark_room_info& gs_msg_goldshark_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_goldshark_room_info* gs_msg_goldshark_room_info::default_instance_ = NULL;

gs_msg_goldshark_room_info* gs_msg_goldshark_room_info::New() const {
  return new gs_msg_goldshark_room_info;
}

void gs_msg_goldshark_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  goldshark_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_goldshark_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goldshark_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_goldshark_history goldshark_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldshark_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goldshark_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goldshark_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_goldshark_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_goldshark_history goldshark_info = 2;
  for (int i = 0; i < this->goldshark_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goldshark_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_goldshark_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_goldshark_history goldshark_info = 2;
  for (int i = 0; i < this->goldshark_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goldshark_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_goldshark_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_goldshark_history goldshark_info = 2;
  total_size += 1 * this->goldshark_info_size();
  for (int i = 0; i < this->goldshark_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goldshark_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_goldshark_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_goldshark_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_goldshark_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_goldshark_room_info::MergeFrom(const gs_msg_goldshark_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  goldshark_info_.MergeFrom(from.goldshark_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_goldshark_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_goldshark_room_info::CopyFrom(const gs_msg_goldshark_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_goldshark_room_info::IsInitialized() const {

  return true;
}

void gs_msg_goldshark_room_info::Swap(gs_msg_goldshark_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    goldshark_info_.Swap(&other->goldshark_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_goldshark_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_goldshark_room_info_descriptor_;
  metadata.reflection = gs_msg_goldshark_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_goldshark_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_goldshark_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_goldshark_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_goldshark_game_history_result::packetgs2c_goldshark_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_goldshark_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_goldshark_game_history_result::packetgs2c_goldshark_game_history_result(const packetgs2c_goldshark_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_goldshark_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31007;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_goldshark_game_history_result::~packetgs2c_goldshark_game_history_result() {
  SharedDtor();
}

void packetgs2c_goldshark_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_goldshark_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_goldshark_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_goldshark_game_history_result_descriptor_;
}

const packetgs2c_goldshark_game_history_result& packetgs2c_goldshark_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_goldshark_game_history_result* packetgs2c_goldshark_game_history_result::default_instance_ = NULL;

packetgs2c_goldshark_game_history_result* packetgs2c_goldshark_game_history_result::New() const {
  return new packetgs2c_goldshark_game_history_result;
}

void packetgs2c_goldshark_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31007;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_goldshark_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_goldshark_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_goldshark_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_goldshark_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_goldshark_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_goldshark_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_goldshark_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_goldshark_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_goldshark_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_goldshark_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_goldshark_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_goldshark_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_goldshark_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_goldshark_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_goldshark_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_goldshark_game_history_result::MergeFrom(const packetgs2c_goldshark_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_goldshark_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_goldshark_game_history_result::CopyFrom(const packetgs2c_goldshark_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_goldshark_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_goldshark_game_history_result::Swap(packetgs2c_goldshark_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_goldshark_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_goldshark_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_goldshark_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_lhd_history::kCardsInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_lhd_history::gs_msg_lhd_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_lhd_history::InitAsDefaultInstance() {
}

gs_msg_lhd_history::gs_msg_lhd_history(const gs_msg_lhd_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_lhd_history::SharedCtor() {
  _cached_size_ = 0;
  cards_info_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_lhd_history::~gs_msg_lhd_history() {
  SharedDtor();
}

void gs_msg_lhd_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_lhd_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_lhd_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_lhd_history_descriptor_;
}

const gs_msg_lhd_history& gs_msg_lhd_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_lhd_history* gs_msg_lhd_history::default_instance_ = NULL;

gs_msg_lhd_history* gs_msg_lhd_history::New() const {
  return new gs_msg_lhd_history;
}

void gs_msg_lhd_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cards_info_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_lhd_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cards_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_info_)));
          set_has_cards_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_lhd_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cards_info = 1;
  if (has_cards_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cards_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_lhd_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cards_info = 1;
  if (has_cards_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cards_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_lhd_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cards_info = 1;
    if (has_cards_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_lhd_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_lhd_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_lhd_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_lhd_history::MergeFrom(const gs_msg_lhd_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cards_info()) {
      set_cards_info(from.cards_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_lhd_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_lhd_history::CopyFrom(const gs_msg_lhd_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_lhd_history::IsInitialized() const {

  return true;
}

void gs_msg_lhd_history::Swap(gs_msg_lhd_history* other) {
  if (other != this) {
    std::swap(cards_info_, other->cards_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_lhd_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_lhd_history_descriptor_;
  metadata.reflection = gs_msg_lhd_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_lhd_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_lhd_room_info::kTotalWinFieldNumber;
const int gs_msg_lhd_room_info::kTotalLoseFieldNumber;
const int gs_msg_lhd_room_info::kLhdInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_lhd_room_info::gs_msg_lhd_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_lhd_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_lhd_room_info::gs_msg_lhd_room_info(const gs_msg_lhd_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_lhd_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_lhd_room_info::~gs_msg_lhd_room_info() {
  SharedDtor();
}

void gs_msg_lhd_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_lhd_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_lhd_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_lhd_room_info_descriptor_;
}

const gs_msg_lhd_room_info& gs_msg_lhd_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_lhd_room_info* gs_msg_lhd_room_info::default_instance_ = NULL;

gs_msg_lhd_room_info* gs_msg_lhd_room_info::New() const {
  return new gs_msg_lhd_room_info;
}

void gs_msg_lhd_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  total_win_.Clear();
  total_lose_.Clear();
  lhd_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_lhd_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_win;
        break;
      }

      // repeated int32 total_win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_total_win())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_win())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_win;
        if (input->ExpectTag(24)) goto parse_total_lose;
        break;
      }

      // repeated int32 total_lose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_total_lose())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_lose())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_lose;
        if (input->ExpectTag(34)) goto parse_lhd_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_lhd_history lhd_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lhd_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lhd_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lhd_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_lhd_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated int32 total_win = 2;
  for (int i = 0; i < this->total_win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->total_win(i), output);
  }

  // repeated int32 total_lose = 3;
  for (int i = 0; i < this->total_lose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->total_lose(i), output);
  }

  // repeated .client2gstate_protocols.gs_msg_lhd_history lhd_info = 4;
  for (int i = 0; i < this->lhd_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lhd_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_lhd_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated int32 total_win = 2;
  for (int i = 0; i < this->total_win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->total_win(i), target);
  }

  // repeated int32 total_lose = 3;
  for (int i = 0; i < this->total_lose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->total_lose(i), target);
  }

  // repeated .client2gstate_protocols.gs_msg_lhd_history lhd_info = 4;
  for (int i = 0; i < this->lhd_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lhd_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_lhd_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated int32 total_win = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_win_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_win(i));
    }
    total_size += 1 * this->total_win_size() + data_size;
  }

  // repeated int32 total_lose = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_lose_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_lose(i));
    }
    total_size += 1 * this->total_lose_size() + data_size;
  }

  // repeated .client2gstate_protocols.gs_msg_lhd_history lhd_info = 4;
  total_size += 1 * this->lhd_info_size();
  for (int i = 0; i < this->lhd_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lhd_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_lhd_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_lhd_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_lhd_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_lhd_room_info::MergeFrom(const gs_msg_lhd_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_win_.MergeFrom(from.total_win_);
  total_lose_.MergeFrom(from.total_lose_);
  lhd_info_.MergeFrom(from.lhd_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_lhd_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_lhd_room_info::CopyFrom(const gs_msg_lhd_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_lhd_room_info::IsInitialized() const {

  return true;
}

void gs_msg_lhd_room_info::Swap(gs_msg_lhd_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    total_win_.Swap(&other->total_win_);
    total_lose_.Swap(&other->total_lose_);
    lhd_info_.Swap(&other->lhd_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_lhd_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_lhd_room_info_descriptor_;
  metadata.reflection = gs_msg_lhd_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_lhd_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_lhd_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_lhd_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_lhd_game_history_result::packetgs2c_lhd_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_lhd_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_lhd_game_history_result::packetgs2c_lhd_game_history_result(const packetgs2c_lhd_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_lhd_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31008;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_lhd_game_history_result::~packetgs2c_lhd_game_history_result() {
  SharedDtor();
}

void packetgs2c_lhd_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_lhd_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_lhd_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_lhd_game_history_result_descriptor_;
}

const packetgs2c_lhd_game_history_result& packetgs2c_lhd_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_lhd_game_history_result* packetgs2c_lhd_game_history_result::default_instance_ = NULL;

packetgs2c_lhd_game_history_result* packetgs2c_lhd_game_history_result::New() const {
  return new packetgs2c_lhd_game_history_result;
}

void packetgs2c_lhd_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31008;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_lhd_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_lhd_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_lhd_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_lhd_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_lhd_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_lhd_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_lhd_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_lhd_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_lhd_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_lhd_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_lhd_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_lhd_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_lhd_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_lhd_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_lhd_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_lhd_game_history_result::MergeFrom(const packetgs2c_lhd_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_lhd_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_lhd_game_history_result::CopyFrom(const packetgs2c_lhd_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_lhd_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_lhd_game_history_result::Swap(packetgs2c_lhd_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_lhd_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_lhd_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_lhd_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_benzbmw_history::kResultFieldNumber;
#endif  // !_MSC_VER

gs_msg_benzbmw_history::gs_msg_benzbmw_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_benzbmw_history::InitAsDefaultInstance() {
}

gs_msg_benzbmw_history::gs_msg_benzbmw_history(const gs_msg_benzbmw_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_benzbmw_history::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_benzbmw_history::~gs_msg_benzbmw_history() {
  SharedDtor();
}

void gs_msg_benzbmw_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_benzbmw_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_benzbmw_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_benzbmw_history_descriptor_;
}

const gs_msg_benzbmw_history& gs_msg_benzbmw_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_benzbmw_history* gs_msg_benzbmw_history::default_instance_ = NULL;

gs_msg_benzbmw_history* gs_msg_benzbmw_history::New() const {
  return new gs_msg_benzbmw_history;
}

void gs_msg_benzbmw_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_benzbmw_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_benzbmw_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_benzbmw_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_benzbmw_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_benzbmw_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_benzbmw_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_benzbmw_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_benzbmw_history::MergeFrom(const gs_msg_benzbmw_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_benzbmw_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_benzbmw_history::CopyFrom(const gs_msg_benzbmw_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_benzbmw_history::IsInitialized() const {

  return true;
}

void gs_msg_benzbmw_history::Swap(gs_msg_benzbmw_history* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_benzbmw_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_benzbmw_history_descriptor_;
  metadata.reflection = gs_msg_benzbmw_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_benzbmw_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_benzbmw_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_benzbmw_room_info::gs_msg_benzbmw_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_benzbmw_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_benzbmw_room_info::gs_msg_benzbmw_room_info(const gs_msg_benzbmw_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_benzbmw_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_benzbmw_room_info::~gs_msg_benzbmw_room_info() {
  SharedDtor();
}

void gs_msg_benzbmw_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_benzbmw_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_benzbmw_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_benzbmw_room_info_descriptor_;
}

const gs_msg_benzbmw_room_info& gs_msg_benzbmw_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_benzbmw_room_info* gs_msg_benzbmw_room_info::default_instance_ = NULL;

gs_msg_benzbmw_room_info* gs_msg_benzbmw_room_info::New() const {
  return new gs_msg_benzbmw_room_info;
}

void gs_msg_benzbmw_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_benzbmw_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_benzbmw_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_benzbmw_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_benzbmw_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_benzbmw_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_benzbmw_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_benzbmw_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_benzbmw_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_benzbmw_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_benzbmw_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_benzbmw_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_benzbmw_room_info::MergeFrom(const gs_msg_benzbmw_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_benzbmw_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_benzbmw_room_info::CopyFrom(const gs_msg_benzbmw_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_benzbmw_room_info::IsInitialized() const {

  return true;
}

void gs_msg_benzbmw_room_info::Swap(gs_msg_benzbmw_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_benzbmw_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_benzbmw_room_info_descriptor_;
  metadata.reflection = gs_msg_benzbmw_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_benzbmw_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_benzbmw_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_benzbmw_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_benzbmw_game_history_result::packetgs2c_benzbmw_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_benzbmw_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_benzbmw_game_history_result::packetgs2c_benzbmw_game_history_result(const packetgs2c_benzbmw_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_benzbmw_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31009;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_benzbmw_game_history_result::~packetgs2c_benzbmw_game_history_result() {
  SharedDtor();
}

void packetgs2c_benzbmw_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_benzbmw_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_benzbmw_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_benzbmw_game_history_result_descriptor_;
}

const packetgs2c_benzbmw_game_history_result& packetgs2c_benzbmw_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_benzbmw_game_history_result* packetgs2c_benzbmw_game_history_result::default_instance_ = NULL;

packetgs2c_benzbmw_game_history_result* packetgs2c_benzbmw_game_history_result::New() const {
  return new packetgs2c_benzbmw_game_history_result;
}

void packetgs2c_benzbmw_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31009;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_benzbmw_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_benzbmw_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_benzbmw_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_benzbmw_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_benzbmw_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_benzbmw_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_benzbmw_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_benzbmw_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_benzbmw_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_benzbmw_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_benzbmw_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_benzbmw_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_benzbmw_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_benzbmw_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_benzbmw_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_benzbmw_game_history_result::MergeFrom(const packetgs2c_benzbmw_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_benzbmw_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_benzbmw_game_history_result::CopyFrom(const packetgs2c_benzbmw_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_benzbmw_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_benzbmw_game_history_result::Swap(packetgs2c_benzbmw_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_benzbmw_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_benzbmw_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_benzbmw_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_multiredblack_history::kResultFieldNumber;
#endif  // !_MSC_VER

gs_msg_multiredblack_history::gs_msg_multiredblack_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_multiredblack_history::InitAsDefaultInstance() {
}

gs_msg_multiredblack_history::gs_msg_multiredblack_history(const gs_msg_multiredblack_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_multiredblack_history::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_multiredblack_history::~gs_msg_multiredblack_history() {
  SharedDtor();
}

void gs_msg_multiredblack_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_multiredblack_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_multiredblack_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_multiredblack_history_descriptor_;
}

const gs_msg_multiredblack_history& gs_msg_multiredblack_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_multiredblack_history* gs_msg_multiredblack_history::default_instance_ = NULL;

gs_msg_multiredblack_history* gs_msg_multiredblack_history::New() const {
  return new gs_msg_multiredblack_history;
}

void gs_msg_multiredblack_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_multiredblack_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_multiredblack_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_multiredblack_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_multiredblack_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_multiredblack_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_multiredblack_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_multiredblack_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_multiredblack_history::MergeFrom(const gs_msg_multiredblack_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_multiredblack_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_multiredblack_history::CopyFrom(const gs_msg_multiredblack_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_multiredblack_history::IsInitialized() const {

  return true;
}

void gs_msg_multiredblack_history::Swap(gs_msg_multiredblack_history* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_multiredblack_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_multiredblack_history_descriptor_;
  metadata.reflection = gs_msg_multiredblack_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_multiredblack_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_multiredblack_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_multiredblack_room_info::gs_msg_multiredblack_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_multiredblack_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_multiredblack_room_info::gs_msg_multiredblack_room_info(const gs_msg_multiredblack_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_multiredblack_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_multiredblack_room_info::~gs_msg_multiredblack_room_info() {
  SharedDtor();
}

void gs_msg_multiredblack_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_multiredblack_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_multiredblack_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_multiredblack_room_info_descriptor_;
}

const gs_msg_multiredblack_room_info& gs_msg_multiredblack_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_multiredblack_room_info* gs_msg_multiredblack_room_info::default_instance_ = NULL;

gs_msg_multiredblack_room_info* gs_msg_multiredblack_room_info::New() const {
  return new gs_msg_multiredblack_room_info;
}

void gs_msg_multiredblack_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_multiredblack_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_multiredblack_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_multiredblack_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_multiredblack_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_multiredblack_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_multiredblack_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_multiredblack_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_multiredblack_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_multiredblack_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_multiredblack_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_multiredblack_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_multiredblack_room_info::MergeFrom(const gs_msg_multiredblack_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_multiredblack_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_multiredblack_room_info::CopyFrom(const gs_msg_multiredblack_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_multiredblack_room_info::IsInitialized() const {

  return true;
}

void gs_msg_multiredblack_room_info::Swap(gs_msg_multiredblack_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_multiredblack_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_multiredblack_room_info_descriptor_;
  metadata.reflection = gs_msg_multiredblack_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_multiredblack_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_multiredblack_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_multiredblack_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_multiredblack_game_history_result::packetgs2c_multiredblack_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_multiredblack_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_multiredblack_game_history_result::packetgs2c_multiredblack_game_history_result(const packetgs2c_multiredblack_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_multiredblack_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31010;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_multiredblack_game_history_result::~packetgs2c_multiredblack_game_history_result() {
  SharedDtor();
}

void packetgs2c_multiredblack_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_multiredblack_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_multiredblack_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_multiredblack_game_history_result_descriptor_;
}

const packetgs2c_multiredblack_game_history_result& packetgs2c_multiredblack_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_multiredblack_game_history_result* packetgs2c_multiredblack_game_history_result::default_instance_ = NULL;

packetgs2c_multiredblack_game_history_result* packetgs2c_multiredblack_game_history_result::New() const {
  return new packetgs2c_multiredblack_game_history_result;
}

void packetgs2c_multiredblack_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31010;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_multiredblack_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multiredblack_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_multiredblack_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_multiredblack_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multiredblack_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_multiredblack_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_multiredblack_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multiredblack_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_multiredblack_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_multiredblack_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multiredblack_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_multiredblack_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_multiredblack_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_multiredblack_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_multiredblack_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_multiredblack_game_history_result::MergeFrom(const packetgs2c_multiredblack_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_multiredblack_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_multiredblack_game_history_result::CopyFrom(const packetgs2c_multiredblack_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_multiredblack_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_multiredblack_game_history_result::Swap(packetgs2c_multiredblack_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_multiredblack_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_multiredblack_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_multiredblack_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_ebg_history::kIsWinFieldNumber;
const int gs_msg_ebg_history::kCardsIdFieldNumber;
#endif  // !_MSC_VER

gs_msg_ebg_history::gs_msg_ebg_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_ebg_history::InitAsDefaultInstance() {
}

gs_msg_ebg_history::gs_msg_ebg_history(const gs_msg_ebg_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_ebg_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_ebg_history::~gs_msg_ebg_history() {
  SharedDtor();
}

void gs_msg_ebg_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_ebg_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_ebg_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_ebg_history_descriptor_;
}

const gs_msg_ebg_history& gs_msg_ebg_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_ebg_history* gs_msg_ebg_history::default_instance_ = NULL;

gs_msg_ebg_history* gs_msg_ebg_history::New() const {
  return new gs_msg_ebg_history;
}

void gs_msg_ebg_history::Clear() {
  is_win_.Clear();
  cards_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_ebg_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_is_win())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_win())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_is_win;
        if (input->ExpectTag(16)) goto parse_cards_id;
        break;
      }

      // repeated int32 cards_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_ebg_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool is_win = 1;
  for (int i = 0; i < this->is_win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->is_win(i), output);
  }

  // repeated int32 cards_id = 2;
  for (int i = 0; i < this->cards_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_ebg_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool is_win = 1;
  for (int i = 0; i < this->is_win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->is_win(i), target);
  }

  // repeated int32 cards_id = 2;
  for (int i = 0; i < this->cards_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_ebg_history::ByteSize() const {
  int total_size = 0;

  // repeated bool is_win = 1;
  {
    int data_size = 0;
    data_size = 1 * this->is_win_size();
    total_size += 1 * this->is_win_size() + data_size;
  }

  // repeated int32 cards_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_id(i));
    }
    total_size += 1 * this->cards_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_ebg_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_ebg_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_ebg_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_ebg_history::MergeFrom(const gs_msg_ebg_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  is_win_.MergeFrom(from.is_win_);
  cards_id_.MergeFrom(from.cards_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_ebg_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_ebg_history::CopyFrom(const gs_msg_ebg_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_ebg_history::IsInitialized() const {

  return true;
}

void gs_msg_ebg_history::Swap(gs_msg_ebg_history* other) {
  if (other != this) {
    is_win_.Swap(&other->is_win_);
    cards_id_.Swap(&other->cards_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_ebg_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_ebg_history_descriptor_;
  metadata.reflection = gs_msg_ebg_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_ebg_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_ebg_room_info::kTotalCountFieldNumber;
const int gs_msg_ebg_room_info::kWinCountsFieldNumber;
const int gs_msg_ebg_room_info::kLoseCountsFieldNumber;
const int gs_msg_ebg_room_info::kCardRoadInfoFieldNumber;
const int gs_msg_ebg_room_info::kBankerCntFieldNumber;
const int gs_msg_ebg_room_info::kOutCardsFieldNumber;
#endif  // !_MSC_VER

gs_msg_ebg_room_info::gs_msg_ebg_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_ebg_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_ebg_room_info::gs_msg_ebg_room_info(const gs_msg_ebg_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_ebg_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  total_count_ = 0;
  banker_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_ebg_room_info::~gs_msg_ebg_room_info() {
  SharedDtor();
}

void gs_msg_ebg_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_ebg_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_ebg_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_ebg_room_info_descriptor_;
}

const gs_msg_ebg_room_info& gs_msg_ebg_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_ebg_room_info* gs_msg_ebg_room_info::default_instance_ = NULL;

gs_msg_ebg_room_info* gs_msg_ebg_room_info::New() const {
  return new gs_msg_ebg_room_info;
}

void gs_msg_ebg_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
    total_count_ = 0;
    banker_cnt_ = 0;
  }
  win_counts_.Clear();
  lose_counts_.Clear();
  card_road_info_.Clear();
  out_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_ebg_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }

      // optional int32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        break;
      }

      // repeated int32 win_counts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_win_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_counts;
        if (input->ExpectTag(32)) goto parse_lose_counts;
        break;
      }

      // repeated int32 lose_counts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lose_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lose_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lose_counts;
        if (input->ExpectTag(42)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_ebg_history card_road_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_card_road_info;
        if (input->ExpectTag(48)) goto parse_banker_cnt;
        break;
      }

      // optional int32 banker_cnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_cnt_)));
          set_has_banker_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_out_cards;
        break;
      }

      // repeated int32 out_cards = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_out_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_out_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_out_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_ebg_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_count(), output);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->win_counts(i), output);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lose_counts(i), output);
  }

  // repeated .client2gstate_protocols.gs_msg_ebg_history card_road_info = 5;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->card_road_info(i), output);
  }

  // optional int32 banker_cnt = 6;
  if (has_banker_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->banker_cnt(), output);
  }

  // repeated int32 out_cards = 7;
  for (int i = 0; i < this->out_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->out_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_ebg_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_count(), target);
  }

  // repeated int32 win_counts = 3;
  for (int i = 0; i < this->win_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->win_counts(i), target);
  }

  // repeated int32 lose_counts = 4;
  for (int i = 0; i < this->lose_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->lose_counts(i), target);
  }

  // repeated .client2gstate_protocols.gs_msg_ebg_history card_road_info = 5;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->card_road_info(i), target);
  }

  // optional int32 banker_cnt = 6;
  if (has_banker_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->banker_cnt(), target);
  }

  // repeated int32 out_cards = 7;
  for (int i = 0; i < this->out_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->out_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_ebg_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

    // optional int32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }

    // optional int32 banker_cnt = 6;
    if (has_banker_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_cnt());
    }

  }
  // repeated int32 win_counts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_counts(i));
    }
    total_size += 1 * this->win_counts_size() + data_size;
  }

  // repeated int32 lose_counts = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lose_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lose_counts(i));
    }
    total_size += 1 * this->lose_counts_size() + data_size;
  }

  // repeated .client2gstate_protocols.gs_msg_ebg_history card_road_info = 5;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  // repeated int32 out_cards = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->out_cards(i));
    }
    total_size += 1 * this->out_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_ebg_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_ebg_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_ebg_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_ebg_room_info::MergeFrom(const gs_msg_ebg_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_counts_.MergeFrom(from.win_counts_);
  lose_counts_.MergeFrom(from.lose_counts_);
  card_road_info_.MergeFrom(from.card_road_info_);
  out_cards_.MergeFrom(from.out_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_banker_cnt()) {
      set_banker_cnt(from.banker_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_ebg_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_ebg_room_info::CopyFrom(const gs_msg_ebg_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_ebg_room_info::IsInitialized() const {

  return true;
}

void gs_msg_ebg_room_info::Swap(gs_msg_ebg_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    std::swap(total_count_, other->total_count_);
    win_counts_.Swap(&other->win_counts_);
    lose_counts_.Swap(&other->lose_counts_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(banker_cnt_, other->banker_cnt_);
    out_cards_.Swap(&other->out_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_ebg_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_ebg_room_info_descriptor_;
  metadata.reflection = gs_msg_ebg_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_ebg_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_ebg_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_ebg_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_ebg_game_history_result::packetgs2c_ebg_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_ebg_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_ebg_game_history_result::packetgs2c_ebg_game_history_result(const packetgs2c_ebg_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_ebg_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31011;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_ebg_game_history_result::~packetgs2c_ebg_game_history_result() {
  SharedDtor();
}

void packetgs2c_ebg_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_ebg_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_ebg_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_ebg_game_history_result_descriptor_;
}

const packetgs2c_ebg_game_history_result& packetgs2c_ebg_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_ebg_game_history_result* packetgs2c_ebg_game_history_result::default_instance_ = NULL;

packetgs2c_ebg_game_history_result* packetgs2c_ebg_game_history_result::New() const {
  return new packetgs2c_ebg_game_history_result;
}

void packetgs2c_ebg_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31011;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_ebg_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ebg_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_ebg_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_ebg_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ebg_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_ebg_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_ebg_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ebg_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_ebg_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_ebg_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ebg_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_ebg_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_ebg_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_ebg_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_ebg_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_ebg_game_history_result::MergeFrom(const packetgs2c_ebg_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_ebg_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_ebg_game_history_result::CopyFrom(const packetgs2c_ebg_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_ebg_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_ebg_game_history_result::Swap(packetgs2c_ebg_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_ebg_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_ebg_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_ebg_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_dice_history::kDice1FieldNumber;
const int gs_msg_dice_history::kDice2FieldNumber;
const int gs_msg_dice_history::kDice3FieldNumber;
#endif  // !_MSC_VER

gs_msg_dice_history::gs_msg_dice_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_dice_history::InitAsDefaultInstance() {
}

gs_msg_dice_history::gs_msg_dice_history(const gs_msg_dice_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_dice_history::SharedCtor() {
  _cached_size_ = 0;
  dice1_ = 0;
  dice2_ = 0;
  dice3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_dice_history::~gs_msg_dice_history() {
  SharedDtor();
}

void gs_msg_dice_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_dice_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_dice_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_dice_history_descriptor_;
}

const gs_msg_dice_history& gs_msg_dice_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_dice_history* gs_msg_dice_history::default_instance_ = NULL;

gs_msg_dice_history* gs_msg_dice_history::New() const {
  return new gs_msg_dice_history;
}

void gs_msg_dice_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dice1_ = 0;
    dice2_ = 0;
    dice3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_dice_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dice1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice1_)));
          set_has_dice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dice2;
        break;
      }

      // optional int32 dice2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice2_)));
          set_has_dice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dice3;
        break;
      }

      // optional int32 dice3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice3_)));
          set_has_dice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_dice_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dice1 = 1;
  if (has_dice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dice1(), output);
  }

  // optional int32 dice2 = 2;
  if (has_dice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dice2(), output);
  }

  // optional int32 dice3 = 3;
  if (has_dice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dice3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_dice_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dice1 = 1;
  if (has_dice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dice1(), target);
  }

  // optional int32 dice2 = 2;
  if (has_dice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dice2(), target);
  }

  // optional int32 dice3 = 3;
  if (has_dice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dice3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_dice_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dice1 = 1;
    if (has_dice1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice1());
    }

    // optional int32 dice2 = 2;
    if (has_dice2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice2());
    }

    // optional int32 dice3 = 3;
    if (has_dice3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_dice_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_dice_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_dice_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_dice_history::MergeFrom(const gs_msg_dice_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dice1()) {
      set_dice1(from.dice1());
    }
    if (from.has_dice2()) {
      set_dice2(from.dice2());
    }
    if (from.has_dice3()) {
      set_dice3(from.dice3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_dice_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_dice_history::CopyFrom(const gs_msg_dice_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_dice_history::IsInitialized() const {

  return true;
}

void gs_msg_dice_history::Swap(gs_msg_dice_history* other) {
  if (other != this) {
    std::swap(dice1_, other->dice1_);
    std::swap(dice2_, other->dice2_);
    std::swap(dice3_, other->dice3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_dice_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_dice_history_descriptor_;
  metadata.reflection = gs_msg_dice_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_dice_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_dice_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_dice_room_info::gs_msg_dice_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_dice_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_dice_room_info::gs_msg_dice_room_info(const gs_msg_dice_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_dice_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_dice_room_info::~gs_msg_dice_room_info() {
  SharedDtor();
}

void gs_msg_dice_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_dice_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_dice_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_dice_room_info_descriptor_;
}

const gs_msg_dice_room_info& gs_msg_dice_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_dice_room_info* gs_msg_dice_room_info::default_instance_ = NULL;

gs_msg_dice_room_info* gs_msg_dice_room_info::New() const {
  return new gs_msg_dice_room_info;
}

void gs_msg_dice_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_dice_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_dice_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_dice_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_dice_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_dice_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_dice_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_dice_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_dice_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_dice_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_dice_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_dice_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_dice_room_info::MergeFrom(const gs_msg_dice_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_dice_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_dice_room_info::CopyFrom(const gs_msg_dice_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_dice_room_info::IsInitialized() const {

  return true;
}

void gs_msg_dice_room_info::Swap(gs_msg_dice_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_dice_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_dice_room_info_descriptor_;
  metadata.reflection = gs_msg_dice_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_dice_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_dice_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_dice_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_dice_game_history_result::packetgs2c_dice_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_dice_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_dice_game_history_result::packetgs2c_dice_game_history_result(const packetgs2c_dice_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_dice_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31012;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_dice_game_history_result::~packetgs2c_dice_game_history_result() {
  SharedDtor();
}

void packetgs2c_dice_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_dice_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_dice_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_dice_game_history_result_descriptor_;
}

const packetgs2c_dice_game_history_result& packetgs2c_dice_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_dice_game_history_result* packetgs2c_dice_game_history_result::default_instance_ = NULL;

packetgs2c_dice_game_history_result* packetgs2c_dice_game_history_result::New() const {
  return new packetgs2c_dice_game_history_result;
}

void packetgs2c_dice_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31012;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_dice_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_dice_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_dice_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_dice_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_dice_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_dice_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_dice_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_dice_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_dice_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_dice_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_dice_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_dice_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_dice_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_dice_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_dice_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_dice_game_history_result::MergeFrom(const packetgs2c_dice_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_dice_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_dice_game_history_result::CopyFrom(const packetgs2c_dice_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_dice_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_dice_game_history_result::Swap(packetgs2c_dice_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_dice_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_dice_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_dice_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_qznn_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_qznn_room_info::kTotalAwardFieldNumber;
#endif  // !_MSC_VER

gs_msg_qznn_room_info::gs_msg_qznn_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_qznn_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_qznn_room_info::gs_msg_qznn_room_info(const gs_msg_qznn_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_qznn_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  total_award_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_qznn_room_info::~gs_msg_qznn_room_info() {
  SharedDtor();
}

void gs_msg_qznn_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_qznn_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_qznn_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_qznn_room_info_descriptor_;
}

const gs_msg_qznn_room_info& gs_msg_qznn_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_qznn_room_info* gs_msg_qznn_room_info::default_instance_ = NULL;

gs_msg_qznn_room_info* gs_msg_qznn_room_info::New() const {
  return new gs_msg_qznn_room_info;
}

void gs_msg_qznn_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
    total_award_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_qznn_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_award;
        break;
      }

      // optional int64 total_award = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_award_)));
          set_has_total_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_qznn_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // optional int64 total_award = 2;
  if (has_total_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_award(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_qznn_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // optional int64 total_award = 2;
  if (has_total_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_award(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_qznn_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

    // optional int64 total_award = 2;
    if (has_total_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_award());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_qznn_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_qznn_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_qznn_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_qznn_room_info::MergeFrom(const gs_msg_qznn_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
    if (from.has_total_award()) {
      set_total_award(from.total_award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_qznn_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_qznn_room_info::CopyFrom(const gs_msg_qznn_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_qznn_room_info::IsInitialized() const {

  return true;
}

void gs_msg_qznn_room_info::Swap(gs_msg_qznn_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    std::swap(total_award_, other->total_award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_qznn_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_qznn_room_info_descriptor_;
  metadata.reflection = gs_msg_qznn_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_qznn_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_qznn_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_qznn_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_qznn_game_history_result::packetgs2c_qznn_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_qznn_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_qznn_game_history_result::packetgs2c_qznn_game_history_result(const packetgs2c_qznn_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_qznn_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31013;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_qznn_game_history_result::~packetgs2c_qznn_game_history_result() {
  SharedDtor();
}

void packetgs2c_qznn_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_qznn_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_qznn_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_qznn_game_history_result_descriptor_;
}

const packetgs2c_qznn_game_history_result& packetgs2c_qznn_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_qznn_game_history_result* packetgs2c_qznn_game_history_result::default_instance_ = NULL;

packetgs2c_qznn_game_history_result* packetgs2c_qznn_game_history_result::New() const {
  return new packetgs2c_qznn_game_history_result;
}

void packetgs2c_qznn_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31013;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_qznn_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_qznn_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_qznn_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_qznn_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_qznn_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_qznn_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_qznn_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_qznn_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_qznn_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_qznn_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_qznn_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_qznn_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_qznn_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_qznn_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_qznn_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_qznn_game_history_result::MergeFrom(const packetgs2c_qznn_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_qznn_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_qznn_game_history_result::CopyFrom(const packetgs2c_qznn_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_qznn_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_qznn_game_history_result::Swap(packetgs2c_qznn_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_qznn_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_qznn_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_qznn_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_tbnn_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_tbnn_room_info::kTotalAwardFieldNumber;
#endif  // !_MSC_VER

gs_msg_tbnn_room_info::gs_msg_tbnn_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_tbnn_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_tbnn_room_info::gs_msg_tbnn_room_info(const gs_msg_tbnn_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_tbnn_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  total_award_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_tbnn_room_info::~gs_msg_tbnn_room_info() {
  SharedDtor();
}

void gs_msg_tbnn_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_tbnn_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_tbnn_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_tbnn_room_info_descriptor_;
}

const gs_msg_tbnn_room_info& gs_msg_tbnn_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_tbnn_room_info* gs_msg_tbnn_room_info::default_instance_ = NULL;

gs_msg_tbnn_room_info* gs_msg_tbnn_room_info::New() const {
  return new gs_msg_tbnn_room_info;
}

void gs_msg_tbnn_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
    total_award_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_tbnn_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_award;
        break;
      }

      // optional int64 total_award = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_award_)));
          set_has_total_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_tbnn_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // optional int64 total_award = 2;
  if (has_total_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_award(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_tbnn_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // optional int64 total_award = 2;
  if (has_total_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_award(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_tbnn_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

    // optional int64 total_award = 2;
    if (has_total_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_award());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_tbnn_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_tbnn_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_tbnn_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_tbnn_room_info::MergeFrom(const gs_msg_tbnn_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
    if (from.has_total_award()) {
      set_total_award(from.total_award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_tbnn_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_tbnn_room_info::CopyFrom(const gs_msg_tbnn_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_tbnn_room_info::IsInitialized() const {

  return true;
}

void gs_msg_tbnn_room_info::Swap(gs_msg_tbnn_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    std::swap(total_award_, other->total_award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_tbnn_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_tbnn_room_info_descriptor_;
  metadata.reflection = gs_msg_tbnn_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_tbnn_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_tbnn_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_tbnn_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_tbnn_game_history_result::packetgs2c_tbnn_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_tbnn_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_tbnn_game_history_result::packetgs2c_tbnn_game_history_result(const packetgs2c_tbnn_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_tbnn_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31020;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_tbnn_game_history_result::~packetgs2c_tbnn_game_history_result() {
  SharedDtor();
}

void packetgs2c_tbnn_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_tbnn_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_tbnn_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_tbnn_game_history_result_descriptor_;
}

const packetgs2c_tbnn_game_history_result& packetgs2c_tbnn_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_tbnn_game_history_result* packetgs2c_tbnn_game_history_result::default_instance_ = NULL;

packetgs2c_tbnn_game_history_result* packetgs2c_tbnn_game_history_result::New() const {
  return new packetgs2c_tbnn_game_history_result;
}

void packetgs2c_tbnn_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31020;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_tbnn_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_tbnn_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_tbnn_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_tbnn_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_tbnn_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_tbnn_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_tbnn_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_tbnn_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_tbnn_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_tbnn_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_tbnn_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_tbnn_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_tbnn_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_tbnn_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_tbnn_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_tbnn_game_history_result::MergeFrom(const packetgs2c_tbnn_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_tbnn_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_tbnn_game_history_result::CopyFrom(const packetgs2c_tbnn_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_tbnn_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_tbnn_game_history_result::Swap(packetgs2c_tbnn_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_tbnn_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_tbnn_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_tbnn_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_carsmagnate_history::kHistoryValFieldNumber;
#endif  // !_MSC_VER

gs_msg_carsmagnate_history::gs_msg_carsmagnate_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_carsmagnate_history::InitAsDefaultInstance() {
}

gs_msg_carsmagnate_history::gs_msg_carsmagnate_history(const gs_msg_carsmagnate_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_carsmagnate_history::SharedCtor() {
  _cached_size_ = 0;
  history_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_carsmagnate_history::~gs_msg_carsmagnate_history() {
  SharedDtor();
}

void gs_msg_carsmagnate_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_carsmagnate_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_carsmagnate_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_carsmagnate_history_descriptor_;
}

const gs_msg_carsmagnate_history& gs_msg_carsmagnate_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_carsmagnate_history* gs_msg_carsmagnate_history::default_instance_ = NULL;

gs_msg_carsmagnate_history* gs_msg_carsmagnate_history::New() const {
  return new gs_msg_carsmagnate_history;
}

void gs_msg_carsmagnate_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_carsmagnate_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 history_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_val_)));
          set_has_history_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_carsmagnate_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 history_val = 1;
  if (has_history_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->history_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_carsmagnate_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 history_val = 1;
  if (has_history_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->history_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_carsmagnate_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 history_val = 1;
    if (has_history_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_carsmagnate_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_carsmagnate_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_carsmagnate_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_carsmagnate_history::MergeFrom(const gs_msg_carsmagnate_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_val()) {
      set_history_val(from.history_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_carsmagnate_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_carsmagnate_history::CopyFrom(const gs_msg_carsmagnate_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_carsmagnate_history::IsInitialized() const {

  return true;
}

void gs_msg_carsmagnate_history::Swap(gs_msg_carsmagnate_history* other) {
  if (other != this) {
    std::swap(history_val_, other->history_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_carsmagnate_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_carsmagnate_history_descriptor_;
  metadata.reflection = gs_msg_carsmagnate_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_carsmagnate_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_carsmagnate_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_carsmagnate_room_info::gs_msg_carsmagnate_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_carsmagnate_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_carsmagnate_room_info::gs_msg_carsmagnate_room_info(const gs_msg_carsmagnate_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_carsmagnate_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_carsmagnate_room_info::~gs_msg_carsmagnate_room_info() {
  SharedDtor();
}

void gs_msg_carsmagnate_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_carsmagnate_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_carsmagnate_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_carsmagnate_room_info_descriptor_;
}

const gs_msg_carsmagnate_room_info& gs_msg_carsmagnate_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_carsmagnate_room_info* gs_msg_carsmagnate_room_info::default_instance_ = NULL;

gs_msg_carsmagnate_room_info* gs_msg_carsmagnate_room_info::New() const {
  return new gs_msg_carsmagnate_room_info;
}

void gs_msg_carsmagnate_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_carsmagnate_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_carsmagnate_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_carsmagnate_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_carsmagnate_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_carsmagnate_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_carsmagnate_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_carsmagnate_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_carsmagnate_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_carsmagnate_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_carsmagnate_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_carsmagnate_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_carsmagnate_room_info::MergeFrom(const gs_msg_carsmagnate_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_carsmagnate_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_carsmagnate_room_info::CopyFrom(const gs_msg_carsmagnate_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_carsmagnate_room_info::IsInitialized() const {

  return true;
}

void gs_msg_carsmagnate_room_info::Swap(gs_msg_carsmagnate_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_carsmagnate_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_carsmagnate_room_info_descriptor_;
  metadata.reflection = gs_msg_carsmagnate_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_carsmagnate_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_carsmagnate_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_carsmagnate_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_carsmagnate_game_history_result::packetgs2c_carsmagnate_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_carsmagnate_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_carsmagnate_game_history_result::packetgs2c_carsmagnate_game_history_result(const packetgs2c_carsmagnate_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_carsmagnate_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31014;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_carsmagnate_game_history_result::~packetgs2c_carsmagnate_game_history_result() {
  SharedDtor();
}

void packetgs2c_carsmagnate_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_carsmagnate_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_carsmagnate_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_carsmagnate_game_history_result_descriptor_;
}

const packetgs2c_carsmagnate_game_history_result& packetgs2c_carsmagnate_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_carsmagnate_game_history_result* packetgs2c_carsmagnate_game_history_result::default_instance_ = NULL;

packetgs2c_carsmagnate_game_history_result* packetgs2c_carsmagnate_game_history_result::New() const {
  return new packetgs2c_carsmagnate_game_history_result;
}

void packetgs2c_carsmagnate_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31014;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_carsmagnate_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_carsmagnate_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_carsmagnate_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_carsmagnate_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_carsmagnate_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_carsmagnate_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_carsmagnate_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_carsmagnate_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_carsmagnate_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_carsmagnate_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_carsmagnate_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_carsmagnate_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_carsmagnate_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_carsmagnate_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_carsmagnate_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_carsmagnate_game_history_result::MergeFrom(const packetgs2c_carsmagnate_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_carsmagnate_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_carsmagnate_game_history_result::CopyFrom(const packetgs2c_carsmagnate_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_carsmagnate_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_carsmagnate_game_history_result::Swap(packetgs2c_carsmagnate_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_carsmagnate_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_carsmagnate_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_carsmagnate_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_multitexas_history::kWinFieldNumber;
#endif  // !_MSC_VER

gs_msg_multitexas_history::gs_msg_multitexas_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_multitexas_history::InitAsDefaultInstance() {
}

gs_msg_multitexas_history::gs_msg_multitexas_history(const gs_msg_multitexas_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_multitexas_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_multitexas_history::~gs_msg_multitexas_history() {
  SharedDtor();
}

void gs_msg_multitexas_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_multitexas_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_multitexas_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_multitexas_history_descriptor_;
}

const gs_msg_multitexas_history& gs_msg_multitexas_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_multitexas_history* gs_msg_multitexas_history::default_instance_ = NULL;

gs_msg_multitexas_history* gs_msg_multitexas_history::New() const {
  return new gs_msg_multitexas_history;
}

void gs_msg_multitexas_history::Clear() {
  win_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_multitexas_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_win())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_win;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_multitexas_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 win = 1;
  for (int i = 0; i < this->win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->win(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_multitexas_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 win = 1;
  for (int i = 0; i < this->win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->win(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_multitexas_history::ByteSize() const {
  int total_size = 0;

  // repeated int32 win = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win(i));
    }
    total_size += 1 * this->win_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_multitexas_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_multitexas_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_multitexas_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_multitexas_history::MergeFrom(const gs_msg_multitexas_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_.MergeFrom(from.win_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_multitexas_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_multitexas_history::CopyFrom(const gs_msg_multitexas_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_multitexas_history::IsInitialized() const {

  return true;
}

void gs_msg_multitexas_history::Swap(gs_msg_multitexas_history* other) {
  if (other != this) {
    win_.Swap(&other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_multitexas_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_multitexas_history_descriptor_;
  metadata.reflection = gs_msg_multitexas_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_multitexas_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_multitexas_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_multitexas_room_info::gs_msg_multitexas_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_multitexas_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_multitexas_room_info::gs_msg_multitexas_room_info(const gs_msg_multitexas_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_multitexas_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_multitexas_room_info::~gs_msg_multitexas_room_info() {
  SharedDtor();
}

void gs_msg_multitexas_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_multitexas_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_multitexas_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_multitexas_room_info_descriptor_;
}

const gs_msg_multitexas_room_info& gs_msg_multitexas_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_multitexas_room_info* gs_msg_multitexas_room_info::default_instance_ = NULL;

gs_msg_multitexas_room_info* gs_msg_multitexas_room_info::New() const {
  return new gs_msg_multitexas_room_info;
}

void gs_msg_multitexas_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_multitexas_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_multitexas_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_multitexas_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_multitexas_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_multitexas_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_multitexas_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_multitexas_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_multitexas_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_multitexas_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_multitexas_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_multitexas_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_multitexas_room_info::MergeFrom(const gs_msg_multitexas_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_multitexas_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_multitexas_room_info::CopyFrom(const gs_msg_multitexas_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_multitexas_room_info::IsInitialized() const {

  return true;
}

void gs_msg_multitexas_room_info::Swap(gs_msg_multitexas_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_multitexas_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_multitexas_room_info_descriptor_;
  metadata.reflection = gs_msg_multitexas_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_multitexas_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_multitexas_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_multitexas_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_multitexas_game_history_result::packetgs2c_multitexas_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_multitexas_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_multitexas_game_history_result::packetgs2c_multitexas_game_history_result(const packetgs2c_multitexas_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_multitexas_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31015;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_multitexas_game_history_result::~packetgs2c_multitexas_game_history_result() {
  SharedDtor();
}

void packetgs2c_multitexas_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_multitexas_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_multitexas_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_multitexas_game_history_result_descriptor_;
}

const packetgs2c_multitexas_game_history_result& packetgs2c_multitexas_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_multitexas_game_history_result* packetgs2c_multitexas_game_history_result::default_instance_ = NULL;

packetgs2c_multitexas_game_history_result* packetgs2c_multitexas_game_history_result::New() const {
  return new packetgs2c_multitexas_game_history_result;
}

void packetgs2c_multitexas_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31015;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_multitexas_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multitexas_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_multitexas_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_multitexas_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multitexas_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_multitexas_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_multitexas_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multitexas_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_multitexas_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_multitexas_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_multitexas_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_multitexas_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_multitexas_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_multitexas_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_multitexas_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_multitexas_game_history_result::MergeFrom(const packetgs2c_multitexas_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_multitexas_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_multitexas_game_history_result::CopyFrom(const packetgs2c_multitexas_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_multitexas_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_multitexas_game_history_result::Swap(packetgs2c_multitexas_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_multitexas_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_multitexas_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_multitexas_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_fruits_history::kHistoryValFieldNumber;
#endif  // !_MSC_VER

gs_msg_fruits_history::gs_msg_fruits_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_fruits_history::InitAsDefaultInstance() {
}

gs_msg_fruits_history::gs_msg_fruits_history(const gs_msg_fruits_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_fruits_history::SharedCtor() {
  _cached_size_ = 0;
  history_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_fruits_history::~gs_msg_fruits_history() {
  SharedDtor();
}

void gs_msg_fruits_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_fruits_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_fruits_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_fruits_history_descriptor_;
}

const gs_msg_fruits_history& gs_msg_fruits_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_fruits_history* gs_msg_fruits_history::default_instance_ = NULL;

gs_msg_fruits_history* gs_msg_fruits_history::New() const {
  return new gs_msg_fruits_history;
}

void gs_msg_fruits_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_fruits_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 history_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_val_)));
          set_has_history_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_fruits_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 history_val = 1;
  if (has_history_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->history_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_fruits_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 history_val = 1;
  if (has_history_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->history_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_fruits_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 history_val = 1;
    if (has_history_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_fruits_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_fruits_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_fruits_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_fruits_history::MergeFrom(const gs_msg_fruits_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_val()) {
      set_history_val(from.history_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_fruits_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_fruits_history::CopyFrom(const gs_msg_fruits_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_fruits_history::IsInitialized() const {

  return true;
}

void gs_msg_fruits_history::Swap(gs_msg_fruits_history* other) {
  if (other != this) {
    std::swap(history_val_, other->history_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_fruits_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_fruits_history_descriptor_;
  metadata.reflection = gs_msg_fruits_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_fruits_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_fruits_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_fruits_room_info::gs_msg_fruits_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_fruits_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_fruits_room_info::gs_msg_fruits_room_info(const gs_msg_fruits_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_fruits_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_fruits_room_info::~gs_msg_fruits_room_info() {
  SharedDtor();
}

void gs_msg_fruits_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_fruits_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_fruits_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_fruits_room_info_descriptor_;
}

const gs_msg_fruits_room_info& gs_msg_fruits_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_fruits_room_info* gs_msg_fruits_room_info::default_instance_ = NULL;

gs_msg_fruits_room_info* gs_msg_fruits_room_info::New() const {
  return new gs_msg_fruits_room_info;
}

void gs_msg_fruits_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_fruits_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_fruits_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_fruits_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_fruits_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_fruits_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_fruits_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_fruits_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_fruits_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_fruits_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_fruits_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_fruits_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_fruits_room_info::MergeFrom(const gs_msg_fruits_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_fruits_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_fruits_room_info::CopyFrom(const gs_msg_fruits_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_fruits_room_info::IsInitialized() const {

  return true;
}

void gs_msg_fruits_room_info::Swap(gs_msg_fruits_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_fruits_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_fruits_room_info_descriptor_;
  metadata.reflection = gs_msg_fruits_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_fruits_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_fruits_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_fruits_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_fruits_game_history_result::packetgs2c_fruits_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_fruits_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_fruits_game_history_result::packetgs2c_fruits_game_history_result(const packetgs2c_fruits_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_fruits_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31016;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_fruits_game_history_result::~packetgs2c_fruits_game_history_result() {
  SharedDtor();
}

void packetgs2c_fruits_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_fruits_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_fruits_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_fruits_game_history_result_descriptor_;
}

const packetgs2c_fruits_game_history_result& packetgs2c_fruits_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_fruits_game_history_result* packetgs2c_fruits_game_history_result::default_instance_ = NULL;

packetgs2c_fruits_game_history_result* packetgs2c_fruits_game_history_result::New() const {
  return new packetgs2c_fruits_game_history_result;
}

void packetgs2c_fruits_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31016;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_fruits_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fruits_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_fruits_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_fruits_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fruits_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_fruits_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_fruits_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fruits_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_fruits_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_fruits_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fruits_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_fruits_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_fruits_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_fruits_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_fruits_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_fruits_game_history_result::MergeFrom(const packetgs2c_fruits_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_fruits_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_fruits_game_history_result::CopyFrom(const packetgs2c_fruits_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_fruits_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_fruits_game_history_result::Swap(packetgs2c_fruits_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_fruits_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_fruits_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_fruits_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_forest_history::kHistoryValFieldNumber;
#endif  // !_MSC_VER

gs_msg_forest_history::gs_msg_forest_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_forest_history::InitAsDefaultInstance() {
}

gs_msg_forest_history::gs_msg_forest_history(const gs_msg_forest_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_forest_history::SharedCtor() {
  _cached_size_ = 0;
  history_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_forest_history::~gs_msg_forest_history() {
  SharedDtor();
}

void gs_msg_forest_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_forest_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_forest_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_forest_history_descriptor_;
}

const gs_msg_forest_history& gs_msg_forest_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_forest_history* gs_msg_forest_history::default_instance_ = NULL;

gs_msg_forest_history* gs_msg_forest_history::New() const {
  return new gs_msg_forest_history;
}

void gs_msg_forest_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_forest_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 history_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_val_)));
          set_has_history_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_forest_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 history_val = 1;
  if (has_history_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->history_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_forest_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 history_val = 1;
  if (has_history_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->history_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_forest_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 history_val = 1;
    if (has_history_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_forest_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_forest_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_forest_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_forest_history::MergeFrom(const gs_msg_forest_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_val()) {
      set_history_val(from.history_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_forest_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_forest_history::CopyFrom(const gs_msg_forest_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_forest_history::IsInitialized() const {

  return true;
}

void gs_msg_forest_history::Swap(gs_msg_forest_history* other) {
  if (other != this) {
    std::swap(history_val_, other->history_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_forest_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_forest_history_descriptor_;
  metadata.reflection = gs_msg_forest_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_forest_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_forest_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_forest_room_info::gs_msg_forest_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_forest_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_forest_room_info::gs_msg_forest_room_info(const gs_msg_forest_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_forest_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_forest_room_info::~gs_msg_forest_room_info() {
  SharedDtor();
}

void gs_msg_forest_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_forest_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_forest_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_forest_room_info_descriptor_;
}

const gs_msg_forest_room_info& gs_msg_forest_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_forest_room_info* gs_msg_forest_room_info::default_instance_ = NULL;

gs_msg_forest_room_info* gs_msg_forest_room_info::New() const {
  return new gs_msg_forest_room_info;
}

void gs_msg_forest_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_forest_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_forest_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_forest_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_forest_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_forest_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_forest_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_forest_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_forest_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_forest_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_forest_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_forest_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_forest_room_info::MergeFrom(const gs_msg_forest_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_forest_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_forest_room_info::CopyFrom(const gs_msg_forest_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_forest_room_info::IsInitialized() const {

  return true;
}

void gs_msg_forest_room_info::Swap(gs_msg_forest_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_forest_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_forest_room_info_descriptor_;
  metadata.reflection = gs_msg_forest_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_forest_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_forest_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_forest_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_forest_game_history_result::packetgs2c_forest_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_forest_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_forest_game_history_result::packetgs2c_forest_game_history_result(const packetgs2c_forest_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_forest_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31017;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_forest_game_history_result::~packetgs2c_forest_game_history_result() {
  SharedDtor();
}

void packetgs2c_forest_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_forest_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_forest_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_forest_game_history_result_descriptor_;
}

const packetgs2c_forest_game_history_result& packetgs2c_forest_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_forest_game_history_result* packetgs2c_forest_game_history_result::default_instance_ = NULL;

packetgs2c_forest_game_history_result* packetgs2c_forest_game_history_result::New() const {
  return new packetgs2c_forest_game_history_result;
}

void packetgs2c_forest_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31017;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_forest_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_forest_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_forest_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_forest_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_forest_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_forest_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_forest_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_forest_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_forest_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_forest_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_forest_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_forest_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_forest_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_forest_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_forest_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_forest_game_history_result::MergeFrom(const packetgs2c_forest_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_forest_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_forest_game_history_result::CopyFrom(const packetgs2c_forest_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_forest_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_forest_game_history_result::Swap(packetgs2c_forest_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_forest_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_forest_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_forest_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_fourcolorball_history::kHistoryValFieldNumber;
#endif  // !_MSC_VER

gs_msg_fourcolorball_history::gs_msg_fourcolorball_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_fourcolorball_history::InitAsDefaultInstance() {
}

gs_msg_fourcolorball_history::gs_msg_fourcolorball_history(const gs_msg_fourcolorball_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_fourcolorball_history::SharedCtor() {
  _cached_size_ = 0;
  history_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_fourcolorball_history::~gs_msg_fourcolorball_history() {
  SharedDtor();
}

void gs_msg_fourcolorball_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_fourcolorball_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_fourcolorball_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_fourcolorball_history_descriptor_;
}

const gs_msg_fourcolorball_history& gs_msg_fourcolorball_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_fourcolorball_history* gs_msg_fourcolorball_history::default_instance_ = NULL;

gs_msg_fourcolorball_history* gs_msg_fourcolorball_history::New() const {
  return new gs_msg_fourcolorball_history;
}

void gs_msg_fourcolorball_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    history_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_fourcolorball_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 history_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_val_)));
          set_has_history_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_fourcolorball_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 history_val = 1;
  if (has_history_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->history_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_fourcolorball_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 history_val = 1;
  if (has_history_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->history_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_fourcolorball_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 history_val = 1;
    if (has_history_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_fourcolorball_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_fourcolorball_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_fourcolorball_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_fourcolorball_history::MergeFrom(const gs_msg_fourcolorball_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_history_val()) {
      set_history_val(from.history_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_fourcolorball_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_fourcolorball_history::CopyFrom(const gs_msg_fourcolorball_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_fourcolorball_history::IsInitialized() const {

  return true;
}

void gs_msg_fourcolorball_history::Swap(gs_msg_fourcolorball_history* other) {
  if (other != this) {
    std::swap(history_val_, other->history_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_fourcolorball_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_fourcolorball_history_descriptor_;
  metadata.reflection = gs_msg_fourcolorball_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_fourcolorball_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_fourcolorball_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_fourcolorball_room_info::gs_msg_fourcolorball_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_fourcolorball_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_fourcolorball_room_info::gs_msg_fourcolorball_room_info(const gs_msg_fourcolorball_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_fourcolorball_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_fourcolorball_room_info::~gs_msg_fourcolorball_room_info() {
  SharedDtor();
}

void gs_msg_fourcolorball_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_fourcolorball_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_fourcolorball_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_fourcolorball_room_info_descriptor_;
}

const gs_msg_fourcolorball_room_info& gs_msg_fourcolorball_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_fourcolorball_room_info* gs_msg_fourcolorball_room_info::default_instance_ = NULL;

gs_msg_fourcolorball_room_info* gs_msg_fourcolorball_room_info::New() const {
  return new gs_msg_fourcolorball_room_info;
}

void gs_msg_fourcolorball_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_fourcolorball_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_fourcolorball_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_fourcolorball_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_fourcolorball_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_fourcolorball_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_fourcolorball_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_fourcolorball_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_fourcolorball_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_fourcolorball_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_fourcolorball_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_fourcolorball_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_fourcolorball_room_info::MergeFrom(const gs_msg_fourcolorball_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_fourcolorball_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_fourcolorball_room_info::CopyFrom(const gs_msg_fourcolorball_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_fourcolorball_room_info::IsInitialized() const {

  return true;
}

void gs_msg_fourcolorball_room_info::Swap(gs_msg_fourcolorball_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_fourcolorball_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_fourcolorball_room_info_descriptor_;
  metadata.reflection = gs_msg_fourcolorball_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_fourcolorball_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_fourcolorball_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_fourcolorball_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_fourcolorball_game_history_result::packetgs2c_fourcolorball_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_fourcolorball_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_fourcolorball_game_history_result::packetgs2c_fourcolorball_game_history_result(const packetgs2c_fourcolorball_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_fourcolorball_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31018;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_fourcolorball_game_history_result::~packetgs2c_fourcolorball_game_history_result() {
  SharedDtor();
}

void packetgs2c_fourcolorball_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_fourcolorball_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_fourcolorball_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_fourcolorball_game_history_result_descriptor_;
}

const packetgs2c_fourcolorball_game_history_result& packetgs2c_fourcolorball_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_fourcolorball_game_history_result* packetgs2c_fourcolorball_game_history_result::default_instance_ = NULL;

packetgs2c_fourcolorball_game_history_result* packetgs2c_fourcolorball_game_history_result::New() const {
  return new packetgs2c_fourcolorball_game_history_result;
}

void packetgs2c_fourcolorball_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31018;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_fourcolorball_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fourcolorball_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_fourcolorball_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_fourcolorball_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fourcolorball_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_fourcolorball_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_fourcolorball_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fourcolorball_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_fourcolorball_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_fourcolorball_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_fourcolorball_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_fourcolorball_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_fourcolorball_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_fourcolorball_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_fourcolorball_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_fourcolorball_game_history_result::MergeFrom(const packetgs2c_fourcolorball_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_fourcolorball_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_fourcolorball_game_history_result::CopyFrom(const packetgs2c_fourcolorball_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_fourcolorball_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_fourcolorball_game_history_result::Swap(packetgs2c_fourcolorball_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_fourcolorball_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_fourcolorball_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_fourcolorball_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_happySupremacy_history::kIsForwardWinFieldNumber;
const int gs_msg_happySupremacy_history::kIsReverseWinFieldNumber;
const int gs_msg_happySupremacy_history::kIsOppositeWinFieldNumber;
const int gs_msg_happySupremacy_history::kCardsFieldNumber;
const int gs_msg_happySupremacy_history::kCardsTypeFieldNumber;
#endif  // !_MSC_VER

gs_msg_happySupremacy_history::gs_msg_happySupremacy_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_happySupremacy_history::InitAsDefaultInstance() {
}

gs_msg_happySupremacy_history::gs_msg_happySupremacy_history(const gs_msg_happySupremacy_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_happySupremacy_history::SharedCtor() {
  _cached_size_ = 0;
  is_forward_win_ = false;
  is_reverse_win_ = false;
  is_opposite_win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_happySupremacy_history::~gs_msg_happySupremacy_history() {
  SharedDtor();
}

void gs_msg_happySupremacy_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_happySupremacy_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_happySupremacy_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_happySupremacy_history_descriptor_;
}

const gs_msg_happySupremacy_history& gs_msg_happySupremacy_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_happySupremacy_history* gs_msg_happySupremacy_history::default_instance_ = NULL;

gs_msg_happySupremacy_history* gs_msg_happySupremacy_history::New() const {
  return new gs_msg_happySupremacy_history;
}

void gs_msg_happySupremacy_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_forward_win_ = false;
    is_reverse_win_ = false;
    is_opposite_win_ = false;
  }
  cards_.Clear();
  cards_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_happySupremacy_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_forward_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_forward_win_)));
          set_has_is_forward_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_reverse_win;
        break;
      }

      // optional bool is_reverse_win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reverse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reverse_win_)));
          set_has_is_reverse_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_opposite_win;
        break;
      }

      // optional bool is_opposite_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_opposite_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_opposite_win_)));
          set_has_is_opposite_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cards;
        if (input->ExpectTag(40)) goto parse_cards_type;
        break;
      }

      // repeated int32 cards_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_cards_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cards_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_happySupremacy_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_forward_win = 1;
  if (has_is_forward_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_forward_win(), output);
  }

  // optional bool is_reverse_win = 2;
  if (has_is_reverse_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_reverse_win(), output);
  }

  // optional bool is_opposite_win = 3;
  if (has_is_opposite_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_opposite_win(), output);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards(i), output);
  }

  // repeated int32 cards_type = 5;
  for (int i = 0; i < this->cards_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->cards_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_happySupremacy_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_forward_win = 1;
  if (has_is_forward_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_forward_win(), target);
  }

  // optional bool is_reverse_win = 2;
  if (has_is_reverse_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_reverse_win(), target);
  }

  // optional bool is_opposite_win = 3;
  if (has_is_opposite_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_opposite_win(), target);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cards(i), target);
  }

  // repeated int32 cards_type = 5;
  for (int i = 0; i < this->cards_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->cards_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_happySupremacy_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_forward_win = 1;
    if (has_is_forward_win()) {
      total_size += 1 + 1;
    }

    // optional bool is_reverse_win = 2;
    if (has_is_reverse_win()) {
      total_size += 1 + 1;
    }

    // optional bool is_opposite_win = 3;
    if (has_is_opposite_win()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 cards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated int32 cards_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_type(i));
    }
    total_size += 1 * this->cards_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_happySupremacy_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_happySupremacy_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_happySupremacy_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_happySupremacy_history::MergeFrom(const gs_msg_happySupremacy_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  cards_type_.MergeFrom(from.cards_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_forward_win()) {
      set_is_forward_win(from.is_forward_win());
    }
    if (from.has_is_reverse_win()) {
      set_is_reverse_win(from.is_reverse_win());
    }
    if (from.has_is_opposite_win()) {
      set_is_opposite_win(from.is_opposite_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_happySupremacy_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_happySupremacy_history::CopyFrom(const gs_msg_happySupremacy_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_happySupremacy_history::IsInitialized() const {

  return true;
}

void gs_msg_happySupremacy_history::Swap(gs_msg_happySupremacy_history* other) {
  if (other != this) {
    std::swap(is_forward_win_, other->is_forward_win_);
    std::swap(is_reverse_win_, other->is_reverse_win_);
    std::swap(is_opposite_win_, other->is_opposite_win_);
    cards_.Swap(&other->cards_);
    cards_type_.Swap(&other->cards_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_happySupremacy_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_happySupremacy_history_descriptor_;
  metadata.reflection = gs_msg_happySupremacy_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_happySupremacy_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_happySupremacy_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_happySupremacy_room_info::gs_msg_happySupremacy_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_happySupremacy_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_happySupremacy_room_info::gs_msg_happySupremacy_room_info(const gs_msg_happySupremacy_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_happySupremacy_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_happySupremacy_room_info::~gs_msg_happySupremacy_room_info() {
  SharedDtor();
}

void gs_msg_happySupremacy_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_happySupremacy_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_happySupremacy_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_happySupremacy_room_info_descriptor_;
}

const gs_msg_happySupremacy_room_info& gs_msg_happySupremacy_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_happySupremacy_room_info* gs_msg_happySupremacy_room_info::default_instance_ = NULL;

gs_msg_happySupremacy_room_info* gs_msg_happySupremacy_room_info::New() const {
  return new gs_msg_happySupremacy_room_info;
}

void gs_msg_happySupremacy_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_happySupremacy_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_happySupremacy_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_happySupremacy_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_happySupremacy_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_happySupremacy_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_happySupremacy_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_happySupremacy_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_happySupremacy_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_happySupremacy_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_happySupremacy_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_happySupremacy_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_happySupremacy_room_info::MergeFrom(const gs_msg_happySupremacy_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_happySupremacy_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_happySupremacy_room_info::CopyFrom(const gs_msg_happySupremacy_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_happySupremacy_room_info::IsInitialized() const {

  return true;
}

void gs_msg_happySupremacy_room_info::Swap(gs_msg_happySupremacy_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_happySupremacy_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_happySupremacy_room_info_descriptor_;
  metadata.reflection = gs_msg_happySupremacy_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_happySupremacy_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_happySupremacy_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_happySupremacy_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_happySupremacy_game_history_result::packetgs2c_happySupremacy_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_happySupremacy_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_happySupremacy_game_history_result::packetgs2c_happySupremacy_game_history_result(const packetgs2c_happySupremacy_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_happySupremacy_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31019;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_happySupremacy_game_history_result::~packetgs2c_happySupremacy_game_history_result() {
  SharedDtor();
}

void packetgs2c_happySupremacy_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_happySupremacy_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_happySupremacy_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_happySupremacy_game_history_result_descriptor_;
}

const packetgs2c_happySupremacy_game_history_result& packetgs2c_happySupremacy_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_happySupremacy_game_history_result* packetgs2c_happySupremacy_game_history_result::default_instance_ = NULL;

packetgs2c_happySupremacy_game_history_result* packetgs2c_happySupremacy_game_history_result::New() const {
  return new packetgs2c_happySupremacy_game_history_result;
}

void packetgs2c_happySupremacy_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31019;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_happySupremacy_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_happySupremacy_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_happySupremacy_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_happySupremacy_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_happySupremacy_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_happySupremacy_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_happySupremacy_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_happySupremacy_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_happySupremacy_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_happySupremacy_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_happySupremacy_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_happySupremacy_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_happySupremacy_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_happySupremacy_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_happySupremacy_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_happySupremacy_game_history_result::MergeFrom(const packetgs2c_happySupremacy_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_happySupremacy_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_happySupremacy_game_history_result::CopyFrom(const packetgs2c_happySupremacy_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_happySupremacy_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_happySupremacy_game_history_result::Swap(packetgs2c_happySupremacy_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_happySupremacy_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_happySupremacy_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_happySupremacy_game_history_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_ttz_history::kCardidFieldNumber;
#endif  // !_MSC_VER

gs_msg_ttz_history::gs_msg_ttz_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_ttz_history::InitAsDefaultInstance() {
}

gs_msg_ttz_history::gs_msg_ttz_history(const gs_msg_ttz_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_ttz_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_ttz_history::~gs_msg_ttz_history() {
  SharedDtor();
}

void gs_msg_ttz_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_msg_ttz_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_ttz_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_ttz_history_descriptor_;
}

const gs_msg_ttz_history& gs_msg_ttz_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_ttz_history* gs_msg_ttz_history::default_instance_ = NULL;

gs_msg_ttz_history* gs_msg_ttz_history::New() const {
  return new gs_msg_ttz_history;
}

void gs_msg_ttz_history::Clear() {
  cardid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_ttz_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cardid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cardid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_ttz_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 cardid = 1;
  for (int i = 0; i < this->cardid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cardid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_ttz_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 cardid = 1;
  for (int i = 0; i < this->cardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cardid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_ttz_history::ByteSize() const {
  int total_size = 0;

  // repeated int32 cardid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardid(i));
    }
    total_size += 1 * this->cardid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_ttz_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_ttz_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_ttz_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_ttz_history::MergeFrom(const gs_msg_ttz_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardid_.MergeFrom(from.cardid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_ttz_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_ttz_history::CopyFrom(const gs_msg_ttz_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_ttz_history::IsInitialized() const {

  return true;
}

void gs_msg_ttz_history::Swap(gs_msg_ttz_history* other) {
  if (other != this) {
    cardid_.Swap(&other->cardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_ttz_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_ttz_history_descriptor_;
  metadata.reflection = gs_msg_ttz_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_msg_ttz_room_info::kBaseRoomInfoFieldNumber;
const int gs_msg_ttz_room_info::kCardRoadInfoFieldNumber;
#endif  // !_MSC_VER

gs_msg_ttz_room_info::gs_msg_ttz_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_msg_ttz_room_info::InitAsDefaultInstance() {
  base_room_info_ = const_cast< ::client2gstate_protocols::gs_base_room_info*>(&::client2gstate_protocols::gs_base_room_info::default_instance());
}

gs_msg_ttz_room_info::gs_msg_ttz_room_info(const gs_msg_ttz_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_msg_ttz_room_info::SharedCtor() {
  _cached_size_ = 0;
  base_room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_msg_ttz_room_info::~gs_msg_ttz_room_info() {
  SharedDtor();
}

void gs_msg_ttz_room_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_room_info_;
  }
}

void gs_msg_ttz_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_msg_ttz_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_msg_ttz_room_info_descriptor_;
}

const gs_msg_ttz_room_info& gs_msg_ttz_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

gs_msg_ttz_room_info* gs_msg_ttz_room_info::default_instance_ = NULL;

gs_msg_ttz_room_info* gs_msg_ttz_room_info::New() const {
  return new gs_msg_ttz_room_info;
}

void gs_msg_ttz_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_room_info()) {
      if (base_room_info_ != NULL) base_room_info_->::client2gstate_protocols::gs_base_room_info::Clear();
    }
  }
  card_road_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_msg_ttz_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_ttz_history card_road_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_road_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_road_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_road_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_msg_ttz_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_room_info(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_ttz_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_road_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_msg_ttz_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
  if (has_base_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_room_info(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_ttz_history card_road_info = 2;
  for (int i = 0; i < this->card_road_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_road_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_msg_ttz_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.gs_base_room_info base_room_info = 1;
    if (has_base_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_room_info());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_ttz_history card_road_info = 2;
  total_size += 1 * this->card_road_info_size();
  for (int i = 0; i < this->card_road_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_road_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_msg_ttz_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_msg_ttz_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_msg_ttz_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_msg_ttz_room_info::MergeFrom(const gs_msg_ttz_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_road_info_.MergeFrom(from.card_road_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_room_info()) {
      mutable_base_room_info()->::client2gstate_protocols::gs_base_room_info::MergeFrom(from.base_room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_msg_ttz_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_msg_ttz_room_info::CopyFrom(const gs_msg_ttz_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_msg_ttz_room_info::IsInitialized() const {

  return true;
}

void gs_msg_ttz_room_info::Swap(gs_msg_ttz_room_info* other) {
  if (other != this) {
    std::swap(base_room_info_, other->base_room_info_);
    card_road_info_.Swap(&other->card_road_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_msg_ttz_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_msg_ttz_room_info_descriptor_;
  metadata.reflection = gs_msg_ttz_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetgs2c_ttz_game_history_result::kPacketIdFieldNumber;
const int packetgs2c_ttz_game_history_result::kAllDataFlagFieldNumber;
const int packetgs2c_ttz_game_history_result::kRoomHistoryFieldNumber;
#endif  // !_MSC_VER

packetgs2c_ttz_game_history_result::packetgs2c_ttz_game_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetgs2c_ttz_game_history_result::InitAsDefaultInstance() {
}

packetgs2c_ttz_game_history_result::packetgs2c_ttz_game_history_result(const packetgs2c_ttz_game_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetgs2c_ttz_game_history_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 31021;
  all_data_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetgs2c_ttz_game_history_result::~packetgs2c_ttz_game_history_result() {
  SharedDtor();
}

void packetgs2c_ttz_game_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetgs2c_ttz_game_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetgs2c_ttz_game_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetgs2c_ttz_game_history_result_descriptor_;
}

const packetgs2c_ttz_game_history_result& packetgs2c_ttz_game_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2gstate_5fprotocol_2eproto();
  return *default_instance_;
}

packetgs2c_ttz_game_history_result* packetgs2c_ttz_game_history_result::default_instance_ = NULL;

packetgs2c_ttz_game_history_result* packetgs2c_ttz_game_history_result::New() const {
  return new packetgs2c_ttz_game_history_result;
}

void packetgs2c_ttz_game_history_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 31021;
    all_data_flag_ = 0;
  }
  room_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetgs2c_ttz_game_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ttz_history_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2gstate_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2gstate_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_data_flag;
        break;
      }

      // optional int32 all_data_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_data_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_data_flag_)));
          set_has_all_data_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        break;
      }

      // repeated .client2gstate_protocols.gs_msg_ttz_room_info room_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetgs2c_ttz_game_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ttz_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_data_flag(), output);
  }

  // repeated .client2gstate_protocols.gs_msg_ttz_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetgs2c_ttz_game_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ttz_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 all_data_flag = 2;
  if (has_all_data_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_data_flag(), target);
  }

  // repeated .client2gstate_protocols.gs_msg_ttz_room_info room_history = 3;
  for (int i = 0; i < this->room_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetgs2c_ttz_game_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2gstate_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gs2c_ttz_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 all_data_flag = 2;
    if (has_all_data_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_data_flag());
    }

  }
  // repeated .client2gstate_protocols.gs_msg_ttz_room_info room_history = 3;
  total_size += 1 * this->room_history_size();
  for (int i = 0; i < this->room_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetgs2c_ttz_game_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetgs2c_ttz_game_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetgs2c_ttz_game_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetgs2c_ttz_game_history_result::MergeFrom(const packetgs2c_ttz_game_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_history_.MergeFrom(from.room_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_all_data_flag()) {
      set_all_data_flag(from.all_data_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetgs2c_ttz_game_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetgs2c_ttz_game_history_result::CopyFrom(const packetgs2c_ttz_game_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetgs2c_ttz_game_history_result::IsInitialized() const {

  return true;
}

void packetgs2c_ttz_game_history_result::Swap(packetgs2c_ttz_game_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(all_data_flag_, other->all_data_flag_);
    room_history_.Swap(&other->room_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetgs2c_ttz_game_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetgs2c_ttz_game_history_result_descriptor_;
  metadata.reflection = packetgs2c_ttz_game_history_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2gstate_protocols

// @@protoc_insertion_point(global_scope)
