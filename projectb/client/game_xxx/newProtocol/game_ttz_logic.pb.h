// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_ttz_logic.proto

#ifndef PROTOBUF_game_5fttz_5flogic_2eproto__INCLUDED
#define PROTOBUF_game_5fttz_5flogic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_ttz_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_ttz_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

class packetc2l_get_scene_info;
class msg_player_info;
class msg_bet_info;
class msg_result_info;
class msg_scene_info;
class packetl2c_get_scene_info_result;
class packetc2l_ask_bet_info;
class packetl2c_bet_info_result;
class packetc2l_ask_continue_bet;
class packetl2c_continue_bet_result;
class packetc2l_ask_clear_bet;
class packetl2c_clear_bet_result;
class packetc2l_ask_playerlist;
class packetl2c_playerlist_result;
class packetc2l_ask_history_info;
class packetl2c_history_info;
class packetl2c_bc_scene_prepare_into;
class packetl2c_bc_scene_bet_into;
class packetl2c_bc_sync_scene_bet_into;
class packetl2c_bc_scene_deal_into;
class msg_player_award;
class packetl2c_bc_scene_result_into;
class packetl2c_debug;
class packetl2c_debug_result;
class msg_player_betinfo;
class packetl2c_notify_sceneinfo;
class packetl2c_attention_needLeave;

// ===================================================================

class packetc2l_get_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_scene_info();
  virtual ~packetc2l_get_scene_info();

  packetc2l_get_scene_info(const packetc2l_get_scene_info& from);

  inline packetc2l_get_scene_info& operator=(const packetc2l_get_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_scene_info& default_instance();

  void Swap(packetc2l_get_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_scene_info& from);
  void MergeFrom(const packetc2l_get_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetc2l_get_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 head_frame = 3;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // optional string head_custom = 4;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 4;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 head_frame_;
  ::std::string* head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_bet_info : public ::google::protobuf::Message {
 public:
  msg_bet_info();
  virtual ~msg_bet_info();

  msg_bet_info(const msg_bet_info& from);

  inline msg_bet_info& operator=(const msg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bet_info& default_instance();

  void Swap(msg_bet_info* other);

  // implements Message ----------------------------------------------

  msg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bet_info& from);
  void MergeFrom(const msg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 self_bet_golds = 1;
  inline int self_bet_golds_size() const;
  inline void clear_self_bet_golds();
  static const int kSelfBetGoldsFieldNumber = 1;
  inline ::google::protobuf::int64 self_bet_golds(int index) const;
  inline void set_self_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_self_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      self_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_self_bet_golds();

  // repeated int64 total_bet_golds = 2;
  inline int total_bet_golds_size() const;
  inline void clear_total_bet_golds();
  static const int kTotalBetGoldsFieldNumber = 2;
  inline ::google::protobuf::int64 total_bet_golds(int index) const;
  inline void set_total_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_total_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      total_bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_total_bet_golds();

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.msg_bet_info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > self_bet_golds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > total_bet_golds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_result_info : public ::google::protobuf::Message {
 public:
  msg_result_info();
  virtual ~msg_result_info();

  msg_result_info(const msg_result_info& from);

  inline msg_result_info& operator=(const msg_result_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_result_info& default_instance();

  void Swap(msg_result_info* other);

  // implements Message ----------------------------------------------

  msg_result_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_result_info& from);
  void MergeFrom(const msg_result_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 banker_win_gold = 1;
  inline bool has_banker_win_gold() const;
  inline void clear_banker_win_gold();
  static const int kBankerWinGoldFieldNumber = 1;
  inline ::google::protobuf::int64 banker_win_gold() const;
  inline void set_banker_win_gold(::google::protobuf::int64 value);

  // repeated int64 other_win_golds = 2;
  inline int other_win_golds_size() const;
  inline void clear_other_win_golds();
  static const int kOtherWinGoldsFieldNumber = 2;
  inline ::google::protobuf::int64 other_win_golds(int index) const;
  inline void set_other_win_golds(int index, ::google::protobuf::int64 value);
  inline void add_other_win_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      other_win_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_other_win_golds();

  // optional int64 self_win_gold = 3;
  inline bool has_self_win_gold() const;
  inline void clear_self_win_gold();
  static const int kSelfWinGoldFieldNumber = 3;
  inline ::google::protobuf::int64 self_win_gold() const;
  inline void set_self_win_gold(::google::protobuf::int64 value);

  // optional int64 self_gold = 4;
  inline bool has_self_gold() const;
  inline void clear_self_gold();
  static const int kSelfGoldFieldNumber = 4;
  inline ::google::protobuf::int64 self_gold() const;
  inline void set_self_gold(::google::protobuf::int64 value);

  // optional bool self_is_bet = 5;
  inline bool has_self_is_bet() const;
  inline void clear_self_is_bet();
  static const int kSelfIsBetFieldNumber = 5;
  inline bool self_is_bet() const;
  inline void set_self_is_bet(bool value);

  // optional int64 self_pure_win_gold = 6;
  inline bool has_self_pure_win_gold() const;
  inline void clear_self_pure_win_gold();
  static const int kSelfPureWinGoldFieldNumber = 6;
  inline ::google::protobuf::int64 self_pure_win_gold() const;
  inline void set_self_pure_win_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.msg_result_info)
 private:
  inline void set_has_banker_win_gold();
  inline void clear_has_banker_win_gold();
  inline void set_has_self_win_gold();
  inline void clear_has_self_win_gold();
  inline void set_has_self_gold();
  inline void clear_has_self_gold();
  inline void set_has_self_is_bet();
  inline void clear_has_self_is_bet();
  inline void set_has_self_pure_win_gold();
  inline void clear_has_self_pure_win_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 banker_win_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > other_win_golds_;
  ::google::protobuf::int64 self_win_gold_;
  ::google::protobuf::int64 self_gold_;
  ::google::protobuf::int64 self_pure_win_gold_;
  bool self_is_bet_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_result_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_scene_info : public ::google::protobuf::Message {
 public:
  msg_scene_info();
  virtual ~msg_scene_info();

  msg_scene_info(const msg_scene_info& from);

  inline msg_scene_info& operator=(const msg_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_scene_info& default_instance();

  void Swap(msg_scene_info* other);

  // implements Message ----------------------------------------------

  msg_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_scene_info& from);
  void MergeFrom(const msg_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 scene_state = 2;
  inline bool has_scene_state() const;
  inline void clear_scene_state();
  static const int kSceneStateFieldNumber = 2;
  inline ::google::protobuf::int32 scene_state() const;
  inline void set_scene_state(::google::protobuf::int32 value);

  // optional int32 count_down = 3;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 3;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // optional .game_ttz_protocols.msg_bet_info bet_info = 4;
  inline bool has_bet_info() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 4;
  inline const ::game_ttz_protocols::msg_bet_info& bet_info() const;
  inline ::game_ttz_protocols::msg_bet_info* mutable_bet_info();
  inline ::game_ttz_protocols::msg_bet_info* release_bet_info();
  inline void set_allocated_bet_info(::game_ttz_protocols::msg_bet_info* bet_info);

  // repeated int32 cards_infos = 5;
  inline int cards_infos_size() const;
  inline void clear_cards_infos();
  static const int kCardsInfosFieldNumber = 5;
  inline ::google::protobuf::int32 cards_infos(int index) const;
  inline void set_cards_infos(int index, ::google::protobuf::int32 value);
  inline void add_cards_infos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_infos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_infos();

  // optional .game_ttz_protocols.msg_result_info result_info = 6;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 6;
  inline const ::game_ttz_protocols::msg_result_info& result_info() const;
  inline ::game_ttz_protocols::msg_result_info* mutable_result_info();
  inline ::game_ttz_protocols::msg_result_info* release_result_info();
  inline void set_allocated_result_info(::game_ttz_protocols::msg_result_info* result_info);

  // optional int32 main_id = 7;
  inline bool has_main_id() const;
  inline void clear_main_id();
  static const int kMainIdFieldNumber = 7;
  inline ::google::protobuf::int32 main_id() const;
  inline void set_main_id(::google::protobuf::int32 value);

  // optional int32 dice_num = 8;
  inline bool has_dice_num() const;
  inline void clear_dice_num();
  static const int kDiceNumFieldNumber = 8;
  inline ::google::protobuf::int32 dice_num() const;
  inline void set_dice_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.msg_scene_info)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_scene_state();
  inline void clear_has_scene_state();
  inline void set_has_count_down();
  inline void clear_has_count_down();
  inline void set_has_bet_info();
  inline void clear_has_bet_info();
  inline void set_has_result_info();
  inline void clear_has_result_info();
  inline void set_has_main_id();
  inline void clear_has_main_id();
  inline void set_has_dice_num();
  inline void clear_has_dice_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 scene_state_;
  ::game_ttz_protocols::msg_bet_info* bet_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_infos_;
  ::google::protobuf::int32 count_down_;
  ::google::protobuf::int32 main_id_;
  ::game_ttz_protocols::msg_result_info* result_info_;
  ::google::protobuf::int32 dice_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_scene_info_result();
  virtual ~packetl2c_get_scene_info_result();

  packetl2c_get_scene_info_result(const packetl2c_get_scene_info_result& from);

  inline packetl2c_get_scene_info_result& operator=(const packetl2c_get_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_scene_info_result& default_instance();

  void Swap(packetl2c_get_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_scene_info_result& from);
  void MergeFrom(const packetl2c_get_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional .game_ttz_protocols.msg_scene_info scene_info = 2;
  inline bool has_scene_info() const;
  inline void clear_scene_info();
  static const int kSceneInfoFieldNumber = 2;
  inline const ::game_ttz_protocols::msg_scene_info& scene_info() const;
  inline ::game_ttz_protocols::msg_scene_info* mutable_scene_info();
  inline ::game_ttz_protocols::msg_scene_info* release_scene_info();
  inline void set_allocated_scene_info(::game_ttz_protocols::msg_scene_info* scene_info);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_get_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_scene_info();
  inline void clear_has_scene_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_ttz_protocols::msg_scene_info* scene_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_bet_info : public ::google::protobuf::Message {
 public:
  packetc2l_ask_bet_info();
  virtual ~packetc2l_ask_bet_info();

  packetc2l_ask_bet_info(const packetc2l_ask_bet_info& from);

  inline packetc2l_ask_bet_info& operator=(const packetc2l_ask_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_bet_info& default_instance();

  void Swap(packetc2l_ask_bet_info* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_bet_info& from);
  void MergeFrom(const packetc2l_ask_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional int32 bet_index = 2;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 2;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int64 bet_gold = 3;
  inline bool has_bet_gold() const;
  inline void clear_bet_gold();
  static const int kBetGoldFieldNumber = 3;
  inline ::google::protobuf::int64 bet_gold() const;
  inline void set_bet_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetc2l_ask_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_gold();
  inline void clear_has_bet_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bet_index_;
  ::google::protobuf::int64 bet_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bet_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_bet_info_result();
  virtual ~packetl2c_bet_info_result();

  packetl2c_bet_info_result(const packetl2c_bet_info_result& from);

  inline packetl2c_bet_info_result& operator=(const packetl2c_bet_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bet_info_result& default_instance();

  void Swap(packetl2c_bet_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_bet_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bet_info_result& from);
  void MergeFrom(const packetl2c_bet_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 bet_index = 3;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 3;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int64 bet_gold = 4;
  inline bool has_bet_gold() const;
  inline void clear_bet_gold();
  static const int kBetGoldFieldNumber = 4;
  inline ::google::protobuf::int64 bet_gold() const;
  inline void set_bet_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_bet_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_gold();
  inline void clear_has_bet_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 bet_gold_;
  ::google::protobuf::int32 bet_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bet_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_continue_bet : public ::google::protobuf::Message {
 public:
  packetc2l_ask_continue_bet();
  virtual ~packetc2l_ask_continue_bet();

  packetc2l_ask_continue_bet(const packetc2l_ask_continue_bet& from);

  inline packetc2l_ask_continue_bet& operator=(const packetc2l_ask_continue_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_continue_bet& default_instance();

  void Swap(packetc2l_ask_continue_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_continue_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_continue_bet& from);
  void MergeFrom(const packetc2l_ask_continue_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // repeated int64 bet_golds = 2;
  inline int bet_golds_size() const;
  inline void clear_bet_golds();
  static const int kBetGoldsFieldNumber = 2;
  inline ::google::protobuf::int64 bet_golds(int index) const;
  inline void set_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_bet_golds();

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetc2l_ask_continue_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > bet_golds_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_continue_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_continue_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_continue_bet_result();
  virtual ~packetl2c_continue_bet_result();

  packetl2c_continue_bet_result(const packetl2c_continue_bet_result& from);

  inline packetl2c_continue_bet_result& operator=(const packetl2c_continue_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_continue_bet_result& default_instance();

  void Swap(packetl2c_continue_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_continue_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_continue_bet_result& from);
  void MergeFrom(const packetl2c_continue_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // repeated int64 bet_golds = 3;
  inline int bet_golds_size() const;
  inline void clear_bet_golds();
  static const int kBetGoldsFieldNumber = 3;
  inline ::google::protobuf::int64 bet_golds(int index) const;
  inline void set_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_bet_golds();

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_continue_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > bet_golds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_continue_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_clear_bet : public ::google::protobuf::Message {
 public:
  packetc2l_ask_clear_bet();
  virtual ~packetc2l_ask_clear_bet();

  packetc2l_ask_clear_bet(const packetc2l_ask_clear_bet& from);

  inline packetc2l_ask_clear_bet& operator=(const packetc2l_ask_clear_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_clear_bet& default_instance();

  void Swap(packetc2l_ask_clear_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_clear_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_clear_bet& from);
  void MergeFrom(const packetc2l_ask_clear_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_clear_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetc2l_ask_clear_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_clear_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_clear_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_clear_bet_result();
  virtual ~packetl2c_clear_bet_result();

  packetl2c_clear_bet_result(const packetl2c_clear_bet_result& from);

  inline packetl2c_clear_bet_result& operator=(const packetl2c_clear_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_clear_bet_result& default_instance();

  void Swap(packetl2c_clear_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_clear_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_clear_bet_result& from);
  void MergeFrom(const packetl2c_clear_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_clear_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_clear_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_playerlist : public ::google::protobuf::Message {
 public:
  packetc2l_ask_playerlist();
  virtual ~packetc2l_ask_playerlist();

  packetc2l_ask_playerlist(const packetc2l_ask_playerlist& from);

  inline packetc2l_ask_playerlist& operator=(const packetc2l_ask_playerlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_playerlist& default_instance();

  void Swap(packetc2l_ask_playerlist* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_playerlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_playerlist& from);
  void MergeFrom(const packetc2l_ask_playerlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_playerlist];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetc2l_ask_playerlist)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_playerlist* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_playerlist_result : public ::google::protobuf::Message {
 public:
  packetl2c_playerlist_result();
  virtual ~packetl2c_playerlist_result();

  packetl2c_playerlist_result(const packetl2c_playerlist_result& from);

  inline packetl2c_playerlist_result& operator=(const packetl2c_playerlist_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_playerlist_result& default_instance();

  void Swap(packetl2c_playerlist_result* other);

  // implements Message ----------------------------------------------

  packetl2c_playerlist_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_playerlist_result& from);
  void MergeFrom(const packetl2c_playerlist_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playerlist_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // repeated .game_ttz_protocols.msg_player_info player_infos = 2;
  inline int player_infos_size() const;
  inline void clear_player_infos();
  static const int kPlayerInfosFieldNumber = 2;
  inline const ::game_ttz_protocols::msg_player_info& player_infos(int index) const;
  inline ::game_ttz_protocols::msg_player_info* mutable_player_infos(int index);
  inline ::game_ttz_protocols::msg_player_info* add_player_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_info >&
      player_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_info >*
      mutable_player_infos();

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_playerlist_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_info > player_infos_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_playerlist_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_history_info : public ::google::protobuf::Message {
 public:
  packetc2l_ask_history_info();
  virtual ~packetc2l_ask_history_info();

  packetc2l_ask_history_info(const packetc2l_ask_history_info& from);

  inline packetc2l_ask_history_info& operator=(const packetc2l_ask_history_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_history_info& default_instance();

  void Swap(packetc2l_ask_history_info* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_history_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_history_info& from);
  void MergeFrom(const packetc2l_ask_history_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetc2l_ask_history_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_history_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_history_info : public ::google::protobuf::Message {
 public:
  packetl2c_history_info();
  virtual ~packetl2c_history_info();

  packetl2c_history_info(const packetl2c_history_info& from);

  inline packetl2c_history_info& operator=(const packetl2c_history_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_history_info& default_instance();

  void Swap(packetl2c_history_info* other);

  // implements Message ----------------------------------------------

  packetl2c_history_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_history_info& from);
  void MergeFrom(const packetl2c_history_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_history_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // repeated int32 cards_id = 2;
  inline int cards_id_size() const;
  inline void clear_cards_id();
  static const int kCardsIdFieldNumber = 2;
  inline ::google::protobuf::int32 cards_id(int index) const;
  inline void set_cards_id(int index, ::google::protobuf::int32 value);
  inline void add_cards_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_id();

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_history_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_id_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_history_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_prepare_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_prepare_into();
  virtual ~packetl2c_bc_scene_prepare_into();

  packetl2c_bc_scene_prepare_into(const packetl2c_bc_scene_prepare_into& from);

  inline packetl2c_bc_scene_prepare_into& operator=(const packetl2c_bc_scene_prepare_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_prepare_into& default_instance();

  void Swap(packetl2c_bc_scene_prepare_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_prepare_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_prepare_into& from);
  void MergeFrom(const packetl2c_bc_scene_prepare_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional int32 count_down = 2;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // optional int32 dice_num = 3;
  inline bool has_dice_num() const;
  inline void clear_dice_num();
  static const int kDiceNumFieldNumber = 3;
  inline ::google::protobuf::int32 dice_num() const;
  inline void set_dice_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_bc_scene_prepare_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_count_down();
  inline void clear_has_count_down();
  inline void set_has_dice_num();
  inline void clear_has_dice_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 count_down_;
  ::google::protobuf::int32 dice_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_prepare_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_bet_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_bet_into();
  virtual ~packetl2c_bc_scene_bet_into();

  packetl2c_bc_scene_bet_into(const packetl2c_bc_scene_bet_into& from);

  inline packetl2c_bc_scene_bet_into& operator=(const packetl2c_bc_scene_bet_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_bet_into& default_instance();

  void Swap(packetl2c_bc_scene_bet_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_bet_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_bet_into& from);
  void MergeFrom(const packetl2c_bc_scene_bet_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional int32 count_down = 2;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_bc_scene_bet_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_count_down();
  inline void clear_has_count_down();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 count_down_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_bet_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_sync_scene_bet_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_sync_scene_bet_into();
  virtual ~packetl2c_bc_sync_scene_bet_into();

  packetl2c_bc_sync_scene_bet_into(const packetl2c_bc_sync_scene_bet_into& from);

  inline packetl2c_bc_sync_scene_bet_into& operator=(const packetl2c_bc_sync_scene_bet_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_sync_scene_bet_into& default_instance();

  void Swap(packetl2c_bc_sync_scene_bet_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_sync_scene_bet_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_sync_scene_bet_into& from);
  void MergeFrom(const packetl2c_bc_sync_scene_bet_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // repeated int64 bet_golds = 4;
  inline int bet_golds_size() const;
  inline void clear_bet_golds();
  static const int kBetGoldsFieldNumber = 4;
  inline ::google::protobuf::int64 bet_golds(int index) const;
  inline void set_bet_golds(int index, ::google::protobuf::int64 value);
  inline void add_bet_golds(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      bet_golds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_bet_golds();

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_bc_sync_scene_bet_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > bet_golds_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_sync_scene_bet_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_deal_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_deal_into();
  virtual ~packetl2c_bc_scene_deal_into();

  packetl2c_bc_scene_deal_into(const packetl2c_bc_scene_deal_into& from);

  inline packetl2c_bc_scene_deal_into& operator=(const packetl2c_bc_scene_deal_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_deal_into& default_instance();

  void Swap(packetl2c_bc_scene_deal_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_deal_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_deal_into& from);
  void MergeFrom(const packetl2c_bc_scene_deal_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional int32 count_down = 2;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // repeated int32 cards_infos = 3;
  inline int cards_infos_size() const;
  inline void clear_cards_infos();
  static const int kCardsInfosFieldNumber = 3;
  inline ::google::protobuf::int32 cards_infos(int index) const;
  inline void set_cards_infos(int index, ::google::protobuf::int32 value);
  inline void add_cards_infos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_infos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_infos();

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_bc_scene_deal_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_count_down();
  inline void clear_has_count_down();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 count_down_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_deal_into* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_award : public ::google::protobuf::Message {
 public:
  msg_player_award();
  virtual ~msg_player_award();

  msg_player_award(const msg_player_award& from);

  inline msg_player_award& operator=(const msg_player_award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_award& default_instance();

  void Swap(msg_player_award* other);

  // implements Message ----------------------------------------------

  msg_player_award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_award& from);
  void MergeFrom(const msg_player_award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 pure_gold = 4;
  inline bool has_pure_gold() const;
  inline void clear_pure_gold();
  static const int kPureGoldFieldNumber = 4;
  inline ::google::protobuf::int64 pure_gold() const;
  inline void set_pure_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.msg_player_award)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_pure_gold();
  inline void clear_has_pure_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 pure_gold_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_player_award* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_scene_result_into : public ::google::protobuf::Message {
 public:
  packetl2c_bc_scene_result_into();
  virtual ~packetl2c_bc_scene_result_into();

  packetl2c_bc_scene_result_into(const packetl2c_bc_scene_result_into& from);

  inline packetl2c_bc_scene_result_into& operator=(const packetl2c_bc_scene_result_into& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_scene_result_into& default_instance();

  void Swap(packetl2c_bc_scene_result_into* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_scene_result_into* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_scene_result_into& from);
  void MergeFrom(const packetl2c_bc_scene_result_into& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional int32 count_down = 2;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // optional .game_ttz_protocols.msg_result_info result_info = 3;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 3;
  inline const ::game_ttz_protocols::msg_result_info& result_info() const;
  inline ::game_ttz_protocols::msg_result_info* mutable_result_info();
  inline ::game_ttz_protocols::msg_result_info* release_result_info();
  inline void set_allocated_result_info(::game_ttz_protocols::msg_result_info* result_info);

  // repeated .game_ttz_protocols.msg_player_award player_list = 4;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 4;
  inline const ::game_ttz_protocols::msg_player_award& player_list(int index) const;
  inline ::game_ttz_protocols::msg_player_award* mutable_player_list(int index);
  inline ::game_ttz_protocols::msg_player_award* add_player_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_award >&
      player_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_award >*
      mutable_player_list();

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_bc_scene_result_into)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_count_down();
  inline void clear_has_count_down();
  inline void set_has_result_info();
  inline void clear_has_result_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 count_down_;
  ::game_ttz_protocols::msg_result_info* result_info_;
  ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_award > player_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_scene_result_into* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_debug : public ::google::protobuf::Message {
 public:
  packetl2c_debug();
  virtual ~packetl2c_debug();

  packetl2c_debug(const packetl2c_debug& from);

  inline packetl2c_debug& operator=(const packetl2c_debug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_debug& default_instance();

  void Swap(packetl2c_debug* other);

  // implements Message ----------------------------------------------

  packetl2c_debug* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_debug& from);
  void MergeFrom(const packetl2c_debug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional int32 kill_cnt = 2 [default = 0];
  inline bool has_kill_cnt() const;
  inline void clear_kill_cnt();
  static const int kKillCntFieldNumber = 2;
  inline ::google::protobuf::int32 kill_cnt() const;
  inline void set_kill_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_debug)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_kill_cnt();
  inline void clear_has_kill_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 kill_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_debug* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_debug_result : public ::google::protobuf::Message {
 public:
  packetl2c_debug_result();
  virtual ~packetl2c_debug_result();

  packetl2c_debug_result(const packetl2c_debug_result& from);

  inline packetl2c_debug_result& operator=(const packetl2c_debug_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_debug_result& default_instance();

  void Swap(packetl2c_debug_result* other);

  // implements Message ----------------------------------------------

  packetl2c_debug_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_debug_result& from);
  void MergeFrom(const packetl2c_debug_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_debug_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_debug_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_betinfo : public ::google::protobuf::Message {
 public:
  msg_player_betinfo();
  virtual ~msg_player_betinfo();

  msg_player_betinfo(const msg_player_betinfo& from);

  inline msg_player_betinfo& operator=(const msg_player_betinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_betinfo& default_instance();

  void Swap(msg_player_betinfo* other);

  // implements Message ----------------------------------------------

  msg_player_betinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_betinfo& from);
  void MergeFrom(const msg_player_betinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // repeated int32 bet_gold = 3;
  inline int bet_gold_size() const;
  inline void clear_bet_gold();
  static const int kBetGoldFieldNumber = 3;
  inline ::google::protobuf::int32 bet_gold(int index) const;
  inline void set_bet_gold(int index, ::google::protobuf::int32 value);
  inline void add_bet_gold(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bet_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bet_gold();

  // optional int64 player_gold = 4;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 4;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.msg_player_betinfo)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bet_gold_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static msg_player_betinfo* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notify_sceneinfo : public ::google::protobuf::Message {
 public:
  packetl2c_notify_sceneinfo();
  virtual ~packetl2c_notify_sceneinfo();

  packetl2c_notify_sceneinfo(const packetl2c_notify_sceneinfo& from);

  inline packetl2c_notify_sceneinfo& operator=(const packetl2c_notify_sceneinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notify_sceneinfo& default_instance();

  void Swap(packetl2c_notify_sceneinfo* other);

  // implements Message ----------------------------------------------

  packetl2c_notify_sceneinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notify_sceneinfo& from);
  void MergeFrom(const packetl2c_notify_sceneinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_sceneinfo];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // optional int32 main_id = 2;
  inline bool has_main_id() const;
  inline void clear_main_id();
  static const int kMainIdFieldNumber = 2;
  inline ::google::protobuf::int32 main_id() const;
  inline void set_main_id(::google::protobuf::int32 value);

  // repeated .game_ttz_protocols.msg_player_betinfo player_betinfos = 3;
  inline int player_betinfos_size() const;
  inline void clear_player_betinfos();
  static const int kPlayerBetinfosFieldNumber = 3;
  inline const ::game_ttz_protocols::msg_player_betinfo& player_betinfos(int index) const;
  inline ::game_ttz_protocols::msg_player_betinfo* mutable_player_betinfos(int index);
  inline ::game_ttz_protocols::msg_player_betinfo* add_player_betinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_betinfo >&
      player_betinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_betinfo >*
      mutable_player_betinfos();

  // optional int64 earn_gold = 4;
  inline bool has_earn_gold() const;
  inline void clear_earn_gold();
  static const int kEarnGoldFieldNumber = 4;
  inline ::google::protobuf::int64 earn_gold() const;
  inline void set_earn_gold(::google::protobuf::int64 value);

  // optional int64 stock_gold = 5;
  inline bool has_stock_gold() const;
  inline void clear_stock_gold();
  static const int kStockGoldFieldNumber = 5;
  inline ::google::protobuf::int64 stock_gold() const;
  inline void set_stock_gold(::google::protobuf::int64 value);

  // optional int32 banker_gold = 6;
  inline bool has_banker_gold() const;
  inline void clear_banker_gold();
  static const int kBankerGoldFieldNumber = 6;
  inline ::google::protobuf::int32 banker_gold() const;
  inline void set_banker_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_notify_sceneinfo)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_main_id();
  inline void clear_has_main_id();
  inline void set_has_earn_gold();
  inline void clear_has_earn_gold();
  inline void set_has_stock_gold();
  inline void clear_has_stock_gold();
  inline void set_has_banker_gold();
  inline void clear_has_banker_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 main_id_;
  ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_betinfo > player_betinfos_;
  ::google::protobuf::int64 earn_gold_;
  ::google::protobuf::int64 stock_gold_;
  ::google::protobuf::int32 banker_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notify_sceneinfo* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_attention_needLeave : public ::google::protobuf::Message {
 public:
  packetl2c_attention_needLeave();
  virtual ~packetl2c_attention_needLeave();

  packetl2c_attention_needLeave(const packetl2c_attention_needLeave& from);

  inline packetl2c_attention_needLeave& operator=(const packetl2c_attention_needLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_attention_needLeave& default_instance();

  void Swap(packetl2c_attention_needLeave* other);

  // implements Message ----------------------------------------------

  packetl2c_attention_needLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_attention_needLeave& from);
  void MergeFrom(const packetl2c_attention_needLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_attention_needLeave];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_ttz_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_ttz_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_ttz_protocols.packetl2c_attention_needLeave)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_AssignDesc_game_5fttz_5flogic_2eproto();
  friend void protobuf_ShutdownFile_game_5fttz_5flogic_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_attention_needLeave* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2l_get_scene_info

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
inline bool packetc2l_get_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_scene_info::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetc2l_get_scene_info::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_scene_info::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool msg_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_player_info::player_name() const {
  return *player_name_;
}
inline void msg_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_frame = 3;
inline bool msg_player_info::has_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::head_frame() const {
  return head_frame_;
}
inline void msg_player_info::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// optional string head_custom = 4;
inline bool msg_player_info::has_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_player_info::head_custom() const {
  return *head_custom_;
}
inline void msg_player_info::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_player_info::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 5;
inline bool msg_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_info::player_gold() const {
  return player_gold_;
}
inline void msg_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool msg_player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 msg_player_info::player_sex() const {
  return player_sex_;
}
inline void msg_player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 vip_level = 7;
inline bool msg_player_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_player_info::vip_level() const {
  return vip_level_;
}
inline void msg_player_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// msg_bet_info

// repeated int64 self_bet_golds = 1;
inline int msg_bet_info::self_bet_golds_size() const {
  return self_bet_golds_.size();
}
inline void msg_bet_info::clear_self_bet_golds() {
  self_bet_golds_.Clear();
}
inline ::google::protobuf::int64 msg_bet_info::self_bet_golds(int index) const {
  return self_bet_golds_.Get(index);
}
inline void msg_bet_info::set_self_bet_golds(int index, ::google::protobuf::int64 value) {
  self_bet_golds_.Set(index, value);
}
inline void msg_bet_info::add_self_bet_golds(::google::protobuf::int64 value) {
  self_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_bet_info::self_bet_golds() const {
  return self_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_bet_info::mutable_self_bet_golds() {
  return &self_bet_golds_;
}

// repeated int64 total_bet_golds = 2;
inline int msg_bet_info::total_bet_golds_size() const {
  return total_bet_golds_.size();
}
inline void msg_bet_info::clear_total_bet_golds() {
  total_bet_golds_.Clear();
}
inline ::google::protobuf::int64 msg_bet_info::total_bet_golds(int index) const {
  return total_bet_golds_.Get(index);
}
inline void msg_bet_info::set_total_bet_golds(int index, ::google::protobuf::int64 value) {
  total_bet_golds_.Set(index, value);
}
inline void msg_bet_info::add_total_bet_golds(::google::protobuf::int64 value) {
  total_bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_bet_info::total_bet_golds() const {
  return total_bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_bet_info::mutable_total_bet_golds() {
  return &total_bet_golds_;
}

// -------------------------------------------------------------------

// msg_result_info

// optional int64 banker_win_gold = 1;
inline bool msg_result_info::has_banker_win_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_result_info::set_has_banker_win_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_result_info::clear_has_banker_win_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_result_info::clear_banker_win_gold() {
  banker_win_gold_ = GOOGLE_LONGLONG(0);
  clear_has_banker_win_gold();
}
inline ::google::protobuf::int64 msg_result_info::banker_win_gold() const {
  return banker_win_gold_;
}
inline void msg_result_info::set_banker_win_gold(::google::protobuf::int64 value) {
  set_has_banker_win_gold();
  banker_win_gold_ = value;
}

// repeated int64 other_win_golds = 2;
inline int msg_result_info::other_win_golds_size() const {
  return other_win_golds_.size();
}
inline void msg_result_info::clear_other_win_golds() {
  other_win_golds_.Clear();
}
inline ::google::protobuf::int64 msg_result_info::other_win_golds(int index) const {
  return other_win_golds_.Get(index);
}
inline void msg_result_info::set_other_win_golds(int index, ::google::protobuf::int64 value) {
  other_win_golds_.Set(index, value);
}
inline void msg_result_info::add_other_win_golds(::google::protobuf::int64 value) {
  other_win_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_result_info::other_win_golds() const {
  return other_win_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_result_info::mutable_other_win_golds() {
  return &other_win_golds_;
}

// optional int64 self_win_gold = 3;
inline bool msg_result_info::has_self_win_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_result_info::set_has_self_win_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_result_info::clear_has_self_win_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_result_info::clear_self_win_gold() {
  self_win_gold_ = GOOGLE_LONGLONG(0);
  clear_has_self_win_gold();
}
inline ::google::protobuf::int64 msg_result_info::self_win_gold() const {
  return self_win_gold_;
}
inline void msg_result_info::set_self_win_gold(::google::protobuf::int64 value) {
  set_has_self_win_gold();
  self_win_gold_ = value;
}

// optional int64 self_gold = 4;
inline bool msg_result_info::has_self_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_result_info::set_has_self_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_result_info::clear_has_self_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_result_info::clear_self_gold() {
  self_gold_ = GOOGLE_LONGLONG(0);
  clear_has_self_gold();
}
inline ::google::protobuf::int64 msg_result_info::self_gold() const {
  return self_gold_;
}
inline void msg_result_info::set_self_gold(::google::protobuf::int64 value) {
  set_has_self_gold();
  self_gold_ = value;
}

// optional bool self_is_bet = 5;
inline bool msg_result_info::has_self_is_bet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_result_info::set_has_self_is_bet() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_result_info::clear_has_self_is_bet() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_result_info::clear_self_is_bet() {
  self_is_bet_ = false;
  clear_has_self_is_bet();
}
inline bool msg_result_info::self_is_bet() const {
  return self_is_bet_;
}
inline void msg_result_info::set_self_is_bet(bool value) {
  set_has_self_is_bet();
  self_is_bet_ = value;
}

// optional int64 self_pure_win_gold = 6;
inline bool msg_result_info::has_self_pure_win_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_result_info::set_has_self_pure_win_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_result_info::clear_has_self_pure_win_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_result_info::clear_self_pure_win_gold() {
  self_pure_win_gold_ = GOOGLE_LONGLONG(0);
  clear_has_self_pure_win_gold();
}
inline ::google::protobuf::int64 msg_result_info::self_pure_win_gold() const {
  return self_pure_win_gold_;
}
inline void msg_result_info::set_self_pure_win_gold(::google::protobuf::int64 value) {
  set_has_self_pure_win_gold();
  self_pure_win_gold_ = value;
}

// -------------------------------------------------------------------

// msg_scene_info

// optional int32 roomid = 1;
inline bool msg_scene_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_scene_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_scene_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_scene_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_scene_info::roomid() const {
  return roomid_;
}
inline void msg_scene_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 scene_state = 2;
inline bool msg_scene_info::has_scene_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_scene_info::set_has_scene_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_scene_info::clear_has_scene_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_scene_info::clear_scene_state() {
  scene_state_ = 0;
  clear_has_scene_state();
}
inline ::google::protobuf::int32 msg_scene_info::scene_state() const {
  return scene_state_;
}
inline void msg_scene_info::set_scene_state(::google::protobuf::int32 value) {
  set_has_scene_state();
  scene_state_ = value;
}

// optional int32 count_down = 3;
inline bool msg_scene_info::has_count_down() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_scene_info::set_has_count_down() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_scene_info::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_scene_info::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 msg_scene_info::count_down() const {
  return count_down_;
}
inline void msg_scene_info::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// optional .game_ttz_protocols.msg_bet_info bet_info = 4;
inline bool msg_scene_info::has_bet_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_scene_info::set_has_bet_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_scene_info::clear_has_bet_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_scene_info::clear_bet_info() {
  if (bet_info_ != NULL) bet_info_->::game_ttz_protocols::msg_bet_info::Clear();
  clear_has_bet_info();
}
inline const ::game_ttz_protocols::msg_bet_info& msg_scene_info::bet_info() const {
  return bet_info_ != NULL ? *bet_info_ : *default_instance_->bet_info_;
}
inline ::game_ttz_protocols::msg_bet_info* msg_scene_info::mutable_bet_info() {
  set_has_bet_info();
  if (bet_info_ == NULL) bet_info_ = new ::game_ttz_protocols::msg_bet_info;
  return bet_info_;
}
inline ::game_ttz_protocols::msg_bet_info* msg_scene_info::release_bet_info() {
  clear_has_bet_info();
  ::game_ttz_protocols::msg_bet_info* temp = bet_info_;
  bet_info_ = NULL;
  return temp;
}
inline void msg_scene_info::set_allocated_bet_info(::game_ttz_protocols::msg_bet_info* bet_info) {
  delete bet_info_;
  bet_info_ = bet_info;
  if (bet_info) {
    set_has_bet_info();
  } else {
    clear_has_bet_info();
  }
}

// repeated int32 cards_infos = 5;
inline int msg_scene_info::cards_infos_size() const {
  return cards_infos_.size();
}
inline void msg_scene_info::clear_cards_infos() {
  cards_infos_.Clear();
}
inline ::google::protobuf::int32 msg_scene_info::cards_infos(int index) const {
  return cards_infos_.Get(index);
}
inline void msg_scene_info::set_cards_infos(int index, ::google::protobuf::int32 value) {
  cards_infos_.Set(index, value);
}
inline void msg_scene_info::add_cards_infos(::google::protobuf::int32 value) {
  cards_infos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_scene_info::cards_infos() const {
  return cards_infos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_scene_info::mutable_cards_infos() {
  return &cards_infos_;
}

// optional .game_ttz_protocols.msg_result_info result_info = 6;
inline bool msg_scene_info::has_result_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_scene_info::set_has_result_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_scene_info::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_scene_info::clear_result_info() {
  if (result_info_ != NULL) result_info_->::game_ttz_protocols::msg_result_info::Clear();
  clear_has_result_info();
}
inline const ::game_ttz_protocols::msg_result_info& msg_scene_info::result_info() const {
  return result_info_ != NULL ? *result_info_ : *default_instance_->result_info_;
}
inline ::game_ttz_protocols::msg_result_info* msg_scene_info::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == NULL) result_info_ = new ::game_ttz_protocols::msg_result_info;
  return result_info_;
}
inline ::game_ttz_protocols::msg_result_info* msg_scene_info::release_result_info() {
  clear_has_result_info();
  ::game_ttz_protocols::msg_result_info* temp = result_info_;
  result_info_ = NULL;
  return temp;
}
inline void msg_scene_info::set_allocated_result_info(::game_ttz_protocols::msg_result_info* result_info) {
  delete result_info_;
  result_info_ = result_info;
  if (result_info) {
    set_has_result_info();
  } else {
    clear_has_result_info();
  }
}

// optional int32 main_id = 7;
inline bool msg_scene_info::has_main_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_scene_info::set_has_main_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_scene_info::clear_has_main_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_scene_info::clear_main_id() {
  main_id_ = 0;
  clear_has_main_id();
}
inline ::google::protobuf::int32 msg_scene_info::main_id() const {
  return main_id_;
}
inline void msg_scene_info::set_main_id(::google::protobuf::int32 value) {
  set_has_main_id();
  main_id_ = value;
}

// optional int32 dice_num = 8;
inline bool msg_scene_info::has_dice_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_scene_info::set_has_dice_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_scene_info::clear_has_dice_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_scene_info::clear_dice_num() {
  dice_num_ = 0;
  clear_has_dice_num();
}
inline ::google::protobuf::int32 msg_scene_info::dice_num() const {
  return dice_num_;
}
inline void msg_scene_info::set_dice_num(::google::protobuf::int32 value) {
  set_has_dice_num();
  dice_num_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_scene_info_result

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
inline bool packetl2c_get_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_scene_info_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_get_scene_info_result::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_scene_info_result::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_ttz_protocols.msg_scene_info scene_info = 2;
inline bool packetl2c_get_scene_info_result::has_scene_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_scene_info_result::set_has_scene_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_scene_info_result::clear_has_scene_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_scene_info_result::clear_scene_info() {
  if (scene_info_ != NULL) scene_info_->::game_ttz_protocols::msg_scene_info::Clear();
  clear_has_scene_info();
}
inline const ::game_ttz_protocols::msg_scene_info& packetl2c_get_scene_info_result::scene_info() const {
  return scene_info_ != NULL ? *scene_info_ : *default_instance_->scene_info_;
}
inline ::game_ttz_protocols::msg_scene_info* packetl2c_get_scene_info_result::mutable_scene_info() {
  set_has_scene_info();
  if (scene_info_ == NULL) scene_info_ = new ::game_ttz_protocols::msg_scene_info;
  return scene_info_;
}
inline ::game_ttz_protocols::msg_scene_info* packetl2c_get_scene_info_result::release_scene_info() {
  clear_has_scene_info();
  ::game_ttz_protocols::msg_scene_info* temp = scene_info_;
  scene_info_ = NULL;
  return temp;
}
inline void packetl2c_get_scene_info_result::set_allocated_scene_info(::game_ttz_protocols::msg_scene_info* scene_info) {
  delete scene_info_;
  scene_info_ = scene_info;
  if (scene_info) {
    set_has_scene_info();
  } else {
    clear_has_scene_info();
  }
}

// -------------------------------------------------------------------

// packetc2l_ask_bet_info

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
inline bool packetc2l_ask_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_bet_info::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetc2l_ask_bet_info::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_bet_info::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bet_index = 2;
inline bool packetc2l_ask_bet_info::has_bet_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_bet_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_ask_bet_info::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_ask_bet_info::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 packetc2l_ask_bet_info::bet_index() const {
  return bet_index_;
}
inline void packetc2l_ask_bet_info::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int64 bet_gold = 3;
inline bool packetc2l_ask_bet_info::has_bet_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_ask_bet_info::set_has_bet_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_ask_bet_info::clear_has_bet_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_ask_bet_info::clear_bet_gold() {
  bet_gold_ = GOOGLE_LONGLONG(0);
  clear_has_bet_gold();
}
inline ::google::protobuf::int64 packetc2l_ask_bet_info::bet_gold() const {
  return bet_gold_;
}
inline void packetc2l_ask_bet_info::set_bet_gold(::google::protobuf::int64 value) {
  set_has_bet_gold();
  bet_gold_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bet_info_result

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
inline bool packetl2c_bet_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bet_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bet_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bet_info_result::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_bet_info_result::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bet_info_result::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_bet_info_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bet_info_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bet_info_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bet_info_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_bet_info_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_bet_info_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 bet_index = 3;
inline bool packetl2c_bet_info_result::has_bet_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bet_info_result::set_has_bet_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bet_info_result::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bet_info_result::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 packetl2c_bet_info_result::bet_index() const {
  return bet_index_;
}
inline void packetl2c_bet_info_result::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int64 bet_gold = 4;
inline bool packetl2c_bet_info_result::has_bet_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bet_info_result::set_has_bet_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bet_info_result::clear_has_bet_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bet_info_result::clear_bet_gold() {
  bet_gold_ = GOOGLE_LONGLONG(0);
  clear_has_bet_gold();
}
inline ::google::protobuf::int64 packetl2c_bet_info_result::bet_gold() const {
  return bet_gold_;
}
inline void packetl2c_bet_info_result::set_bet_gold(::google::protobuf::int64 value) {
  set_has_bet_gold();
  bet_gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_ask_continue_bet

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
inline bool packetc2l_ask_continue_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_continue_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_continue_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_continue_bet::clear_packet_id() {
  packet_id_ = 10016;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetc2l_ask_continue_bet::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_continue_bet::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int64 bet_golds = 2;
inline int packetc2l_ask_continue_bet::bet_golds_size() const {
  return bet_golds_.size();
}
inline void packetc2l_ask_continue_bet::clear_bet_golds() {
  bet_golds_.Clear();
}
inline ::google::protobuf::int64 packetc2l_ask_continue_bet::bet_golds(int index) const {
  return bet_golds_.Get(index);
}
inline void packetc2l_ask_continue_bet::set_bet_golds(int index, ::google::protobuf::int64 value) {
  bet_golds_.Set(index, value);
}
inline void packetc2l_ask_continue_bet::add_bet_golds(::google::protobuf::int64 value) {
  bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
packetc2l_ask_continue_bet::bet_golds() const {
  return bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
packetc2l_ask_continue_bet::mutable_bet_golds() {
  return &bet_golds_;
}

// -------------------------------------------------------------------

// packetl2c_continue_bet_result

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
inline bool packetl2c_continue_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_continue_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_continue_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_continue_bet_result::clear_packet_id() {
  packet_id_ = 15017;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_continue_bet_result::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_continue_bet_result::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_continue_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_continue_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_continue_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_continue_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_continue_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_continue_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated int64 bet_golds = 3;
inline int packetl2c_continue_bet_result::bet_golds_size() const {
  return bet_golds_.size();
}
inline void packetl2c_continue_bet_result::clear_bet_golds() {
  bet_golds_.Clear();
}
inline ::google::protobuf::int64 packetl2c_continue_bet_result::bet_golds(int index) const {
  return bet_golds_.Get(index);
}
inline void packetl2c_continue_bet_result::set_bet_golds(int index, ::google::protobuf::int64 value) {
  bet_golds_.Set(index, value);
}
inline void packetl2c_continue_bet_result::add_bet_golds(::google::protobuf::int64 value) {
  bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
packetl2c_continue_bet_result::bet_golds() const {
  return bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
packetl2c_continue_bet_result::mutable_bet_golds() {
  return &bet_golds_;
}

// -------------------------------------------------------------------

// packetc2l_ask_clear_bet

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_clear_bet];
inline bool packetc2l_ask_clear_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_clear_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_clear_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_clear_bet::clear_packet_id() {
  packet_id_ = 10017;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetc2l_ask_clear_bet::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_clear_bet::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_clear_bet_result

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet_result];
inline bool packetl2c_clear_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_clear_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_clear_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_clear_bet_result::clear_packet_id() {
  packet_id_ = 15018;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_clear_bet_result::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_clear_bet_result::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_clear_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_clear_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_clear_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_clear_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_clear_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_clear_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_ask_playerlist

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_playerlist];
inline bool packetc2l_ask_playerlist::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_playerlist::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_playerlist::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_playerlist::clear_packet_id() {
  packet_id_ = 10018;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetc2l_ask_playerlist::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_playerlist::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_playerlist_result

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playerlist_result];
inline bool packetl2c_playerlist_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_playerlist_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_playerlist_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_playerlist_result::clear_packet_id() {
  packet_id_ = 15019;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_playerlist_result::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_playerlist_result::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_ttz_protocols.msg_player_info player_infos = 2;
inline int packetl2c_playerlist_result::player_infos_size() const {
  return player_infos_.size();
}
inline void packetl2c_playerlist_result::clear_player_infos() {
  player_infos_.Clear();
}
inline const ::game_ttz_protocols::msg_player_info& packetl2c_playerlist_result::player_infos(int index) const {
  return player_infos_.Get(index);
}
inline ::game_ttz_protocols::msg_player_info* packetl2c_playerlist_result::mutable_player_infos(int index) {
  return player_infos_.Mutable(index);
}
inline ::game_ttz_protocols::msg_player_info* packetl2c_playerlist_result::add_player_infos() {
  return player_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_info >&
packetl2c_playerlist_result::player_infos() const {
  return player_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_info >*
packetl2c_playerlist_result::mutable_player_infos() {
  return &player_infos_;
}

// -------------------------------------------------------------------

// packetc2l_ask_history_info

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_info];
inline bool packetc2l_ask_history_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_history_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_history_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_history_info::clear_packet_id() {
  packet_id_ = 10015;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetc2l_ask_history_info::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_history_info::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_history_info

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_history_info];
inline bool packetl2c_history_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_history_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_history_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_history_info::clear_packet_id() {
  packet_id_ = 15015;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_history_info::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_history_info::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int32 cards_id = 2;
inline int packetl2c_history_info::cards_id_size() const {
  return cards_id_.size();
}
inline void packetl2c_history_info::clear_cards_id() {
  cards_id_.Clear();
}
inline ::google::protobuf::int32 packetl2c_history_info::cards_id(int index) const {
  return cards_id_.Get(index);
}
inline void packetl2c_history_info::set_cards_id(int index, ::google::protobuf::int32 value) {
  cards_id_.Set(index, value);
}
inline void packetl2c_history_info::add_cards_id(::google::protobuf::int32 value) {
  cards_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_history_info::cards_id() const {
  return cards_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_history_info::mutable_cards_id() {
  return &cards_id_;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_prepare_into

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
inline bool packetl2c_bc_scene_prepare_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_prepare_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_prepare_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_prepare_into::clear_packet_id() {
  packet_id_ = 15050;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_bc_scene_prepare_into::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_prepare_into::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 count_down = 2;
inline bool packetl2c_bc_scene_prepare_into::has_count_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_prepare_into::set_has_count_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_prepare_into::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_prepare_into::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_prepare_into::count_down() const {
  return count_down_;
}
inline void packetl2c_bc_scene_prepare_into::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// optional int32 dice_num = 3;
inline bool packetl2c_bc_scene_prepare_into::has_dice_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_scene_prepare_into::set_has_dice_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_scene_prepare_into::clear_has_dice_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_scene_prepare_into::clear_dice_num() {
  dice_num_ = 0;
  clear_has_dice_num();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_prepare_into::dice_num() const {
  return dice_num_;
}
inline void packetl2c_bc_scene_prepare_into::set_dice_num(::google::protobuf::int32 value) {
  set_has_dice_num();
  dice_num_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_bet_into

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
inline bool packetl2c_bc_scene_bet_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_bet_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_bet_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_bet_into::clear_packet_id() {
  packet_id_ = 15051;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_bc_scene_bet_into::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_bet_into::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 count_down = 2;
inline bool packetl2c_bc_scene_bet_into::has_count_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_bet_into::set_has_count_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_bet_into::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_bet_into::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_bet_into::count_down() const {
  return count_down_;
}
inline void packetl2c_bc_scene_bet_into::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_sync_scene_bet_into

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
inline bool packetl2c_bc_sync_scene_bet_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_sync_scene_bet_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_sync_scene_bet_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_sync_scene_bet_into::clear_packet_id() {
  packet_id_ = 15052;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_bc_sync_scene_bet_into::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_sync_scene_bet_into::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int64 bet_golds = 4;
inline int packetl2c_bc_sync_scene_bet_into::bet_golds_size() const {
  return bet_golds_.size();
}
inline void packetl2c_bc_sync_scene_bet_into::clear_bet_golds() {
  bet_golds_.Clear();
}
inline ::google::protobuf::int64 packetl2c_bc_sync_scene_bet_into::bet_golds(int index) const {
  return bet_golds_.Get(index);
}
inline void packetl2c_bc_sync_scene_bet_into::set_bet_golds(int index, ::google::protobuf::int64 value) {
  bet_golds_.Set(index, value);
}
inline void packetl2c_bc_sync_scene_bet_into::add_bet_golds(::google::protobuf::int64 value) {
  bet_golds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
packetl2c_bc_sync_scene_bet_into::bet_golds() const {
  return bet_golds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
packetl2c_bc_sync_scene_bet_into::mutable_bet_golds() {
  return &bet_golds_;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_deal_into

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
inline bool packetl2c_bc_scene_deal_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_deal_into::clear_packet_id() {
  packet_id_ = 15053;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_bc_scene_deal_into::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_deal_into::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 count_down = 2;
inline bool packetl2c_bc_scene_deal_into::has_count_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_deal_into::set_has_count_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_deal_into::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_deal_into::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_deal_into::count_down() const {
  return count_down_;
}
inline void packetl2c_bc_scene_deal_into::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// repeated int32 cards_infos = 3;
inline int packetl2c_bc_scene_deal_into::cards_infos_size() const {
  return cards_infos_.size();
}
inline void packetl2c_bc_scene_deal_into::clear_cards_infos() {
  cards_infos_.Clear();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_deal_into::cards_infos(int index) const {
  return cards_infos_.Get(index);
}
inline void packetl2c_bc_scene_deal_into::set_cards_infos(int index, ::google::protobuf::int32 value) {
  cards_infos_.Set(index, value);
}
inline void packetl2c_bc_scene_deal_into::add_cards_infos(::google::protobuf::int32 value) {
  cards_infos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_bc_scene_deal_into::cards_infos() const {
  return cards_infos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_bc_scene_deal_into::mutable_cards_infos() {
  return &cards_infos_;
}

// -------------------------------------------------------------------

// msg_player_award

// optional int32 player_id = 1;
inline bool msg_player_award::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_award::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_award::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_award::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_award::player_id() const {
  return player_id_;
}
inline void msg_player_award::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string name = 2;
inline bool msg_player_award::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_award::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_award::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_award::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& msg_player_award::name() const {
  return *name_;
}
inline void msg_player_award::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_player_award::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_player_award::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_award::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* msg_player_award::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_award::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 gold = 3;
inline bool msg_player_award::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_award::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_award::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_award::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 msg_player_award::gold() const {
  return gold_;
}
inline void msg_player_award::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 pure_gold = 4;
inline bool msg_player_award::has_pure_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_award::set_has_pure_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_award::clear_has_pure_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_award::clear_pure_gold() {
  pure_gold_ = GOOGLE_LONGLONG(0);
  clear_has_pure_gold();
}
inline ::google::protobuf::int64 msg_player_award::pure_gold() const {
  return pure_gold_;
}
inline void msg_player_award::set_pure_gold(::google::protobuf::int64 value) {
  set_has_pure_gold();
  pure_gold_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_scene_result_into

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
inline bool packetl2c_bc_scene_result_into::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_scene_result_into::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_scene_result_into::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_scene_result_into::clear_packet_id() {
  packet_id_ = 15054;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_bc_scene_result_into::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_scene_result_into::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 count_down = 2;
inline bool packetl2c_bc_scene_result_into::has_count_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_scene_result_into::set_has_count_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_scene_result_into::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_scene_result_into::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 packetl2c_bc_scene_result_into::count_down() const {
  return count_down_;
}
inline void packetl2c_bc_scene_result_into::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// optional .game_ttz_protocols.msg_result_info result_info = 3;
inline bool packetl2c_bc_scene_result_into::has_result_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_scene_result_into::set_has_result_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_scene_result_into::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_scene_result_into::clear_result_info() {
  if (result_info_ != NULL) result_info_->::game_ttz_protocols::msg_result_info::Clear();
  clear_has_result_info();
}
inline const ::game_ttz_protocols::msg_result_info& packetl2c_bc_scene_result_into::result_info() const {
  return result_info_ != NULL ? *result_info_ : *default_instance_->result_info_;
}
inline ::game_ttz_protocols::msg_result_info* packetl2c_bc_scene_result_into::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == NULL) result_info_ = new ::game_ttz_protocols::msg_result_info;
  return result_info_;
}
inline ::game_ttz_protocols::msg_result_info* packetl2c_bc_scene_result_into::release_result_info() {
  clear_has_result_info();
  ::game_ttz_protocols::msg_result_info* temp = result_info_;
  result_info_ = NULL;
  return temp;
}
inline void packetl2c_bc_scene_result_into::set_allocated_result_info(::game_ttz_protocols::msg_result_info* result_info) {
  delete result_info_;
  result_info_ = result_info;
  if (result_info) {
    set_has_result_info();
  } else {
    clear_has_result_info();
  }
}

// repeated .game_ttz_protocols.msg_player_award player_list = 4;
inline int packetl2c_bc_scene_result_into::player_list_size() const {
  return player_list_.size();
}
inline void packetl2c_bc_scene_result_into::clear_player_list() {
  player_list_.Clear();
}
inline const ::game_ttz_protocols::msg_player_award& packetl2c_bc_scene_result_into::player_list(int index) const {
  return player_list_.Get(index);
}
inline ::game_ttz_protocols::msg_player_award* packetl2c_bc_scene_result_into::mutable_player_list(int index) {
  return player_list_.Mutable(index);
}
inline ::game_ttz_protocols::msg_player_award* packetl2c_bc_scene_result_into::add_player_list() {
  return player_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_award >&
packetl2c_bc_scene_result_into::player_list() const {
  return player_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_award >*
packetl2c_bc_scene_result_into::mutable_player_list() {
  return &player_list_;
}

// -------------------------------------------------------------------

// packetl2c_debug

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_debug];
inline bool packetl2c_debug::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_debug::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_debug::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_debug::clear_packet_id() {
  packet_id_ = 10100;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_debug::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_debug::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 kill_cnt = 2 [default = 0];
inline bool packetl2c_debug::has_kill_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_debug::set_has_kill_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_debug::clear_has_kill_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_debug::clear_kill_cnt() {
  kill_cnt_ = 0;
  clear_has_kill_cnt();
}
inline ::google::protobuf::int32 packetl2c_debug::kill_cnt() const {
  return kill_cnt_;
}
inline void packetl2c_debug::set_kill_cnt(::google::protobuf::int32 value) {
  set_has_kill_cnt();
  kill_cnt_ = value;
}

// -------------------------------------------------------------------

// packetl2c_debug_result

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debug_result];
inline bool packetl2c_debug_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_debug_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_debug_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_debug_result::clear_packet_id() {
  packet_id_ = 15102;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_debug_result::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_debug_result::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_debug_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_debug_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_debug_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_debug_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_debug_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_debug_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_player_betinfo

// optional int32 player_id = 1;
inline bool msg_player_betinfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_betinfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_betinfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_betinfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_betinfo::player_id() const {
  return player_id_;
}
inline void msg_player_betinfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool msg_player_betinfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_betinfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_betinfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_betinfo::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_player_betinfo::player_name() const {
  return *player_name_;
}
inline void msg_player_betinfo::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_betinfo::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_betinfo::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_betinfo::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_player_betinfo::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_betinfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 bet_gold = 3;
inline int msg_player_betinfo::bet_gold_size() const {
  return bet_gold_.size();
}
inline void msg_player_betinfo::clear_bet_gold() {
  bet_gold_.Clear();
}
inline ::google::protobuf::int32 msg_player_betinfo::bet_gold(int index) const {
  return bet_gold_.Get(index);
}
inline void msg_player_betinfo::set_bet_gold(int index, ::google::protobuf::int32 value) {
  bet_gold_.Set(index, value);
}
inline void msg_player_betinfo::add_bet_gold(::google::protobuf::int32 value) {
  bet_gold_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_player_betinfo::bet_gold() const {
  return bet_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_player_betinfo::mutable_bet_gold() {
  return &bet_gold_;
}

// optional int64 player_gold = 4;
inline bool msg_player_betinfo::has_player_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_betinfo::set_has_player_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_betinfo::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_betinfo::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_betinfo::player_gold() const {
  return player_gold_;
}
inline void msg_player_betinfo::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// -------------------------------------------------------------------

// packetl2c_notify_sceneinfo

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_sceneinfo];
inline bool packetl2c_notify_sceneinfo::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notify_sceneinfo::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notify_sceneinfo::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notify_sceneinfo::clear_packet_id() {
  packet_id_ = 15101;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_notify_sceneinfo::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notify_sceneinfo::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 main_id = 2;
inline bool packetl2c_notify_sceneinfo::has_main_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notify_sceneinfo::set_has_main_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notify_sceneinfo::clear_has_main_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notify_sceneinfo::clear_main_id() {
  main_id_ = 0;
  clear_has_main_id();
}
inline ::google::protobuf::int32 packetl2c_notify_sceneinfo::main_id() const {
  return main_id_;
}
inline void packetl2c_notify_sceneinfo::set_main_id(::google::protobuf::int32 value) {
  set_has_main_id();
  main_id_ = value;
}

// repeated .game_ttz_protocols.msg_player_betinfo player_betinfos = 3;
inline int packetl2c_notify_sceneinfo::player_betinfos_size() const {
  return player_betinfos_.size();
}
inline void packetl2c_notify_sceneinfo::clear_player_betinfos() {
  player_betinfos_.Clear();
}
inline const ::game_ttz_protocols::msg_player_betinfo& packetl2c_notify_sceneinfo::player_betinfos(int index) const {
  return player_betinfos_.Get(index);
}
inline ::game_ttz_protocols::msg_player_betinfo* packetl2c_notify_sceneinfo::mutable_player_betinfos(int index) {
  return player_betinfos_.Mutable(index);
}
inline ::game_ttz_protocols::msg_player_betinfo* packetl2c_notify_sceneinfo::add_player_betinfos() {
  return player_betinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_betinfo >&
packetl2c_notify_sceneinfo::player_betinfos() const {
  return player_betinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_ttz_protocols::msg_player_betinfo >*
packetl2c_notify_sceneinfo::mutable_player_betinfos() {
  return &player_betinfos_;
}

// optional int64 earn_gold = 4;
inline bool packetl2c_notify_sceneinfo::has_earn_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notify_sceneinfo::set_has_earn_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notify_sceneinfo::clear_has_earn_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notify_sceneinfo::clear_earn_gold() {
  earn_gold_ = GOOGLE_LONGLONG(0);
  clear_has_earn_gold();
}
inline ::google::protobuf::int64 packetl2c_notify_sceneinfo::earn_gold() const {
  return earn_gold_;
}
inline void packetl2c_notify_sceneinfo::set_earn_gold(::google::protobuf::int64 value) {
  set_has_earn_gold();
  earn_gold_ = value;
}

// optional int64 stock_gold = 5;
inline bool packetl2c_notify_sceneinfo::has_stock_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_notify_sceneinfo::set_has_stock_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_notify_sceneinfo::clear_has_stock_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_notify_sceneinfo::clear_stock_gold() {
  stock_gold_ = GOOGLE_LONGLONG(0);
  clear_has_stock_gold();
}
inline ::google::protobuf::int64 packetl2c_notify_sceneinfo::stock_gold() const {
  return stock_gold_;
}
inline void packetl2c_notify_sceneinfo::set_stock_gold(::google::protobuf::int64 value) {
  set_has_stock_gold();
  stock_gold_ = value;
}

// optional int32 banker_gold = 6;
inline bool packetl2c_notify_sceneinfo::has_banker_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_notify_sceneinfo::set_has_banker_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_notify_sceneinfo::clear_has_banker_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_notify_sceneinfo::clear_banker_gold() {
  banker_gold_ = 0;
  clear_has_banker_gold();
}
inline ::google::protobuf::int32 packetl2c_notify_sceneinfo::banker_gold() const {
  return banker_gold_;
}
inline void packetl2c_notify_sceneinfo::set_banker_gold(::google::protobuf::int32 value) {
  set_has_banker_gold();
  banker_gold_ = value;
}

// -------------------------------------------------------------------

// packetl2c_attention_needLeave

// optional .game_ttz_protocols.e_server_msg_type packet_id = 1 [default = e_mst_attention_needLeave];
inline bool packetl2c_attention_needLeave::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_attention_needLeave::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_attention_needLeave::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_attention_needLeave::clear_packet_id() {
  packet_id_ = 15104;
  clear_has_packet_id();
}
inline ::game_ttz_protocols::e_server_msg_type packetl2c_attention_needLeave::packet_id() const {
  return static_cast< ::game_ttz_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_attention_needLeave::set_packet_id(::game_ttz_protocols::e_server_msg_type value) {
  assert(::game_ttz_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_ttz_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fttz_5flogic_2eproto__INCLUDED
