// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_tbnn_protocol.proto

#ifndef PROTOBUF_game_5ftbnn_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5ftbnn_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_tbnn_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_tbnn_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

class msg_player_info;
class msg_award_item;
class msg_card_info;
class packetc2l_check_state;
class packetl2c_check_state_result;
class packetc2l_get_scene_info;
class packetl2c_scene_info_result;
class packetc2l_get_room_info;
class packetl2c_room_info_result;
class packetc2l_enter_table;
class packetc2l_change_table;
class packetl2c_enter_table_result;
class packetc2l_leave_table;
class packetl2c_leave_table_result;
class packetl2c_table_enter_player_info;
class packetl2c_table_leave_player_info;
class packetl2c_table_status_notify;
class cards_data;
class packetl2c_game_start;
class packetc2l_open_card_req;
class packetl2c_open_card_notify;
class packetl2c_game_end;
class packetl2c_game_notify;
class packetl2c_room_award_list_info;
class packetl2c_room_total_award_info;
class packetl2c_room_award_item_info;
class packetc2l_user_trustee;
class packetl2c_user_trustee_notify;

// ===================================================================

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 head_frame = 3;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // optional string head_custom = 4;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 4;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int32 chair_id = 8;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 8;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // optional .game_tbnn_protocols.e_table_status status = 9;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 9;
  inline ::game_tbnn_protocols::e_table_status status() const;
  inline void set_status(::game_tbnn_protocols::e_table_status value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 head_frame_;
  ::std::string* head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 chair_id_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_award_item : public ::google::protobuf::Message {
 public:
  msg_award_item();
  virtual ~msg_award_item();

  msg_award_item(const msg_award_item& from);

  inline msg_award_item& operator=(const msg_award_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_award_item& default_instance();

  void Swap(msg_award_item* other);

  // implements Message ----------------------------------------------

  msg_award_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_award_item& from);
  void MergeFrom(const msg_award_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string player_name = 1;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 head_frame = 2;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 2;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // repeated int32 cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional int32 award = 4;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 4;
  inline ::google::protobuf::int32 award() const;
  inline void set_award(::google::protobuf::int32 value);

  // optional string head_custom = 5;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 5;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int32 vip_level = 6;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 6;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.msg_award_item)
 private:
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 head_frame_;
  ::google::protobuf::int32 award_;
  ::std::string* head_custom_;
  ::google::protobuf::int32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_award_item* default_instance_;
};
// -------------------------------------------------------------------

class msg_card_info : public ::google::protobuf::Message {
 public:
  msg_card_info();
  virtual ~msg_card_info();

  msg_card_info(const msg_card_info& from);

  inline msg_card_info& operator=(const msg_card_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_card_info& default_instance();

  void Swap(msg_card_info* other);

  // implements Message ----------------------------------------------

  msg_card_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_card_info& from);
  void MergeFrom(const msg_card_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // optional int32 game_score = 4;
  inline bool has_game_score() const;
  inline void clear_game_score();
  static const int kGameScoreFieldNumber = 4;
  inline ::google::protobuf::int32 game_score() const;
  inline void set_game_score(::google::protobuf::int32 value);

  // optional int32 award = 5 [default = 0];
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 5;
  inline ::google::protobuf::int32 award() const;
  inline void set_award(::google::protobuf::int32 value);

  // optional int32 whn_type = 6 [default = 0];
  inline bool has_whn_type() const;
  inline void clear_whn_type();
  static const int kWhnTypeFieldNumber = 6;
  inline ::google::protobuf::int32 whn_type() const;
  inline void set_whn_type(::google::protobuf::int32 value);

  // optional int32 whn_per = 7 [default = 0];
  inline bool has_whn_per() const;
  inline void clear_whn_per();
  static const int kWhnPerFieldNumber = 7;
  inline ::google::protobuf::int32 whn_per() const;
  inline void set_whn_per(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.msg_card_info)
 private:
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_game_score();
  inline void clear_has_game_score();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_whn_type();
  inline void clear_has_whn_type();
  inline void set_has_whn_per();
  inline void clear_has_whn_per();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 game_score_;
  ::google::protobuf::int32 award_;
  ::google::protobuf::int32 whn_type_;
  ::google::protobuf::int32 whn_per_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_card_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_scene_info();
  virtual ~packetc2l_get_scene_info();

  packetc2l_get_scene_info(const packetc2l_get_scene_info& from);

  inline packetc2l_get_scene_info& operator=(const packetc2l_get_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_scene_info& default_instance();

  void Swap(packetc2l_get_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_scene_info& from);
  void MergeFrom(const packetc2l_get_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetc2l_get_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_scene_info_result();
  virtual ~packetl2c_scene_info_result();

  packetl2c_scene_info_result(const packetl2c_scene_info_result& from);

  inline packetl2c_scene_info_result& operator=(const packetl2c_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_scene_info_result& default_instance();

  void Swap(packetl2c_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_scene_info_result& from);
  void MergeFrom(const packetl2c_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional int32 room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // optional .game_tbnn_protocols.e_table_status status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::game_tbnn_protocols::e_table_status status() const;
  inline void set_status(::game_tbnn_protocols::e_table_status value);

  // optional int32 status_remain_sec = 4;
  inline bool has_status_remain_sec() const;
  inline void clear_status_remain_sec();
  static const int kStatusRemainSecFieldNumber = 4;
  inline ::google::protobuf::int32 status_remain_sec() const;
  inline void set_status_remain_sec(::google::protobuf::int32 value);

  // repeated .game_tbnn_protocols.msg_player_info players = 5;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 5;
  inline const ::game_tbnn_protocols::msg_player_info& players(int index) const;
  inline ::game_tbnn_protocols::msg_player_info* mutable_players(int index);
  inline ::game_tbnn_protocols::msg_player_info* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info >*
      mutable_players();

  // repeated .game_tbnn_protocols.cards_data cards = 6;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 6;
  inline const ::game_tbnn_protocols::cards_data& cards(int index) const;
  inline ::game_tbnn_protocols::cards_data* mutable_cards(int index);
  inline ::game_tbnn_protocols::cards_data* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data >*
      mutable_cards();

  // optional int32 status_turn_sec = 7;
  inline bool has_status_turn_sec() const;
  inline void clear_status_turn_sec();
  static const int kStatusTurnSecFieldNumber = 7;
  inline ::google::protobuf::int32 status_turn_sec() const;
  inline void set_status_turn_sec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_status_remain_sec();
  inline void clear_has_status_remain_sec();
  inline void set_has_status_turn_sec();
  inline void clear_has_status_turn_sec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_type_;
  int status_;
  ::google::protobuf::int32 status_remain_sec_;
  ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info > players_;
  ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data > cards_;
  ::google::protobuf::int32 status_turn_sec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_info();
  virtual ~packetc2l_get_room_info();

  packetc2l_get_room_info(const packetc2l_get_room_info& from);

  inline packetc2l_get_room_info& operator=(const packetc2l_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_info& default_instance();

  void Swap(packetc2l_get_room_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_info& from);
  void MergeFrom(const packetc2l_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetc2l_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_room_info_result();
  virtual ~packetl2c_room_info_result();

  packetl2c_room_info_result(const packetl2c_room_info_result& from);

  inline packetl2c_room_info_result& operator=(const packetl2c_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_room_info_result& default_instance();

  void Swap(packetl2c_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_room_info_result& from);
  void MergeFrom(const packetl2c_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_table : public ::google::protobuf::Message {
 public:
  packetc2l_enter_table();
  virtual ~packetc2l_enter_table();

  packetc2l_enter_table(const packetc2l_enter_table& from);

  inline packetc2l_enter_table& operator=(const packetc2l_enter_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_table& default_instance();

  void Swap(packetc2l_enter_table* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_table& from);
  void MergeFrom(const packetc2l_enter_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_table];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional int32 room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetc2l_enter_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_table* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_change_table : public ::google::protobuf::Message {
 public:
  packetc2l_change_table();
  virtual ~packetc2l_change_table();

  packetc2l_change_table(const packetc2l_change_table& from);

  inline packetc2l_change_table& operator=(const packetc2l_change_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_change_table& default_instance();

  void Swap(packetc2l_change_table* other);

  // implements Message ----------------------------------------------

  packetc2l_change_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_change_table& from);
  void MergeFrom(const packetc2l_change_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_table];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetc2l_change_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_change_table* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_table_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_table_result();
  virtual ~packetl2c_enter_table_result();

  packetl2c_enter_table_result(const packetl2c_enter_table_result& from);

  inline packetl2c_enter_table_result& operator=(const packetl2c_enter_table_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_table_result& default_instance();

  void Swap(packetl2c_enter_table_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_table_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_table_result& from);
  void MergeFrom(const packetl2c_enter_table_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_table_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_enter_table_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_table_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_table : public ::google::protobuf::Message {
 public:
  packetc2l_leave_table();
  virtual ~packetc2l_leave_table();

  packetc2l_leave_table(const packetc2l_leave_table& from);

  inline packetc2l_leave_table& operator=(const packetc2l_leave_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_table& default_instance();

  void Swap(packetc2l_leave_table* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_table& from);
  void MergeFrom(const packetc2l_leave_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetc2l_leave_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_table* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_table_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_table_result();
  virtual ~packetl2c_leave_table_result();

  packetl2c_leave_table_result(const packetl2c_leave_table_result& from);

  inline packetl2c_leave_table_result& operator=(const packetl2c_leave_table_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_table_result& default_instance();

  void Swap(packetl2c_leave_table_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_table_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_table_result& from);
  void MergeFrom(const packetl2c_leave_table_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 player_gold = 3;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 3;
  inline ::google::protobuf::int32 player_gold() const;
  inline void set_player_gold(::google::protobuf::int32 value);

  // optional int32 table_id = 4;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 4;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_leave_table_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 player_gold_;
  ::google::protobuf::int32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_table_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_table_enter_player_info : public ::google::protobuf::Message {
 public:
  packetl2c_table_enter_player_info();
  virtual ~packetl2c_table_enter_player_info();

  packetl2c_table_enter_player_info(const packetl2c_table_enter_player_info& from);

  inline packetl2c_table_enter_player_info& operator=(const packetl2c_table_enter_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_table_enter_player_info& default_instance();

  void Swap(packetl2c_table_enter_player_info* other);

  // implements Message ----------------------------------------------

  packetl2c_table_enter_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_table_enter_player_info& from);
  void MergeFrom(const packetl2c_table_enter_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_enter_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // repeated .game_tbnn_protocols.msg_player_info players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::game_tbnn_protocols::msg_player_info& players(int index) const;
  inline ::game_tbnn_protocols::msg_player_info* mutable_players(int index);
  inline ::game_tbnn_protocols::msg_player_info* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_table_enter_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info > players_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_table_enter_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_table_leave_player_info : public ::google::protobuf::Message {
 public:
  packetl2c_table_leave_player_info();
  virtual ~packetl2c_table_leave_player_info();

  packetl2c_table_leave_player_info(const packetl2c_table_leave_player_info& from);

  inline packetl2c_table_leave_player_info& operator=(const packetl2c_table_leave_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_table_leave_player_info& default_instance();

  void Swap(packetl2c_table_leave_player_info* other);

  // implements Message ----------------------------------------------

  packetl2c_table_leave_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_table_leave_player_info& from);
  void MergeFrom(const packetl2c_table_leave_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_leave_player_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional int32 chair_id = 2;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 2;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_table_leave_player_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chair_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_table_leave_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_table_status_notify : public ::google::protobuf::Message {
 public:
  packetl2c_table_status_notify();
  virtual ~packetl2c_table_status_notify();

  packetl2c_table_status_notify(const packetl2c_table_status_notify& from);

  inline packetl2c_table_status_notify& operator=(const packetl2c_table_status_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_table_status_notify& default_instance();

  void Swap(packetl2c_table_status_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_table_status_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_table_status_notify& from);
  void MergeFrom(const packetl2c_table_status_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_status_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional .game_tbnn_protocols.e_table_status status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::game_tbnn_protocols::e_table_status status() const;
  inline void set_status(::game_tbnn_protocols::e_table_status value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_table_status_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_table_status_notify* default_instance_;
};
// -------------------------------------------------------------------

class cards_data : public ::google::protobuf::Message {
 public:
  cards_data();
  virtual ~cards_data();

  cards_data(const cards_data& from);

  inline cards_data& operator=(const cards_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cards_data& default_instance();

  void Swap(cards_data* other);

  // implements Message ----------------------------------------------

  cards_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cards_data& from);
  void MergeFrom(const cards_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chair_idx = 1;
  inline bool has_chair_idx() const;
  inline void clear_chair_idx();
  static const int kChairIdxFieldNumber = 1;
  inline ::google::protobuf::int32 chair_idx() const;
  inline void set_chair_idx(::google::protobuf::int32 value);

  // repeated int32 card = 2;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // optional int32 card_type = 3;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 3;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // optional bool open_card = 4;
  inline bool has_open_card() const;
  inline void clear_open_card();
  static const int kOpenCardFieldNumber = 4;
  inline bool open_card() const;
  inline void set_open_card(bool value);

  // optional bool trustee = 5;
  inline bool has_trustee() const;
  inline void clear_trustee();
  static const int kTrusteeFieldNumber = 5;
  inline bool trustee() const;
  inline void set_trustee(bool value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.cards_data)
 private:
  inline void set_has_chair_idx();
  inline void clear_has_chair_idx();
  inline void set_has_card_type();
  inline void clear_has_card_type();
  inline void set_has_open_card();
  inline void clear_has_open_card();
  inline void set_has_trustee();
  inline void clear_has_trustee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;
  ::google::protobuf::int32 chair_idx_;
  ::google::protobuf::int32 card_type_;
  bool open_card_;
  bool trustee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cards_data* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_start : public ::google::protobuf::Message {
 public:
  packetl2c_game_start();
  virtual ~packetl2c_game_start();

  packetl2c_game_start(const packetl2c_game_start& from);

  inline packetl2c_game_start& operator=(const packetl2c_game_start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_start& default_instance();

  void Swap(packetl2c_game_start* other);

  // implements Message ----------------------------------------------

  packetl2c_game_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_start& from);
  void MergeFrom(const packetl2c_game_start& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // repeated .game_tbnn_protocols.cards_data cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::game_tbnn_protocols::cards_data& cards(int index) const;
  inline ::game_tbnn_protocols::cards_data* mutable_cards(int index);
  inline ::game_tbnn_protocols::cards_data* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_game_start)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data > cards_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_start* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_open_card_req : public ::google::protobuf::Message {
 public:
  packetc2l_open_card_req();
  virtual ~packetc2l_open_card_req();

  packetc2l_open_card_req(const packetc2l_open_card_req& from);

  inline packetc2l_open_card_req& operator=(const packetc2l_open_card_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_open_card_req& default_instance();

  void Swap(packetc2l_open_card_req* other);

  // implements Message ----------------------------------------------

  packetc2l_open_card_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_open_card_req& from);
  void MergeFrom(const packetc2l_open_card_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_open_card_req];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetc2l_open_card_req)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_open_card_req* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_open_card_notify : public ::google::protobuf::Message {
 public:
  packetl2c_open_card_notify();
  virtual ~packetl2c_open_card_notify();

  packetl2c_open_card_notify(const packetl2c_open_card_notify& from);

  inline packetl2c_open_card_notify& operator=(const packetl2c_open_card_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_open_card_notify& default_instance();

  void Swap(packetl2c_open_card_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_open_card_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_open_card_notify& from);
  void MergeFrom(const packetl2c_open_card_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_open_card_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional int32 chair_id = 2;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 2;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_open_card_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chair_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_open_card_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_end : public ::google::protobuf::Message {
 public:
  packetl2c_game_end();
  virtual ~packetl2c_game_end();

  packetl2c_game_end(const packetl2c_game_end& from);

  inline packetl2c_game_end& operator=(const packetl2c_game_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_end& default_instance();

  void Swap(packetl2c_game_end* other);

  // implements Message ----------------------------------------------

  packetl2c_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_end& from);
  void MergeFrom(const packetl2c_game_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // repeated .game_tbnn_protocols.msg_card_info cards = 4;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 4;
  inline const ::game_tbnn_protocols::msg_card_info& cards(int index) const;
  inline ::game_tbnn_protocols::msg_card_info* mutable_cards(int index);
  inline ::game_tbnn_protocols::msg_card_info* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_card_info >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_card_info >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_game_end)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_card_info > cards_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_end* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_notify : public ::google::protobuf::Message {
 public:
  packetl2c_game_notify();
  virtual ~packetl2c_game_notify();

  packetl2c_game_notify(const packetl2c_game_notify& from);

  inline packetl2c_game_notify& operator=(const packetl2c_game_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_notify& default_instance();

  void Swap(packetl2c_game_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_game_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_notify& from);
  void MergeFrom(const packetl2c_game_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional .game_tbnn_protocols.e_notify_type notify_type = 2;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 2;
  inline ::game_tbnn_protocols::e_notify_type notify_type() const;
  inline void set_notify_type(::game_tbnn_protocols::e_notify_type value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_game_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int notify_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_room_award_list_info : public ::google::protobuf::Message {
 public:
  packetl2c_room_award_list_info();
  virtual ~packetl2c_room_award_list_info();

  packetl2c_room_award_list_info(const packetl2c_room_award_list_info& from);

  inline packetl2c_room_award_list_info& operator=(const packetl2c_room_award_list_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_room_award_list_info& default_instance();

  void Swap(packetl2c_room_award_list_info* other);

  // implements Message ----------------------------------------------

  packetl2c_room_award_list_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_room_award_list_info& from);
  void MergeFrom(const packetl2c_room_award_list_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_award_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional int64 total_award = 2;
  inline bool has_total_award() const;
  inline void clear_total_award();
  static const int kTotalAwardFieldNumber = 2;
  inline ::google::protobuf::int64 total_award() const;
  inline void set_total_award(::google::protobuf::int64 value);

  // optional int32 week_award = 3;
  inline bool has_week_award() const;
  inline void clear_week_award();
  static const int kWeekAwardFieldNumber = 3;
  inline ::google::protobuf::int32 week_award() const;
  inline void set_week_award(::google::protobuf::int32 value);

  // repeated .game_tbnn_protocols.msg_award_item award_list = 4;
  inline int award_list_size() const;
  inline void clear_award_list();
  static const int kAwardListFieldNumber = 4;
  inline const ::game_tbnn_protocols::msg_award_item& award_list(int index) const;
  inline ::game_tbnn_protocols::msg_award_item* mutable_award_list(int index);
  inline ::game_tbnn_protocols::msg_award_item* add_award_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_award_item >&
      award_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_award_item >*
      mutable_award_list();

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_room_award_list_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_total_award();
  inline void clear_has_total_award();
  inline void set_has_week_award();
  inline void clear_has_week_award();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 total_award_;
  int packet_id_;
  ::google::protobuf::int32 week_award_;
  ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_award_item > award_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_room_award_list_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_room_total_award_info : public ::google::protobuf::Message {
 public:
  packetl2c_room_total_award_info();
  virtual ~packetl2c_room_total_award_info();

  packetl2c_room_total_award_info(const packetl2c_room_total_award_info& from);

  inline packetl2c_room_total_award_info& operator=(const packetl2c_room_total_award_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_room_total_award_info& default_instance();

  void Swap(packetl2c_room_total_award_info* other);

  // implements Message ----------------------------------------------

  packetl2c_room_total_award_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_room_total_award_info& from);
  void MergeFrom(const packetl2c_room_total_award_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_total_award];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional int64 total_award = 2;
  inline bool has_total_award() const;
  inline void clear_total_award();
  static const int kTotalAwardFieldNumber = 2;
  inline ::google::protobuf::int64 total_award() const;
  inline void set_total_award(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_room_total_award_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_total_award();
  inline void clear_has_total_award();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 total_award_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_room_total_award_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_room_award_item_info : public ::google::protobuf::Message {
 public:
  packetl2c_room_award_item_info();
  virtual ~packetl2c_room_award_item_info();

  packetl2c_room_award_item_info(const packetl2c_room_award_item_info& from);

  inline packetl2c_room_award_item_info& operator=(const packetl2c_room_award_item_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_room_award_item_info& default_instance();

  void Swap(packetl2c_room_award_item_info* other);

  // implements Message ----------------------------------------------

  packetl2c_room_award_item_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_room_award_item_info& from);
  void MergeFrom(const packetl2c_room_award_item_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_award_item];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional .game_tbnn_protocols.msg_award_item award_item = 2;
  inline bool has_award_item() const;
  inline void clear_award_item();
  static const int kAwardItemFieldNumber = 2;
  inline const ::game_tbnn_protocols::msg_award_item& award_item() const;
  inline ::game_tbnn_protocols::msg_award_item* mutable_award_item();
  inline ::game_tbnn_protocols::msg_award_item* release_award_item();
  inline void set_allocated_award_item(::game_tbnn_protocols::msg_award_item* award_item);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_room_award_item_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_award_item();
  inline void clear_has_award_item();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_tbnn_protocols::msg_award_item* award_item_;
  int packet_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_room_award_item_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_user_trustee : public ::google::protobuf::Message {
 public:
  packetc2l_user_trustee();
  virtual ~packetc2l_user_trustee();

  packetc2l_user_trustee(const packetc2l_user_trustee& from);

  inline packetc2l_user_trustee& operator=(const packetc2l_user_trustee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_user_trustee& default_instance();

  void Swap(packetc2l_user_trustee* other);

  // implements Message ----------------------------------------------

  packetc2l_user_trustee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_user_trustee& from);
  void MergeFrom(const packetc2l_user_trustee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional bool trustee = 2;
  inline bool has_trustee() const;
  inline void clear_trustee();
  static const int kTrusteeFieldNumber = 2;
  inline bool trustee() const;
  inline void set_trustee(bool value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetc2l_user_trustee)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_trustee();
  inline void clear_has_trustee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool trustee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_user_trustee* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_user_trustee_notify : public ::google::protobuf::Message {
 public:
  packetl2c_user_trustee_notify();
  virtual ~packetl2c_user_trustee_notify();

  packetl2c_user_trustee_notify(const packetl2c_user_trustee_notify& from);

  inline packetl2c_user_trustee_notify& operator=(const packetl2c_user_trustee_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_user_trustee_notify& default_instance();

  void Swap(packetl2c_user_trustee_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_user_trustee_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_user_trustee_notify& from);
  void MergeFrom(const packetl2c_user_trustee_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_tbnn_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_tbnn_protocols::e_server_msg_type value);

  // optional int32 chair_id = 2;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 2;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // optional bool trustee = 3;
  inline bool has_trustee() const;
  inline void clear_trustee();
  static const int kTrusteeFieldNumber = 3;
  inline bool trustee() const;
  inline void set_trustee(bool value);

  // @@protoc_insertion_point(class_scope:game_tbnn_protocols.packetl2c_user_trustee_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_trustee();
  inline void clear_has_trustee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chair_id_;
  bool trustee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftbnn_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftbnn_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_user_trustee_notify* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool msg_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_player_info::player_name() const {
  return *player_name_;
}
inline void msg_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_frame = 3;
inline bool msg_player_info::has_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::head_frame() const {
  return head_frame_;
}
inline void msg_player_info::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// optional string head_custom = 4;
inline bool msg_player_info::has_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_player_info::head_custom() const {
  return *head_custom_;
}
inline void msg_player_info::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_player_info::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 5;
inline bool msg_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_info::player_gold() const {
  return player_gold_;
}
inline void msg_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool msg_player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 msg_player_info::player_sex() const {
  return player_sex_;
}
inline void msg_player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 vip_level = 7;
inline bool msg_player_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_player_info::vip_level() const {
  return vip_level_;
}
inline void msg_player_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 chair_id = 8;
inline bool msg_player_info::has_chair_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_player_info::set_has_chair_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_player_info::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_player_info::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 msg_player_info::chair_id() const {
  return chair_id_;
}
inline void msg_player_info::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional .game_tbnn_protocols.e_table_status status = 9;
inline bool msg_player_info::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_player_info::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_player_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_player_info::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::game_tbnn_protocols::e_table_status msg_player_info::status() const {
  return static_cast< ::game_tbnn_protocols::e_table_status >(status_);
}
inline void msg_player_info::set_status(::game_tbnn_protocols::e_table_status value) {
  assert(::game_tbnn_protocols::e_table_status_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// msg_award_item

// optional string player_name = 1;
inline bool msg_award_item::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_award_item::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_award_item::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_award_item::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_award_item::player_name() const {
  return *player_name_;
}
inline void msg_award_item::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_award_item::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_award_item::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_award_item::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_award_item::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_award_item::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_frame = 2;
inline bool msg_award_item::has_head_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_award_item::set_has_head_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_award_item::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_award_item::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_award_item::head_frame() const {
  return head_frame_;
}
inline void msg_award_item::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// repeated int32 cards = 3;
inline int msg_award_item::cards_size() const {
  return cards_.size();
}
inline void msg_award_item::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 msg_award_item::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_award_item::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void msg_award_item::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_award_item::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_award_item::mutable_cards() {
  return &cards_;
}

// optional int32 award = 4;
inline bool msg_award_item::has_award() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_award_item::set_has_award() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_award_item::clear_has_award() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_award_item::clear_award() {
  award_ = 0;
  clear_has_award();
}
inline ::google::protobuf::int32 msg_award_item::award() const {
  return award_;
}
inline void msg_award_item::set_award(::google::protobuf::int32 value) {
  set_has_award();
  award_ = value;
}

// optional string head_custom = 5;
inline bool msg_award_item::has_head_custom() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_award_item::set_has_head_custom() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_award_item::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_award_item::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_award_item::head_custom() const {
  return *head_custom_;
}
inline void msg_award_item::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_award_item::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_award_item::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_award_item::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_award_item::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_award_item::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 vip_level = 6;
inline bool msg_award_item::has_vip_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_award_item::set_has_vip_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_award_item::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_award_item::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_award_item::vip_level() const {
  return vip_level_;
}
inline void msg_award_item::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// msg_card_info

// optional int32 chair_id = 1;
inline bool msg_card_info::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_card_info::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_card_info::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_card_info::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 msg_card_info::chair_id() const {
  return chair_id_;
}
inline void msg_card_info::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional int32 game_score = 4;
inline bool msg_card_info::has_game_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_card_info::set_has_game_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_card_info::clear_has_game_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_card_info::clear_game_score() {
  game_score_ = 0;
  clear_has_game_score();
}
inline ::google::protobuf::int32 msg_card_info::game_score() const {
  return game_score_;
}
inline void msg_card_info::set_game_score(::google::protobuf::int32 value) {
  set_has_game_score();
  game_score_ = value;
}

// optional int32 award = 5 [default = 0];
inline bool msg_card_info::has_award() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_card_info::set_has_award() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_card_info::clear_has_award() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_card_info::clear_award() {
  award_ = 0;
  clear_has_award();
}
inline ::google::protobuf::int32 msg_card_info::award() const {
  return award_;
}
inline void msg_card_info::set_award(::google::protobuf::int32 value) {
  set_has_award();
  award_ = value;
}

// optional int32 whn_type = 6 [default = 0];
inline bool msg_card_info::has_whn_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_card_info::set_has_whn_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_card_info::clear_has_whn_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_card_info::clear_whn_type() {
  whn_type_ = 0;
  clear_has_whn_type();
}
inline ::google::protobuf::int32 msg_card_info::whn_type() const {
  return whn_type_;
}
inline void msg_card_info::set_whn_type(::google::protobuf::int32 value) {
  set_has_whn_type();
  whn_type_ = value;
}

// optional int32 whn_per = 7 [default = 0];
inline bool msg_card_info::has_whn_per() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_card_info::set_has_whn_per() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_card_info::clear_has_whn_per() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_card_info::clear_whn_per() {
  whn_per_ = 0;
  clear_has_whn_per();
}
inline ::google::protobuf::int32 msg_card_info::whn_per() const {
  return whn_per_;
}
inline void msg_card_info::set_whn_per(::google::protobuf::int32 value) {
  set_has_whn_per();
  whn_per_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool packetl2c_check_state_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_check_state_result::result() const {
  return result_;
}
inline void packetl2c_check_state_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_scene_info

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
inline bool packetc2l_get_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_scene_info::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetc2l_get_scene_info::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_scene_info::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_scene_info_result

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
inline bool packetl2c_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_scene_info_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_scene_info_result::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_scene_info_result::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_type = 2;
inline bool packetl2c_scene_info_result::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_scene_info_result::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_scene_info_result::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_scene_info_result::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::room_type() const {
  return room_type_;
}
inline void packetl2c_scene_info_result::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// optional .game_tbnn_protocols.e_table_status status = 3;
inline bool packetl2c_scene_info_result::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_scene_info_result::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_scene_info_result::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_scene_info_result::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::game_tbnn_protocols::e_table_status packetl2c_scene_info_result::status() const {
  return static_cast< ::game_tbnn_protocols::e_table_status >(status_);
}
inline void packetl2c_scene_info_result::set_status(::game_tbnn_protocols::e_table_status value) {
  assert(::game_tbnn_protocols::e_table_status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 status_remain_sec = 4;
inline bool packetl2c_scene_info_result::has_status_remain_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_scene_info_result::set_has_status_remain_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_scene_info_result::clear_has_status_remain_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_scene_info_result::clear_status_remain_sec() {
  status_remain_sec_ = 0;
  clear_has_status_remain_sec();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::status_remain_sec() const {
  return status_remain_sec_;
}
inline void packetl2c_scene_info_result::set_status_remain_sec(::google::protobuf::int32 value) {
  set_has_status_remain_sec();
  status_remain_sec_ = value;
}

// repeated .game_tbnn_protocols.msg_player_info players = 5;
inline int packetl2c_scene_info_result::players_size() const {
  return players_.size();
}
inline void packetl2c_scene_info_result::clear_players() {
  players_.Clear();
}
inline const ::game_tbnn_protocols::msg_player_info& packetl2c_scene_info_result::players(int index) const {
  return players_.Get(index);
}
inline ::game_tbnn_protocols::msg_player_info* packetl2c_scene_info_result::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::game_tbnn_protocols::msg_player_info* packetl2c_scene_info_result::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info >&
packetl2c_scene_info_result::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info >*
packetl2c_scene_info_result::mutable_players() {
  return &players_;
}

// repeated .game_tbnn_protocols.cards_data cards = 6;
inline int packetl2c_scene_info_result::cards_size() const {
  return cards_.size();
}
inline void packetl2c_scene_info_result::clear_cards() {
  cards_.Clear();
}
inline const ::game_tbnn_protocols::cards_data& packetl2c_scene_info_result::cards(int index) const {
  return cards_.Get(index);
}
inline ::game_tbnn_protocols::cards_data* packetl2c_scene_info_result::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::game_tbnn_protocols::cards_data* packetl2c_scene_info_result::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data >&
packetl2c_scene_info_result::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data >*
packetl2c_scene_info_result::mutable_cards() {
  return &cards_;
}

// optional int32 status_turn_sec = 7;
inline bool packetl2c_scene_info_result::has_status_turn_sec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_scene_info_result::set_has_status_turn_sec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_scene_info_result::clear_has_status_turn_sec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_scene_info_result::clear_status_turn_sec() {
  status_turn_sec_ = 0;
  clear_has_status_turn_sec();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::status_turn_sec() const {
  return status_turn_sec_;
}
inline void packetl2c_scene_info_result::set_status_turn_sec(::google::protobuf::int32 value) {
  set_has_status_turn_sec();
  status_turn_sec_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_info

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
inline bool packetc2l_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_info::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetc2l_get_room_info::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_info::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_room_info_result

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_info_result];
inline bool packetl2c_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_room_info_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_room_info_result::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_room_info_result::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_enter_table

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_table];
inline bool packetc2l_enter_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_table::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetc2l_enter_table::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_table::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_type = 2;
inline bool packetc2l_enter_table::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_table::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_table::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_table::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 packetc2l_enter_table::room_type() const {
  return room_type_;
}
inline void packetc2l_enter_table::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// -------------------------------------------------------------------

// packetc2l_change_table

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_change_table];
inline bool packetc2l_change_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_change_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_change_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_change_table::clear_packet_id() {
  packet_id_ = 10018;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetc2l_change_table::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_change_table::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_enter_table_result

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_table_result];
inline bool packetl2c_enter_table_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_table_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_table_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_table_result::clear_packet_id() {
  packet_id_ = 15020;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_enter_table_result::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_table_result::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_enter_table_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_table_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_table_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_table_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_enter_table_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_enter_table_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_table

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
inline bool packetc2l_leave_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_table::clear_packet_id() {
  packet_id_ = 10014;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetc2l_leave_table::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_table::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_table_result

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
inline bool packetl2c_leave_table_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_table_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_table_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_table_result::clear_packet_id() {
  packet_id_ = 15021;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_leave_table_result::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_table_result::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_leave_table_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_table_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_table_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_table_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_leave_table_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_leave_table_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 player_gold = 3;
inline bool packetl2c_leave_table_result::has_player_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_leave_table_result::set_has_player_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_leave_table_result::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_leave_table_result::clear_player_gold() {
  player_gold_ = 0;
  clear_has_player_gold();
}
inline ::google::protobuf::int32 packetl2c_leave_table_result::player_gold() const {
  return player_gold_;
}
inline void packetl2c_leave_table_result::set_player_gold(::google::protobuf::int32 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 table_id = 4;
inline bool packetl2c_leave_table_result::has_table_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_leave_table_result::set_has_table_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_leave_table_result::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_leave_table_result::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 packetl2c_leave_table_result::table_id() const {
  return table_id_;
}
inline void packetl2c_leave_table_result::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_table_enter_player_info

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_enter_player_info];
inline bool packetl2c_table_enter_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_table_enter_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_table_enter_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_table_enter_player_info::clear_packet_id() {
  packet_id_ = 15022;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_table_enter_player_info::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_table_enter_player_info::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_tbnn_protocols.msg_player_info players = 2;
inline int packetl2c_table_enter_player_info::players_size() const {
  return players_.size();
}
inline void packetl2c_table_enter_player_info::clear_players() {
  players_.Clear();
}
inline const ::game_tbnn_protocols::msg_player_info& packetl2c_table_enter_player_info::players(int index) const {
  return players_.Get(index);
}
inline ::game_tbnn_protocols::msg_player_info* packetl2c_table_enter_player_info::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::game_tbnn_protocols::msg_player_info* packetl2c_table_enter_player_info::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info >&
packetl2c_table_enter_player_info::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_player_info >*
packetl2c_table_enter_player_info::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// packetl2c_table_leave_player_info

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_leave_player_info];
inline bool packetl2c_table_leave_player_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_table_leave_player_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_table_leave_player_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_table_leave_player_info::clear_packet_id() {
  packet_id_ = 15023;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_table_leave_player_info::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_table_leave_player_info::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chair_id = 2;
inline bool packetl2c_table_leave_player_info::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_table_leave_player_info::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_table_leave_player_info::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_table_leave_player_info::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 packetl2c_table_leave_player_info::chair_id() const {
  return chair_id_;
}
inline void packetl2c_table_leave_player_info::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_table_status_notify

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_table_status_notify];
inline bool packetl2c_table_status_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_table_status_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_table_status_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_table_status_notify::clear_packet_id() {
  packet_id_ = 15029;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_table_status_notify::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_table_status_notify::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_tbnn_protocols.e_table_status status = 2;
inline bool packetl2c_table_status_notify::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_table_status_notify::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_table_status_notify::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_table_status_notify::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::game_tbnn_protocols::e_table_status packetl2c_table_status_notify::status() const {
  return static_cast< ::game_tbnn_protocols::e_table_status >(status_);
}
inline void packetl2c_table_status_notify::set_status(::game_tbnn_protocols::e_table_status value) {
  assert(::game_tbnn_protocols::e_table_status_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// cards_data

// optional int32 chair_idx = 1;
inline bool cards_data::has_chair_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cards_data::set_has_chair_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cards_data::clear_has_chair_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cards_data::clear_chair_idx() {
  chair_idx_ = 0;
  clear_has_chair_idx();
}
inline ::google::protobuf::int32 cards_data::chair_idx() const {
  return chair_idx_;
}
inline void cards_data::set_chair_idx(::google::protobuf::int32 value) {
  set_has_chair_idx();
  chair_idx_ = value;
}

// repeated int32 card = 2;
inline int cards_data::card_size() const {
  return card_.size();
}
inline void cards_data::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 cards_data::card(int index) const {
  return card_.Get(index);
}
inline void cards_data::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
}
inline void cards_data::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cards_data::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cards_data::mutable_card() {
  return &card_;
}

// optional int32 card_type = 3;
inline bool cards_data::has_card_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cards_data::set_has_card_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cards_data::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cards_data::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 cards_data::card_type() const {
  return card_type_;
}
inline void cards_data::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// optional bool open_card = 4;
inline bool cards_data::has_open_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cards_data::set_has_open_card() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cards_data::clear_has_open_card() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cards_data::clear_open_card() {
  open_card_ = false;
  clear_has_open_card();
}
inline bool cards_data::open_card() const {
  return open_card_;
}
inline void cards_data::set_open_card(bool value) {
  set_has_open_card();
  open_card_ = value;
}

// optional bool trustee = 5;
inline bool cards_data::has_trustee() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cards_data::set_has_trustee() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cards_data::clear_has_trustee() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cards_data::clear_trustee() {
  trustee_ = false;
  clear_has_trustee();
}
inline bool cards_data::trustee() const {
  return trustee_;
}
inline void cards_data::set_trustee(bool value) {
  set_has_trustee();
  trustee_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_start

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
inline bool packetl2c_game_start::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_start::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_start::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_start::clear_packet_id() {
  packet_id_ = 15026;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_game_start::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_start::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_tbnn_protocols.cards_data cards = 2;
inline int packetl2c_game_start::cards_size() const {
  return cards_.size();
}
inline void packetl2c_game_start::clear_cards() {
  cards_.Clear();
}
inline const ::game_tbnn_protocols::cards_data& packetl2c_game_start::cards(int index) const {
  return cards_.Get(index);
}
inline ::game_tbnn_protocols::cards_data* packetl2c_game_start::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::game_tbnn_protocols::cards_data* packetl2c_game_start::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data >&
packetl2c_game_start::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::cards_data >*
packetl2c_game_start::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// packetc2l_open_card_req

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_open_card_req];
inline bool packetc2l_open_card_req::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_open_card_req::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_open_card_req::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_open_card_req::clear_packet_id() {
  packet_id_ = 10017;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetc2l_open_card_req::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_open_card_req::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_open_card_notify

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_open_card_notify];
inline bool packetl2c_open_card_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_open_card_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_open_card_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_open_card_notify::clear_packet_id() {
  packet_id_ = 15027;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_open_card_notify::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_open_card_notify::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chair_id = 2;
inline bool packetl2c_open_card_notify::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_open_card_notify::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_open_card_notify::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_open_card_notify::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 packetl2c_open_card_notify::chair_id() const {
  return chair_id_;
}
inline void packetl2c_open_card_notify::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_end

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
inline bool packetl2c_game_end::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_end::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_end::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_end::clear_packet_id() {
  packet_id_ = 15028;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_game_end::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_end::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_tbnn_protocols.msg_card_info cards = 4;
inline int packetl2c_game_end::cards_size() const {
  return cards_.size();
}
inline void packetl2c_game_end::clear_cards() {
  cards_.Clear();
}
inline const ::game_tbnn_protocols::msg_card_info& packetl2c_game_end::cards(int index) const {
  return cards_.Get(index);
}
inline ::game_tbnn_protocols::msg_card_info* packetl2c_game_end::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::game_tbnn_protocols::msg_card_info* packetl2c_game_end::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_card_info >&
packetl2c_game_end::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_card_info >*
packetl2c_game_end::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// packetl2c_game_notify

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
inline bool packetl2c_game_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_notify::clear_packet_id() {
  packet_id_ = 15033;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_game_notify::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_notify::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_tbnn_protocols.e_notify_type notify_type = 2;
inline bool packetl2c_game_notify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_notify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_notify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_notify::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::game_tbnn_protocols::e_notify_type packetl2c_game_notify::notify_type() const {
  return static_cast< ::game_tbnn_protocols::e_notify_type >(notify_type_);
}
inline void packetl2c_game_notify::set_notify_type(::game_tbnn_protocols::e_notify_type value) {
  assert(::game_tbnn_protocols::e_notify_type_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// -------------------------------------------------------------------

// packetl2c_room_award_list_info

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_award_list];
inline bool packetl2c_room_award_list_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_room_award_list_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_room_award_list_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_room_award_list_info::clear_packet_id() {
  packet_id_ = 15030;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_room_award_list_info::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_room_award_list_info::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 total_award = 2;
inline bool packetl2c_room_award_list_info::has_total_award() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_room_award_list_info::set_has_total_award() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_room_award_list_info::clear_has_total_award() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_room_award_list_info::clear_total_award() {
  total_award_ = GOOGLE_LONGLONG(0);
  clear_has_total_award();
}
inline ::google::protobuf::int64 packetl2c_room_award_list_info::total_award() const {
  return total_award_;
}
inline void packetl2c_room_award_list_info::set_total_award(::google::protobuf::int64 value) {
  set_has_total_award();
  total_award_ = value;
}

// optional int32 week_award = 3;
inline bool packetl2c_room_award_list_info::has_week_award() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_room_award_list_info::set_has_week_award() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_room_award_list_info::clear_has_week_award() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_room_award_list_info::clear_week_award() {
  week_award_ = 0;
  clear_has_week_award();
}
inline ::google::protobuf::int32 packetl2c_room_award_list_info::week_award() const {
  return week_award_;
}
inline void packetl2c_room_award_list_info::set_week_award(::google::protobuf::int32 value) {
  set_has_week_award();
  week_award_ = value;
}

// repeated .game_tbnn_protocols.msg_award_item award_list = 4;
inline int packetl2c_room_award_list_info::award_list_size() const {
  return award_list_.size();
}
inline void packetl2c_room_award_list_info::clear_award_list() {
  award_list_.Clear();
}
inline const ::game_tbnn_protocols::msg_award_item& packetl2c_room_award_list_info::award_list(int index) const {
  return award_list_.Get(index);
}
inline ::game_tbnn_protocols::msg_award_item* packetl2c_room_award_list_info::mutable_award_list(int index) {
  return award_list_.Mutable(index);
}
inline ::game_tbnn_protocols::msg_award_item* packetl2c_room_award_list_info::add_award_list() {
  return award_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_award_item >&
packetl2c_room_award_list_info::award_list() const {
  return award_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_tbnn_protocols::msg_award_item >*
packetl2c_room_award_list_info::mutable_award_list() {
  return &award_list_;
}

// -------------------------------------------------------------------

// packetl2c_room_total_award_info

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_total_award];
inline bool packetl2c_room_total_award_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_room_total_award_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_room_total_award_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_room_total_award_info::clear_packet_id() {
  packet_id_ = 15031;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_room_total_award_info::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_room_total_award_info::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 total_award = 2;
inline bool packetl2c_room_total_award_info::has_total_award() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_room_total_award_info::set_has_total_award() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_room_total_award_info::clear_has_total_award() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_room_total_award_info::clear_total_award() {
  total_award_ = GOOGLE_LONGLONG(0);
  clear_has_total_award();
}
inline ::google::protobuf::int64 packetl2c_room_total_award_info::total_award() const {
  return total_award_;
}
inline void packetl2c_room_total_award_info::set_total_award(::google::protobuf::int64 value) {
  set_has_total_award();
  total_award_ = value;
}

// -------------------------------------------------------------------

// packetl2c_room_award_item_info

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_award_item];
inline bool packetl2c_room_award_item_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_room_award_item_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_room_award_item_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_room_award_item_info::clear_packet_id() {
  packet_id_ = 15032;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_room_award_item_info::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_room_award_item_info::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_tbnn_protocols.msg_award_item award_item = 2;
inline bool packetl2c_room_award_item_info::has_award_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_room_award_item_info::set_has_award_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_room_award_item_info::clear_has_award_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_room_award_item_info::clear_award_item() {
  if (award_item_ != NULL) award_item_->::game_tbnn_protocols::msg_award_item::Clear();
  clear_has_award_item();
}
inline const ::game_tbnn_protocols::msg_award_item& packetl2c_room_award_item_info::award_item() const {
  return award_item_ != NULL ? *award_item_ : *default_instance_->award_item_;
}
inline ::game_tbnn_protocols::msg_award_item* packetl2c_room_award_item_info::mutable_award_item() {
  set_has_award_item();
  if (award_item_ == NULL) award_item_ = new ::game_tbnn_protocols::msg_award_item;
  return award_item_;
}
inline ::game_tbnn_protocols::msg_award_item* packetl2c_room_award_item_info::release_award_item() {
  clear_has_award_item();
  ::game_tbnn_protocols::msg_award_item* temp = award_item_;
  award_item_ = NULL;
  return temp;
}
inline void packetl2c_room_award_item_info::set_allocated_award_item(::game_tbnn_protocols::msg_award_item* award_item) {
  delete award_item_;
  award_item_ = award_item;
  if (award_item) {
    set_has_award_item();
  } else {
    clear_has_award_item();
  }
}

// optional int32 player_id = 3;
inline bool packetl2c_room_award_item_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_room_award_item_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_room_award_item_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_room_award_item_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_room_award_item_info::player_id() const {
  return player_id_;
}
inline void packetl2c_room_award_item_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_user_trustee

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
inline bool packetc2l_user_trustee::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_user_trustee::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_user_trustee::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_user_trustee::clear_packet_id() {
  packet_id_ = 10015;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetc2l_user_trustee::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_user_trustee::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool trustee = 2;
inline bool packetc2l_user_trustee::has_trustee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_user_trustee::set_has_trustee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_user_trustee::clear_has_trustee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_user_trustee::clear_trustee() {
  trustee_ = false;
  clear_has_trustee();
}
inline bool packetc2l_user_trustee::trustee() const {
  return trustee_;
}
inline void packetc2l_user_trustee::set_trustee(bool value) {
  set_has_trustee();
  trustee_ = value;
}

// -------------------------------------------------------------------

// packetl2c_user_trustee_notify

// optional .game_tbnn_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
inline bool packetl2c_user_trustee_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_user_trustee_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_user_trustee_notify::clear_packet_id() {
  packet_id_ = 15024;
  clear_has_packet_id();
}
inline ::game_tbnn_protocols::e_server_msg_type packetl2c_user_trustee_notify::packet_id() const {
  return static_cast< ::game_tbnn_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_user_trustee_notify::set_packet_id(::game_tbnn_protocols::e_server_msg_type value) {
  assert(::game_tbnn_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chair_id = 2;
inline bool packetl2c_user_trustee_notify::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_user_trustee_notify::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_user_trustee_notify::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 packetl2c_user_trustee_notify::chair_id() const {
  return chair_id_;
}
inline void packetl2c_user_trustee_notify::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional bool trustee = 3;
inline bool packetl2c_user_trustee_notify::has_trustee() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_trustee() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_user_trustee_notify::clear_has_trustee() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_user_trustee_notify::clear_trustee() {
  trustee_ = false;
  clear_has_trustee();
}
inline bool packetl2c_user_trustee_notify::trustee() const {
  return trustee_;
}
inline void packetl2c_user_trustee_notify::set_trustee(bool value) {
  set_has_trustee();
  trustee_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_tbnn_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5ftbnn_5fprotocol_2eproto__INCLUDED
