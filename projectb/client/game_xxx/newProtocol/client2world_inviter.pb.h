// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_inviter.proto

#ifndef PROTOBUF_client2world_5finviter_2eproto__INCLUDED
#define PROTOBUF_client2world_5finviter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5finviter_2eproto();
void protobuf_AssignDesc_client2world_5finviter_2eproto();
void protobuf_ShutdownFile_client2world_5finviter_2eproto();

class msg_inviter_info;
class packetc2w_bind_inviter;
class packetw2c_bind_inviter_result;
class packetc2w_reward_list;
class packetw2c_reward_list_result;
class packetc2w_receive_reward;
class packetw2c_receive_reward_result;
class packetc2w_ask_income_history;
class packetw2c_income_history_result;
class packetw2c_income_new_result;

// ===================================================================

class msg_inviter_info : public ::google::protobuf::Message {
 public:
  msg_inviter_info();
  virtual ~msg_inviter_info();

  msg_inviter_info(const msg_inviter_info& from);

  inline msg_inviter_info& operator=(const msg_inviter_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_inviter_info& default_instance();

  void Swap(msg_inviter_info* other);

  // implements Message ----------------------------------------------

  msg_inviter_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_inviter_info& from);
  void MergeFrom(const msg_inviter_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 photo_frame = 1;
  inline bool has_photo_frame() const;
  inline void clear_photo_frame();
  static const int kPhotoFrameFieldNumber = 1;
  inline ::google::protobuf::int32 photo_frame() const;
  inline void set_photo_frame(::google::protobuf::int32 value);

  // optional string nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional int64 total_reward = 3;
  inline bool has_total_reward() const;
  inline void clear_total_reward();
  static const int kTotalRewardFieldNumber = 3;
  inline ::google::protobuf::int64 total_reward() const;
  inline void set_total_reward(::google::protobuf::int64 value);

  // optional int32 player_id = 4;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 4;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 today_reward = 5;
  inline bool has_today_reward() const;
  inline void clear_today_reward();
  static const int kTodayRewardFieldNumber = 5;
  inline ::google::protobuf::int64 today_reward() const;
  inline void set_today_reward(::google::protobuf::int64 value);

  // optional string icon_custom = 6;
  inline bool has_icon_custom() const;
  inline void clear_icon_custom();
  static const int kIconCustomFieldNumber = 6;
  inline const ::std::string& icon_custom() const;
  inline void set_icon_custom(const ::std::string& value);
  inline void set_icon_custom(const char* value);
  inline void set_icon_custom(const char* value, size_t size);
  inline ::std::string* mutable_icon_custom();
  inline ::std::string* release_icon_custom();
  inline void set_allocated_icon_custom(::std::string* icon_custom);

  // optional int32 viplvl = 7;
  inline bool has_viplvl() const;
  inline void clear_viplvl();
  static const int kViplvlFieldNumber = 7;
  inline ::google::protobuf::int32 viplvl() const;
  inline void set_viplvl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_inviter_info)
 private:
  inline void set_has_photo_frame();
  inline void clear_has_photo_frame();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_total_reward();
  inline void clear_has_total_reward();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_today_reward();
  inline void clear_has_today_reward();
  inline void set_has_icon_custom();
  inline void clear_has_icon_custom();
  inline void set_has_viplvl();
  inline void clear_has_viplvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nick_name_;
  ::google::protobuf::int32 photo_frame_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 total_reward_;
  ::google::protobuf::int64 today_reward_;
  ::std::string* icon_custom_;
  ::google::protobuf::int32 viplvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static msg_inviter_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_bind_inviter : public ::google::protobuf::Message {
 public:
  packetc2w_bind_inviter();
  virtual ~packetc2w_bind_inviter();

  packetc2w_bind_inviter(const packetc2w_bind_inviter& from);

  inline packetc2w_bind_inviter& operator=(const packetc2w_bind_inviter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_bind_inviter& default_instance();

  void Swap(packetc2w_bind_inviter* other);

  // implements Message ----------------------------------------------

  packetc2w_bind_inviter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_bind_inviter& from);
  void MergeFrom(const packetc2w_bind_inviter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_inviter];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 inviter = 2;
  inline bool has_inviter() const;
  inline void clear_inviter();
  static const int kInviterFieldNumber = 2;
  inline ::google::protobuf::int32 inviter() const;
  inline void set_inviter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_bind_inviter)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_inviter();
  inline void clear_has_inviter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 inviter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_bind_inviter* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_bind_inviter_result : public ::google::protobuf::Message {
 public:
  packetw2c_bind_inviter_result();
  virtual ~packetw2c_bind_inviter_result();

  packetw2c_bind_inviter_result(const packetw2c_bind_inviter_result& from);

  inline packetw2c_bind_inviter_result& operator=(const packetw2c_bind_inviter_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_bind_inviter_result& default_instance();

  void Swap(packetw2c_bind_inviter_result* other);

  // implements Message ----------------------------------------------

  packetw2c_bind_inviter_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_bind_inviter_result& from);
  void MergeFrom(const packetw2c_bind_inviter_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_inviter_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 inviter = 3;
  inline bool has_inviter() const;
  inline void clear_inviter();
  static const int kInviterFieldNumber = 3;
  inline ::google::protobuf::int32 inviter() const;
  inline void set_inviter(::google::protobuf::int32 value);

  // optional string channelid = 4;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 4;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_bind_inviter_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_inviter();
  inline void clear_has_inviter();
  inline void set_has_channelid();
  inline void clear_has_channelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::std::string* channelid_;
  ::google::protobuf::int32 inviter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_bind_inviter_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_reward_list : public ::google::protobuf::Message {
 public:
  packetc2w_reward_list();
  virtual ~packetc2w_reward_list();

  packetc2w_reward_list(const packetc2w_reward_list& from);

  inline packetc2w_reward_list& operator=(const packetc2w_reward_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_reward_list& default_instance();

  void Swap(packetc2w_reward_list* other);

  // implements Message ----------------------------------------------

  packetc2w_reward_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_reward_list& from);
  void MergeFrom(const packetc2w_reward_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reward_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_reward_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_reward_list* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_reward_list_result : public ::google::protobuf::Message {
 public:
  packetw2c_reward_list_result();
  virtual ~packetw2c_reward_list_result();

  packetw2c_reward_list_result(const packetw2c_reward_list_result& from);

  inline packetw2c_reward_list_result& operator=(const packetw2c_reward_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_reward_list_result& default_instance();

  void Swap(packetw2c_reward_list_result* other);

  // implements Message ----------------------------------------------

  packetw2c_reward_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_reward_list_result& from);
  void MergeFrom(const packetw2c_reward_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reward_list_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.msg_inviter_info inviter_list = 2;
  inline int inviter_list_size() const;
  inline void clear_inviter_list();
  static const int kInviterListFieldNumber = 2;
  inline const ::client2world_protocols::msg_inviter_info& inviter_list(int index) const;
  inline ::client2world_protocols::msg_inviter_info* mutable_inviter_list(int index);
  inline ::client2world_protocols::msg_inviter_info* add_inviter_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_inviter_info >&
      inviter_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_inviter_info >*
      mutable_inviter_list();

  // optional int32 water_reward = 3;
  inline bool has_water_reward() const;
  inline void clear_water_reward();
  static const int kWaterRewardFieldNumber = 3;
  inline ::google::protobuf::int32 water_reward() const;
  inline void set_water_reward(::google::protobuf::int32 value);

  // optional int64 can_receive = 4;
  inline bool has_can_receive() const;
  inline void clear_can_receive();
  static const int kCanReceiveFieldNumber = 4;
  inline ::google::protobuf::int64 can_receive() const;
  inline void set_can_receive(::google::protobuf::int64 value);

  // optional int64 total_reward = 5;
  inline bool has_total_reward() const;
  inline void clear_total_reward();
  static const int kTotalRewardFieldNumber = 5;
  inline ::google::protobuf::int64 total_reward() const;
  inline void set_total_reward(::google::protobuf::int64 value);

  // optional .client2world_protocols.msg_inviter_info inviter_info = 6;
  inline bool has_inviter_info() const;
  inline void clear_inviter_info();
  static const int kInviterInfoFieldNumber = 6;
  inline const ::client2world_protocols::msg_inviter_info& inviter_info() const;
  inline ::client2world_protocols::msg_inviter_info* mutable_inviter_info();
  inline ::client2world_protocols::msg_inviter_info* release_inviter_info();
  inline void set_allocated_inviter_info(::client2world_protocols::msg_inviter_info* inviter_info);

  // optional int32 inviter_reward_count = 7;
  inline bool has_inviter_reward_count() const;
  inline void clear_inviter_reward_count();
  static const int kInviterRewardCountFieldNumber = 7;
  inline ::google::protobuf::int32 inviter_reward_count() const;
  inline void set_inviter_reward_count(::google::protobuf::int32 value);

  // optional int32 invite_count = 8;
  inline bool has_invite_count() const;
  inline void clear_invite_count();
  static const int kInviteCountFieldNumber = 8;
  inline ::google::protobuf::int32 invite_count() const;
  inline void set_invite_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_reward_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_water_reward();
  inline void clear_has_water_reward();
  inline void set_has_can_receive();
  inline void clear_has_can_receive();
  inline void set_has_total_reward();
  inline void clear_has_total_reward();
  inline void set_has_inviter_info();
  inline void clear_has_inviter_info();
  inline void set_has_inviter_reward_count();
  inline void clear_has_inviter_reward_count();
  inline void set_has_invite_count();
  inline void clear_has_invite_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_inviter_info > inviter_list_;
  int packet_id_;
  ::google::protobuf::int32 water_reward_;
  ::google::protobuf::int64 can_receive_;
  ::google::protobuf::int64 total_reward_;
  ::client2world_protocols::msg_inviter_info* inviter_info_;
  ::google::protobuf::int32 inviter_reward_count_;
  ::google::protobuf::int32 invite_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_reward_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_receive_reward : public ::google::protobuf::Message {
 public:
  packetc2w_receive_reward();
  virtual ~packetc2w_receive_reward();

  packetc2w_receive_reward(const packetc2w_receive_reward& from);

  inline packetc2w_receive_reward& operator=(const packetc2w_receive_reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_receive_reward& default_instance();

  void Swap(packetc2w_receive_reward* other);

  // implements Message ----------------------------------------------

  packetc2w_receive_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_receive_reward& from);
  void MergeFrom(const packetc2w_receive_reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_reward];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_receive_reward)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_receive_reward* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_receive_reward_result : public ::google::protobuf::Message {
 public:
  packetw2c_receive_reward_result();
  virtual ~packetw2c_receive_reward_result();

  packetw2c_receive_reward_result(const packetw2c_receive_reward_result& from);

  inline packetw2c_receive_reward_result& operator=(const packetw2c_receive_reward_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_receive_reward_result& default_instance();

  void Swap(packetw2c_receive_reward_result* other);

  // implements Message ----------------------------------------------

  packetw2c_receive_reward_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_receive_reward_result& from);
  void MergeFrom(const packetw2c_receive_reward_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_reward_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline ::google::protobuf::int64 reward() const;
  inline void set_reward(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_receive_reward_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_receive_reward_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_income_history : public ::google::protobuf::Message {
 public:
  packetc2w_ask_income_history();
  virtual ~packetc2w_ask_income_history();

  packetc2w_ask_income_history(const packetc2w_ask_income_history& from);

  inline packetc2w_ask_income_history& operator=(const packetc2w_ask_income_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_income_history& default_instance();

  void Swap(packetc2w_ask_income_history* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_income_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_income_history& from);
  void MergeFrom(const packetc2w_ask_income_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_income_history];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_income_history)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_income_history* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_income_history_result : public ::google::protobuf::Message {
 public:
  packetw2c_income_history_result();
  virtual ~packetw2c_income_history_result();

  packetw2c_income_history_result(const packetw2c_income_history_result& from);

  inline packetw2c_income_history_result& operator=(const packetw2c_income_history_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_income_history_result& default_instance();

  void Swap(packetw2c_income_history_result* other);

  // implements Message ----------------------------------------------

  packetw2c_income_history_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_income_history_result& from);
  void MergeFrom(const packetw2c_income_history_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_history_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated string history_infos = 2;
  inline int history_infos_size() const;
  inline void clear_history_infos();
  static const int kHistoryInfosFieldNumber = 2;
  inline const ::std::string& history_infos(int index) const;
  inline ::std::string* mutable_history_infos(int index);
  inline void set_history_infos(int index, const ::std::string& value);
  inline void set_history_infos(int index, const char* value);
  inline void set_history_infos(int index, const char* value, size_t size);
  inline ::std::string* add_history_infos();
  inline void add_history_infos(const ::std::string& value);
  inline void add_history_infos(const char* value);
  inline void add_history_infos(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& history_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_history_infos();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_income_history_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> history_infos_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_income_history_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_income_new_result : public ::google::protobuf::Message {
 public:
  packetw2c_income_new_result();
  virtual ~packetw2c_income_new_result();

  packetw2c_income_new_result(const packetw2c_income_new_result& from);

  inline packetw2c_income_new_result& operator=(const packetw2c_income_new_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_income_new_result& default_instance();

  void Swap(packetw2c_income_new_result* other);

  // implements Message ----------------------------------------------

  packetw2c_income_new_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_income_new_result& from);
  void MergeFrom(const packetw2c_income_new_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_new_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string new_infos = 2;
  inline bool has_new_infos() const;
  inline void clear_new_infos();
  static const int kNewInfosFieldNumber = 2;
  inline const ::std::string& new_infos() const;
  inline void set_new_infos(const ::std::string& value);
  inline void set_new_infos(const char* value);
  inline void set_new_infos(const char* value, size_t size);
  inline ::std::string* mutable_new_infos();
  inline ::std::string* release_new_infos();
  inline void set_allocated_new_infos(::std::string* new_infos);

  // optional int32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_income_new_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_new_infos();
  inline void clear_has_new_infos();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* new_infos_;
  int packet_id_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5finviter_2eproto();
  friend void protobuf_AssignDesc_client2world_5finviter_2eproto();
  friend void protobuf_ShutdownFile_client2world_5finviter_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_income_new_result* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_inviter_info

// optional int32 photo_frame = 1;
inline bool msg_inviter_info::has_photo_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_inviter_info::set_has_photo_frame() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_inviter_info::clear_has_photo_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_inviter_info::clear_photo_frame() {
  photo_frame_ = 0;
  clear_has_photo_frame();
}
inline ::google::protobuf::int32 msg_inviter_info::photo_frame() const {
  return photo_frame_;
}
inline void msg_inviter_info::set_photo_frame(::google::protobuf::int32 value) {
  set_has_photo_frame();
  photo_frame_ = value;
}

// optional string nick_name = 2;
inline bool msg_inviter_info::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_inviter_info::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_inviter_info::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_inviter_info::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& msg_inviter_info::nick_name() const {
  return *nick_name_;
}
inline void msg_inviter_info::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void msg_inviter_info::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void msg_inviter_info::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_inviter_info::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* msg_inviter_info::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_inviter_info::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 total_reward = 3;
inline bool msg_inviter_info::has_total_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_inviter_info::set_has_total_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_inviter_info::clear_has_total_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_inviter_info::clear_total_reward() {
  total_reward_ = GOOGLE_LONGLONG(0);
  clear_has_total_reward();
}
inline ::google::protobuf::int64 msg_inviter_info::total_reward() const {
  return total_reward_;
}
inline void msg_inviter_info::set_total_reward(::google::protobuf::int64 value) {
  set_has_total_reward();
  total_reward_ = value;
}

// optional int32 player_id = 4;
inline bool msg_inviter_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_inviter_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_inviter_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_inviter_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_inviter_info::player_id() const {
  return player_id_;
}
inline void msg_inviter_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 today_reward = 5;
inline bool msg_inviter_info::has_today_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_inviter_info::set_has_today_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_inviter_info::clear_has_today_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_inviter_info::clear_today_reward() {
  today_reward_ = GOOGLE_LONGLONG(0);
  clear_has_today_reward();
}
inline ::google::protobuf::int64 msg_inviter_info::today_reward() const {
  return today_reward_;
}
inline void msg_inviter_info::set_today_reward(::google::protobuf::int64 value) {
  set_has_today_reward();
  today_reward_ = value;
}

// optional string icon_custom = 6;
inline bool msg_inviter_info::has_icon_custom() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_inviter_info::set_has_icon_custom() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_inviter_info::clear_has_icon_custom() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_inviter_info::clear_icon_custom() {
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    icon_custom_->clear();
  }
  clear_has_icon_custom();
}
inline const ::std::string& msg_inviter_info::icon_custom() const {
  return *icon_custom_;
}
inline void msg_inviter_info::set_icon_custom(const ::std::string& value) {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  icon_custom_->assign(value);
}
inline void msg_inviter_info::set_icon_custom(const char* value) {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  icon_custom_->assign(value);
}
inline void msg_inviter_info::set_icon_custom(const char* value, size_t size) {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  icon_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_inviter_info::mutable_icon_custom() {
  set_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    icon_custom_ = new ::std::string;
  }
  return icon_custom_;
}
inline ::std::string* msg_inviter_info::release_icon_custom() {
  clear_has_icon_custom();
  if (icon_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_custom_;
    icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_inviter_info::set_allocated_icon_custom(::std::string* icon_custom) {
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_custom_;
  }
  if (icon_custom) {
    set_has_icon_custom();
    icon_custom_ = icon_custom;
  } else {
    clear_has_icon_custom();
    icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 viplvl = 7;
inline bool msg_inviter_info::has_viplvl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_inviter_info::set_has_viplvl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_inviter_info::clear_has_viplvl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_inviter_info::clear_viplvl() {
  viplvl_ = 0;
  clear_has_viplvl();
}
inline ::google::protobuf::int32 msg_inviter_info::viplvl() const {
  return viplvl_;
}
inline void msg_inviter_info::set_viplvl(::google::protobuf::int32 value) {
  set_has_viplvl();
  viplvl_ = value;
}

// -------------------------------------------------------------------

// packetc2w_bind_inviter

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_bind_inviter];
inline bool packetc2w_bind_inviter::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_bind_inviter::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_bind_inviter::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_bind_inviter::clear_packet_id() {
  packet_id_ = 5087;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_bind_inviter::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_bind_inviter::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 inviter = 2;
inline bool packetc2w_bind_inviter::has_inviter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_bind_inviter::set_has_inviter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_bind_inviter::clear_has_inviter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_bind_inviter::clear_inviter() {
  inviter_ = 0;
  clear_has_inviter();
}
inline ::google::protobuf::int32 packetc2w_bind_inviter::inviter() const {
  return inviter_;
}
inline void packetc2w_bind_inviter::set_inviter(::google::protobuf::int32 value) {
  set_has_inviter();
  inviter_ = value;
}

// -------------------------------------------------------------------

// packetw2c_bind_inviter_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_bind_inviter_result];
inline bool packetw2c_bind_inviter_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_bind_inviter_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_bind_inviter_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_bind_inviter_result::clear_packet_id() {
  packet_id_ = 7595;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_bind_inviter_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_bind_inviter_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_bind_inviter_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_bind_inviter_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_bind_inviter_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_bind_inviter_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_bind_inviter_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_bind_inviter_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 inviter = 3;
inline bool packetw2c_bind_inviter_result::has_inviter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_bind_inviter_result::set_has_inviter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_bind_inviter_result::clear_has_inviter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_bind_inviter_result::clear_inviter() {
  inviter_ = 0;
  clear_has_inviter();
}
inline ::google::protobuf::int32 packetw2c_bind_inviter_result::inviter() const {
  return inviter_;
}
inline void packetw2c_bind_inviter_result::set_inviter(::google::protobuf::int32 value) {
  set_has_inviter();
  inviter_ = value;
}

// optional string channelid = 4;
inline bool packetw2c_bind_inviter_result::has_channelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_bind_inviter_result::set_has_channelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_bind_inviter_result::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_bind_inviter_result::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& packetw2c_bind_inviter_result::channelid() const {
  return *channelid_;
}
inline void packetw2c_bind_inviter_result::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void packetw2c_bind_inviter_result::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void packetw2c_bind_inviter_result::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_bind_inviter_result::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* packetw2c_bind_inviter_result::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_bind_inviter_result::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetc2w_reward_list

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reward_list];
inline bool packetc2w_reward_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_reward_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_reward_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_reward_list::clear_packet_id() {
  packet_id_ = 5088;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_reward_list::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_reward_list::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_reward_list_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reward_list_result];
inline bool packetw2c_reward_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_reward_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_reward_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_reward_list_result::clear_packet_id() {
  packet_id_ = 7596;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_reward_list_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_reward_list_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client2world_protocols.msg_inviter_info inviter_list = 2;
inline int packetw2c_reward_list_result::inviter_list_size() const {
  return inviter_list_.size();
}
inline void packetw2c_reward_list_result::clear_inviter_list() {
  inviter_list_.Clear();
}
inline const ::client2world_protocols::msg_inviter_info& packetw2c_reward_list_result::inviter_list(int index) const {
  return inviter_list_.Get(index);
}
inline ::client2world_protocols::msg_inviter_info* packetw2c_reward_list_result::mutable_inviter_list(int index) {
  return inviter_list_.Mutable(index);
}
inline ::client2world_protocols::msg_inviter_info* packetw2c_reward_list_result::add_inviter_list() {
  return inviter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_inviter_info >&
packetw2c_reward_list_result::inviter_list() const {
  return inviter_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_inviter_info >*
packetw2c_reward_list_result::mutable_inviter_list() {
  return &inviter_list_;
}

// optional int32 water_reward = 3;
inline bool packetw2c_reward_list_result::has_water_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_reward_list_result::set_has_water_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_reward_list_result::clear_has_water_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_reward_list_result::clear_water_reward() {
  water_reward_ = 0;
  clear_has_water_reward();
}
inline ::google::protobuf::int32 packetw2c_reward_list_result::water_reward() const {
  return water_reward_;
}
inline void packetw2c_reward_list_result::set_water_reward(::google::protobuf::int32 value) {
  set_has_water_reward();
  water_reward_ = value;
}

// optional int64 can_receive = 4;
inline bool packetw2c_reward_list_result::has_can_receive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_reward_list_result::set_has_can_receive() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_reward_list_result::clear_has_can_receive() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_reward_list_result::clear_can_receive() {
  can_receive_ = GOOGLE_LONGLONG(0);
  clear_has_can_receive();
}
inline ::google::protobuf::int64 packetw2c_reward_list_result::can_receive() const {
  return can_receive_;
}
inline void packetw2c_reward_list_result::set_can_receive(::google::protobuf::int64 value) {
  set_has_can_receive();
  can_receive_ = value;
}

// optional int64 total_reward = 5;
inline bool packetw2c_reward_list_result::has_total_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_reward_list_result::set_has_total_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_reward_list_result::clear_has_total_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_reward_list_result::clear_total_reward() {
  total_reward_ = GOOGLE_LONGLONG(0);
  clear_has_total_reward();
}
inline ::google::protobuf::int64 packetw2c_reward_list_result::total_reward() const {
  return total_reward_;
}
inline void packetw2c_reward_list_result::set_total_reward(::google::protobuf::int64 value) {
  set_has_total_reward();
  total_reward_ = value;
}

// optional .client2world_protocols.msg_inviter_info inviter_info = 6;
inline bool packetw2c_reward_list_result::has_inviter_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_reward_list_result::set_has_inviter_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_reward_list_result::clear_has_inviter_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_reward_list_result::clear_inviter_info() {
  if (inviter_info_ != NULL) inviter_info_->::client2world_protocols::msg_inviter_info::Clear();
  clear_has_inviter_info();
}
inline const ::client2world_protocols::msg_inviter_info& packetw2c_reward_list_result::inviter_info() const {
  return inviter_info_ != NULL ? *inviter_info_ : *default_instance_->inviter_info_;
}
inline ::client2world_protocols::msg_inviter_info* packetw2c_reward_list_result::mutable_inviter_info() {
  set_has_inviter_info();
  if (inviter_info_ == NULL) inviter_info_ = new ::client2world_protocols::msg_inviter_info;
  return inviter_info_;
}
inline ::client2world_protocols::msg_inviter_info* packetw2c_reward_list_result::release_inviter_info() {
  clear_has_inviter_info();
  ::client2world_protocols::msg_inviter_info* temp = inviter_info_;
  inviter_info_ = NULL;
  return temp;
}
inline void packetw2c_reward_list_result::set_allocated_inviter_info(::client2world_protocols::msg_inviter_info* inviter_info) {
  delete inviter_info_;
  inviter_info_ = inviter_info;
  if (inviter_info) {
    set_has_inviter_info();
  } else {
    clear_has_inviter_info();
  }
}

// optional int32 inviter_reward_count = 7;
inline bool packetw2c_reward_list_result::has_inviter_reward_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetw2c_reward_list_result::set_has_inviter_reward_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetw2c_reward_list_result::clear_has_inviter_reward_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetw2c_reward_list_result::clear_inviter_reward_count() {
  inviter_reward_count_ = 0;
  clear_has_inviter_reward_count();
}
inline ::google::protobuf::int32 packetw2c_reward_list_result::inviter_reward_count() const {
  return inviter_reward_count_;
}
inline void packetw2c_reward_list_result::set_inviter_reward_count(::google::protobuf::int32 value) {
  set_has_inviter_reward_count();
  inviter_reward_count_ = value;
}

// optional int32 invite_count = 8;
inline bool packetw2c_reward_list_result::has_invite_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetw2c_reward_list_result::set_has_invite_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetw2c_reward_list_result::clear_has_invite_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetw2c_reward_list_result::clear_invite_count() {
  invite_count_ = 0;
  clear_has_invite_count();
}
inline ::google::protobuf::int32 packetw2c_reward_list_result::invite_count() const {
  return invite_count_;
}
inline void packetw2c_reward_list_result::set_invite_count(::google::protobuf::int32 value) {
  set_has_invite_count();
  invite_count_ = value;
}

// -------------------------------------------------------------------

// packetc2w_receive_reward

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_reward];
inline bool packetc2w_receive_reward::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_receive_reward::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_receive_reward::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_receive_reward::clear_packet_id() {
  packet_id_ = 5089;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_receive_reward::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_receive_reward::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_receive_reward_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_reward_result];
inline bool packetw2c_receive_reward_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_receive_reward_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_receive_reward_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_receive_reward_result::clear_packet_id() {
  packet_id_ = 7597;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_receive_reward_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_receive_reward_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_receive_reward_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_receive_reward_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_receive_reward_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_receive_reward_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_receive_reward_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_receive_reward_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 reward = 3;
inline bool packetw2c_receive_reward_result::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_receive_reward_result::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_receive_reward_result::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_receive_reward_result::clear_reward() {
  reward_ = GOOGLE_LONGLONG(0);
  clear_has_reward();
}
inline ::google::protobuf::int64 packetw2c_receive_reward_result::reward() const {
  return reward_;
}
inline void packetw2c_receive_reward_result::set_reward(::google::protobuf::int64 value) {
  set_has_reward();
  reward_ = value;
}

// -------------------------------------------------------------------

// packetc2w_ask_income_history

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_income_history];
inline bool packetc2w_ask_income_history::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_income_history::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_income_history::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_income_history::clear_packet_id() {
  packet_id_ = 5102;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_income_history::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_income_history::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_income_history_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_history_result];
inline bool packetw2c_income_history_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_income_history_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_income_history_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_income_history_result::clear_packet_id() {
  packet_id_ = 7611;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_income_history_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_income_history_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated string history_infos = 2;
inline int packetw2c_income_history_result::history_infos_size() const {
  return history_infos_.size();
}
inline void packetw2c_income_history_result::clear_history_infos() {
  history_infos_.Clear();
}
inline const ::std::string& packetw2c_income_history_result::history_infos(int index) const {
  return history_infos_.Get(index);
}
inline ::std::string* packetw2c_income_history_result::mutable_history_infos(int index) {
  return history_infos_.Mutable(index);
}
inline void packetw2c_income_history_result::set_history_infos(int index, const ::std::string& value) {
  history_infos_.Mutable(index)->assign(value);
}
inline void packetw2c_income_history_result::set_history_infos(int index, const char* value) {
  history_infos_.Mutable(index)->assign(value);
}
inline void packetw2c_income_history_result::set_history_infos(int index, const char* value, size_t size) {
  history_infos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_income_history_result::add_history_infos() {
  return history_infos_.Add();
}
inline void packetw2c_income_history_result::add_history_infos(const ::std::string& value) {
  history_infos_.Add()->assign(value);
}
inline void packetw2c_income_history_result::add_history_infos(const char* value) {
  history_infos_.Add()->assign(value);
}
inline void packetw2c_income_history_result::add_history_infos(const char* value, size_t size) {
  history_infos_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
packetw2c_income_history_result::history_infos() const {
  return history_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
packetw2c_income_history_result::mutable_history_infos() {
  return &history_infos_;
}

// -------------------------------------------------------------------

// packetw2c_income_new_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_income_new_result];
inline bool packetw2c_income_new_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_income_new_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_income_new_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_income_new_result::clear_packet_id() {
  packet_id_ = 7612;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_income_new_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_income_new_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string new_infos = 2;
inline bool packetw2c_income_new_result::has_new_infos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_income_new_result::set_has_new_infos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_income_new_result::clear_has_new_infos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_income_new_result::clear_new_infos() {
  if (new_infos_ != &::google::protobuf::internal::kEmptyString) {
    new_infos_->clear();
  }
  clear_has_new_infos();
}
inline const ::std::string& packetw2c_income_new_result::new_infos() const {
  return *new_infos_;
}
inline void packetw2c_income_new_result::set_new_infos(const ::std::string& value) {
  set_has_new_infos();
  if (new_infos_ == &::google::protobuf::internal::kEmptyString) {
    new_infos_ = new ::std::string;
  }
  new_infos_->assign(value);
}
inline void packetw2c_income_new_result::set_new_infos(const char* value) {
  set_has_new_infos();
  if (new_infos_ == &::google::protobuf::internal::kEmptyString) {
    new_infos_ = new ::std::string;
  }
  new_infos_->assign(value);
}
inline void packetw2c_income_new_result::set_new_infos(const char* value, size_t size) {
  set_has_new_infos();
  if (new_infos_ == &::google::protobuf::internal::kEmptyString) {
    new_infos_ = new ::std::string;
  }
  new_infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_income_new_result::mutable_new_infos() {
  set_has_new_infos();
  if (new_infos_ == &::google::protobuf::internal::kEmptyString) {
    new_infos_ = new ::std::string;
  }
  return new_infos_;
}
inline ::std::string* packetw2c_income_new_result::release_new_infos() {
  clear_has_new_infos();
  if (new_infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_infos_;
    new_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_income_new_result::set_allocated_new_infos(::std::string* new_infos) {
  if (new_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete new_infos_;
  }
  if (new_infos) {
    set_has_new_infos();
    new_infos_ = new_infos;
  } else {
    clear_has_new_infos();
    new_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 playerid = 3;
inline bool packetw2c_income_new_result::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_income_new_result::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_income_new_result::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_income_new_result::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 packetw2c_income_new_result::playerid() const {
  return playerid_;
}
inline void packetw2c_income_new_result::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5finviter_2eproto__INCLUDED
