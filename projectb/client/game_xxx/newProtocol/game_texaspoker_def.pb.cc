// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_texaspoker_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_texaspoker_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_texaspoker_protocols {

namespace {

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDeskPlayerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGameEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDeskState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPokerFlower_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDeclare_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPokerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5ftexaspoker_5fdef_2eproto() {
  protobuf_AddDesc_game_5ftexaspoker_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_texaspoker_def.proto");
  GOOGLE_CHECK(file != NULL);
  e_server_msg_type_descriptor_ = file->enum_type(0);
  EDeskPlayerState_descriptor_ = file->enum_type(1);
  EGameEvent_descriptor_ = file->enum_type(2);
  EDeskState_descriptor_ = file->enum_type(3);
  EPokerFlower_descriptor_ = file->enum_type(4);
  EDeclare_descriptor_ = file->enum_type(5);
  EPokerType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5ftexaspoker_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_game_5ftexaspoker_5fdef_2eproto() {
}

void protobuf_AddDesc_game_5ftexaspoker_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031game_texaspoker_def.proto\022\031game_texasp"
    "oker_protocols*\270\007\n\021e_server_msg_type\022\024\n\017"
    "e_mst_start_c2l\020\220N\022\034\n\027e_mst_c2l_get_room"
    "_info\020\221N\022\031\n\024e_mst_c2l_join_table\020\222N\022\032\n\025e"
    "_mst_c2l_leave_table\020\223N\022#\n\036e_mst_c2l_get"
    "_table_scene_info\020\224N\022\032\n\025e_mst_c2l_req_de"
    "clare\020\225N\022\032\n\025e_mst_c2l_req_sitdown\020\226N\022\031\n\024"
    "e_mst_c2l_show_poker\020\227N\022\032\n\025e_mst_c2l_req"
    "_standup\020\230N\022\032\n\025e_mst_c2l_check_state\020\231N\022"
    "\031\n\024e_mst_c2l_req_supply\020\232N\022\027\n\022e_mst_c2l_"
    "req_chip\020\233N\022\024\n\017e_mst_start_l2c\020\230u\022#\n\036e_m"
    "st_l2c_get_room_info_result\020\231u\022 \n\033e_mst_"
    "l2c_join_table_result\020\232u\022!\n\034e_mst_l2c_le"
    "ave_table_result\020\233u\022&\n!e_mst_get_table_s"
    "cene_info_result\020\234u\022 \n\033e_mst_l2c_game_ev"
    "ent_notify\020\235u\022!\n\034e_mst_l2c_req_declare_r"
    "esult\020\236u\022 \n\033e_mst_l2c_game_start_notify\020"
    "\237u\022!\n\034e_mst_l2c_req_sitdown_result\020\240u\022\036\n"
    "\031e_mst_l2c_game_end_notify\020\241u\022\036\n\031e_mst_l"
    "2c_buy_chip_notify\020\242u\022\037\n\032e_mst_l2c_game_"
    "wait_notify\020\243u\022 \n\033e_mst_l2c_show_poker_r"
    "esult\020\244u\022!\n\034e_mst_l2c_req_standup_result"
    "\020\245u\022!\n\034e_mst_l2c_check_state_result\020\246u\022 "
    "\n\033e_mst_l2c_req_supply_result\020\247u\022\036\n\031e_ms"
    "t_l2c_req_chip_result\020\250u\022\027\n\021e_mst_clend_"
    "index\020\240\234\001*b\n\020EDeskPlayerState\022\025\n\021state_o"
    "ccupy_seat\020\000\022\021\n\rstate_in_game\020\001\022\021\n\rstate"
    "_standup\020\002\022\021\n\rstate_reserve\020\003*\236\001\n\nEGameE"
    "vent\022\024\n\020event_enter_desk\020\000\022\024\n\020event_leav"
    "e_desk\020\001\022\027\n\023event_start_declare\020\002\022\026\n\022eve"
    "nt_done_declare\020\003\022\037\n\033event_dispatch_comm"
    "on_poker\020\004\022\022\n\016event_stand_up\020\005*\220\001\n\nEDesk"
    "State\022\023\n\017state_wait_join\020\000\022\025\n\021state_play"
    "er_seat\020\001\022\022\n\016state_pre_flop\020\002\022\016\n\nstate_f"
    "lop\020\003\022\016\n\nstate_turn\020\004\022\017\n\013state_river\020\005\022\021"
    "\n\rstate_balance\020\006*X\n\014EPokerFlower\022\020\n\014flo"
    "wer_spade\020\001\022\021\n\rflower_hearts\020\002\022\017\n\013flower"
    "_club\020\003\022\022\n\016flower_diamond\020\004*\230\001\n\010EDeclare"
    "\022\020\n\014declare_none\020\000\022\023\n\017declare_abandon\020\001\022"
    "\024\n\020declare_call_bet\020\002\022\023\n\017declare_add_bet"
    "\020\003\022\022\n\016declare_all_in\020\004\022\020\n\014declare_pass\020\005"
    "\022\024\n\020declare_thinking\020\006*\262\002\n\nEPokerType\022\032\n"
    "\026poker_type_royal_flush\020\000\022\035\n\031poker_type_"
    "straight_flush\020\001\022\035\n\031poker_type_four_of_a"
    "_kind\020\002\022\031\n\025poker_type_full_house\020\003\022\024\n\020po"
    "ker_type_flush\020\004\022\027\n\023poker_type_straight\020"
    "\005\022\036\n\032poker_type_three_of_a_kind\020\006\022\030\n\024pok"
    "er_type_two_pairs\020\007\022\030\n\024poker_type_one_pa"
    "irs\020\010\022\030\n\024poker_type_high_card\020\t\022\022\n\016poker"
    "_type_max\020\n", 1971);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_texaspoker_def.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5ftexaspoker_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5ftexaspoker_5fdef_2eproto {
  StaticDescriptorInitializer_game_5ftexaspoker_5fdef_2eproto() {
    protobuf_AddDesc_game_5ftexaspoker_5fdef_2eproto();
  }
} static_descriptor_initializer_game_5ftexaspoker_5fdef_2eproto_;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_server_msg_type_descriptor_;
}
bool e_server_msg_type_IsValid(int value) {
  switch(value) {
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 15000:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
    case 15006:
    case 15007:
    case 15008:
    case 15009:
    case 15010:
    case 15011:
    case 15012:
    case 15013:
    case 15014:
    case 15015:
    case 15016:
    case 20000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDeskPlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDeskPlayerState_descriptor_;
}
bool EDeskPlayerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGameEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGameEvent_descriptor_;
}
bool EGameEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDeskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDeskState_descriptor_;
}
bool EDeskState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPokerFlower_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPokerFlower_descriptor_;
}
bool EPokerFlower_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDeclare_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDeclare_descriptor_;
}
bool EDeclare_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPokerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPokerType_descriptor_;
}
bool EPokerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_texaspoker_protocols

// @@protoc_insertion_point(global_scope)
