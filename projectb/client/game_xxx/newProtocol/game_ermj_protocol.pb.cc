// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_ermj_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_ermj_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_ermj_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_room_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_room_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_playing_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_playing_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_user_trustee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_user_trustee_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_user_trustee_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_user_trustee_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_send_all_playerinfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_send_all_playerinfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* pile_card_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pile_card_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* pile_cards_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pile_cards_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* card_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  card_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* cards_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cards_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* first_bu_hua_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  first_bu_hua_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_out_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_out_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_out_card_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_out_card_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_operate_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_operate_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_operate_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_operate_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_operate_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_operate_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_send_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_send_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_bu_hua_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_bu_hua_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bu_hua_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bu_hua_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_pass_hu_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_pass_hu_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_other_player_cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_other_player_cards_reflection_ = NULL;
const ::google::protobuf::Descriptor* win_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  win_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_gm_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_gm_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_gm_kill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_gm_kill_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fermj_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_ermj_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  msg_player_info_descriptor_ = file->message_type(0);
  static const int msg_player_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, vip_level_),
  };
  msg_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_info_descriptor_,
      msg_player_info::default_instance_,
      msg_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_info));
  packetc2l_check_state_descriptor_ = file->message_type(1);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetl2c_check_state_result_descriptor_ = file->message_type(2);
  static const int packetl2c_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, result_),
  };
  packetl2c_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_check_state_result_descriptor_,
      packetl2c_check_state_result::default_instance_,
      packetl2c_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_check_state_result));
  packetc2l_get_scene_info_descriptor_ = file->message_type(3);
  static const int packetc2l_get_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, packet_id_),
  };
  packetc2l_get_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_scene_info_descriptor_,
      packetc2l_get_scene_info::default_instance_,
      packetc2l_get_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_scene_info));
  msg_room_scene_info_descriptor_ = file->message_type(4);
  static const int msg_room_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_scene_info, ready_),
  };
  msg_room_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_room_scene_info_descriptor_,
      msg_room_scene_info::default_instance_,
      msg_room_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_room_scene_info));
  msg_playing_scene_info_descriptor_ = file->message_type(5);
  static const int msg_playing_scene_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, banker_chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, action_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, remain_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, user_trustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, ting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, river_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, hua_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, pile_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, pass_times_),
  };
  msg_playing_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_playing_scene_info_descriptor_,
      msg_playing_scene_info::default_instance_,
      msg_playing_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_playing_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_playing_scene_info));
  packetl2c_scene_info_result_descriptor_ = file->message_type(6);
  static const int packetl2c_scene_info_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, scene_info1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, scene_info3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, scene_info4_),
  };
  packetl2c_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_scene_info_result_descriptor_,
      packetl2c_scene_info_result::default_instance_,
      packetl2c_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_scene_info_result));
  packetc2l_enter_room_descriptor_ = file->message_type(7);
  static const int packetc2l_enter_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, room_type_),
  };
  packetc2l_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_room_descriptor_,
      packetc2l_enter_room::default_instance_,
      packetc2l_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_room));
  packetl2c_enter_room_result_descriptor_ = file->message_type(8);
  static const int packetl2c_enter_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, result_),
  };
  packetl2c_enter_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_room_result_descriptor_,
      packetl2c_enter_room_result::default_instance_,
      packetl2c_enter_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_room_result));
  packetc2l_leave_room_descriptor_ = file->message_type(9);
  static const int packetc2l_leave_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, packet_id_),
  };
  packetc2l_leave_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_room_descriptor_,
      packetc2l_leave_room::default_instance_,
      packetc2l_leave_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_room));
  packetl2c_leave_room_result_descriptor_ = file->message_type(10);
  static const int packetl2c_leave_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, player_gold_),
  };
  packetl2c_leave_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_room_result_descriptor_,
      packetl2c_leave_room_result::default_instance_,
      packetl2c_leave_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_room_result));
  packetc2l_user_trustee_descriptor_ = file->message_type(11);
  static const int packetc2l_user_trustee_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_user_trustee, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_user_trustee, trustee_),
  };
  packetc2l_user_trustee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_user_trustee_descriptor_,
      packetc2l_user_trustee::default_instance_,
      packetc2l_user_trustee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_user_trustee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_user_trustee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_user_trustee));
  packetl2c_user_trustee_notify_descriptor_ = file->message_type(12);
  static const int packetl2c_user_trustee_notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, trustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, remain_seconds_),
  };
  packetl2c_user_trustee_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_user_trustee_notify_descriptor_,
      packetl2c_user_trustee_notify::default_instance_,
      packetl2c_user_trustee_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_user_trustee_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_user_trustee_notify));
  packetc2l_ready_descriptor_ = file->message_type(13);
  static const int packetc2l_ready_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ready, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ready, change_table_),
  };
  packetc2l_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ready_descriptor_,
      packetc2l_ready::default_instance_,
      packetc2l_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ready));
  packetl2c_send_all_playerinfos_descriptor_ = file->message_type(14);
  static const int packetl2c_send_all_playerinfos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_playerinfos, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_playerinfos, player_info_),
  };
  packetl2c_send_all_playerinfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_send_all_playerinfos_descriptor_,
      packetl2c_send_all_playerinfos::default_instance_,
      packetl2c_send_all_playerinfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_playerinfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_all_playerinfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_send_all_playerinfos));
  pile_card_data_descriptor_ = file->message_type(15);
  static const int pile_card_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pile_card_data, action_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pile_card_data, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pile_card_data, ming_gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pile_card_data, jia_gang_),
  };
  pile_card_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pile_card_data_descriptor_,
      pile_card_data::default_instance_,
      pile_card_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pile_card_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pile_card_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pile_card_data));
  pile_cards_data_descriptor_ = file->message_type(16);
  static const int pile_cards_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pile_cards_data, card_),
  };
  pile_cards_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pile_cards_data_descriptor_,
      pile_cards_data::default_instance_,
      pile_cards_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pile_cards_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pile_cards_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pile_cards_data));
  card_data_descriptor_ = file->message_type(17);
  static const int card_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_data, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_data, card_val_),
  };
  card_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      card_data_descriptor_,
      card_data::default_instance_,
      card_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(card_data));
  cards_data_descriptor_ = file->message_type(18);
  static const int cards_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cards_data, card_),
  };
  cards_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cards_data_descriptor_,
      cards_data::default_instance_,
      cards_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cards_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cards_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cards_data));
  first_bu_hua_data_descriptor_ = file->message_type(19);
  static const int first_bu_hua_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(first_bu_hua_data, chair_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(first_bu_hua_data, hua_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(first_bu_hua_data, bu_cards_),
  };
  first_bu_hua_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      first_bu_hua_data_descriptor_,
      first_bu_hua_data::default_instance_,
      first_bu_hua_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(first_bu_hua_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(first_bu_hua_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(first_bu_hua_data));
  packetl2c_game_start_descriptor_ = file->message_type(20);
  static const int packetl2c_game_start_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, dice_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, bu_hua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, bot_out_),
  };
  packetl2c_game_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_start_descriptor_,
      packetl2c_game_start::default_instance_,
      packetl2c_game_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_start));
  packetc2l_out_card_descriptor_ = file->message_type(21);
  static const int packetc2l_out_card_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_out_card, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_out_card, card_id_),
  };
  packetc2l_out_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_out_card_descriptor_,
      packetc2l_out_card::default_instance_,
      packetc2l_out_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_out_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_out_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_out_card));
  packetl2c_out_card_notify_descriptor_ = file->message_type(22);
  static const int packetl2c_out_card_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card_notify, action_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card_notify, card_),
  };
  packetl2c_out_card_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_out_card_notify_descriptor_,
      packetl2c_out_card_notify::default_instance_,
      packetl2c_out_card_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_out_card_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_out_card_notify));
  packetl2c_operate_notify_descriptor_ = file->message_type(23);
  static const int packetl2c_operate_notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_notify, user_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_notify, card_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_notify, bot_pass_hu_),
  };
  packetl2c_operate_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_operate_notify_descriptor_,
      packetl2c_operate_notify::default_instance_,
      packetl2c_operate_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_operate_notify));
  packetc2l_operate_card_descriptor_ = file->message_type(24);
  static const int packetc2l_operate_card_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_operate_card, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_operate_card, user_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_operate_card, card_id_),
  };
  packetc2l_operate_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_operate_card_descriptor_,
      packetc2l_operate_card::default_instance_,
      packetc2l_operate_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_operate_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_operate_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_operate_card));
  packetl2c_operate_result_descriptor_ = file->message_type(25);
  static const int packetl2c_operate_result_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, action_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, user_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, provide_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, card_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, pile_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, bot_ting_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, bot_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, bot_ting_cards_),
  };
  packetl2c_operate_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_operate_result_descriptor_,
      packetl2c_operate_result::default_instance_,
      packetl2c_operate_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_operate_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_operate_result));
  packetl2c_send_card_descriptor_ = file->message_type(26);
  static const int packetl2c_send_card_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_card, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_card, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_card, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_card, bot_ting_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_card, bot_pass_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_card, bot_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_card, bot_gang_out_),
  };
  packetl2c_send_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_send_card_descriptor_,
      packetl2c_send_card::default_instance_,
      packetl2c_send_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_send_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_send_card));
  packetc2l_bu_hua_descriptor_ = file->message_type(27);
  static const int packetc2l_bu_hua_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bu_hua, packet_id_),
  };
  packetc2l_bu_hua_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_bu_hua_descriptor_,
      packetc2l_bu_hua::default_instance_,
      packetc2l_bu_hua_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bu_hua, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_bu_hua, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_bu_hua));
  packetl2c_bu_hua_notify_descriptor_ = file->message_type(28);
  static const int packetl2c_bu_hua_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bu_hua_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bu_hua_notify, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bu_hua_notify, hua_card_),
  };
  packetl2c_bu_hua_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bu_hua_notify_descriptor_,
      packetl2c_bu_hua_notify::default_instance_,
      packetl2c_bu_hua_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bu_hua_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bu_hua_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bu_hua_notify));
  packetl2c_pass_hu_notify_descriptor_ = file->message_type(29);
  static const int packetl2c_pass_hu_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_hu_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_hu_notify, pass_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_hu_notify, pass_times_),
  };
  packetl2c_pass_hu_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_pass_hu_notify_descriptor_,
      packetl2c_pass_hu_notify::default_instance_,
      packetl2c_pass_hu_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_hu_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_pass_hu_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_pass_hu_notify));
  packetl2c_other_player_cards_descriptor_ = file->message_type(30);
  static const int packetl2c_other_player_cards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_other_player_cards, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_other_player_cards, chairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_other_player_cards, cards_),
  };
  packetl2c_other_player_cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_other_player_cards_descriptor_,
      packetl2c_other_player_cards::default_instance_,
      packetl2c_other_player_cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_other_player_cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_other_player_cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_other_player_cards));
  win_result_descriptor_ = file->message_type(31);
  static const int win_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(win_result, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(win_result, fan_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(win_result, result1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(win_result, result2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(win_result, result3_),
  };
  win_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      win_result_descriptor_,
      win_result::default_instance_,
      win_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(win_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(win_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(win_result));
  packetl2c_game_end_descriptor_ = file->message_type(32);
  static const int packetl2c_game_end_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, game_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, leave_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, ting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, pile_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, hua_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, limited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, low_limited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, win_card_),
  };
  packetl2c_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_end_descriptor_,
      packetl2c_game_end::default_instance_,
      packetl2c_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_end));
  packetl2c_game_notify_descriptor_ = file->message_type(33);
  static const int packetl2c_game_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_notify, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_notify, notify_param_),
  };
  packetl2c_game_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_notify_descriptor_,
      packetl2c_game_notify::default_instance_,
      packetl2c_game_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_notify));
  gm_player_info_descriptor_ = file->message_type(34);
  static const int gm_player_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_player_info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_player_info, player_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_player_info, player_profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_player_info, player_kill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_player_info, player_kill_cnt_),
  };
  gm_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_player_info_descriptor_,
      gm_player_info::default_instance_,
      gm_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_player_info));
  packetc2l_gm_list_descriptor_ = file->message_type(35);
  static const int packetc2l_gm_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_list, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_list, hours_),
  };
  packetc2l_gm_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_gm_list_descriptor_,
      packetc2l_gm_list::default_instance_,
      packetc2l_gm_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_gm_list));
  gm_room_info_descriptor_ = file->message_type(36);
  static const int gm_room_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_room_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_room_info, player_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_room_info, player_win_),
  };
  gm_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_room_info_descriptor_,
      gm_room_info::default_instance_,
      gm_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_room_info));
  packetl2c_gm_list_descriptor_ = file->message_type(37);
  static const int packetl2c_gm_list_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_list, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_list, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_list, rooms_),
  };
  packetl2c_gm_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_list_descriptor_,
      packetl2c_gm_list::default_instance_,
      packetl2c_gm_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_list));
  packetc2l_gm_kill_descriptor_ = file->message_type(38);
  static const int packetc2l_gm_kill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_kill, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_kill, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_kill, kill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_kill, kill_cnt_),
  };
  packetc2l_gm_kill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_gm_kill_descriptor_,
      packetc2l_gm_kill::default_instance_,
      packetc2l_gm_kill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_kill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_kill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_gm_kill));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fermj_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_info_descriptor_, &msg_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_check_state_result_descriptor_, &packetl2c_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_scene_info_descriptor_, &packetc2l_get_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_room_scene_info_descriptor_, &msg_room_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_playing_scene_info_descriptor_, &msg_playing_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_scene_info_result_descriptor_, &packetl2c_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_room_descriptor_, &packetc2l_enter_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_room_result_descriptor_, &packetl2c_enter_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_room_descriptor_, &packetc2l_leave_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_room_result_descriptor_, &packetl2c_leave_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_user_trustee_descriptor_, &packetc2l_user_trustee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_user_trustee_notify_descriptor_, &packetl2c_user_trustee_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ready_descriptor_, &packetc2l_ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_send_all_playerinfos_descriptor_, &packetl2c_send_all_playerinfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pile_card_data_descriptor_, &pile_card_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pile_cards_data_descriptor_, &pile_cards_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    card_data_descriptor_, &card_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cards_data_descriptor_, &cards_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    first_bu_hua_data_descriptor_, &first_bu_hua_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_start_descriptor_, &packetl2c_game_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_out_card_descriptor_, &packetc2l_out_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_out_card_notify_descriptor_, &packetl2c_out_card_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_operate_notify_descriptor_, &packetl2c_operate_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_operate_card_descriptor_, &packetc2l_operate_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_operate_result_descriptor_, &packetl2c_operate_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_send_card_descriptor_, &packetl2c_send_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_bu_hua_descriptor_, &packetc2l_bu_hua::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bu_hua_notify_descriptor_, &packetl2c_bu_hua_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_pass_hu_notify_descriptor_, &packetl2c_pass_hu_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_other_player_cards_descriptor_, &packetl2c_other_player_cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    win_result_descriptor_, &win_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_end_descriptor_, &packetl2c_game_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_notify_descriptor_, &packetl2c_game_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_player_info_descriptor_, &gm_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_gm_list_descriptor_, &packetc2l_gm_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_room_info_descriptor_, &gm_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_list_descriptor_, &packetl2c_gm_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_gm_kill_descriptor_, &packetc2l_gm_kill::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fermj_5fprotocol_2eproto() {
  delete msg_player_info::default_instance_;
  delete msg_player_info_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetl2c_check_state_result::default_instance_;
  delete packetl2c_check_state_result_reflection_;
  delete packetc2l_get_scene_info::default_instance_;
  delete packetc2l_get_scene_info_reflection_;
  delete msg_room_scene_info::default_instance_;
  delete msg_room_scene_info_reflection_;
  delete msg_playing_scene_info::default_instance_;
  delete msg_playing_scene_info_reflection_;
  delete packetl2c_scene_info_result::default_instance_;
  delete packetl2c_scene_info_result_reflection_;
  delete packetc2l_enter_room::default_instance_;
  delete packetc2l_enter_room_reflection_;
  delete packetl2c_enter_room_result::default_instance_;
  delete packetl2c_enter_room_result_reflection_;
  delete packetc2l_leave_room::default_instance_;
  delete packetc2l_leave_room_reflection_;
  delete packetl2c_leave_room_result::default_instance_;
  delete packetl2c_leave_room_result_reflection_;
  delete packetc2l_user_trustee::default_instance_;
  delete packetc2l_user_trustee_reflection_;
  delete packetl2c_user_trustee_notify::default_instance_;
  delete packetl2c_user_trustee_notify_reflection_;
  delete packetc2l_ready::default_instance_;
  delete packetc2l_ready_reflection_;
  delete packetl2c_send_all_playerinfos::default_instance_;
  delete packetl2c_send_all_playerinfos_reflection_;
  delete pile_card_data::default_instance_;
  delete pile_card_data_reflection_;
  delete pile_cards_data::default_instance_;
  delete pile_cards_data_reflection_;
  delete card_data::default_instance_;
  delete card_data_reflection_;
  delete cards_data::default_instance_;
  delete cards_data_reflection_;
  delete first_bu_hua_data::default_instance_;
  delete first_bu_hua_data_reflection_;
  delete packetl2c_game_start::default_instance_;
  delete packetl2c_game_start_reflection_;
  delete packetc2l_out_card::default_instance_;
  delete packetc2l_out_card_reflection_;
  delete packetl2c_out_card_notify::default_instance_;
  delete packetl2c_out_card_notify_reflection_;
  delete packetl2c_operate_notify::default_instance_;
  delete packetl2c_operate_notify_reflection_;
  delete packetc2l_operate_card::default_instance_;
  delete packetc2l_operate_card_reflection_;
  delete packetl2c_operate_result::default_instance_;
  delete packetl2c_operate_result_reflection_;
  delete packetl2c_send_card::default_instance_;
  delete packetl2c_send_card_reflection_;
  delete packetc2l_bu_hua::default_instance_;
  delete packetc2l_bu_hua_reflection_;
  delete packetl2c_bu_hua_notify::default_instance_;
  delete packetl2c_bu_hua_notify_reflection_;
  delete packetl2c_pass_hu_notify::default_instance_;
  delete packetl2c_pass_hu_notify_reflection_;
  delete packetl2c_other_player_cards::default_instance_;
  delete packetl2c_other_player_cards_reflection_;
  delete win_result::default_instance_;
  delete win_result_reflection_;
  delete packetl2c_game_end::default_instance_;
  delete packetl2c_game_end_reflection_;
  delete packetl2c_game_notify::default_instance_;
  delete packetl2c_game_notify_reflection_;
  delete gm_player_info::default_instance_;
  delete gm_player_info_reflection_;
  delete packetc2l_gm_list::default_instance_;
  delete packetc2l_gm_list_reflection_;
  delete gm_room_info::default_instance_;
  delete gm_room_info_reflection_;
  delete packetl2c_gm_list::default_instance_;
  delete packetl2c_gm_list_reflection_;
  delete packetc2l_gm_kill::default_instance_;
  delete packetc2l_gm_kill_reflection_;
}

void protobuf_AddDesc_game_5fermj_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_ermj_protocols::protobuf_AddDesc_game_5fermj_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030game_ermj_protocol.proto\022\023game_ermj_pr"
    "otocols\032\023game_ermj_def.proto\032\022msg_type_d"
    "ef.proto\"\236\001\n\017msg_player_info\022\021\n\tplayer_i"
    "d\030\001 \001(\005\022\023\n\013player_name\030\002 \001(\t\022\022\n\nhead_fra"
    "me\030\003 \001(\005\022\023\n\013head_custom\030\004 \001(\t\022\023\n\013player_"
    "gold\030\005 \001(\003\022\022\n\nplayer_sex\030\006 \001(\005\022\021\n\tvip_le"
    "vel\030\007 \001(\005\"i\n\025packetc2l_check_state\022P\n\tpa"
    "cket_id\030\001 \001(\0162&.game_ermj_protocols.e_se"
    "rver_msg_type:\025e_mst_c2l_check_state\"\212\001\n"
    "\034packetl2c_check_state_result\022W\n\tpacket_"
    "id\030\001 \001(\0162&.game_ermj_protocols.e_server_"
    "msg_type:\034e_mst_l2c_check_state_result\022\021"
    "\n\006result\030\002 \001(\005:\0010\"o\n\030packetc2l_get_scene"
    "_info\022S\n\tpacket_id\030\001 \001(\0162&.game_ermj_pro"
    "tocols.e_server_msg_type:\030e_mst_c2l_get_"
    "scene_info\"$\n\023msg_room_scene_info\022\r\n\005rea"
    "dy\030\001 \001(\010\"\227\003\n\026msg_playing_scene_info\022\027\n\017b"
    "anker_chair_id\030\001 \001(\005\022\024\n\014current_user\030\002 \001"
    "(\005\022\020\n\010out_card\030\003 \001(\005\022\023\n\013action_code\030\004 \001("
    "\005\022\026\n\016remain_seconds\030\005 \001(\005\022\024\n\014user_truste"
    "e\030\006 \003(\010\022\014\n\004ting\030\007 \003(\010\0223\n\nhand_cards\030\010 \003("
    "\0132\037.game_ermj_protocols.cards_data\0224\n\013ri"
    "ver_cards\030\t \003(\0132\037.game_ermj_protocols.ca"
    "rds_data\0222\n\thua_cards\030\n \003(\0132\037.game_ermj_"
    "protocols.cards_data\0228\n\npile_cards\030\013 \003(\013"
    "2$.game_ermj_protocols.pile_cards_data\022\022"
    "\n\npass_times\030\014 \003(\005\"\332\002\n\033packetl2c_scene_i"
    "nfo_result\022V\n\tpacket_id\030\001 \001(\0162&.game_erm"
    "j_protocols.e_server_msg_type:\033e_mst_l2c"
    "_scene_info_result\022\021\n\troom_type\030\002 \001(\005\022=\n"
    "\013scene_info1\030\003 \001(\0132(.game_ermj_protocols"
    ".msg_room_scene_info\022@\n\013scene_info3\030\004 \001("
    "\0132+.game_ermj_protocols.msg_playing_scen"
    "e_info\022\021\n\tinfo_type\030\005 \001(\005\022<\n\013scene_info4"
    "\030\006 \001(\0132\'.game_ermj_protocols.packetl2c_g"
    "ame_end\"z\n\024packetc2l_enter_room\022O\n\tpacke"
    "t_id\030\001 \001(\0162&.game_ermj_protocols.e_serve"
    "r_msg_type:\024e_mst_c2l_enter_room\022\021\n\troom"
    "_type\030\002 \001(\005\"\261\001\n\033packetl2c_enter_room_res"
    "ult\022V\n\tpacket_id\030\001 \001(\0162&.game_ermj_proto"
    "cols.e_server_msg_type:\033e_mst_l2c_enter_"
    "room_result\022:\n\006result\030\002 \001(\0162\036.msg_type_d"
    "ef.e_msg_result_def:\ne_rmt_fail\"g\n\024packe"
    "tc2l_leave_room\022O\n\tpacket_id\030\001 \001(\0162&.gam"
    "e_ermj_protocols.e_server_msg_type:\024e_ms"
    "t_c2l_leave_room\"\212\001\n\033packetl2c_leave_roo"
    "m_result\022V\n\tpacket_id\030\001 \001(\0162&.game_ermj_"
    "protocols.e_server_msg_type:\033e_mst_l2c_l"
    "eave_room_result\022\023\n\013player_gold\030\002 \001(\003\"|\n"
    "\026packetc2l_user_trustee\022Q\n\tpacket_id\030\001 \001"
    "(\0162&.game_ermj_protocols.e_server_msg_ty"
    "pe:\026e_mst_c2l_user_trustee\022\017\n\007trustee\030\002 "
    "\001(\010\"\255\001\n\035packetl2c_user_trustee_notify\022Q\n"
    "\tpacket_id\030\001 \001(\0162&.game_ermj_protocols.e"
    "_server_msg_type:\026e_mst_l2c_user_trustee"
    "\022\020\n\010chair_id\030\002 \001(\005\022\017\n\007trustee\030\003 \001(\010\022\026\n\016r"
    "emain_seconds\030\004 \001(\005\"s\n\017packetc2l_ready\022J"
    "\n\tpacket_id\030\001 \001(\0162&.game_ermj_protocols."
    "e_server_msg_type:\017e_mst_c2l_ready\022\024\n\014ch"
    "ange_table\030\002 \001(\010\"\266\001\n\036packetl2c_send_all_"
    "playerinfos\022Y\n\tpacket_id\030\001 \001(\0162&.game_er"
    "mj_protocols.e_server_msg_type:\036e_mst_l2"
    "c_send_all_playerinfos\0229\n\013player_info\030\002 "
    "\003(\0132$.game_ermj_protocols.msg_player_inf"
    "o\"Y\n\016pile_card_data\022\023\n\013action_code\030\001 \001(\005"
    "\022\r\n\005cards\030\002 \003(\005\022\021\n\tming_gang\030\003 \001(\010\022\020\n\010ji"
    "a_gang\030\004 \001(\010\"D\n\017pile_cards_data\0221\n\004card\030"
    "\001 \003(\0132#.game_ermj_protocols.pile_card_da"
    "ta\".\n\tcard_data\022\017\n\007card_id\030\001 \001(\005\022\020\n\010card"
    "_val\030\002 \001(\005\":\n\ncards_data\022,\n\004card\030\001 \003(\0132\036"
    ".game_ermj_protocols.card_data\"\213\001\n\021first"
    "_bu_hua_data\022\021\n\tchair_idx\030\001 \001(\005\0221\n\thua_c"
    "ards\030\002 \003(\0132\036.game_ermj_protocols.card_da"
    "ta\0220\n\010bu_cards\030\003 \003(\0132\036.game_ermj_protoco"
    "ls.card_data\"\211\002\n\024packetl2c_game_start\022O\n"
    "\tpacket_id\030\001 \001(\0162&.game_ermj_protocols.e"
    "_server_msg_type:\024e_mst_l2c_game_start\022\022"
    "\n\ndice_count\030\002 \001(\005\022\023\n\013banker_user\030\003 \001(\005\022"
    ".\n\005cards\030\005 \003(\0132\037.game_ermj_protocols.car"
    "ds_data\0226\n\006bu_hua\030\006 \003(\0132&.game_ermj_prot"
    "ocols.first_bu_hua_data\022\017\n\007bot_out\030\007 \003(\005"
    "\"t\n\022packetc2l_out_card\022M\n\tpacket_id\030\001 \001("
    "\0162&.game_ermj_protocols.e_server_msg_typ"
    "e:\022e_mst_c2l_out_card\022\017\n\007card_id\030\002 \001(\005\"\264"
    "\001\n\031packetl2c_out_card_notify\022T\n\tpacket_i"
    "d\030\001 \001(\0162&.game_ermj_protocols.e_server_m"
    "sg_type:\031e_mst_l2c_out_card_notify\022\023\n\013ac"
    "tion_user\030\002 \001(\005\022,\n\004card\030\003 \001(\0132\036.game_erm"
    "j_protocols.card_data\"\253\001\n\030packetl2c_oper"
    "ate_notify\022S\n\tpacket_id\030\001 \001(\0162&.game_erm"
    "j_protocols.e_server_msg_type:\030e_mst_l2c"
    "_operate_notify\022\023\n\013user_action\030\002 \001(\005\022\020\n\010"
    "card_val\030\003 \001(\005\022\023\n\013bot_pass_hu\030\004 \001(\010\"\221\001\n\026"
    "packetc2l_operate_card\022Q\n\tpacket_id\030\001 \001("
    "\0162&.game_ermj_protocols.e_server_msg_typ"
    "e:\026e_mst_c2l_operate_card\022\023\n\013user_action"
    "\030\002 \001(\005\022\017\n\007card_id\030\003 \001(\005\"\264\002\n\030packetl2c_op"
    "erate_result\022S\n\tpacket_id\030\001 \001(\0162&.game_e"
    "rmj_protocols.e_server_msg_type:\030e_mst_l"
    "2c_operate_result\022\023\n\013action_user\030\002 \001(\005\022\023"
    "\n\013user_action\030\003 \001(\005\022\024\n\014provide_user\030\004 \001("
    "\005\022\020\n\010card_val\030\005 \001(\005\0222\n\npile_cards\030\006 \003(\0132"
    "\036.game_ermj_protocols.card_data\022\024\n\014bot_t"
    "ing_out\030\007 \001(\005\022\017\n\007bot_out\030\010 \001(\005\022\026\n\016bot_ti"
    "ng_cards\030\t \003(\005\"\373\001\n\023packetl2c_send_card\022N"
    "\n\tpacket_id\030\001 \001(\0162&.game_ermj_protocols."
    "e_server_msg_type:\023e_mst_l2c_send_card\022\024"
    "\n\014current_user\030\002 \001(\005\022,\n\004card\030\003 \001(\0132\036.gam"
    "e_ermj_protocols.card_data\022\024\n\014bot_ting_o"
    "ut\030\004 \001(\005\022\023\n\013bot_pass_hu\030\005 \001(\010\022\017\n\007bot_out"
    "\030\006 \001(\005\022\024\n\014bot_gang_out\030\007 \001(\005\"_\n\020packetc2"
    "l_bu_hua\022K\n\tpacket_id\030\001 \001(\0162&.game_ermj_"
    "protocols.e_server_msg_type:\020e_mst_c2l_b"
    "u_hua\"\265\001\n\027packetl2c_bu_hua_notify\022R\n\tpac"
    "ket_id\030\001 \001(\0162&.game_ermj_protocols.e_ser"
    "ver_msg_type:\027e_mst_l2c_bu_hua_notify\022\024\n"
    "\014current_user\030\002 \001(\005\0220\n\010hua_card\030\003 \001(\0132\036."
    "game_ermj_protocols.card_data\"\225\001\n\030packet"
    "l2c_pass_hu_notify\022S\n\tpacket_id\030\001 \001(\0162&."
    "game_ermj_protocols.e_server_msg_type:\030e"
    "_mst_l2c_pass_hu_notify\022\020\n\010pass_idx\030\002 \001("
    "\005\022\022\n\npass_times\030\003 \001(\005\"\267\001\n\034packetl2c_othe"
    "r_player_cards\022W\n\tpacket_id\030\001 \001(\0162&.game"
    "_ermj_protocols.e_server_msg_type:\034e_mst"
    "_l2c_other_player_cards\022\016\n\006chairs\030\002 \003(\005\022"
    ".\n\005cards\030\003 \003(\0132\037.game_ermj_protocols.car"
    "ds_data\"b\n\nwin_result\022\020\n\010chair_id\030\001 \001(\005\022"
    "\017\n\007fan_cnt\030\002 \001(\005\022\017\n\007result1\030\003 \003(\r\022\017\n\007res"
    "ult2\030\004 \003(\r\022\017\n\007result3\030\005 \003(\r\"\216\003\n\022packetl2"
    "c_game_end\022M\n\tpacket_id\030\001 \001(\0162&.game_erm"
    "j_protocols.e_server_msg_type:\022e_mst_l2c"
    "_game_end\022\r\n\005times\030\002 \003(\005\022\022\n\ngame_score\030\003"
    " \003(\005\022\022\n\nleave_game\030\004 \003(\010\022\014\n\004ting\030\005 \003(\010\0223"
    "\n\nhand_cards\030\006 \003(\0132\037.game_ermj_protocols"
    ".cards_data\0228\n\npile_cards\030\007 \003(\0132$.game_e"
    "rmj_protocols.pile_cards_data\022\017\n\007hua_cnt"
    "\030\010 \003(\005\022\017\n\007limited\030\t \003(\010\022\023\n\013low_limited\030\n"
    " \003(\010\022,\n\003win\030\013 \001(\0132\037.game_ermj_protocols."
    "win_result\022\020\n\010win_card\030\014 \001(\005\"\270\001\n\025packetl"
    "2c_game_notify\022P\n\tpacket_id\030\001 \001(\0162&.game"
    "_ermj_protocols.e_server_msg_type:\025e_mst"
    "_l2c_game_notify\0227\n\013notify_type\030\002 \001(\0162\"."
    "game_ermj_protocols.e_notify_type\022\024\n\014not"
    "ify_param\030\003 \001(\005\"\254\001\n\016gm_player_info\022\021\n\tpl"
    "ayer_id\030\001 \001(\005\022\023\n\013player_name\030\002 \001(\t\022\023\n\013pl"
    "ayer_gold\030\003 \001(\003\022\023\n\013player_room\030\004 \001(\005\022\025\n\r"
    "player_profit\030\005 \001(\003\022\030\n\020player_kill_type\030"
    "\006 \001(\003\022\027\n\017player_kill_cnt\030\007 \001(\003\"p\n\021packet"
    "c2l_gm_list\022L\n\tpacket_id\030\001 \001(\0162&.game_er"
    "mj_protocols.e_server_msg_type:\021e_mst_c2"
    "l_gm_list\022\r\n\005hours\030\002 \001(\005\"B\n\014gm_room_info"
    "\022\n\n\002id\030\001 \001(\005\022\022\n\nplayer_fee\030\002 \001(\005\022\022\n\nplay"
    "er_win\030\003 \001(\003\"\311\001\n\021packetl2c_gm_list\022L\n\tpa"
    "cket_id\030\001 \001(\0162&.game_ermj_protocols.e_se"
    "rver_msg_type:\021e_mst_l2c_gm_list\0224\n\007play"
    "ers\030\002 \003(\0132#.game_ermj_protocols.gm_playe"
    "r_info\0220\n\005rooms\030\003 \003(\0132!.game_ermj_protoc"
    "ols.gm_room_info\"\231\001\n\021packetc2l_gm_kill\022L"
    "\n\tpacket_id\030\001 \001(\0162&.game_ermj_protocols."
    "e_server_msg_type:\021e_mst_c2l_gm_kill\022\021\n\t"
    "player_id\030\002 \001(\005\022\021\n\tkill_type\030\003 \001(\005\022\020\n\010ki"
    "ll_cnt\030\004 \001(\005", 6452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_ermj_protocol.proto", &protobuf_RegisterTypes);
  msg_player_info::default_instance_ = new msg_player_info();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetl2c_check_state_result::default_instance_ = new packetl2c_check_state_result();
  packetc2l_get_scene_info::default_instance_ = new packetc2l_get_scene_info();
  msg_room_scene_info::default_instance_ = new msg_room_scene_info();
  msg_playing_scene_info::default_instance_ = new msg_playing_scene_info();
  packetl2c_scene_info_result::default_instance_ = new packetl2c_scene_info_result();
  packetc2l_enter_room::default_instance_ = new packetc2l_enter_room();
  packetl2c_enter_room_result::default_instance_ = new packetl2c_enter_room_result();
  packetc2l_leave_room::default_instance_ = new packetc2l_leave_room();
  packetl2c_leave_room_result::default_instance_ = new packetl2c_leave_room_result();
  packetc2l_user_trustee::default_instance_ = new packetc2l_user_trustee();
  packetl2c_user_trustee_notify::default_instance_ = new packetl2c_user_trustee_notify();
  packetc2l_ready::default_instance_ = new packetc2l_ready();
  packetl2c_send_all_playerinfos::default_instance_ = new packetl2c_send_all_playerinfos();
  pile_card_data::default_instance_ = new pile_card_data();
  pile_cards_data::default_instance_ = new pile_cards_data();
  card_data::default_instance_ = new card_data();
  cards_data::default_instance_ = new cards_data();
  first_bu_hua_data::default_instance_ = new first_bu_hua_data();
  packetl2c_game_start::default_instance_ = new packetl2c_game_start();
  packetc2l_out_card::default_instance_ = new packetc2l_out_card();
  packetl2c_out_card_notify::default_instance_ = new packetl2c_out_card_notify();
  packetl2c_operate_notify::default_instance_ = new packetl2c_operate_notify();
  packetc2l_operate_card::default_instance_ = new packetc2l_operate_card();
  packetl2c_operate_result::default_instance_ = new packetl2c_operate_result();
  packetl2c_send_card::default_instance_ = new packetl2c_send_card();
  packetc2l_bu_hua::default_instance_ = new packetc2l_bu_hua();
  packetl2c_bu_hua_notify::default_instance_ = new packetl2c_bu_hua_notify();
  packetl2c_pass_hu_notify::default_instance_ = new packetl2c_pass_hu_notify();
  packetl2c_other_player_cards::default_instance_ = new packetl2c_other_player_cards();
  win_result::default_instance_ = new win_result();
  packetl2c_game_end::default_instance_ = new packetl2c_game_end();
  packetl2c_game_notify::default_instance_ = new packetl2c_game_notify();
  gm_player_info::default_instance_ = new gm_player_info();
  packetc2l_gm_list::default_instance_ = new packetc2l_gm_list();
  gm_room_info::default_instance_ = new gm_room_info();
  packetl2c_gm_list::default_instance_ = new packetl2c_gm_list();
  packetc2l_gm_kill::default_instance_ = new packetc2l_gm_kill();
  msg_player_info::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetl2c_check_state_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_scene_info::default_instance_->InitAsDefaultInstance();
  msg_room_scene_info::default_instance_->InitAsDefaultInstance();
  msg_playing_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_room::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_room::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_user_trustee::default_instance_->InitAsDefaultInstance();
  packetl2c_user_trustee_notify::default_instance_->InitAsDefaultInstance();
  packetc2l_ready::default_instance_->InitAsDefaultInstance();
  packetl2c_send_all_playerinfos::default_instance_->InitAsDefaultInstance();
  pile_card_data::default_instance_->InitAsDefaultInstance();
  pile_cards_data::default_instance_->InitAsDefaultInstance();
  card_data::default_instance_->InitAsDefaultInstance();
  cards_data::default_instance_->InitAsDefaultInstance();
  first_bu_hua_data::default_instance_->InitAsDefaultInstance();
  packetl2c_game_start::default_instance_->InitAsDefaultInstance();
  packetc2l_out_card::default_instance_->InitAsDefaultInstance();
  packetl2c_out_card_notify::default_instance_->InitAsDefaultInstance();
  packetl2c_operate_notify::default_instance_->InitAsDefaultInstance();
  packetc2l_operate_card::default_instance_->InitAsDefaultInstance();
  packetl2c_operate_result::default_instance_->InitAsDefaultInstance();
  packetl2c_send_card::default_instance_->InitAsDefaultInstance();
  packetc2l_bu_hua::default_instance_->InitAsDefaultInstance();
  packetl2c_bu_hua_notify::default_instance_->InitAsDefaultInstance();
  packetl2c_pass_hu_notify::default_instance_->InitAsDefaultInstance();
  packetl2c_other_player_cards::default_instance_->InitAsDefaultInstance();
  win_result::default_instance_->InitAsDefaultInstance();
  packetl2c_game_end::default_instance_->InitAsDefaultInstance();
  packetl2c_game_notify::default_instance_->InitAsDefaultInstance();
  gm_player_info::default_instance_->InitAsDefaultInstance();
  packetc2l_gm_list::default_instance_->InitAsDefaultInstance();
  gm_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_list::default_instance_->InitAsDefaultInstance();
  packetc2l_gm_kill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fermj_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fermj_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fermj_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fermj_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_player_info::kPlayerIdFieldNumber;
const int msg_player_info::kPlayerNameFieldNumber;
const int msg_player_info::kHeadFrameFieldNumber;
const int msg_player_info::kHeadCustomFieldNumber;
const int msg_player_info::kPlayerGoldFieldNumber;
const int msg_player_info::kPlayerSexFieldNumber;
const int msg_player_info::kVipLevelFieldNumber;
#endif  // !_MSC_VER

msg_player_info::msg_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_info::InitAsDefaultInstance() {
}

msg_player_info::msg_player_info(const msg_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_frame_ = 0;
  head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  vip_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_info::~msg_player_info() {
  SharedDtor();
}

void msg_player_info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_info_descriptor_;
}

const msg_player_info& msg_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

msg_player_info* msg_player_info::default_instance_ = NULL;

msg_player_info* msg_player_info::New() const {
  return new msg_player_info;
}

void msg_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    head_frame_ = 0;
    if (has_head_custom()) {
      if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
        head_custom_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
    player_sex_ = 0;
    vip_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_frame;
        break;
      }

      // optional int32 head_frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_frame_)));
          set_has_head_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head_custom;
        break;
      }

      // optional string head_custom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head_custom().data(), this->head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->head_frame(), output);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_sex(), output);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->head_frame(), target);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_sex(), target);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional int32 head_frame = 3;
    if (has_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_frame());
    }

    // optional string head_custom = 4;
    if (has_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 6;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 vip_level = 7;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_info::MergeFrom(const msg_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_head_frame()) {
      set_head_frame(from.head_frame());
    }
    if (from.has_head_custom()) {
      set_head_custom(from.head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_info::CopyFrom(const msg_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_info::IsInitialized() const {

  return true;
}

void msg_player_info::Swap(msg_player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(head_frame_, other->head_frame_);
    std::swap(head_custom_, other->head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_info_descriptor_;
  metadata.reflection = msg_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_check_state_result::kPacketIdFieldNumber;
const int packetl2c_check_state_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_check_state_result::packetl2c_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_check_state_result::InitAsDefaultInstance() {
}

packetl2c_check_state_result::packetl2c_check_state_result(const packetl2c_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_check_state_result::~packetl2c_check_state_result() {
  SharedDtor();
}

void packetl2c_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_check_state_result_descriptor_;
}

const packetl2c_check_state_result& packetl2c_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_check_state_result* packetl2c_check_state_result::default_instance_ = NULL;

packetl2c_check_state_result* packetl2c_check_state_result::New() const {
  return new packetl2c_check_state_result;
}

void packetl2c_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_check_state_result::MergeFrom(const packetl2c_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_check_state_result::CopyFrom(const packetl2c_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_check_state_result::IsInitialized() const {

  return true;
}

void packetl2c_check_state_result::Swap(packetl2c_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_check_state_result_descriptor_;
  metadata.reflection = packetl2c_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_scene_info::packetc2l_get_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_scene_info::packetc2l_get_scene_info(const packetc2l_get_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_scene_info::~packetc2l_get_scene_info() {
  SharedDtor();
}

void packetc2l_get_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_scene_info_descriptor_;
}

const packetc2l_get_scene_info& packetc2l_get_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_scene_info* packetc2l_get_scene_info::default_instance_ = NULL;

packetc2l_get_scene_info* packetc2l_get_scene_info::New() const {
  return new packetc2l_get_scene_info;
}

void packetc2l_get_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_scene_info::MergeFrom(const packetc2l_get_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_scene_info::CopyFrom(const packetc2l_get_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_scene_info::Swap(packetc2l_get_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_room_scene_info::kReadyFieldNumber;
#endif  // !_MSC_VER

msg_room_scene_info::msg_room_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_room_scene_info::InitAsDefaultInstance() {
}

msg_room_scene_info::msg_room_scene_info(const msg_room_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_room_scene_info::SharedCtor() {
  _cached_size_ = 0;
  ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_room_scene_info::~msg_room_scene_info() {
  SharedDtor();
}

void msg_room_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_room_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_room_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_room_scene_info_descriptor_;
}

const msg_room_scene_info& msg_room_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

msg_room_scene_info* msg_room_scene_info::default_instance_ = NULL;

msg_room_scene_info* msg_room_scene_info::New() const {
  return new msg_room_scene_info;
}

void msg_room_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ready_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_room_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ready = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_room_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool ready = 1;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_room_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool ready = 1;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_room_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ready = 1;
    if (has_ready()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_room_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_room_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_room_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_room_scene_info::MergeFrom(const msg_room_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_room_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_room_scene_info::CopyFrom(const msg_room_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_room_scene_info::IsInitialized() const {

  return true;
}

void msg_room_scene_info::Swap(msg_room_scene_info* other) {
  if (other != this) {
    std::swap(ready_, other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_room_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_room_scene_info_descriptor_;
  metadata.reflection = msg_room_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_playing_scene_info::kBankerChairIdFieldNumber;
const int msg_playing_scene_info::kCurrentUserFieldNumber;
const int msg_playing_scene_info::kOutCardFieldNumber;
const int msg_playing_scene_info::kActionCodeFieldNumber;
const int msg_playing_scene_info::kRemainSecondsFieldNumber;
const int msg_playing_scene_info::kUserTrusteeFieldNumber;
const int msg_playing_scene_info::kTingFieldNumber;
const int msg_playing_scene_info::kHandCardsFieldNumber;
const int msg_playing_scene_info::kRiverCardsFieldNumber;
const int msg_playing_scene_info::kHuaCardsFieldNumber;
const int msg_playing_scene_info::kPileCardsFieldNumber;
const int msg_playing_scene_info::kPassTimesFieldNumber;
#endif  // !_MSC_VER

msg_playing_scene_info::msg_playing_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_playing_scene_info::InitAsDefaultInstance() {
}

msg_playing_scene_info::msg_playing_scene_info(const msg_playing_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_playing_scene_info::SharedCtor() {
  _cached_size_ = 0;
  banker_chair_id_ = 0;
  current_user_ = 0;
  out_card_ = 0;
  action_code_ = 0;
  remain_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_playing_scene_info::~msg_playing_scene_info() {
  SharedDtor();
}

void msg_playing_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_playing_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_playing_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_playing_scene_info_descriptor_;
}

const msg_playing_scene_info& msg_playing_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

msg_playing_scene_info* msg_playing_scene_info::default_instance_ = NULL;

msg_playing_scene_info* msg_playing_scene_info::New() const {
  return new msg_playing_scene_info;
}

void msg_playing_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_chair_id_ = 0;
    current_user_ = 0;
    out_card_ = 0;
    action_code_ = 0;
    remain_seconds_ = 0;
  }
  user_trustee_.Clear();
  ting_.Clear();
  hand_cards_.Clear();
  river_cards_.Clear();
  hua_cards_.Clear();
  pile_cards_.Clear();
  pass_times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_playing_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker_chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_chair_id_)));
          set_has_banker_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_user;
        break;
      }

      // optional int32 current_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_card;
        break;
      }

      // optional int32 out_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_card_)));
          set_has_out_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_code;
        break;
      }

      // optional int32 action_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_code_)));
          set_has_action_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remain_seconds;
        break;
      }

      // optional int32 remain_seconds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_seconds_)));
          set_has_remain_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_user_trustee;
        break;
      }

      // repeated bool user_trustee = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 48, input, this->mutable_user_trustee())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_user_trustee())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_user_trustee;
        if (input->ExpectTag(56)) goto parse_ting;
        break;
      }

      // repeated bool ting = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 56, input, this->mutable_ting())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_ting())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ting;
        if (input->ExpectTag(66)) goto parse_hand_cards;
        break;
      }

      // repeated .game_ermj_protocols.cards_data hand_cards = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_hand_cards;
        if (input->ExpectTag(74)) goto parse_river_cards;
        break;
      }

      // repeated .game_ermj_protocols.cards_data river_cards = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_river_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_river_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_river_cards;
        if (input->ExpectTag(82)) goto parse_hua_cards;
        break;
      }

      // repeated .game_ermj_protocols.cards_data hua_cards = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hua_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hua_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hua_cards;
        if (input->ExpectTag(90)) goto parse_pile_cards;
        break;
      }

      // repeated .game_ermj_protocols.pile_cards_data pile_cards = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pile_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pile_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pile_cards;
        if (input->ExpectTag(96)) goto parse_pass_times;
        break;
      }

      // repeated int32 pass_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_pass_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pass_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_pass_times;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_playing_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 banker_chair_id = 1;
  if (has_banker_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker_chair_id(), output);
  }

  // optional int32 current_user = 2;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_user(), output);
  }

  // optional int32 out_card = 3;
  if (has_out_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->out_card(), output);
  }

  // optional int32 action_code = 4;
  if (has_action_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action_code(), output);
  }

  // optional int32 remain_seconds = 5;
  if (has_remain_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remain_seconds(), output);
  }

  // repeated bool user_trustee = 6;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      6, this->user_trustee(i), output);
  }

  // repeated bool ting = 7;
  for (int i = 0; i < this->ting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      7, this->ting(i), output);
  }

  // repeated .game_ermj_protocols.cards_data hand_cards = 8;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hand_cards(i), output);
  }

  // repeated .game_ermj_protocols.cards_data river_cards = 9;
  for (int i = 0; i < this->river_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->river_cards(i), output);
  }

  // repeated .game_ermj_protocols.cards_data hua_cards = 10;
  for (int i = 0; i < this->hua_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hua_cards(i), output);
  }

  // repeated .game_ermj_protocols.pile_cards_data pile_cards = 11;
  for (int i = 0; i < this->pile_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->pile_cards(i), output);
  }

  // repeated int32 pass_times = 12;
  for (int i = 0; i < this->pass_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->pass_times(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_playing_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 banker_chair_id = 1;
  if (has_banker_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker_chair_id(), target);
  }

  // optional int32 current_user = 2;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_user(), target);
  }

  // optional int32 out_card = 3;
  if (has_out_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->out_card(), target);
  }

  // optional int32 action_code = 4;
  if (has_action_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action_code(), target);
  }

  // optional int32 remain_seconds = 5;
  if (has_remain_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remain_seconds(), target);
  }

  // repeated bool user_trustee = 6;
  for (int i = 0; i < this->user_trustee_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(6, this->user_trustee(i), target);
  }

  // repeated bool ting = 7;
  for (int i = 0; i < this->ting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(7, this->ting(i), target);
  }

  // repeated .game_ermj_protocols.cards_data hand_cards = 8;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hand_cards(i), target);
  }

  // repeated .game_ermj_protocols.cards_data river_cards = 9;
  for (int i = 0; i < this->river_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->river_cards(i), target);
  }

  // repeated .game_ermj_protocols.cards_data hua_cards = 10;
  for (int i = 0; i < this->hua_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->hua_cards(i), target);
  }

  // repeated .game_ermj_protocols.pile_cards_data pile_cards = 11;
  for (int i = 0; i < this->pile_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pile_cards(i), target);
  }

  // repeated int32 pass_times = 12;
  for (int i = 0; i < this->pass_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->pass_times(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_playing_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 banker_chair_id = 1;
    if (has_banker_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_chair_id());
    }

    // optional int32 current_user = 2;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional int32 out_card = 3;
    if (has_out_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_card());
    }

    // optional int32 action_code = 4;
    if (has_action_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_code());
    }

    // optional int32 remain_seconds = 5;
    if (has_remain_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_seconds());
    }

  }
  // repeated bool user_trustee = 6;
  {
    int data_size = 0;
    data_size = 1 * this->user_trustee_size();
    total_size += 1 * this->user_trustee_size() + data_size;
  }

  // repeated bool ting = 7;
  {
    int data_size = 0;
    data_size = 1 * this->ting_size();
    total_size += 1 * this->ting_size() + data_size;
  }

  // repeated .game_ermj_protocols.cards_data hand_cards = 8;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated .game_ermj_protocols.cards_data river_cards = 9;
  total_size += 1 * this->river_cards_size();
  for (int i = 0; i < this->river_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->river_cards(i));
  }

  // repeated .game_ermj_protocols.cards_data hua_cards = 10;
  total_size += 1 * this->hua_cards_size();
  for (int i = 0; i < this->hua_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hua_cards(i));
  }

  // repeated .game_ermj_protocols.pile_cards_data pile_cards = 11;
  total_size += 1 * this->pile_cards_size();
  for (int i = 0; i < this->pile_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pile_cards(i));
  }

  // repeated int32 pass_times = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->pass_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pass_times(i));
    }
    total_size += 1 * this->pass_times_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_playing_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_playing_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_playing_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_playing_scene_info::MergeFrom(const msg_playing_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_trustee_.MergeFrom(from.user_trustee_);
  ting_.MergeFrom(from.ting_);
  hand_cards_.MergeFrom(from.hand_cards_);
  river_cards_.MergeFrom(from.river_cards_);
  hua_cards_.MergeFrom(from.hua_cards_);
  pile_cards_.MergeFrom(from.pile_cards_);
  pass_times_.MergeFrom(from.pass_times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_chair_id()) {
      set_banker_chair_id(from.banker_chair_id());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_out_card()) {
      set_out_card(from.out_card());
    }
    if (from.has_action_code()) {
      set_action_code(from.action_code());
    }
    if (from.has_remain_seconds()) {
      set_remain_seconds(from.remain_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_playing_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_playing_scene_info::CopyFrom(const msg_playing_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_playing_scene_info::IsInitialized() const {

  return true;
}

void msg_playing_scene_info::Swap(msg_playing_scene_info* other) {
  if (other != this) {
    std::swap(banker_chair_id_, other->banker_chair_id_);
    std::swap(current_user_, other->current_user_);
    std::swap(out_card_, other->out_card_);
    std::swap(action_code_, other->action_code_);
    std::swap(remain_seconds_, other->remain_seconds_);
    user_trustee_.Swap(&other->user_trustee_);
    ting_.Swap(&other->ting_);
    hand_cards_.Swap(&other->hand_cards_);
    river_cards_.Swap(&other->river_cards_);
    hua_cards_.Swap(&other->hua_cards_);
    pile_cards_.Swap(&other->pile_cards_);
    pass_times_.Swap(&other->pass_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_playing_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_playing_scene_info_descriptor_;
  metadata.reflection = msg_playing_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_scene_info_result::kRoomTypeFieldNumber;
const int packetl2c_scene_info_result::kSceneInfo1FieldNumber;
const int packetl2c_scene_info_result::kSceneInfo3FieldNumber;
const int packetl2c_scene_info_result::kInfoTypeFieldNumber;
const int packetl2c_scene_info_result::kSceneInfo4FieldNumber;
#endif  // !_MSC_VER

packetl2c_scene_info_result::packetl2c_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_scene_info_result::InitAsDefaultInstance() {
  scene_info1_ = const_cast< ::game_ermj_protocols::msg_room_scene_info*>(&::game_ermj_protocols::msg_room_scene_info::default_instance());
  scene_info3_ = const_cast< ::game_ermj_protocols::msg_playing_scene_info*>(&::game_ermj_protocols::msg_playing_scene_info::default_instance());
  scene_info4_ = const_cast< ::game_ermj_protocols::packetl2c_game_end*>(&::game_ermj_protocols::packetl2c_game_end::default_instance());
}

packetl2c_scene_info_result::packetl2c_scene_info_result(const packetl2c_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  room_type_ = 0;
  scene_info1_ = NULL;
  scene_info3_ = NULL;
  info_type_ = 0;
  scene_info4_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_scene_info_result::~packetl2c_scene_info_result() {
  SharedDtor();
}

void packetl2c_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info1_;
    delete scene_info3_;
    delete scene_info4_;
  }
}

void packetl2c_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_scene_info_result_descriptor_;
}

const packetl2c_scene_info_result& packetl2c_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_scene_info_result* packetl2c_scene_info_result::default_instance_ = NULL;

packetl2c_scene_info_result* packetl2c_scene_info_result::New() const {
  return new packetl2c_scene_info_result;
}

void packetl2c_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
    room_type_ = 0;
    if (has_scene_info1()) {
      if (scene_info1_ != NULL) scene_info1_->::game_ermj_protocols::msg_room_scene_info::Clear();
    }
    if (has_scene_info3()) {
      if (scene_info3_ != NULL) scene_info3_->::game_ermj_protocols::msg_playing_scene_info::Clear();
    }
    info_type_ = 0;
    if (has_scene_info4()) {
      if (scene_info4_ != NULL) scene_info4_->::game_ermj_protocols::packetl2c_game_end::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // optional int32 room_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_)));
          set_has_room_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scene_info1;
        break;
      }

      // optional .game_ermj_protocols.msg_room_scene_info scene_info1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scene_info3;
        break;
      }

      // optional .game_ermj_protocols.msg_playing_scene_info scene_info3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_info_type;
        break;
      }

      // optional int32 info_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info_type_)));
          set_has_info_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_scene_info4;
        break;
      }

      // optional .game_ermj_protocols.packetl2c_game_end scene_info4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_type(), output);
  }

  // optional .game_ermj_protocols.msg_room_scene_info scene_info1 = 3;
  if (has_scene_info1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scene_info1(), output);
  }

  // optional .game_ermj_protocols.msg_playing_scene_info scene_info3 = 4;
  if (has_scene_info3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scene_info3(), output);
  }

  // optional int32 info_type = 5;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->info_type(), output);
  }

  // optional .game_ermj_protocols.packetl2c_game_end scene_info4 = 6;
  if (has_scene_info4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->scene_info4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_type(), target);
  }

  // optional .game_ermj_protocols.msg_room_scene_info scene_info1 = 3;
  if (has_scene_info1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scene_info1(), target);
  }

  // optional .game_ermj_protocols.msg_playing_scene_info scene_info3 = 4;
  if (has_scene_info3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scene_info3(), target);
  }

  // optional int32 info_type = 5;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->info_type(), target);
  }

  // optional .game_ermj_protocols.packetl2c_game_end scene_info4 = 6;
  if (has_scene_info4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->scene_info4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_type());
    }

    // optional .game_ermj_protocols.msg_room_scene_info scene_info1 = 3;
    if (has_scene_info1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info1());
    }

    // optional .game_ermj_protocols.msg_playing_scene_info scene_info3 = 4;
    if (has_scene_info3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info3());
    }

    // optional int32 info_type = 5;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info_type());
    }

    // optional .game_ermj_protocols.packetl2c_game_end scene_info4 = 6;
    if (has_scene_info4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_scene_info_result::MergeFrom(const packetl2c_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_scene_info1()) {
      mutable_scene_info1()->::game_ermj_protocols::msg_room_scene_info::MergeFrom(from.scene_info1());
    }
    if (from.has_scene_info3()) {
      mutable_scene_info3()->::game_ermj_protocols::msg_playing_scene_info::MergeFrom(from.scene_info3());
    }
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_scene_info4()) {
      mutable_scene_info4()->::game_ermj_protocols::packetl2c_game_end::MergeFrom(from.scene_info4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_scene_info_result::CopyFrom(const packetl2c_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_scene_info_result::Swap(packetl2c_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(scene_info1_, other->scene_info1_);
    std::swap(scene_info3_, other->scene_info3_);
    std::swap(info_type_, other->info_type_);
    std::swap(scene_info4_, other->scene_info4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_room::kPacketIdFieldNumber;
const int packetc2l_enter_room::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_room::packetc2l_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_enter_room::InitAsDefaultInstance() {
}

packetc2l_enter_room::packetc2l_enter_room(const packetc2l_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_enter_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10009;
  room_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_room::~packetc2l_enter_room() {
  SharedDtor();
}

void packetc2l_enter_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_room_descriptor_;
}

const packetc2l_enter_room& packetc2l_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_room* packetc2l_enter_room::default_instance_ = NULL;

packetc2l_enter_room* packetc2l_enter_room::New() const {
  return new packetc2l_enter_room;
}

void packetc2l_enter_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10009;
    room_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // optional int32 room_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_)));
          set_has_room_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_enter_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_room::MergeFrom(const packetc2l_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_room::CopyFrom(const packetc2l_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_room::IsInitialized() const {

  return true;
}

void packetc2l_enter_room::Swap(packetc2l_enter_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_room_descriptor_;
  metadata.reflection = packetc2l_enter_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_room_result::kPacketIdFieldNumber;
const int packetl2c_enter_room_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_room_result::packetl2c_enter_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_enter_room_result::InitAsDefaultInstance() {
}

packetl2c_enter_room_result::packetl2c_enter_room_result(const packetl2c_enter_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_enter_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_room_result::~packetl2c_enter_room_result() {
  SharedDtor();
}

void packetl2c_enter_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_enter_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_room_result_descriptor_;
}

const packetl2c_enter_room_result& packetl2c_enter_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_room_result* packetl2c_enter_room_result::default_instance_ = NULL;

packetl2c_enter_room_result* packetl2c_enter_room_result::New() const {
  return new packetl2c_enter_room_result;
}

void packetl2c_enter_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15009;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_enter_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_enter_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_enter_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_room_result::MergeFrom(const packetl2c_enter_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_room_result::CopyFrom(const packetl2c_enter_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_room_result::IsInitialized() const {

  return true;
}

void packetl2c_enter_room_result::Swap(packetl2c_enter_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_room_result_descriptor_;
  metadata.reflection = packetl2c_enter_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_room::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_room::packetc2l_leave_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_room::InitAsDefaultInstance() {
}

packetc2l_leave_room::packetc2l_leave_room(const packetc2l_leave_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_room::~packetc2l_leave_room() {
  SharedDtor();
}

void packetc2l_leave_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_room_descriptor_;
}

const packetc2l_leave_room& packetc2l_leave_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_room* packetc2l_leave_room::default_instance_ = NULL;

packetc2l_leave_room* packetc2l_leave_room::New() const {
  return new packetc2l_leave_room;
}

void packetc2l_leave_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10010;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_room::MergeFrom(const packetc2l_leave_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_room::CopyFrom(const packetc2l_leave_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_room::IsInitialized() const {

  return true;
}

void packetc2l_leave_room::Swap(packetc2l_leave_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_room_descriptor_;
  metadata.reflection = packetc2l_leave_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_room_result::kPacketIdFieldNumber;
const int packetl2c_leave_room_result::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_room_result::packetl2c_leave_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_leave_room_result::InitAsDefaultInstance() {
}

packetl2c_leave_room_result::packetl2c_leave_room_result(const packetl2c_leave_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_leave_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  player_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_room_result::~packetl2c_leave_room_result() {
  SharedDtor();
}

void packetl2c_leave_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_room_result_descriptor_;
}

const packetl2c_leave_room_result& packetl2c_leave_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_room_result* packetl2c_leave_room_result::default_instance_ = NULL;

packetl2c_leave_room_result* packetl2c_leave_room_result::New() const {
  return new packetl2c_leave_room_result;
}

void packetl2c_leave_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
    player_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_leave_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 player_gold = 2;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->player_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_leave_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 player_gold = 2;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->player_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_leave_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 player_gold = 2;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_room_result::MergeFrom(const packetl2c_leave_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_room_result::CopyFrom(const packetl2c_leave_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_room_result::IsInitialized() const {

  return true;
}

void packetl2c_leave_room_result::Swap(packetl2c_leave_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_room_result_descriptor_;
  metadata.reflection = packetl2c_leave_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_user_trustee::kPacketIdFieldNumber;
const int packetc2l_user_trustee::kTrusteeFieldNumber;
#endif  // !_MSC_VER

packetc2l_user_trustee::packetc2l_user_trustee()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_user_trustee::InitAsDefaultInstance() {
}

packetc2l_user_trustee::packetc2l_user_trustee(const packetc2l_user_trustee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_user_trustee::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10008;
  trustee_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_user_trustee::~packetc2l_user_trustee() {
  SharedDtor();
}

void packetc2l_user_trustee::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_user_trustee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_user_trustee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_user_trustee_descriptor_;
}

const packetc2l_user_trustee& packetc2l_user_trustee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_user_trustee* packetc2l_user_trustee::default_instance_ = NULL;

packetc2l_user_trustee* packetc2l_user_trustee::New() const {
  return new packetc2l_user_trustee;
}

void packetc2l_user_trustee::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10008;
    trustee_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_user_trustee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trustee;
        break;
      }

      // optional bool trustee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trustee_)));
          set_has_trustee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_user_trustee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool trustee = 2;
  if (has_trustee()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trustee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_user_trustee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool trustee = 2;
  if (has_trustee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trustee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_user_trustee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool trustee = 2;
    if (has_trustee()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_user_trustee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_user_trustee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_user_trustee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_user_trustee::MergeFrom(const packetc2l_user_trustee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_trustee()) {
      set_trustee(from.trustee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_user_trustee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_user_trustee::CopyFrom(const packetc2l_user_trustee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_user_trustee::IsInitialized() const {

  return true;
}

void packetc2l_user_trustee::Swap(packetc2l_user_trustee* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(trustee_, other->trustee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_user_trustee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_user_trustee_descriptor_;
  metadata.reflection = packetc2l_user_trustee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_user_trustee_notify::kPacketIdFieldNumber;
const int packetl2c_user_trustee_notify::kChairIdFieldNumber;
const int packetl2c_user_trustee_notify::kTrusteeFieldNumber;
const int packetl2c_user_trustee_notify::kRemainSecondsFieldNumber;
#endif  // !_MSC_VER

packetl2c_user_trustee_notify::packetl2c_user_trustee_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_user_trustee_notify::InitAsDefaultInstance() {
}

packetl2c_user_trustee_notify::packetl2c_user_trustee_notify(const packetl2c_user_trustee_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_user_trustee_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15008;
  chair_id_ = 0;
  trustee_ = false;
  remain_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_user_trustee_notify::~packetl2c_user_trustee_notify() {
  SharedDtor();
}

void packetl2c_user_trustee_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_user_trustee_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_user_trustee_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_user_trustee_notify_descriptor_;
}

const packetl2c_user_trustee_notify& packetl2c_user_trustee_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_user_trustee_notify* packetl2c_user_trustee_notify::default_instance_ = NULL;

packetl2c_user_trustee_notify* packetl2c_user_trustee_notify::New() const {
  return new packetl2c_user_trustee_notify;
}

void packetl2c_user_trustee_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15008;
    chair_id_ = 0;
    trustee_ = false;
    remain_seconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_user_trustee_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chair_id;
        break;
      }

      // optional int32 chair_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trustee;
        break;
      }

      // optional bool trustee = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trustee_)));
          set_has_trustee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remain_seconds;
        break;
      }

      // optional int32 remain_seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_seconds_)));
          set_has_remain_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_user_trustee_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 chair_id = 2;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_id(), output);
  }

  // optional bool trustee = 3;
  if (has_trustee()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trustee(), output);
  }

  // optional int32 remain_seconds = 4;
  if (has_remain_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remain_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_user_trustee_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 chair_id = 2;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_id(), target);
  }

  // optional bool trustee = 3;
  if (has_trustee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trustee(), target);
  }

  // optional int32 remain_seconds = 4;
  if (has_remain_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remain_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_user_trustee_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 chair_id = 2;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional bool trustee = 3;
    if (has_trustee()) {
      total_size += 1 + 1;
    }

    // optional int32 remain_seconds = 4;
    if (has_remain_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_user_trustee_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_user_trustee_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_user_trustee_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_user_trustee_notify::MergeFrom(const packetl2c_user_trustee_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_trustee()) {
      set_trustee(from.trustee());
    }
    if (from.has_remain_seconds()) {
      set_remain_seconds(from.remain_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_user_trustee_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_user_trustee_notify::CopyFrom(const packetl2c_user_trustee_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_user_trustee_notify::IsInitialized() const {

  return true;
}

void packetl2c_user_trustee_notify::Swap(packetl2c_user_trustee_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(trustee_, other->trustee_);
    std::swap(remain_seconds_, other->remain_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_user_trustee_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_user_trustee_notify_descriptor_;
  metadata.reflection = packetl2c_user_trustee_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ready::kPacketIdFieldNumber;
const int packetc2l_ready::kChangeTableFieldNumber;
#endif  // !_MSC_VER

packetc2l_ready::packetc2l_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ready::InitAsDefaultInstance() {
}

packetc2l_ready::packetc2l_ready(const packetc2l_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ready::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  change_table_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ready::~packetc2l_ready() {
  SharedDtor();
}

void packetc2l_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ready_descriptor_;
}

const packetc2l_ready& packetc2l_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ready* packetc2l_ready::default_instance_ = NULL;

packetc2l_ready* packetc2l_ready::New() const {
  return new packetc2l_ready;
}

void packetc2l_ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10011;
    change_table_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_table;
        break;
      }

      // optional bool change_table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &change_table_)));
          set_has_change_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool change_table = 2;
  if (has_change_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->change_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool change_table = 2;
  if (has_change_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->change_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ready::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool change_table = 2;
    if (has_change_table()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ready::MergeFrom(const packetc2l_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_change_table()) {
      set_change_table(from.change_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ready::CopyFrom(const packetc2l_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ready::IsInitialized() const {

  return true;
}

void packetc2l_ready::Swap(packetc2l_ready* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(change_table_, other->change_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ready_descriptor_;
  metadata.reflection = packetc2l_ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_send_all_playerinfos::kPacketIdFieldNumber;
const int packetl2c_send_all_playerinfos::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_send_all_playerinfos::packetl2c_send_all_playerinfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_send_all_playerinfos::InitAsDefaultInstance() {
}

packetl2c_send_all_playerinfos::packetl2c_send_all_playerinfos(const packetl2c_send_all_playerinfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_send_all_playerinfos::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15017;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_send_all_playerinfos::~packetl2c_send_all_playerinfos() {
  SharedDtor();
}

void packetl2c_send_all_playerinfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_send_all_playerinfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_send_all_playerinfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_send_all_playerinfos_descriptor_;
}

const packetl2c_send_all_playerinfos& packetl2c_send_all_playerinfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_send_all_playerinfos* packetl2c_send_all_playerinfos::default_instance_ = NULL;

packetl2c_send_all_playerinfos* packetl2c_send_all_playerinfos::New() const {
  return new packetl2c_send_all_playerinfos;
}

void packetl2c_send_all_playerinfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15017;
  }
  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_send_all_playerinfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }

      // repeated .game_ermj_protocols.msg_player_info player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_send_all_playerinfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_ermj_protocols.msg_player_info player_info = 2;
  for (int i = 0; i < this->player_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_send_all_playerinfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_ermj_protocols.msg_player_info player_info = 2;
  for (int i = 0; i < this->player_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_send_all_playerinfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_ermj_protocols.msg_player_info player_info = 2;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_send_all_playerinfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_send_all_playerinfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_send_all_playerinfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_send_all_playerinfos::MergeFrom(const packetl2c_send_all_playerinfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_info_.MergeFrom(from.player_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_send_all_playerinfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_send_all_playerinfos::CopyFrom(const packetl2c_send_all_playerinfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_send_all_playerinfos::IsInitialized() const {

  return true;
}

void packetl2c_send_all_playerinfos::Swap(packetl2c_send_all_playerinfos* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    player_info_.Swap(&other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_send_all_playerinfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_send_all_playerinfos_descriptor_;
  metadata.reflection = packetl2c_send_all_playerinfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pile_card_data::kActionCodeFieldNumber;
const int pile_card_data::kCardsFieldNumber;
const int pile_card_data::kMingGangFieldNumber;
const int pile_card_data::kJiaGangFieldNumber;
#endif  // !_MSC_VER

pile_card_data::pile_card_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pile_card_data::InitAsDefaultInstance() {
}

pile_card_data::pile_card_data(const pile_card_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pile_card_data::SharedCtor() {
  _cached_size_ = 0;
  action_code_ = 0;
  ming_gang_ = false;
  jia_gang_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pile_card_data::~pile_card_data() {
  SharedDtor();
}

void pile_card_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pile_card_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pile_card_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pile_card_data_descriptor_;
}

const pile_card_data& pile_card_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

pile_card_data* pile_card_data::default_instance_ = NULL;

pile_card_data* pile_card_data::New() const {
  return new pile_card_data;
}

void pile_card_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_code_ = 0;
    ming_gang_ = false;
    jia_gang_ = false;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pile_card_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 action_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_code_)));
          set_has_action_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectTag(24)) goto parse_ming_gang;
        break;
      }

      // optional bool ming_gang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ming_gang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ming_gang_)));
          set_has_ming_gang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jia_gang;
        break;
      }

      // optional bool jia_gang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jia_gang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jia_gang_)));
          set_has_jia_gang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pile_card_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 action_code = 1;
  if (has_action_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action_code(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  // optional bool ming_gang = 3;
  if (has_ming_gang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ming_gang(), output);
  }

  // optional bool jia_gang = 4;
  if (has_jia_gang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->jia_gang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pile_card_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 action_code = 1;
  if (has_action_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action_code(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  // optional bool ming_gang = 3;
  if (has_ming_gang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ming_gang(), target);
  }

  // optional bool jia_gang = 4;
  if (has_jia_gang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->jia_gang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pile_card_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 action_code = 1;
    if (has_action_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_code());
    }

    // optional bool ming_gang = 3;
    if (has_ming_gang()) {
      total_size += 1 + 1;
    }

    // optional bool jia_gang = 4;
    if (has_jia_gang()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pile_card_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pile_card_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pile_card_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pile_card_data::MergeFrom(const pile_card_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_code()) {
      set_action_code(from.action_code());
    }
    if (from.has_ming_gang()) {
      set_ming_gang(from.ming_gang());
    }
    if (from.has_jia_gang()) {
      set_jia_gang(from.jia_gang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pile_card_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pile_card_data::CopyFrom(const pile_card_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pile_card_data::IsInitialized() const {

  return true;
}

void pile_card_data::Swap(pile_card_data* other) {
  if (other != this) {
    std::swap(action_code_, other->action_code_);
    cards_.Swap(&other->cards_);
    std::swap(ming_gang_, other->ming_gang_);
    std::swap(jia_gang_, other->jia_gang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pile_card_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pile_card_data_descriptor_;
  metadata.reflection = pile_card_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pile_cards_data::kCardFieldNumber;
#endif  // !_MSC_VER

pile_cards_data::pile_cards_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pile_cards_data::InitAsDefaultInstance() {
}

pile_cards_data::pile_cards_data(const pile_cards_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pile_cards_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pile_cards_data::~pile_cards_data() {
  SharedDtor();
}

void pile_cards_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pile_cards_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pile_cards_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pile_cards_data_descriptor_;
}

const pile_cards_data& pile_cards_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

pile_cards_data* pile_cards_data::default_instance_ = NULL;

pile_cards_data* pile_cards_data::New() const {
  return new pile_cards_data;
}

void pile_cards_data::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pile_cards_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game_ermj_protocols.pile_card_data card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pile_cards_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .game_ermj_protocols.pile_card_data card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pile_cards_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .game_ermj_protocols.pile_card_data card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pile_cards_data::ByteSize() const {
  int total_size = 0;

  // repeated .game_ermj_protocols.pile_card_data card = 1;
  total_size += 1 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pile_cards_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pile_cards_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pile_cards_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pile_cards_data::MergeFrom(const pile_cards_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pile_cards_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pile_cards_data::CopyFrom(const pile_cards_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pile_cards_data::IsInitialized() const {

  return true;
}

void pile_cards_data::Swap(pile_cards_data* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pile_cards_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pile_cards_data_descriptor_;
  metadata.reflection = pile_cards_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int card_data::kCardIdFieldNumber;
const int card_data::kCardValFieldNumber;
#endif  // !_MSC_VER

card_data::card_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void card_data::InitAsDefaultInstance() {
}

card_data::card_data(const card_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void card_data::SharedCtor() {
  _cached_size_ = 0;
  card_id_ = 0;
  card_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

card_data::~card_data() {
  SharedDtor();
}

void card_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void card_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* card_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return card_data_descriptor_;
}

const card_data& card_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

card_data* card_data::default_instance_ = NULL;

card_data* card_data::New() const {
  return new card_data;
}

void card_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_id_ = 0;
    card_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool card_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 card_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_id_)));
          set_has_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_val;
        break;
      }

      // optional int32 card_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_val_)));
          set_has_card_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void card_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 card_id = 1;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card_id(), output);
  }

  // optional int32 card_val = 2;
  if (has_card_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* card_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 card_id = 1;
  if (has_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card_id(), target);
  }

  // optional int32 card_val = 2;
  if (has_card_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int card_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 card_id = 1;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_id());
    }

    // optional int32 card_val = 2;
    if (has_card_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void card_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const card_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const card_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void card_data::MergeFrom(const card_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_card_val()) {
      set_card_val(from.card_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void card_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void card_data::CopyFrom(const card_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool card_data::IsInitialized() const {

  return true;
}

void card_data::Swap(card_data* other) {
  if (other != this) {
    std::swap(card_id_, other->card_id_);
    std::swap(card_val_, other->card_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata card_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = card_data_descriptor_;
  metadata.reflection = card_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cards_data::kCardFieldNumber;
#endif  // !_MSC_VER

cards_data::cards_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cards_data::InitAsDefaultInstance() {
}

cards_data::cards_data(const cards_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cards_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cards_data::~cards_data() {
  SharedDtor();
}

void cards_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cards_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cards_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cards_data_descriptor_;
}

const cards_data& cards_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

cards_data* cards_data::default_instance_ = NULL;

cards_data* cards_data::New() const {
  return new cards_data;
}

void cards_data::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cards_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game_ermj_protocols.card_data card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cards_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .game_ermj_protocols.card_data card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cards_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .game_ermj_protocols.card_data card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cards_data::ByteSize() const {
  int total_size = 0;

  // repeated .game_ermj_protocols.card_data card = 1;
  total_size += 1 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cards_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cards_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cards_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cards_data::MergeFrom(const cards_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cards_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cards_data::CopyFrom(const cards_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cards_data::IsInitialized() const {

  return true;
}

void cards_data::Swap(cards_data* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cards_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cards_data_descriptor_;
  metadata.reflection = cards_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int first_bu_hua_data::kChairIdxFieldNumber;
const int first_bu_hua_data::kHuaCardsFieldNumber;
const int first_bu_hua_data::kBuCardsFieldNumber;
#endif  // !_MSC_VER

first_bu_hua_data::first_bu_hua_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void first_bu_hua_data::InitAsDefaultInstance() {
}

first_bu_hua_data::first_bu_hua_data(const first_bu_hua_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void first_bu_hua_data::SharedCtor() {
  _cached_size_ = 0;
  chair_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

first_bu_hua_data::~first_bu_hua_data() {
  SharedDtor();
}

void first_bu_hua_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void first_bu_hua_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* first_bu_hua_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return first_bu_hua_data_descriptor_;
}

const first_bu_hua_data& first_bu_hua_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

first_bu_hua_data* first_bu_hua_data::default_instance_ = NULL;

first_bu_hua_data* first_bu_hua_data::New() const {
  return new first_bu_hua_data;
}

void first_bu_hua_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_idx_ = 0;
  }
  hua_cards_.Clear();
  bu_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool first_bu_hua_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_idx_)));
          set_has_chair_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hua_cards;
        break;
      }

      // repeated .game_ermj_protocols.card_data hua_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hua_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hua_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hua_cards;
        if (input->ExpectTag(26)) goto parse_bu_cards;
        break;
      }

      // repeated .game_ermj_protocols.card_data bu_cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bu_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bu_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bu_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void first_bu_hua_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chair_idx = 1;
  if (has_chair_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_idx(), output);
  }

  // repeated .game_ermj_protocols.card_data hua_cards = 2;
  for (int i = 0; i < this->hua_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hua_cards(i), output);
  }

  // repeated .game_ermj_protocols.card_data bu_cards = 3;
  for (int i = 0; i < this->bu_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bu_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* first_bu_hua_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chair_idx = 1;
  if (has_chair_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_idx(), target);
  }

  // repeated .game_ermj_protocols.card_data hua_cards = 2;
  for (int i = 0; i < this->hua_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hua_cards(i), target);
  }

  // repeated .game_ermj_protocols.card_data bu_cards = 3;
  for (int i = 0; i < this->bu_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bu_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int first_bu_hua_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chair_idx = 1;
    if (has_chair_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_idx());
    }

  }
  // repeated .game_ermj_protocols.card_data hua_cards = 2;
  total_size += 1 * this->hua_cards_size();
  for (int i = 0; i < this->hua_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hua_cards(i));
  }

  // repeated .game_ermj_protocols.card_data bu_cards = 3;
  total_size += 1 * this->bu_cards_size();
  for (int i = 0; i < this->bu_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bu_cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void first_bu_hua_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const first_bu_hua_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const first_bu_hua_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void first_bu_hua_data::MergeFrom(const first_bu_hua_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  hua_cards_.MergeFrom(from.hua_cards_);
  bu_cards_.MergeFrom(from.bu_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_idx()) {
      set_chair_idx(from.chair_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void first_bu_hua_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void first_bu_hua_data::CopyFrom(const first_bu_hua_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool first_bu_hua_data::IsInitialized() const {

  return true;
}

void first_bu_hua_data::Swap(first_bu_hua_data* other) {
  if (other != this) {
    std::swap(chair_idx_, other->chair_idx_);
    hua_cards_.Swap(&other->hua_cards_);
    bu_cards_.Swap(&other->bu_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata first_bu_hua_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = first_bu_hua_data_descriptor_;
  metadata.reflection = first_bu_hua_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_start::kPacketIdFieldNumber;
const int packetl2c_game_start::kDiceCountFieldNumber;
const int packetl2c_game_start::kBankerUserFieldNumber;
const int packetl2c_game_start::kCardsFieldNumber;
const int packetl2c_game_start::kBuHuaFieldNumber;
const int packetl2c_game_start::kBotOutFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_start::packetl2c_game_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_start::InitAsDefaultInstance() {
}

packetl2c_game_start::packetl2c_game_start(const packetl2c_game_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_start::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15013;
  dice_count_ = 0;
  banker_user_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_start::~packetl2c_game_start() {
  SharedDtor();
}

void packetl2c_game_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_start_descriptor_;
}

const packetl2c_game_start& packetl2c_game_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_start* packetl2c_game_start::default_instance_ = NULL;

packetl2c_game_start* packetl2c_game_start::New() const {
  return new packetl2c_game_start;
}

void packetl2c_game_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15013;
    dice_count_ = 0;
    banker_user_ = 0;
  }
  cards_.Clear();
  bu_hua_.Clear();
  bot_out_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dice_count;
        break;
      }

      // optional int32 dice_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice_count_)));
          set_has_dice_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_banker_user;
        break;
      }

      // optional int32 banker_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cards;
        break;
      }

      // repeated .game_ermj_protocols.cards_data cards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cards;
        if (input->ExpectTag(50)) goto parse_bu_hua;
        break;
      }

      // repeated .game_ermj_protocols.first_bu_hua_data bu_hua = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bu_hua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bu_hua()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bu_hua;
        if (input->ExpectTag(56)) goto parse_bot_out;
        break;
      }

      // repeated int32 bot_out = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_bot_out())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bot_out())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bot_out;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 dice_count = 2;
  if (has_dice_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dice_count(), output);
  }

  // optional int32 banker_user = 3;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->banker_user(), output);
  }

  // repeated .game_ermj_protocols.cards_data cards = 5;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cards(i), output);
  }

  // repeated .game_ermj_protocols.first_bu_hua_data bu_hua = 6;
  for (int i = 0; i < this->bu_hua_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bu_hua(i), output);
  }

  // repeated int32 bot_out = 7;
  for (int i = 0; i < this->bot_out_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->bot_out(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 dice_count = 2;
  if (has_dice_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dice_count(), target);
  }

  // optional int32 banker_user = 3;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->banker_user(), target);
  }

  // repeated .game_ermj_protocols.cards_data cards = 5;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cards(i), target);
  }

  // repeated .game_ermj_protocols.first_bu_hua_data bu_hua = 6;
  for (int i = 0; i < this->bu_hua_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bu_hua(i), target);
  }

  // repeated int32 bot_out = 7;
  for (int i = 0; i < this->bot_out_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->bot_out(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 dice_count = 2;
    if (has_dice_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice_count());
    }

    // optional int32 banker_user = 3;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_user());
    }

  }
  // repeated .game_ermj_protocols.cards_data cards = 5;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  // repeated .game_ermj_protocols.first_bu_hua_data bu_hua = 6;
  total_size += 1 * this->bu_hua_size();
  for (int i = 0; i < this->bu_hua_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bu_hua(i));
  }

  // repeated int32 bot_out = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->bot_out_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bot_out(i));
    }
    total_size += 1 * this->bot_out_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_start::MergeFrom(const packetl2c_game_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  bu_hua_.MergeFrom(from.bu_hua_);
  bot_out_.MergeFrom(from.bot_out_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_dice_count()) {
      set_dice_count(from.dice_count());
    }
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_start::CopyFrom(const packetl2c_game_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_start::IsInitialized() const {

  return true;
}

void packetl2c_game_start::Swap(packetl2c_game_start* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(dice_count_, other->dice_count_);
    std::swap(banker_user_, other->banker_user_);
    cards_.Swap(&other->cards_);
    bu_hua_.Swap(&other->bu_hua_);
    bot_out_.Swap(&other->bot_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_start_descriptor_;
  metadata.reflection = packetl2c_game_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_out_card::kPacketIdFieldNumber;
const int packetc2l_out_card::kCardIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_out_card::packetc2l_out_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_out_card::InitAsDefaultInstance() {
}

packetc2l_out_card::packetc2l_out_card(const packetc2l_out_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_out_card::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10013;
  card_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_out_card::~packetc2l_out_card() {
  SharedDtor();
}

void packetc2l_out_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_out_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_out_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_out_card_descriptor_;
}

const packetc2l_out_card& packetc2l_out_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_out_card* packetc2l_out_card::default_instance_ = NULL;

packetc2l_out_card* packetc2l_out_card::New() const {
  return new packetc2l_out_card;
}

void packetc2l_out_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10013;
    card_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_out_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_id;
        break;
      }

      // optional int32 card_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_id_)));
          set_has_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_out_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 card_id = 2;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_out_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 card_id = 2;
  if (has_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_out_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 card_id = 2;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_out_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_out_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_out_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_out_card::MergeFrom(const packetc2l_out_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_out_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_out_card::CopyFrom(const packetc2l_out_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_out_card::IsInitialized() const {

  return true;
}

void packetc2l_out_card::Swap(packetc2l_out_card* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(card_id_, other->card_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_out_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_out_card_descriptor_;
  metadata.reflection = packetc2l_out_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_out_card_notify::kPacketIdFieldNumber;
const int packetl2c_out_card_notify::kActionUserFieldNumber;
const int packetl2c_out_card_notify::kCardFieldNumber;
#endif  // !_MSC_VER

packetl2c_out_card_notify::packetl2c_out_card_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_out_card_notify::InitAsDefaultInstance() {
  card_ = const_cast< ::game_ermj_protocols::card_data*>(&::game_ermj_protocols::card_data::default_instance());
}

packetl2c_out_card_notify::packetl2c_out_card_notify(const packetl2c_out_card_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_out_card_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15014;
  action_user_ = 0;
  card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_out_card_notify::~packetl2c_out_card_notify() {
  SharedDtor();
}

void packetl2c_out_card_notify::SharedDtor() {
  if (this != default_instance_) {
    delete card_;
  }
}

void packetl2c_out_card_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_out_card_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_out_card_notify_descriptor_;
}

const packetl2c_out_card_notify& packetl2c_out_card_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_out_card_notify* packetl2c_out_card_notify::default_instance_ = NULL;

packetl2c_out_card_notify* packetl2c_out_card_notify::New() const {
  return new packetl2c_out_card_notify;
}

void packetl2c_out_card_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15014;
    action_user_ = 0;
    if (has_card()) {
      if (card_ != NULL) card_->::game_ermj_protocols::card_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_out_card_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_user;
        break;
      }

      // optional int32 action_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_user_)));
          set_has_action_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card;
        break;
      }

      // optional .game_ermj_protocols.card_data card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_out_card_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 action_user = 2;
  if (has_action_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_user(), output);
  }

  // optional .game_ermj_protocols.card_data card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_out_card_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 action_user = 2;
  if (has_action_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_user(), target);
  }

  // optional .game_ermj_protocols.card_data card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_out_card_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 action_user = 2;
    if (has_action_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_user());
    }

    // optional .game_ermj_protocols.card_data card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_out_card_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_out_card_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_out_card_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_out_card_notify::MergeFrom(const packetl2c_out_card_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_action_user()) {
      set_action_user(from.action_user());
    }
    if (from.has_card()) {
      mutable_card()->::game_ermj_protocols::card_data::MergeFrom(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_out_card_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_out_card_notify::CopyFrom(const packetl2c_out_card_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_out_card_notify::IsInitialized() const {

  return true;
}

void packetl2c_out_card_notify::Swap(packetl2c_out_card_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(action_user_, other->action_user_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_out_card_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_out_card_notify_descriptor_;
  metadata.reflection = packetl2c_out_card_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_operate_notify::kPacketIdFieldNumber;
const int packetl2c_operate_notify::kUserActionFieldNumber;
const int packetl2c_operate_notify::kCardValFieldNumber;
const int packetl2c_operate_notify::kBotPassHuFieldNumber;
#endif  // !_MSC_VER

packetl2c_operate_notify::packetl2c_operate_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_operate_notify::InitAsDefaultInstance() {
}

packetl2c_operate_notify::packetl2c_operate_notify(const packetl2c_operate_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_operate_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15015;
  user_action_ = 0;
  card_val_ = 0;
  bot_pass_hu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_operate_notify::~packetl2c_operate_notify() {
  SharedDtor();
}

void packetl2c_operate_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_operate_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_operate_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_operate_notify_descriptor_;
}

const packetl2c_operate_notify& packetl2c_operate_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_operate_notify* packetl2c_operate_notify::default_instance_ = NULL;

packetl2c_operate_notify* packetl2c_operate_notify::New() const {
  return new packetl2c_operate_notify;
}

void packetl2c_operate_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15015;
    user_action_ = 0;
    card_val_ = 0;
    bot_pass_hu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_operate_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_action;
        break;
      }

      // optional int32 user_action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_action_)));
          set_has_user_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_val;
        break;
      }

      // optional int32 card_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_val_)));
          set_has_card_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bot_pass_hu;
        break;
      }

      // optional bool bot_pass_hu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_pass_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bot_pass_hu_)));
          set_has_bot_pass_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_operate_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 user_action = 2;
  if (has_user_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_action(), output);
  }

  // optional int32 card_val = 3;
  if (has_card_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card_val(), output);
  }

  // optional bool bot_pass_hu = 4;
  if (has_bot_pass_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bot_pass_hu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_operate_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 user_action = 2;
  if (has_user_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_action(), target);
  }

  // optional int32 card_val = 3;
  if (has_card_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card_val(), target);
  }

  // optional bool bot_pass_hu = 4;
  if (has_bot_pass_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bot_pass_hu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_operate_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 user_action = 2;
    if (has_user_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_action());
    }

    // optional int32 card_val = 3;
    if (has_card_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_val());
    }

    // optional bool bot_pass_hu = 4;
    if (has_bot_pass_hu()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_operate_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_operate_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_operate_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_operate_notify::MergeFrom(const packetl2c_operate_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_user_action()) {
      set_user_action(from.user_action());
    }
    if (from.has_card_val()) {
      set_card_val(from.card_val());
    }
    if (from.has_bot_pass_hu()) {
      set_bot_pass_hu(from.bot_pass_hu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_operate_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_operate_notify::CopyFrom(const packetl2c_operate_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_operate_notify::IsInitialized() const {

  return true;
}

void packetl2c_operate_notify::Swap(packetl2c_operate_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(user_action_, other->user_action_);
    std::swap(card_val_, other->card_val_);
    std::swap(bot_pass_hu_, other->bot_pass_hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_operate_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_operate_notify_descriptor_;
  metadata.reflection = packetl2c_operate_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_operate_card::kPacketIdFieldNumber;
const int packetc2l_operate_card::kUserActionFieldNumber;
const int packetc2l_operate_card::kCardIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_operate_card::packetc2l_operate_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_operate_card::InitAsDefaultInstance() {
}

packetc2l_operate_card::packetc2l_operate_card(const packetc2l_operate_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_operate_card::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10014;
  user_action_ = 0;
  card_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_operate_card::~packetc2l_operate_card() {
  SharedDtor();
}

void packetc2l_operate_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_operate_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_operate_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_operate_card_descriptor_;
}

const packetc2l_operate_card& packetc2l_operate_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_operate_card* packetc2l_operate_card::default_instance_ = NULL;

packetc2l_operate_card* packetc2l_operate_card::New() const {
  return new packetc2l_operate_card;
}

void packetc2l_operate_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10014;
    user_action_ = 0;
    card_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_operate_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_operate_card];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_action;
        break;
      }

      // optional int32 user_action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_action_)));
          set_has_user_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_id;
        break;
      }

      // optional int32 card_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_id_)));
          set_has_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_operate_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_operate_card];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 user_action = 2;
  if (has_user_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_action(), output);
  }

  // optional int32 card_id = 3;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_operate_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_operate_card];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 user_action = 2;
  if (has_user_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_action(), target);
  }

  // optional int32 card_id = 3;
  if (has_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_operate_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_operate_card];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 user_action = 2;
    if (has_user_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_action());
    }

    // optional int32 card_id = 3;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_operate_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_operate_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_operate_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_operate_card::MergeFrom(const packetc2l_operate_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_user_action()) {
      set_user_action(from.user_action());
    }
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_operate_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_operate_card::CopyFrom(const packetc2l_operate_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_operate_card::IsInitialized() const {

  return true;
}

void packetc2l_operate_card::Swap(packetc2l_operate_card* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(user_action_, other->user_action_);
    std::swap(card_id_, other->card_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_operate_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_operate_card_descriptor_;
  metadata.reflection = packetc2l_operate_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_operate_result::kPacketIdFieldNumber;
const int packetl2c_operate_result::kActionUserFieldNumber;
const int packetl2c_operate_result::kUserActionFieldNumber;
const int packetl2c_operate_result::kProvideUserFieldNumber;
const int packetl2c_operate_result::kCardValFieldNumber;
const int packetl2c_operate_result::kPileCardsFieldNumber;
const int packetl2c_operate_result::kBotTingOutFieldNumber;
const int packetl2c_operate_result::kBotOutFieldNumber;
const int packetl2c_operate_result::kBotTingCardsFieldNumber;
#endif  // !_MSC_VER

packetl2c_operate_result::packetl2c_operate_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_operate_result::InitAsDefaultInstance() {
}

packetl2c_operate_result::packetl2c_operate_result(const packetl2c_operate_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_operate_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15019;
  action_user_ = 0;
  user_action_ = 0;
  provide_user_ = 0;
  card_val_ = 0;
  bot_ting_out_ = 0;
  bot_out_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_operate_result::~packetl2c_operate_result() {
  SharedDtor();
}

void packetl2c_operate_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_operate_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_operate_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_operate_result_descriptor_;
}

const packetl2c_operate_result& packetl2c_operate_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_operate_result* packetl2c_operate_result::default_instance_ = NULL;

packetl2c_operate_result* packetl2c_operate_result::New() const {
  return new packetl2c_operate_result;
}

void packetl2c_operate_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15019;
    action_user_ = 0;
    user_action_ = 0;
    provide_user_ = 0;
    card_val_ = 0;
    bot_ting_out_ = 0;
    bot_out_ = 0;
  }
  pile_cards_.Clear();
  bot_ting_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_operate_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_user;
        break;
      }

      // optional int32 action_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_user_)));
          set_has_action_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_action;
        break;
      }

      // optional int32 user_action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_action_)));
          set_has_user_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_provide_user;
        break;
      }

      // optional int32 provide_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provide_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provide_user_)));
          set_has_provide_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_val;
        break;
      }

      // optional int32 card_val = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_val_)));
          set_has_card_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pile_cards;
        break;
      }

      // repeated .game_ermj_protocols.card_data pile_cards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pile_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pile_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pile_cards;
        if (input->ExpectTag(56)) goto parse_bot_ting_out;
        break;
      }

      // optional int32 bot_ting_out = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_ting_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bot_ting_out_)));
          set_has_bot_ting_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bot_out;
        break;
      }

      // optional int32 bot_out = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bot_out_)));
          set_has_bot_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bot_ting_cards;
        break;
      }

      // repeated int32 bot_ting_cards = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_ting_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_bot_ting_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bot_ting_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bot_ting_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_operate_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 action_user = 2;
  if (has_action_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_user(), output);
  }

  // optional int32 user_action = 3;
  if (has_user_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_action(), output);
  }

  // optional int32 provide_user = 4;
  if (has_provide_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->provide_user(), output);
  }

  // optional int32 card_val = 5;
  if (has_card_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->card_val(), output);
  }

  // repeated .game_ermj_protocols.card_data pile_cards = 6;
  for (int i = 0; i < this->pile_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pile_cards(i), output);
  }

  // optional int32 bot_ting_out = 7;
  if (has_bot_ting_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bot_ting_out(), output);
  }

  // optional int32 bot_out = 8;
  if (has_bot_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bot_out(), output);
  }

  // repeated int32 bot_ting_cards = 9;
  for (int i = 0; i < this->bot_ting_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->bot_ting_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_operate_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 action_user = 2;
  if (has_action_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_user(), target);
  }

  // optional int32 user_action = 3;
  if (has_user_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_action(), target);
  }

  // optional int32 provide_user = 4;
  if (has_provide_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->provide_user(), target);
  }

  // optional int32 card_val = 5;
  if (has_card_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->card_val(), target);
  }

  // repeated .game_ermj_protocols.card_data pile_cards = 6;
  for (int i = 0; i < this->pile_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pile_cards(i), target);
  }

  // optional int32 bot_ting_out = 7;
  if (has_bot_ting_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bot_ting_out(), target);
  }

  // optional int32 bot_out = 8;
  if (has_bot_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bot_out(), target);
  }

  // repeated int32 bot_ting_cards = 9;
  for (int i = 0; i < this->bot_ting_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->bot_ting_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_operate_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_operate_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 action_user = 2;
    if (has_action_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_user());
    }

    // optional int32 user_action = 3;
    if (has_user_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_action());
    }

    // optional int32 provide_user = 4;
    if (has_provide_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provide_user());
    }

    // optional int32 card_val = 5;
    if (has_card_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_val());
    }

    // optional int32 bot_ting_out = 7;
    if (has_bot_ting_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bot_ting_out());
    }

    // optional int32 bot_out = 8;
    if (has_bot_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bot_out());
    }

  }
  // repeated .game_ermj_protocols.card_data pile_cards = 6;
  total_size += 1 * this->pile_cards_size();
  for (int i = 0; i < this->pile_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pile_cards(i));
  }

  // repeated int32 bot_ting_cards = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->bot_ting_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bot_ting_cards(i));
    }
    total_size += 1 * this->bot_ting_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_operate_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_operate_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_operate_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_operate_result::MergeFrom(const packetl2c_operate_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  pile_cards_.MergeFrom(from.pile_cards_);
  bot_ting_cards_.MergeFrom(from.bot_ting_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_action_user()) {
      set_action_user(from.action_user());
    }
    if (from.has_user_action()) {
      set_user_action(from.user_action());
    }
    if (from.has_provide_user()) {
      set_provide_user(from.provide_user());
    }
    if (from.has_card_val()) {
      set_card_val(from.card_val());
    }
    if (from.has_bot_ting_out()) {
      set_bot_ting_out(from.bot_ting_out());
    }
    if (from.has_bot_out()) {
      set_bot_out(from.bot_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_operate_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_operate_result::CopyFrom(const packetl2c_operate_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_operate_result::IsInitialized() const {

  return true;
}

void packetl2c_operate_result::Swap(packetl2c_operate_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(action_user_, other->action_user_);
    std::swap(user_action_, other->user_action_);
    std::swap(provide_user_, other->provide_user_);
    std::swap(card_val_, other->card_val_);
    pile_cards_.Swap(&other->pile_cards_);
    std::swap(bot_ting_out_, other->bot_ting_out_);
    std::swap(bot_out_, other->bot_out_);
    bot_ting_cards_.Swap(&other->bot_ting_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_operate_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_operate_result_descriptor_;
  metadata.reflection = packetl2c_operate_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_send_card::kPacketIdFieldNumber;
const int packetl2c_send_card::kCurrentUserFieldNumber;
const int packetl2c_send_card::kCardFieldNumber;
const int packetl2c_send_card::kBotTingOutFieldNumber;
const int packetl2c_send_card::kBotPassHuFieldNumber;
const int packetl2c_send_card::kBotOutFieldNumber;
const int packetl2c_send_card::kBotGangOutFieldNumber;
#endif  // !_MSC_VER

packetl2c_send_card::packetl2c_send_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_send_card::InitAsDefaultInstance() {
  card_ = const_cast< ::game_ermj_protocols::card_data*>(&::game_ermj_protocols::card_data::default_instance());
}

packetl2c_send_card::packetl2c_send_card(const packetl2c_send_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_send_card::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15020;
  current_user_ = 0;
  card_ = NULL;
  bot_ting_out_ = 0;
  bot_pass_hu_ = false;
  bot_out_ = 0;
  bot_gang_out_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_send_card::~packetl2c_send_card() {
  SharedDtor();
}

void packetl2c_send_card::SharedDtor() {
  if (this != default_instance_) {
    delete card_;
  }
}

void packetl2c_send_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_send_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_send_card_descriptor_;
}

const packetl2c_send_card& packetl2c_send_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_send_card* packetl2c_send_card::default_instance_ = NULL;

packetl2c_send_card* packetl2c_send_card::New() const {
  return new packetl2c_send_card;
}

void packetl2c_send_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15020;
    current_user_ = 0;
    if (has_card()) {
      if (card_ != NULL) card_->::game_ermj_protocols::card_data::Clear();
    }
    bot_ting_out_ = 0;
    bot_pass_hu_ = false;
    bot_out_ = 0;
    bot_gang_out_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_send_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_card];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_user;
        break;
      }

      // optional int32 current_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card;
        break;
      }

      // optional .game_ermj_protocols.card_data card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bot_ting_out;
        break;
      }

      // optional int32 bot_ting_out = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_ting_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bot_ting_out_)));
          set_has_bot_ting_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bot_pass_hu;
        break;
      }

      // optional bool bot_pass_hu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_pass_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bot_pass_hu_)));
          set_has_bot_pass_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bot_out;
        break;
      }

      // optional int32 bot_out = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bot_out_)));
          set_has_bot_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bot_gang_out;
        break;
      }

      // optional int32 bot_gang_out = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_gang_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bot_gang_out_)));
          set_has_bot_gang_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_send_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_card];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 current_user = 2;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_user(), output);
  }

  // optional .game_ermj_protocols.card_data card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card(), output);
  }

  // optional int32 bot_ting_out = 4;
  if (has_bot_ting_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bot_ting_out(), output);
  }

  // optional bool bot_pass_hu = 5;
  if (has_bot_pass_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bot_pass_hu(), output);
  }

  // optional int32 bot_out = 6;
  if (has_bot_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bot_out(), output);
  }

  // optional int32 bot_gang_out = 7;
  if (has_bot_gang_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bot_gang_out(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_send_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_card];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 current_user = 2;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_user(), target);
  }

  // optional .game_ermj_protocols.card_data card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card(), target);
  }

  // optional int32 bot_ting_out = 4;
  if (has_bot_ting_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bot_ting_out(), target);
  }

  // optional bool bot_pass_hu = 5;
  if (has_bot_pass_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bot_pass_hu(), target);
  }

  // optional int32 bot_out = 6;
  if (has_bot_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bot_out(), target);
  }

  // optional int32 bot_gang_out = 7;
  if (has_bot_gang_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bot_gang_out(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_send_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_card];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 current_user = 2;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional .game_ermj_protocols.card_data card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }

    // optional int32 bot_ting_out = 4;
    if (has_bot_ting_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bot_ting_out());
    }

    // optional bool bot_pass_hu = 5;
    if (has_bot_pass_hu()) {
      total_size += 1 + 1;
    }

    // optional int32 bot_out = 6;
    if (has_bot_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bot_out());
    }

    // optional int32 bot_gang_out = 7;
    if (has_bot_gang_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bot_gang_out());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_send_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_send_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_send_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_send_card::MergeFrom(const packetl2c_send_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_card()) {
      mutable_card()->::game_ermj_protocols::card_data::MergeFrom(from.card());
    }
    if (from.has_bot_ting_out()) {
      set_bot_ting_out(from.bot_ting_out());
    }
    if (from.has_bot_pass_hu()) {
      set_bot_pass_hu(from.bot_pass_hu());
    }
    if (from.has_bot_out()) {
      set_bot_out(from.bot_out());
    }
    if (from.has_bot_gang_out()) {
      set_bot_gang_out(from.bot_gang_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_send_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_send_card::CopyFrom(const packetl2c_send_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_send_card::IsInitialized() const {

  return true;
}

void packetl2c_send_card::Swap(packetl2c_send_card* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(current_user_, other->current_user_);
    std::swap(card_, other->card_);
    std::swap(bot_ting_out_, other->bot_ting_out_);
    std::swap(bot_pass_hu_, other->bot_pass_hu_);
    std::swap(bot_out_, other->bot_out_);
    std::swap(bot_gang_out_, other->bot_gang_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_send_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_send_card_descriptor_;
  metadata.reflection = packetl2c_send_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_bu_hua::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_bu_hua::packetc2l_bu_hua()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_bu_hua::InitAsDefaultInstance() {
}

packetc2l_bu_hua::packetc2l_bu_hua(const packetc2l_bu_hua& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_bu_hua::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10012;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_bu_hua::~packetc2l_bu_hua() {
  SharedDtor();
}

void packetc2l_bu_hua::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_bu_hua::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_bu_hua::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_bu_hua_descriptor_;
}

const packetc2l_bu_hua& packetc2l_bu_hua::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_bu_hua* packetc2l_bu_hua::default_instance_ = NULL;

packetc2l_bu_hua* packetc2l_bu_hua::New() const {
  return new packetc2l_bu_hua;
}

void packetc2l_bu_hua::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10012;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_bu_hua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bu_hua];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_bu_hua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bu_hua];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_bu_hua::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bu_hua];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_bu_hua::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bu_hua];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_bu_hua::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_bu_hua* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_bu_hua*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_bu_hua::MergeFrom(const packetc2l_bu_hua& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_bu_hua::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_bu_hua::CopyFrom(const packetc2l_bu_hua& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_bu_hua::IsInitialized() const {

  return true;
}

void packetc2l_bu_hua::Swap(packetc2l_bu_hua* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_bu_hua::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_bu_hua_descriptor_;
  metadata.reflection = packetc2l_bu_hua_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bu_hua_notify::kPacketIdFieldNumber;
const int packetl2c_bu_hua_notify::kCurrentUserFieldNumber;
const int packetl2c_bu_hua_notify::kHuaCardFieldNumber;
#endif  // !_MSC_VER

packetl2c_bu_hua_notify::packetl2c_bu_hua_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bu_hua_notify::InitAsDefaultInstance() {
  hua_card_ = const_cast< ::game_ermj_protocols::card_data*>(&::game_ermj_protocols::card_data::default_instance());
}

packetl2c_bu_hua_notify::packetl2c_bu_hua_notify(const packetl2c_bu_hua_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bu_hua_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15021;
  current_user_ = 0;
  hua_card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bu_hua_notify::~packetl2c_bu_hua_notify() {
  SharedDtor();
}

void packetl2c_bu_hua_notify::SharedDtor() {
  if (this != default_instance_) {
    delete hua_card_;
  }
}

void packetl2c_bu_hua_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bu_hua_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bu_hua_notify_descriptor_;
}

const packetl2c_bu_hua_notify& packetl2c_bu_hua_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bu_hua_notify* packetl2c_bu_hua_notify::default_instance_ = NULL;

packetl2c_bu_hua_notify* packetl2c_bu_hua_notify::New() const {
  return new packetl2c_bu_hua_notify;
}

void packetl2c_bu_hua_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15021;
    current_user_ = 0;
    if (has_hua_card()) {
      if (hua_card_ != NULL) hua_card_->::game_ermj_protocols::card_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bu_hua_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bu_hua_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_user;
        break;
      }

      // optional int32 current_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hua_card;
        break;
      }

      // optional .game_ermj_protocols.card_data hua_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hua_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hua_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bu_hua_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bu_hua_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 current_user = 2;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_user(), output);
  }

  // optional .game_ermj_protocols.card_data hua_card = 3;
  if (has_hua_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hua_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bu_hua_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bu_hua_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 current_user = 2;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_user(), target);
  }

  // optional .game_ermj_protocols.card_data hua_card = 3;
  if (has_hua_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hua_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bu_hua_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bu_hua_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 current_user = 2;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional .game_ermj_protocols.card_data hua_card = 3;
    if (has_hua_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hua_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bu_hua_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bu_hua_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bu_hua_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bu_hua_notify::MergeFrom(const packetl2c_bu_hua_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_hua_card()) {
      mutable_hua_card()->::game_ermj_protocols::card_data::MergeFrom(from.hua_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bu_hua_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bu_hua_notify::CopyFrom(const packetl2c_bu_hua_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bu_hua_notify::IsInitialized() const {

  return true;
}

void packetl2c_bu_hua_notify::Swap(packetl2c_bu_hua_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(current_user_, other->current_user_);
    std::swap(hua_card_, other->hua_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bu_hua_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bu_hua_notify_descriptor_;
  metadata.reflection = packetl2c_bu_hua_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_pass_hu_notify::kPacketIdFieldNumber;
const int packetl2c_pass_hu_notify::kPassIdxFieldNumber;
const int packetl2c_pass_hu_notify::kPassTimesFieldNumber;
#endif  // !_MSC_VER

packetl2c_pass_hu_notify::packetl2c_pass_hu_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_pass_hu_notify::InitAsDefaultInstance() {
}

packetl2c_pass_hu_notify::packetl2c_pass_hu_notify(const packetl2c_pass_hu_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_pass_hu_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15022;
  pass_idx_ = 0;
  pass_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_pass_hu_notify::~packetl2c_pass_hu_notify() {
  SharedDtor();
}

void packetl2c_pass_hu_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_pass_hu_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_pass_hu_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_pass_hu_notify_descriptor_;
}

const packetl2c_pass_hu_notify& packetl2c_pass_hu_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_pass_hu_notify* packetl2c_pass_hu_notify::default_instance_ = NULL;

packetl2c_pass_hu_notify* packetl2c_pass_hu_notify::New() const {
  return new packetl2c_pass_hu_notify;
}

void packetl2c_pass_hu_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15022;
    pass_idx_ = 0;
    pass_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_pass_hu_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_hu_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_idx;
        break;
      }

      // optional int32 pass_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_idx_)));
          set_has_pass_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass_times;
        break;
      }

      // optional int32 pass_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_times_)));
          set_has_pass_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_pass_hu_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_hu_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 pass_idx = 2;
  if (has_pass_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_idx(), output);
  }

  // optional int32 pass_times = 3;
  if (has_pass_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pass_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_pass_hu_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_hu_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 pass_idx = 2;
  if (has_pass_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_idx(), target);
  }

  // optional int32 pass_times = 3;
  if (has_pass_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pass_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_pass_hu_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_hu_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 pass_idx = 2;
    if (has_pass_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_idx());
    }

    // optional int32 pass_times = 3;
    if (has_pass_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_pass_hu_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_pass_hu_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_pass_hu_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_pass_hu_notify::MergeFrom(const packetl2c_pass_hu_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_pass_idx()) {
      set_pass_idx(from.pass_idx());
    }
    if (from.has_pass_times()) {
      set_pass_times(from.pass_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_pass_hu_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_pass_hu_notify::CopyFrom(const packetl2c_pass_hu_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_pass_hu_notify::IsInitialized() const {

  return true;
}

void packetl2c_pass_hu_notify::Swap(packetl2c_pass_hu_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(pass_idx_, other->pass_idx_);
    std::swap(pass_times_, other->pass_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_pass_hu_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_pass_hu_notify_descriptor_;
  metadata.reflection = packetl2c_pass_hu_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_other_player_cards::kPacketIdFieldNumber;
const int packetl2c_other_player_cards::kChairsFieldNumber;
const int packetl2c_other_player_cards::kCardsFieldNumber;
#endif  // !_MSC_VER

packetl2c_other_player_cards::packetl2c_other_player_cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_other_player_cards::InitAsDefaultInstance() {
}

packetl2c_other_player_cards::packetl2c_other_player_cards(const packetl2c_other_player_cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_other_player_cards::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15023;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_other_player_cards::~packetl2c_other_player_cards() {
  SharedDtor();
}

void packetl2c_other_player_cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_other_player_cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_other_player_cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_other_player_cards_descriptor_;
}

const packetl2c_other_player_cards& packetl2c_other_player_cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_other_player_cards* packetl2c_other_player_cards::default_instance_ = NULL;

packetl2c_other_player_cards* packetl2c_other_player_cards::New() const {
  return new packetl2c_other_player_cards;
}

void packetl2c_other_player_cards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15023;
  }
  chairs_.Clear();
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_other_player_cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_other_player_cards];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairs;
        break;
      }

      // repeated int32 chairs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_chairs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chairs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairs;
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }

      // repeated .game_ermj_protocols.cards_data cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_other_player_cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_other_player_cards];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 chairs = 2;
  for (int i = 0; i < this->chairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->chairs(i), output);
  }

  // repeated .game_ermj_protocols.cards_data cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_other_player_cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_other_player_cards];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 chairs = 2;
  for (int i = 0; i < this->chairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->chairs(i), target);
  }

  // repeated .game_ermj_protocols.cards_data cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_other_player_cards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_other_player_cards];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated int32 chairs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->chairs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chairs(i));
    }
    total_size += 1 * this->chairs_size() + data_size;
  }

  // repeated .game_ermj_protocols.cards_data cards = 3;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_other_player_cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_other_player_cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_other_player_cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_other_player_cards::MergeFrom(const packetl2c_other_player_cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  chairs_.MergeFrom(from.chairs_);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_other_player_cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_other_player_cards::CopyFrom(const packetl2c_other_player_cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_other_player_cards::IsInitialized() const {

  return true;
}

void packetl2c_other_player_cards::Swap(packetl2c_other_player_cards* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    chairs_.Swap(&other->chairs_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_other_player_cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_other_player_cards_descriptor_;
  metadata.reflection = packetl2c_other_player_cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int win_result::kChairIdFieldNumber;
const int win_result::kFanCntFieldNumber;
const int win_result::kResult1FieldNumber;
const int win_result::kResult2FieldNumber;
const int win_result::kResult3FieldNumber;
#endif  // !_MSC_VER

win_result::win_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void win_result::InitAsDefaultInstance() {
}

win_result::win_result(const win_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void win_result::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
  fan_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

win_result::~win_result() {
  SharedDtor();
}

void win_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void win_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* win_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return win_result_descriptor_;
}

const win_result& win_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

win_result* win_result::default_instance_ = NULL;

win_result* win_result::New() const {
  return new win_result;
}

void win_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0;
    fan_cnt_ = 0;
  }
  result1_.Clear();
  result2_.Clear();
  result3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool win_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fan_cnt;
        break;
      }

      // optional int32 fan_cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fan_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fan_cnt_)));
          set_has_fan_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result1;
        break;
      }

      // repeated uint32 result1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_result1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_result1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result1;
        if (input->ExpectTag(32)) goto parse_result2;
        break;
      }

      // repeated uint32 result2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_result2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_result2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result2;
        if (input->ExpectTag(40)) goto parse_result3;
        break;
      }

      // repeated uint32 result3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_result3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_result3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result3;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void win_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional int32 fan_cnt = 2;
  if (has_fan_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fan_cnt(), output);
  }

  // repeated uint32 result1 = 3;
  for (int i = 0; i < this->result1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->result1(i), output);
  }

  // repeated uint32 result2 = 4;
  for (int i = 0; i < this->result2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->result2(i), output);
  }

  // repeated uint32 result3 = 5;
  for (int i = 0; i < this->result3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->result3(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* win_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional int32 fan_cnt = 2;
  if (has_fan_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fan_cnt(), target);
  }

  // repeated uint32 result1 = 3;
  for (int i = 0; i < this->result1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->result1(i), target);
  }

  // repeated uint32 result2 = 4;
  for (int i = 0; i < this->result2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->result2(i), target);
  }

  // repeated uint32 result3 = 5;
  for (int i = 0; i < this->result3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->result3(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int win_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional int32 fan_cnt = 2;
    if (has_fan_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fan_cnt());
    }

  }
  // repeated uint32 result1 = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->result1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->result1(i));
    }
    total_size += 1 * this->result1_size() + data_size;
  }

  // repeated uint32 result2 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->result2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->result2(i));
    }
    total_size += 1 * this->result2_size() + data_size;
  }

  // repeated uint32 result3 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->result3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->result3(i));
    }
    total_size += 1 * this->result3_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void win_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const win_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const win_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void win_result::MergeFrom(const win_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  result1_.MergeFrom(from.result1_);
  result2_.MergeFrom(from.result2_);
  result3_.MergeFrom(from.result3_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_fan_cnt()) {
      set_fan_cnt(from.fan_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void win_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void win_result::CopyFrom(const win_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool win_result::IsInitialized() const {

  return true;
}

void win_result::Swap(win_result* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(fan_cnt_, other->fan_cnt_);
    result1_.Swap(&other->result1_);
    result2_.Swap(&other->result2_);
    result3_.Swap(&other->result3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata win_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = win_result_descriptor_;
  metadata.reflection = win_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_end::kPacketIdFieldNumber;
const int packetl2c_game_end::kTimesFieldNumber;
const int packetl2c_game_end::kGameScoreFieldNumber;
const int packetl2c_game_end::kLeaveGameFieldNumber;
const int packetl2c_game_end::kTingFieldNumber;
const int packetl2c_game_end::kHandCardsFieldNumber;
const int packetl2c_game_end::kPileCardsFieldNumber;
const int packetl2c_game_end::kHuaCntFieldNumber;
const int packetl2c_game_end::kLimitedFieldNumber;
const int packetl2c_game_end::kLowLimitedFieldNumber;
const int packetl2c_game_end::kWinFieldNumber;
const int packetl2c_game_end::kWinCardFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_end::packetl2c_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_end::InitAsDefaultInstance() {
  win_ = const_cast< ::game_ermj_protocols::win_result*>(&::game_ermj_protocols::win_result::default_instance());
}

packetl2c_game_end::packetl2c_game_end(const packetl2c_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_end::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15016;
  win_ = NULL;
  win_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_end::~packetl2c_game_end() {
  SharedDtor();
}

void packetl2c_game_end::SharedDtor() {
  if (this != default_instance_) {
    delete win_;
  }
}

void packetl2c_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_end_descriptor_;
}

const packetl2c_game_end& packetl2c_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_end* packetl2c_game_end::default_instance_ = NULL;

packetl2c_game_end* packetl2c_game_end::New() const {
  return new packetl2c_game_end;
}

void packetl2c_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15016;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_win()) {
      if (win_ != NULL) win_->::game_ermj_protocols::win_result::Clear();
    }
    win_card_ = 0;
  }
  times_.Clear();
  game_score_.Clear();
  leave_game_.Clear();
  ting_.Clear();
  hand_cards_.Clear();
  pile_cards_.Clear();
  hua_cnt_.Clear();
  limited_.Clear();
  low_limited_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // repeated int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        if (input->ExpectTag(24)) goto parse_game_score;
        break;
      }

      // repeated int32 game_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_game_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_game_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_score;
        if (input->ExpectTag(32)) goto parse_leave_game;
        break;
      }

      // repeated bool leave_game = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_leave_game())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_leave_game())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leave_game;
        if (input->ExpectTag(40)) goto parse_ting;
        break;
      }

      // repeated bool ting = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 40, input, this->mutable_ting())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_ting())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ting;
        if (input->ExpectTag(50)) goto parse_hand_cards;
        break;
      }

      // repeated .game_ermj_protocols.cards_data hand_cards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hand_cards;
        if (input->ExpectTag(58)) goto parse_pile_cards;
        break;
      }

      // repeated .game_ermj_protocols.pile_cards_data pile_cards = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pile_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pile_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pile_cards;
        if (input->ExpectTag(64)) goto parse_hua_cnt;
        break;
      }

      // repeated int32 hua_cnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hua_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_hua_cnt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hua_cnt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hua_cnt;
        if (input->ExpectTag(72)) goto parse_limited;
        break;
      }

      // repeated bool limited = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 72, input, this->mutable_limited())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_limited())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_limited;
        if (input->ExpectTag(80)) goto parse_low_limited;
        break;
      }

      // repeated bool low_limited = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 80, input, this->mutable_low_limited())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_low_limited())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_low_limited;
        if (input->ExpectTag(90)) goto parse_win;
        break;
      }

      // optional .game_ermj_protocols.win_result win = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_win()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_win_card;
        break;
      }

      // optional int32 win_card = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_card_)));
          set_has_win_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 times = 2;
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->times(i), output);
  }

  // repeated int32 game_score = 3;
  for (int i = 0; i < this->game_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->game_score(i), output);
  }

  // repeated bool leave_game = 4;
  for (int i = 0; i < this->leave_game_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->leave_game(i), output);
  }

  // repeated bool ting = 5;
  for (int i = 0; i < this->ting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      5, this->ting(i), output);
  }

  // repeated .game_ermj_protocols.cards_data hand_cards = 6;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hand_cards(i), output);
  }

  // repeated .game_ermj_protocols.pile_cards_data pile_cards = 7;
  for (int i = 0; i < this->pile_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pile_cards(i), output);
  }

  // repeated int32 hua_cnt = 8;
  for (int i = 0; i < this->hua_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->hua_cnt(i), output);
  }

  // repeated bool limited = 9;
  for (int i = 0; i < this->limited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      9, this->limited(i), output);
  }

  // repeated bool low_limited = 10;
  for (int i = 0; i < this->low_limited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      10, this->low_limited(i), output);
  }

  // optional .game_ermj_protocols.win_result win = 11;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->win(), output);
  }

  // optional int32 win_card = 12;
  if (has_win_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->win_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 times = 2;
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->times(i), target);
  }

  // repeated int32 game_score = 3;
  for (int i = 0; i < this->game_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->game_score(i), target);
  }

  // repeated bool leave_game = 4;
  for (int i = 0; i < this->leave_game_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->leave_game(i), target);
  }

  // repeated bool ting = 5;
  for (int i = 0; i < this->ting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(5, this->ting(i), target);
  }

  // repeated .game_ermj_protocols.cards_data hand_cards = 6;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hand_cards(i), target);
  }

  // repeated .game_ermj_protocols.pile_cards_data pile_cards = 7;
  for (int i = 0; i < this->pile_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pile_cards(i), target);
  }

  // repeated int32 hua_cnt = 8;
  for (int i = 0; i < this->hua_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->hua_cnt(i), target);
  }

  // repeated bool limited = 9;
  for (int i = 0; i < this->limited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(9, this->limited(i), target);
  }

  // repeated bool low_limited = 10;
  for (int i = 0; i < this->low_limited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(10, this->low_limited(i), target);
  }

  // optional .game_ermj_protocols.win_result win = 11;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->win(), target);
  }

  // optional int32 win_card = 12;
  if (has_win_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->win_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .game_ermj_protocols.win_result win = 11;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->win());
    }

    // optional int32 win_card = 12;
    if (has_win_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_card());
    }

  }
  // repeated int32 times = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->times(i));
    }
    total_size += 1 * this->times_size() + data_size;
  }

  // repeated int32 game_score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->game_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->game_score(i));
    }
    total_size += 1 * this->game_score_size() + data_size;
  }

  // repeated bool leave_game = 4;
  {
    int data_size = 0;
    data_size = 1 * this->leave_game_size();
    total_size += 1 * this->leave_game_size() + data_size;
  }

  // repeated bool ting = 5;
  {
    int data_size = 0;
    data_size = 1 * this->ting_size();
    total_size += 1 * this->ting_size() + data_size;
  }

  // repeated .game_ermj_protocols.cards_data hand_cards = 6;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated .game_ermj_protocols.pile_cards_data pile_cards = 7;
  total_size += 1 * this->pile_cards_size();
  for (int i = 0; i < this->pile_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pile_cards(i));
  }

  // repeated int32 hua_cnt = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->hua_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hua_cnt(i));
    }
    total_size += 1 * this->hua_cnt_size() + data_size;
  }

  // repeated bool limited = 9;
  {
    int data_size = 0;
    data_size = 1 * this->limited_size();
    total_size += 1 * this->limited_size() + data_size;
  }

  // repeated bool low_limited = 10;
  {
    int data_size = 0;
    data_size = 1 * this->low_limited_size();
    total_size += 1 * this->low_limited_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_end::MergeFrom(const packetl2c_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  times_.MergeFrom(from.times_);
  game_score_.MergeFrom(from.game_score_);
  leave_game_.MergeFrom(from.leave_game_);
  ting_.MergeFrom(from.ting_);
  hand_cards_.MergeFrom(from.hand_cards_);
  pile_cards_.MergeFrom(from.pile_cards_);
  hua_cnt_.MergeFrom(from.hua_cnt_);
  limited_.MergeFrom(from.limited_);
  low_limited_.MergeFrom(from.low_limited_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_win()) {
      mutable_win()->::game_ermj_protocols::win_result::MergeFrom(from.win());
    }
    if (from.has_win_card()) {
      set_win_card(from.win_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_end::CopyFrom(const packetl2c_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_end::IsInitialized() const {

  return true;
}

void packetl2c_game_end::Swap(packetl2c_game_end* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    times_.Swap(&other->times_);
    game_score_.Swap(&other->game_score_);
    leave_game_.Swap(&other->leave_game_);
    ting_.Swap(&other->ting_);
    hand_cards_.Swap(&other->hand_cards_);
    pile_cards_.Swap(&other->pile_cards_);
    hua_cnt_.Swap(&other->hua_cnt_);
    limited_.Swap(&other->limited_);
    low_limited_.Swap(&other->low_limited_);
    std::swap(win_, other->win_);
    std::swap(win_card_, other->win_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_end_descriptor_;
  metadata.reflection = packetl2c_game_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_notify::kPacketIdFieldNumber;
const int packetl2c_game_notify::kNotifyTypeFieldNumber;
const int packetl2c_game_notify::kNotifyParamFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_notify::packetl2c_game_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_notify::InitAsDefaultInstance() {
}

packetl2c_game_notify::packetl2c_game_notify(const packetl2c_game_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15018;
  notify_type_ = 1;
  notify_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_notify::~packetl2c_game_notify() {
  SharedDtor();
}

void packetl2c_game_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_notify_descriptor_;
}

const packetl2c_game_notify& packetl2c_game_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_notify* packetl2c_game_notify::default_instance_ = NULL;

packetl2c_game_notify* packetl2c_game_notify::New() const {
  return new packetl2c_game_notify;
}

void packetl2c_game_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15018;
    notify_type_ = 1;
    notify_param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_notify_type;
        break;
      }

      // optional .game_ermj_protocols.e_notify_type notify_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_notify_type_IsValid(value)) {
            set_notify_type(static_cast< ::game_ermj_protocols::e_notify_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_notify_param;
        break;
      }

      // optional int32 notify_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_param_)));
          set_has_notify_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_ermj_protocols.e_notify_type notify_type = 2;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->notify_type(), output);
  }

  // optional int32 notify_param = 3;
  if (has_notify_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->notify_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_ermj_protocols.e_notify_type notify_type = 2;
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->notify_type(), target);
  }

  // optional int32 notify_param = 3;
  if (has_notify_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->notify_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_ermj_protocols.e_notify_type notify_type = 2;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

    // optional int32 notify_param = 3;
    if (has_notify_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_notify::MergeFrom(const packetl2c_game_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_notify_param()) {
      set_notify_param(from.notify_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_notify::CopyFrom(const packetl2c_game_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_notify::IsInitialized() const {

  return true;
}

void packetl2c_game_notify::Swap(packetl2c_game_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(notify_param_, other->notify_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_notify_descriptor_;
  metadata.reflection = packetl2c_game_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_player_info::kPlayerIdFieldNumber;
const int gm_player_info::kPlayerNameFieldNumber;
const int gm_player_info::kPlayerGoldFieldNumber;
const int gm_player_info::kPlayerRoomFieldNumber;
const int gm_player_info::kPlayerProfitFieldNumber;
const int gm_player_info::kPlayerKillTypeFieldNumber;
const int gm_player_info::kPlayerKillCntFieldNumber;
#endif  // !_MSC_VER

gm_player_info::gm_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_player_info::InitAsDefaultInstance() {
}

gm_player_info::gm_player_info(const gm_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  player_room_ = 0;
  player_profit_ = GOOGLE_LONGLONG(0);
  player_kill_type_ = GOOGLE_LONGLONG(0);
  player_kill_cnt_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_player_info::~gm_player_info() {
  SharedDtor();
}

void gm_player_info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void gm_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_player_info_descriptor_;
}

const gm_player_info& gm_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

gm_player_info* gm_player_info::default_instance_ = NULL;

gm_player_info* gm_player_info::New() const {
  return new gm_player_info;
}

void gm_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
    player_room_ = 0;
    player_profit_ = GOOGLE_LONGLONG(0);
    player_kill_type_ = GOOGLE_LONGLONG(0);
    player_kill_cnt_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_room;
        break;
      }

      // optional int32 player_room = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_room:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_room_)));
          set_has_player_room();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_profit;
        break;
      }

      // optional int64 player_profit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_profit_)));
          set_has_player_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_kill_type;
        break;
      }

      // optional int64 player_kill_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_kill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_kill_type_)));
          set_has_player_kill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_kill_cnt;
        break;
      }

      // optional int64 player_kill_cnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_kill_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_kill_cnt_)));
          set_has_player_kill_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->player_gold(), output);
  }

  // optional int32 player_room = 4;
  if (has_player_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_room(), output);
  }

  // optional int64 player_profit = 5;
  if (has_player_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_profit(), output);
  }

  // optional int64 player_kill_type = 6;
  if (has_player_kill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->player_kill_type(), output);
  }

  // optional int64 player_kill_cnt = 7;
  if (has_player_kill_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->player_kill_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->player_gold(), target);
  }

  // optional int32 player_room = 4;
  if (has_player_room()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_room(), target);
  }

  // optional int64 player_profit = 5;
  if (has_player_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_profit(), target);
  }

  // optional int64 player_kill_type = 6;
  if (has_player_kill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->player_kill_type(), target);
  }

  // optional int64 player_kill_cnt = 7;
  if (has_player_kill_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->player_kill_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional int64 player_gold = 3;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_room = 4;
    if (has_player_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_room());
    }

    // optional int64 player_profit = 5;
    if (has_player_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_profit());
    }

    // optional int64 player_kill_type = 6;
    if (has_player_kill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_kill_type());
    }

    // optional int64 player_kill_cnt = 7;
    if (has_player_kill_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_kill_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_player_info::MergeFrom(const gm_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_room()) {
      set_player_room(from.player_room());
    }
    if (from.has_player_profit()) {
      set_player_profit(from.player_profit());
    }
    if (from.has_player_kill_type()) {
      set_player_kill_type(from.player_kill_type());
    }
    if (from.has_player_kill_cnt()) {
      set_player_kill_cnt(from.player_kill_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_player_info::CopyFrom(const gm_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_player_info::IsInitialized() const {

  return true;
}

void gm_player_info::Swap(gm_player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_room_, other->player_room_);
    std::swap(player_profit_, other->player_profit_);
    std::swap(player_kill_type_, other->player_kill_type_);
    std::swap(player_kill_cnt_, other->player_kill_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_player_info_descriptor_;
  metadata.reflection = gm_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_gm_list::kPacketIdFieldNumber;
const int packetc2l_gm_list::kHoursFieldNumber;
#endif  // !_MSC_VER

packetc2l_gm_list::packetc2l_gm_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_gm_list::InitAsDefaultInstance() {
}

packetc2l_gm_list::packetc2l_gm_list(const packetc2l_gm_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_gm_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10015;
  hours_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_gm_list::~packetc2l_gm_list() {
  SharedDtor();
}

void packetc2l_gm_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_gm_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_gm_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_gm_list_descriptor_;
}

const packetc2l_gm_list& packetc2l_gm_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_gm_list* packetc2l_gm_list::default_instance_ = NULL;

packetc2l_gm_list* packetc2l_gm_list::New() const {
  return new packetc2l_gm_list;
}

void packetc2l_gm_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10015;
    hours_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_gm_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hours;
        break;
      }

      // optional int32 hours = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
          set_has_hours();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_gm_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 hours = 2;
  if (has_hours()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hours(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_gm_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 hours = 2;
  if (has_hours()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hours(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_gm_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 hours = 2;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hours());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_gm_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_gm_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_gm_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_gm_list::MergeFrom(const packetc2l_gm_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_hours()) {
      set_hours(from.hours());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_gm_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_gm_list::CopyFrom(const packetc2l_gm_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_gm_list::IsInitialized() const {

  return true;
}

void packetc2l_gm_list::Swap(packetc2l_gm_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(hours_, other->hours_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_gm_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_gm_list_descriptor_;
  metadata.reflection = packetc2l_gm_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_room_info::kIdFieldNumber;
const int gm_room_info::kPlayerFeeFieldNumber;
const int gm_room_info::kPlayerWinFieldNumber;
#endif  // !_MSC_VER

gm_room_info::gm_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_room_info::InitAsDefaultInstance() {
}

gm_room_info::gm_room_info(const gm_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_room_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  player_fee_ = 0;
  player_win_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_room_info::~gm_room_info() {
  SharedDtor();
}

void gm_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_room_info_descriptor_;
}

const gm_room_info& gm_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

gm_room_info* gm_room_info::default_instance_ = NULL;

gm_room_info* gm_room_info::New() const {
  return new gm_room_info;
}

void gm_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    player_fee_ = 0;
    player_win_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_fee;
        break;
      }

      // optional int32 player_fee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_fee_)));
          set_has_player_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_win;
        break;
      }

      // optional int64 player_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_win_)));
          set_has_player_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 player_fee = 2;
  if (has_player_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_fee(), output);
  }

  // optional int64 player_win = 3;
  if (has_player_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->player_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 player_fee = 2;
  if (has_player_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_fee(), target);
  }

  // optional int64 player_win = 3;
  if (has_player_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->player_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 player_fee = 2;
    if (has_player_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_fee());
    }

    // optional int64 player_win = 3;
    if (has_player_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_room_info::MergeFrom(const gm_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_player_fee()) {
      set_player_fee(from.player_fee());
    }
    if (from.has_player_win()) {
      set_player_win(from.player_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_room_info::CopyFrom(const gm_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_room_info::IsInitialized() const {

  return true;
}

void gm_room_info::Swap(gm_room_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(player_fee_, other->player_fee_);
    std::swap(player_win_, other->player_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_room_info_descriptor_;
  metadata.reflection = gm_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_list::kPacketIdFieldNumber;
const int packetl2c_gm_list::kPlayersFieldNumber;
const int packetl2c_gm_list::kRoomsFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_list::packetl2c_gm_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_list::InitAsDefaultInstance() {
}

packetl2c_gm_list::packetl2c_gm_list(const packetl2c_gm_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15024;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_list::~packetl2c_gm_list() {
  SharedDtor();
}

void packetl2c_gm_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_list_descriptor_;
}

const packetl2c_gm_list& packetl2c_gm_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_list* packetl2c_gm_list::default_instance_ = NULL;

packetl2c_gm_list* packetl2c_gm_list::New() const {
  return new packetl2c_gm_list;
}

void packetl2c_gm_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15024;
  }
  players_.Clear();
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .game_ermj_protocols.gm_player_info players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectTag(26)) goto parse_rooms;
        break;
      }

      // repeated .game_ermj_protocols.gm_room_info rooms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_ermj_protocols.gm_player_info players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  // repeated .game_ermj_protocols.gm_room_info rooms = 3;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_ermj_protocols.gm_player_info players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  // repeated .game_ermj_protocols.gm_room_info rooms = 3;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_ermj_protocols.gm_player_info players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .game_ermj_protocols.gm_room_info rooms = 3;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_list::MergeFrom(const packetl2c_gm_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_list::CopyFrom(const packetl2c_gm_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_list::IsInitialized() const {

  return true;
}

void packetl2c_gm_list::Swap(packetl2c_gm_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    players_.Swap(&other->players_);
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_list_descriptor_;
  metadata.reflection = packetl2c_gm_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_gm_kill::kPacketIdFieldNumber;
const int packetc2l_gm_kill::kPlayerIdFieldNumber;
const int packetc2l_gm_kill::kKillTypeFieldNumber;
const int packetc2l_gm_kill::kKillCntFieldNumber;
#endif  // !_MSC_VER

packetc2l_gm_kill::packetc2l_gm_kill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_gm_kill::InitAsDefaultInstance() {
}

packetc2l_gm_kill::packetc2l_gm_kill(const packetc2l_gm_kill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_gm_kill::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10016;
  player_id_ = 0;
  kill_type_ = 0;
  kill_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_gm_kill::~packetc2l_gm_kill() {
  SharedDtor();
}

void packetc2l_gm_kill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_gm_kill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_gm_kill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_gm_kill_descriptor_;
}

const packetc2l_gm_kill& packetc2l_gm_kill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fermj_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_gm_kill* packetc2l_gm_kill::default_instance_ = NULL;

packetc2l_gm_kill* packetc2l_gm_kill::New() const {
  return new packetc2l_gm_kill;
}

void packetc2l_gm_kill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10016;
    player_id_ = 0;
    kill_type_ = 0;
    kill_cnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_gm_kill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_kill];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_ermj_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_ermj_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill_type;
        break;
      }

      // optional int32 kill_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_type_)));
          set_has_kill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill_cnt;
        break;
      }

      // optional int32 kill_cnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_cnt_)));
          set_has_kill_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_gm_kill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_kill];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 kill_type = 3;
  if (has_kill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kill_type(), output);
  }

  // optional int32 kill_cnt = 4;
  if (has_kill_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kill_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_gm_kill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_kill];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 kill_type = 3;
  if (has_kill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kill_type(), target);
  }

  // optional int32 kill_cnt = 4;
  if (has_kill_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kill_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_gm_kill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_ermj_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_kill];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 kill_type = 3;
    if (has_kill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_type());
    }

    // optional int32 kill_cnt = 4;
    if (has_kill_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_gm_kill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_gm_kill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_gm_kill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_gm_kill::MergeFrom(const packetc2l_gm_kill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_kill_type()) {
      set_kill_type(from.kill_type());
    }
    if (from.has_kill_cnt()) {
      set_kill_cnt(from.kill_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_gm_kill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_gm_kill::CopyFrom(const packetc2l_gm_kill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_gm_kill::IsInitialized() const {

  return true;
}

void packetc2l_gm_kill::Swap(packetc2l_gm_kill* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(kill_type_, other->kill_type_);
    std::swap(kill_cnt_, other->kill_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_gm_kill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_gm_kill_descriptor_;
  metadata.reflection = packetc2l_gm_kill_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_ermj_protocols

// @@protoc_insertion_point(global_scope)
