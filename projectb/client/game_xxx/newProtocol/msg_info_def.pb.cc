// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_info_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_info_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg_info_def {

namespace {

const ::google::protobuf::Descriptor* msg_account_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_account_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_account_info_ex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_account_info_ex_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_quest_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_quest_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5finfo_5fdef_2eproto() {
  protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_info_def.proto");
  GOOGLE_CHECK(file != NULL);
  msg_account_info_descriptor_ = file->message_type(0);
  static const int msg_account_info_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, viplvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, icon_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, curphotoframeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, payids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, issafedepositboxpwdempty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, safeboxgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, updatenicknamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, isbindmobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, lastgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, isformal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, bindinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, realname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, recharged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, inviter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, water_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, inviter_reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, sevenday_done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, quest_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, limit_time_photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, ipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, inviter_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, performance_),
  };
  msg_account_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_account_info_descriptor_,
      msg_account_info::default_instance_,
      msg_account_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_account_info));
  msg_account_info_ex_descriptor_ = file->message_type(1);
  static const int msg_account_info_ex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, is_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, free_gold_),
  };
  msg_account_info_ex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_account_info_ex_descriptor_,
      msg_account_info_ex::default_instance_,
      msg_account_info_ex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_account_info_ex));
  msg_item_descriptor_ = file->message_type(2);
  static const int msg_item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_item, count_),
  };
  msg_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_item_descriptor_,
      msg_item::default_instance_,
      msg_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_item));
  msg_quest_info_descriptor_ = file->message_type(3);
  static const int msg_quest_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, received_),
  };
  msg_quest_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_quest_info_descriptor_,
      msg_quest_info::default_instance_,
      msg_quest_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_quest_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5finfo_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_account_info_descriptor_, &msg_account_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_account_info_ex_descriptor_, &msg_account_info_ex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_item_descriptor_, &msg_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_quest_info_descriptor_, &msg_quest_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5finfo_5fdef_2eproto() {
  delete msg_account_info::default_instance_;
  delete msg_account_info_reflection_;
  delete msg_account_info_ex::default_instance_;
  delete msg_account_info_ex_reflection_;
  delete msg_item::default_instance_;
  delete msg_item_reflection_;
  delete msg_quest_info::default_instance_;
  delete msg_quest_info_reflection_;
}

void protobuf_AddDesc_msg_5finfo_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022msg_info_def.proto\022\014msg_info_def\"\260\005\n\020m"
    "sg_account_info\022\013\n\003aid\030\001 \001(\005\022\021\n\tchannelI"
    "d\030\002 \001(\t\022\020\n\010nickname\030\003 \001(\t\022\014\n\004gold\030\004 \001(\003\022"
    "\016\n\006viplvl\030\005 \001(\005\022\016\n\006vipexp\030\006 \001(\005\022\023\n\013icon_"
    "custom\030\010 \001(\t\022\013\n\003sex\030\t \001(\005\022\016\n\006Ticket\030\016 \001("
    "\005\022\027\n\017curPhotoFrameId\030\020 \001(\005\022\016\n\006payids\030\023 \003"
    "(\005\022 \n\030isSafeDepositBoxPwdEmpty\030\024 \001(\010\022\023\n\013"
    "safeBoxGold\030\025 \001(\003\022\021\n\tcollected\030\026 \001(\005\022\033\n\023"
    "updateNicknameCount\030\032 \001(\005\022\031\n\021isBindMobil"
    "ePhone\030\033 \001(\010\022\023\n\013create_time\030$ \001(\005\022\021\n\tPri"
    "vilege\030, \001(\005\022\022\n\nlastGameId\030. \001(\005\022\027\n\010isFo"
    "rmal\030/ \001(\010:\005false\022\020\n\010BindInfo\0300 \001(\t\022\020\n\010R"
    "ealName\0301 \001(\t\022\021\n\tRecharged\0304 \001(\005\022\022\n\ninvi"
    "ter_id\0305 \001(\005\022\r\n\005water\0306 \001(\005\022\034\n\024inviter_r"
    "eward_count\0307 \001(\005\022\020\n\010withdraw\0308 \001(\005\022\025\n\rs"
    "evenday_done\0309 \001(\010\022\022\n\nquest_list\030: \003(\005\022\030"
    "\n\020limit_time_photo\030; \001(\005\022\016\n\006ipinfo\030< \001(\t"
    "\022\026\n\016inviter_reward\030= \001(\003\022\023\n\013performance\030"
    "> \001(\003\"A\n\023msg_account_info_ex\022\027\n\010is_robot"
    "\030\001 \001(\010:\005false\022\021\n\tfree_gold\030\002 \001(\003\"%\n\010msg_"
    "item\022\n\n\002id\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"B\n\016msg_q"
    "uest_info\022\017\n\007questid\030\001 \001(\005\022\r\n\005count\030\002 \001("
    "\005\022\020\n\010received\030\003 \001(\010", 899);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_info_def.proto", &protobuf_RegisterTypes);
  msg_account_info::default_instance_ = new msg_account_info();
  msg_account_info_ex::default_instance_ = new msg_account_info_ex();
  msg_item::default_instance_ = new msg_item();
  msg_quest_info::default_instance_ = new msg_quest_info();
  msg_account_info::default_instance_->InitAsDefaultInstance();
  msg_account_info_ex::default_instance_->InitAsDefaultInstance();
  msg_item::default_instance_->InitAsDefaultInstance();
  msg_quest_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5finfo_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5finfo_5fdef_2eproto {
  StaticDescriptorInitializer_msg_5finfo_5fdef_2eproto() {
    protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  }
} static_descriptor_initializer_msg_5finfo_5fdef_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_account_info::kAidFieldNumber;
const int msg_account_info::kChannelIdFieldNumber;
const int msg_account_info::kNicknameFieldNumber;
const int msg_account_info::kGoldFieldNumber;
const int msg_account_info::kViplvlFieldNumber;
const int msg_account_info::kVipexpFieldNumber;
const int msg_account_info::kIconCustomFieldNumber;
const int msg_account_info::kSexFieldNumber;
const int msg_account_info::kTicketFieldNumber;
const int msg_account_info::kCurPhotoFrameIdFieldNumber;
const int msg_account_info::kPayidsFieldNumber;
const int msg_account_info::kIsSafeDepositBoxPwdEmptyFieldNumber;
const int msg_account_info::kSafeBoxGoldFieldNumber;
const int msg_account_info::kCollectedFieldNumber;
const int msg_account_info::kUpdateNicknameCountFieldNumber;
const int msg_account_info::kIsBindMobilePhoneFieldNumber;
const int msg_account_info::kCreateTimeFieldNumber;
const int msg_account_info::kPrivilegeFieldNumber;
const int msg_account_info::kLastGameIdFieldNumber;
const int msg_account_info::kIsFormalFieldNumber;
const int msg_account_info::kBindInfoFieldNumber;
const int msg_account_info::kRealNameFieldNumber;
const int msg_account_info::kRechargedFieldNumber;
const int msg_account_info::kInviterIdFieldNumber;
const int msg_account_info::kWaterFieldNumber;
const int msg_account_info::kInviterRewardCountFieldNumber;
const int msg_account_info::kWithdrawFieldNumber;
const int msg_account_info::kSevendayDoneFieldNumber;
const int msg_account_info::kQuestListFieldNumber;
const int msg_account_info::kLimitTimePhotoFieldNumber;
const int msg_account_info::kIpinfoFieldNumber;
const int msg_account_info::kInviterRewardFieldNumber;
const int msg_account_info::kPerformanceFieldNumber;
#endif  // !_MSC_VER

msg_account_info::msg_account_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_account_info::InitAsDefaultInstance() {
}

msg_account_info::msg_account_info(const msg_account_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_account_info::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = GOOGLE_LONGLONG(0);
  viplvl_ = 0;
  vipexp_ = 0;
  icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  ticket_ = 0;
  curphotoframeid_ = 0;
  issafedepositboxpwdempty_ = false;
  safeboxgold_ = GOOGLE_LONGLONG(0);
  collected_ = 0;
  updatenicknamecount_ = 0;
  isbindmobilephone_ = false;
  create_time_ = 0;
  privilege_ = 0;
  lastgameid_ = 0;
  isformal_ = false;
  bindinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recharged_ = 0;
  inviter_id_ = 0;
  water_ = 0;
  inviter_reward_count_ = 0;
  withdraw_ = 0;
  sevenday_done_ = false;
  limit_time_photo_ = 0;
  ipinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inviter_reward_ = GOOGLE_LONGLONG(0);
  performance_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_account_info::~msg_account_info() {
  SharedDtor();
}

void msg_account_info::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_custom_;
  }
  if (bindinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete bindinfo_;
  }
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (ipinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete ipinfo_;
  }
  if (this != default_instance_) {
  }
}

void msg_account_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_account_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_account_info_descriptor_;
}

const msg_account_info& msg_account_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

msg_account_info* msg_account_info::default_instance_ = NULL;

msg_account_info* msg_account_info::New() const {
  return new msg_account_info;
}

void msg_account_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aid_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    gold_ = GOOGLE_LONGLONG(0);
    viplvl_ = 0;
    vipexp_ = 0;
    if (has_icon_custom()) {
      if (icon_custom_ != &::google::protobuf::internal::kEmptyString) {
        icon_custom_->clear();
      }
    }
    sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ticket_ = 0;
    curphotoframeid_ = 0;
    issafedepositboxpwdempty_ = false;
    safeboxgold_ = GOOGLE_LONGLONG(0);
    collected_ = 0;
    updatenicknamecount_ = 0;
    isbindmobilephone_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    create_time_ = 0;
    privilege_ = 0;
    lastgameid_ = 0;
    isformal_ = false;
    if (has_bindinfo()) {
      if (bindinfo_ != &::google::protobuf::internal::kEmptyString) {
        bindinfo_->clear();
      }
    }
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::kEmptyString) {
        realname_->clear();
      }
    }
    recharged_ = 0;
    inviter_id_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    water_ = 0;
    inviter_reward_count_ = 0;
    withdraw_ = 0;
    sevenday_done_ = false;
    limit_time_photo_ = 0;
    if (has_ipinfo()) {
      if (ipinfo_ != &::google::protobuf::internal::kEmptyString) {
        ipinfo_->clear();
      }
    }
    inviter_reward_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    performance_ = GOOGLE_LONGLONG(0);
  }
  payids_.Clear();
  quest_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_account_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 aid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int64 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_viplvl;
        break;
      }

      // optional int32 viplvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplvl_)));
          set_has_viplvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vipexp;
        break;
      }

      // optional int32 vipexp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_icon_custom;
        break;
      }

      // optional string icon_custom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon_custom().data(), this->icon_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // optional int32 sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_Ticket;
        break;
      }

      // optional int32 Ticket = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_curPhotoFrameId;
        break;
      }

      // optional int32 curPhotoFrameId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curPhotoFrameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curphotoframeid_)));
          set_has_curphotoframeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_payids;
        break;
      }

      // repeated int32 payids = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_payids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_payids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_payids;
        if (input->ExpectTag(160)) goto parse_isSafeDepositBoxPwdEmpty;
        break;
      }

      // optional bool isSafeDepositBoxPwdEmpty = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSafeDepositBoxPwdEmpty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issafedepositboxpwdempty_)));
          set_has_issafedepositboxpwdempty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_safeBoxGold;
        break;
      }

      // optional int64 safeBoxGold = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safeBoxGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &safeboxgold_)));
          set_has_safeboxgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_collected;
        break;
      }

      // optional int32 collected = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collected_)));
          set_has_collected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_updateNicknameCount;
        break;
      }

      // optional int32 updateNicknameCount = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateNicknameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatenicknamecount_)));
          set_has_updatenicknamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_isBindMobilePhone;
        break;
      }

      // optional bool isBindMobilePhone = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBindMobilePhone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbindmobilephone_)));
          set_has_isbindmobilephone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_Privilege;
        break;
      }

      // optional int32 Privilege = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Privilege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privilege_)));
          set_has_privilege();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_lastGameId;
        break;
      }

      // optional int32 lastGameId = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastGameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastgameid_)));
          set_has_lastgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_isFormal;
        break;
      }

      // optional bool isFormal = 47 [default = false];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFormal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isformal_)));
          set_has_isformal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_BindInfo;
        break;
      }

      // optional string BindInfo = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BindInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bindinfo().data(), this->bindinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_RealName;
        break;
      }

      // optional string RealName = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RealName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_Recharged;
        break;
      }

      // optional int32 Recharged = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Recharged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharged_)));
          set_has_recharged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_inviter_id;
        break;
      }

      // optional int32 inviter_id = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviter_id_)));
          set_has_inviter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_water;
        break;
      }

      // optional int32 water = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_water:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &water_)));
          set_has_water();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_inviter_reward_count;
        break;
      }

      // optional int32 inviter_reward_count = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviter_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviter_reward_count_)));
          set_has_inviter_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_withdraw;
        break;
      }

      // optional int32 withdraw = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_withdraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &withdraw_)));
          set_has_withdraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_sevenday_done;
        break;
      }

      // optional bool sevenday_done = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sevenday_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sevenday_done_)));
          set_has_sevenday_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_quest_list;
        break;
      }

      // repeated int32 quest_list = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 464, input, this->mutable_quest_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_quest_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_quest_list;
        if (input->ExpectTag(472)) goto parse_limit_time_photo;
        break;
      }

      // optional int32 limit_time_photo = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_time_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_time_photo_)));
          set_has_limit_time_photo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_ipinfo;
        break;
      }

      // optional string ipinfo = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipinfo().data(), this->ipinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_inviter_reward;
        break;
      }

      // optional int64 inviter_reward = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviter_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inviter_reward_)));
          set_has_inviter_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_performance;
        break;
      }

      // optional int64 performance = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_performance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &performance_)));
          set_has_performance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_account_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aid(), output);
  }

  // optional string channelId = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channelid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional int64 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gold(), output);
  }

  // optional int32 viplvl = 5;
  if (has_viplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->viplvl(), output);
  }

  // optional int32 vipexp = 6;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vipexp(), output);
  }

  // optional string icon_custom = 8;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->icon_custom(), output);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sex(), output);
  }

  // optional int32 Ticket = 14;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ticket(), output);
  }

  // optional int32 curPhotoFrameId = 16;
  if (has_curphotoframeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->curphotoframeid(), output);
  }

  // repeated int32 payids = 19;
  for (int i = 0; i < this->payids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->payids(i), output);
  }

  // optional bool isSafeDepositBoxPwdEmpty = 20;
  if (has_issafedepositboxpwdempty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->issafedepositboxpwdempty(), output);
  }

  // optional int64 safeBoxGold = 21;
  if (has_safeboxgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->safeboxgold(), output);
  }

  // optional int32 collected = 22;
  if (has_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->collected(), output);
  }

  // optional int32 updateNicknameCount = 26;
  if (has_updatenicknamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->updatenicknamecount(), output);
  }

  // optional bool isBindMobilePhone = 27;
  if (has_isbindmobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->isbindmobilephone(), output);
  }

  // optional int32 create_time = 36;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->create_time(), output);
  }

  // optional int32 Privilege = 44;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->privilege(), output);
  }

  // optional int32 lastGameId = 46;
  if (has_lastgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->lastgameid(), output);
  }

  // optional bool isFormal = 47 [default = false];
  if (has_isformal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->isformal(), output);
  }

  // optional string BindInfo = 48;
  if (has_bindinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindinfo().data(), this->bindinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      48, this->bindinfo(), output);
  }

  // optional string RealName = 49;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      49, this->realname(), output);
  }

  // optional int32 Recharged = 52;
  if (has_recharged()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->recharged(), output);
  }

  // optional int32 inviter_id = 53;
  if (has_inviter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->inviter_id(), output);
  }

  // optional int32 water = 54;
  if (has_water()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->water(), output);
  }

  // optional int32 inviter_reward_count = 55;
  if (has_inviter_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->inviter_reward_count(), output);
  }

  // optional int32 withdraw = 56;
  if (has_withdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->withdraw(), output);
  }

  // optional bool sevenday_done = 57;
  if (has_sevenday_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->sevenday_done(), output);
  }

  // repeated int32 quest_list = 58;
  for (int i = 0; i < this->quest_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      58, this->quest_list(i), output);
  }

  // optional int32 limit_time_photo = 59;
  if (has_limit_time_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->limit_time_photo(), output);
  }

  // optional string ipinfo = 60;
  if (has_ipinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipinfo().data(), this->ipinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->ipinfo(), output);
  }

  // optional int64 inviter_reward = 61;
  if (has_inviter_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(61, this->inviter_reward(), output);
  }

  // optional int64 performance = 62;
  if (has_performance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(62, this->performance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_account_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->aid(), target);
  }

  // optional string channelId = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int64 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gold(), target);
  }

  // optional int32 viplvl = 5;
  if (has_viplvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->viplvl(), target);
  }

  // optional int32 vipexp = 6;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vipexp(), target);
  }

  // optional string icon_custom = 8;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->icon_custom(), target);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sex(), target);
  }

  // optional int32 Ticket = 14;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ticket(), target);
  }

  // optional int32 curPhotoFrameId = 16;
  if (has_curphotoframeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->curphotoframeid(), target);
  }

  // repeated int32 payids = 19;
  for (int i = 0; i < this->payids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->payids(i), target);
  }

  // optional bool isSafeDepositBoxPwdEmpty = 20;
  if (has_issafedepositboxpwdempty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->issafedepositboxpwdempty(), target);
  }

  // optional int64 safeBoxGold = 21;
  if (has_safeboxgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->safeboxgold(), target);
  }

  // optional int32 collected = 22;
  if (has_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->collected(), target);
  }

  // optional int32 updateNicknameCount = 26;
  if (has_updatenicknamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->updatenicknamecount(), target);
  }

  // optional bool isBindMobilePhone = 27;
  if (has_isbindmobilephone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->isbindmobilephone(), target);
  }

  // optional int32 create_time = 36;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->create_time(), target);
  }

  // optional int32 Privilege = 44;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->privilege(), target);
  }

  // optional int32 lastGameId = 46;
  if (has_lastgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->lastgameid(), target);
  }

  // optional bool isFormal = 47 [default = false];
  if (has_isformal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->isformal(), target);
  }

  // optional string BindInfo = 48;
  if (has_bindinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindinfo().data(), this->bindinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->bindinfo(), target);
  }

  // optional string RealName = 49;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->realname(), target);
  }

  // optional int32 Recharged = 52;
  if (has_recharged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->recharged(), target);
  }

  // optional int32 inviter_id = 53;
  if (has_inviter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->inviter_id(), target);
  }

  // optional int32 water = 54;
  if (has_water()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->water(), target);
  }

  // optional int32 inviter_reward_count = 55;
  if (has_inviter_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->inviter_reward_count(), target);
  }

  // optional int32 withdraw = 56;
  if (has_withdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->withdraw(), target);
  }

  // optional bool sevenday_done = 57;
  if (has_sevenday_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->sevenday_done(), target);
  }

  // repeated int32 quest_list = 58;
  for (int i = 0; i < this->quest_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(58, this->quest_list(i), target);
  }

  // optional int32 limit_time_photo = 59;
  if (has_limit_time_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->limit_time_photo(), target);
  }

  // optional string ipinfo = 60;
  if (has_ipinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipinfo().data(), this->ipinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->ipinfo(), target);
  }

  // optional int64 inviter_reward = 61;
  if (has_inviter_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(61, this->inviter_reward(), target);
  }

  // optional int64 performance = 62;
  if (has_performance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(62, this->performance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_account_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aid());
    }

    // optional string channelId = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 viplvl = 5;
    if (has_viplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplvl());
    }

    // optional int32 vipexp = 6;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexp());
    }

    // optional string icon_custom = 8;
    if (has_icon_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_custom());
    }

    // optional int32 sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Ticket = 14;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional int32 curPhotoFrameId = 16;
    if (has_curphotoframeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curphotoframeid());
    }

    // optional bool isSafeDepositBoxPwdEmpty = 20;
    if (has_issafedepositboxpwdempty()) {
      total_size += 2 + 1;
    }

    // optional int64 safeBoxGold = 21;
    if (has_safeboxgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->safeboxgold());
    }

    // optional int32 collected = 22;
    if (has_collected()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collected());
    }

    // optional int32 updateNicknameCount = 26;
    if (has_updatenicknamecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatenicknamecount());
    }

    // optional bool isBindMobilePhone = 27;
    if (has_isbindmobilephone()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 create_time = 36;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int32 Privilege = 44;
    if (has_privilege()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->privilege());
    }

    // optional int32 lastGameId = 46;
    if (has_lastgameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastgameid());
    }

    // optional bool isFormal = 47 [default = false];
    if (has_isformal()) {
      total_size += 2 + 1;
    }

    // optional string BindInfo = 48;
    if (has_bindinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindinfo());
    }

    // optional string RealName = 49;
    if (has_realname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }

    // optional int32 Recharged = 52;
    if (has_recharged()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharged());
    }

    // optional int32 inviter_id = 53;
    if (has_inviter_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inviter_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 water = 54;
    if (has_water()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->water());
    }

    // optional int32 inviter_reward_count = 55;
    if (has_inviter_reward_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inviter_reward_count());
    }

    // optional int32 withdraw = 56;
    if (has_withdraw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->withdraw());
    }

    // optional bool sevenday_done = 57;
    if (has_sevenday_done()) {
      total_size += 2 + 1;
    }

    // optional int32 limit_time_photo = 59;
    if (has_limit_time_photo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_time_photo());
    }

    // optional string ipinfo = 60;
    if (has_ipinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipinfo());
    }

    // optional int64 inviter_reward = 61;
    if (has_inviter_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inviter_reward());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 performance = 62;
    if (has_performance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->performance());
    }

  }
  // repeated int32 payids = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->payids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->payids(i));
    }
    total_size += 2 * this->payids_size() + data_size;
  }

  // repeated int32 quest_list = 58;
  {
    int data_size = 0;
    for (int i = 0; i < this->quest_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->quest_list(i));
    }
    total_size += 2 * this->quest_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_account_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_account_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_account_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_account_info::MergeFrom(const msg_account_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  payids_.MergeFrom(from.payids_);
  quest_list_.MergeFrom(from.quest_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_viplvl()) {
      set_viplvl(from.viplvl());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_icon_custom()) {
      set_icon_custom(from.icon_custom());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_curphotoframeid()) {
      set_curphotoframeid(from.curphotoframeid());
    }
    if (from.has_issafedepositboxpwdempty()) {
      set_issafedepositboxpwdempty(from.issafedepositboxpwdempty());
    }
    if (from.has_safeboxgold()) {
      set_safeboxgold(from.safeboxgold());
    }
    if (from.has_collected()) {
      set_collected(from.collected());
    }
    if (from.has_updatenicknamecount()) {
      set_updatenicknamecount(from.updatenicknamecount());
    }
    if (from.has_isbindmobilephone()) {
      set_isbindmobilephone(from.isbindmobilephone());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_privilege()) {
      set_privilege(from.privilege());
    }
    if (from.has_lastgameid()) {
      set_lastgameid(from.lastgameid());
    }
    if (from.has_isformal()) {
      set_isformal(from.isformal());
    }
    if (from.has_bindinfo()) {
      set_bindinfo(from.bindinfo());
    }
    if (from.has_realname()) {
      set_realname(from.realname());
    }
    if (from.has_recharged()) {
      set_recharged(from.recharged());
    }
    if (from.has_inviter_id()) {
      set_inviter_id(from.inviter_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_water()) {
      set_water(from.water());
    }
    if (from.has_inviter_reward_count()) {
      set_inviter_reward_count(from.inviter_reward_count());
    }
    if (from.has_withdraw()) {
      set_withdraw(from.withdraw());
    }
    if (from.has_sevenday_done()) {
      set_sevenday_done(from.sevenday_done());
    }
    if (from.has_limit_time_photo()) {
      set_limit_time_photo(from.limit_time_photo());
    }
    if (from.has_ipinfo()) {
      set_ipinfo(from.ipinfo());
    }
    if (from.has_inviter_reward()) {
      set_inviter_reward(from.inviter_reward());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_performance()) {
      set_performance(from.performance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_account_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_account_info::CopyFrom(const msg_account_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_account_info::IsInitialized() const {

  return true;
}

void msg_account_info::Swap(msg_account_info* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(channelid_, other->channelid_);
    std::swap(nickname_, other->nickname_);
    std::swap(gold_, other->gold_);
    std::swap(viplvl_, other->viplvl_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(icon_custom_, other->icon_custom_);
    std::swap(sex_, other->sex_);
    std::swap(ticket_, other->ticket_);
    std::swap(curphotoframeid_, other->curphotoframeid_);
    payids_.Swap(&other->payids_);
    std::swap(issafedepositboxpwdempty_, other->issafedepositboxpwdempty_);
    std::swap(safeboxgold_, other->safeboxgold_);
    std::swap(collected_, other->collected_);
    std::swap(updatenicknamecount_, other->updatenicknamecount_);
    std::swap(isbindmobilephone_, other->isbindmobilephone_);
    std::swap(create_time_, other->create_time_);
    std::swap(privilege_, other->privilege_);
    std::swap(lastgameid_, other->lastgameid_);
    std::swap(isformal_, other->isformal_);
    std::swap(bindinfo_, other->bindinfo_);
    std::swap(realname_, other->realname_);
    std::swap(recharged_, other->recharged_);
    std::swap(inviter_id_, other->inviter_id_);
    std::swap(water_, other->water_);
    std::swap(inviter_reward_count_, other->inviter_reward_count_);
    std::swap(withdraw_, other->withdraw_);
    std::swap(sevenday_done_, other->sevenday_done_);
    quest_list_.Swap(&other->quest_list_);
    std::swap(limit_time_photo_, other->limit_time_photo_);
    std::swap(ipinfo_, other->ipinfo_);
    std::swap(inviter_reward_, other->inviter_reward_);
    std::swap(performance_, other->performance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_account_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_account_info_descriptor_;
  metadata.reflection = msg_account_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_account_info_ex::kIsRobotFieldNumber;
const int msg_account_info_ex::kFreeGoldFieldNumber;
#endif  // !_MSC_VER

msg_account_info_ex::msg_account_info_ex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_account_info_ex::InitAsDefaultInstance() {
}

msg_account_info_ex::msg_account_info_ex(const msg_account_info_ex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_account_info_ex::SharedCtor() {
  _cached_size_ = 0;
  is_robot_ = false;
  free_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_account_info_ex::~msg_account_info_ex() {
  SharedDtor();
}

void msg_account_info_ex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_account_info_ex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_account_info_ex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_account_info_ex_descriptor_;
}

const msg_account_info_ex& msg_account_info_ex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

msg_account_info_ex* msg_account_info_ex::default_instance_ = NULL;

msg_account_info_ex* msg_account_info_ex::New() const {
  return new msg_account_info_ex;
}

void msg_account_info_ex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_robot_ = false;
    free_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_account_info_ex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_robot = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_free_gold;
        break;
      }

      // optional int64 free_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_gold_)));
          set_has_free_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_account_info_ex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_robot = 1 [default = false];
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_robot(), output);
  }

  // optional int64 free_gold = 2;
  if (has_free_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->free_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_account_info_ex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_robot = 1 [default = false];
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_robot(), target);
  }

  // optional int64 free_gold = 2;
  if (has_free_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->free_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_account_info_ex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_robot = 1 [default = false];
    if (has_is_robot()) {
      total_size += 1 + 1;
    }

    // optional int64 free_gold = 2;
    if (has_free_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->free_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_account_info_ex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_account_info_ex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_account_info_ex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_account_info_ex::MergeFrom(const msg_account_info_ex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
    if (from.has_free_gold()) {
      set_free_gold(from.free_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_account_info_ex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_account_info_ex::CopyFrom(const msg_account_info_ex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_account_info_ex::IsInitialized() const {

  return true;
}

void msg_account_info_ex::Swap(msg_account_info_ex* other) {
  if (other != this) {
    std::swap(is_robot_, other->is_robot_);
    std::swap(free_gold_, other->free_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_account_info_ex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_account_info_ex_descriptor_;
  metadata.reflection = msg_account_info_ex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_item::kIdFieldNumber;
const int msg_item::kCountFieldNumber;
#endif  // !_MSC_VER

msg_item::msg_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_item::InitAsDefaultInstance() {
}

msg_item::msg_item(const msg_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_item::~msg_item() {
  SharedDtor();
}

void msg_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_item_descriptor_;
}

const msg_item& msg_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

msg_item* msg_item::default_instance_ = NULL;

msg_item* msg_item::New() const {
  return new msg_item;
}

void msg_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_item::MergeFrom(const msg_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_item::CopyFrom(const msg_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_item::IsInitialized() const {

  return true;
}

void msg_item::Swap(msg_item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_item_descriptor_;
  metadata.reflection = msg_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_quest_info::kQuestidFieldNumber;
const int msg_quest_info::kCountFieldNumber;
const int msg_quest_info::kReceivedFieldNumber;
#endif  // !_MSC_VER

msg_quest_info::msg_quest_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_quest_info::InitAsDefaultInstance() {
}

msg_quest_info::msg_quest_info(const msg_quest_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_quest_info::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  count_ = 0;
  received_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_quest_info::~msg_quest_info() {
  SharedDtor();
}

void msg_quest_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_quest_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_quest_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_quest_info_descriptor_;
}

const msg_quest_info& msg_quest_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

msg_quest_info* msg_quest_info::default_instance_ = NULL;

msg_quest_info* msg_quest_info::New() const {
  return new msg_quest_info;
}

void msg_quest_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    count_ = 0;
    received_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_quest_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_received;
        break;
      }

      // optional bool received = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &received_)));
          set_has_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_quest_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional bool received = 3;
  if (has_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->received(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_quest_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional bool received = 3;
  if (has_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->received(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_quest_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool received = 3;
    if (has_received()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_quest_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_quest_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_quest_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_quest_info::MergeFrom(const msg_quest_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_received()) {
      set_received(from.received());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_quest_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_quest_info::CopyFrom(const msg_quest_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_quest_info::IsInitialized() const {

  return true;
}

void msg_quest_info::Swap(msg_quest_info* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(count_, other->count_);
    std::swap(received_, other->received_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_quest_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_quest_info_descriptor_;
  metadata.reflection = msg_quest_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_info_def

// @@protoc_insertion_point(global_scope)
