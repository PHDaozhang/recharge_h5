// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_oneyuanfortune_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_oneyuanfortune_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_oneyuanfortune_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_info2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_info2_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* history_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  history_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_add_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_add_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_add_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_add_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_for_player_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_for_player_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_ask_for_player_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_ask_for_player_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_for_history_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_for_history_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_ask_for_history_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_ask_for_history_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_begin_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_begin_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_timing_starts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_timing_starts_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_begin_award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_begin_award_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_gm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_gm_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_game_control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_game_control_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_game_control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_game_control_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_debuginfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_all_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_all_bet_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5foneyuanfortune_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_oneyuanfortune_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  msg_room_info_descriptor_ = file->message_type(0);
  static const int msg_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, roomid_),
  };
  msg_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_room_info_descriptor_,
      msg_room_info::default_instance_,
      msg_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_room_info));
  msg_bet_info_descriptor_ = file->message_type(1);
  static const int msg_bet_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_count_),
  };
  msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_info_descriptor_,
      msg_bet_info::default_instance_,
      msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_info));
  msg_bet_info2_descriptor_ = file->message_type(2);
  static const int msg_bet_info2_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info2, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info2, bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info2, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info2, bet_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info2, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info2, table_id_),
  };
  msg_bet_info2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_info2_descriptor_,
      msg_bet_info2::default_instance_,
      msg_bet_info2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_info2));
  packetc2l_get_room_info_descriptor_ = file->message_type(3);
  static const int packetc2l_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, packet_id_),
  };
  packetc2l_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_info_descriptor_,
      packetc2l_get_room_info::default_instance_,
      packetc2l_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_info));
  packetl2c_get_room_info_result_descriptor_ = file->message_type(4);
  static const int packetl2c_get_room_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, room_list_),
  };
  packetl2c_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_info_result_descriptor_,
      packetl2c_get_room_info_result::default_instance_,
      packetl2c_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_info_result));
  packetc2l_enter_room_descriptor_ = file->message_type(5);
  static const int packetc2l_enter_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, roomid_),
  };
  packetc2l_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_room_descriptor_,
      packetc2l_enter_room::default_instance_,
      packetc2l_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_room));
  packetl2c_enter_room_result_descriptor_ = file->message_type(6);
  static const int packetl2c_enter_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, result_),
  };
  packetl2c_enter_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_room_result_descriptor_,
      packetl2c_enter_room_result::default_instance_,
      packetl2c_enter_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_room_result));
  history_info_descriptor_ = file->message_type(7);
  static const int history_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, player_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, player_head_frame_),
  };
  history_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      history_info_descriptor_,
      history_info::default_instance_,
      history_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(history_info));
  packetc2l_get_room_scene_info_descriptor_ = file->message_type(8);
  static const int packetc2l_get_room_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, packet_id_),
  };
  packetc2l_get_room_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_scene_info_descriptor_,
      packetc2l_get_room_scene_info::default_instance_,
      packetc2l_get_room_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_scene_info));
  packetl2c_get_room_scene_info_result_descriptor_ = file->message_type(9);
  static const int packetl2c_get_room_scene_info_result_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, bet_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, remain_bet_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, self_remain_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, timing_),
  };
  packetl2c_get_room_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_scene_info_result_descriptor_,
      packetl2c_get_room_scene_info_result::default_instance_,
      packetl2c_get_room_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_scene_info_result));
  packetc2l_leave_room_descriptor_ = file->message_type(10);
  static const int packetc2l_leave_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, packet_id_),
  };
  packetc2l_leave_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_room_descriptor_,
      packetc2l_leave_room::default_instance_,
      packetc2l_leave_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_room));
  packetl2c_leave_room_result_descriptor_ = file->message_type(11);
  static const int packetl2c_leave_room_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, player_gold_),
  };
  packetl2c_leave_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_room_result_descriptor_,
      packetl2c_leave_room_result::default_instance_,
      packetl2c_leave_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_room_result));
  packetc2l_add_bet_descriptor_ = file->message_type(12);
  static const int packetc2l_add_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_add_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_add_bet, bet_count_),
  };
  packetc2l_add_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_add_bet_descriptor_,
      packetc2l_add_bet::default_instance_,
      packetc2l_add_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_add_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_add_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_add_bet));
  packetl2c_add_bet_result_descriptor_ = file->message_type(13);
  static const int packetl2c_add_bet_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, bet_count_),
  };
  packetl2c_add_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_add_bet_result_descriptor_,
      packetl2c_add_bet_result::default_instance_,
      packetl2c_add_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_add_bet_result));
  player_info_descriptor_ = file->message_type(14);
  static const int player_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_vip_lv_),
  };
  player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_info_descriptor_,
      player_info::default_instance_,
      player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_info));
  packetc2l_ask_for_player_list_descriptor_ = file->message_type(15);
  static const int packetc2l_ask_for_player_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_player_list, packet_id_),
  };
  packetc2l_ask_for_player_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_for_player_list_descriptor_,
      packetc2l_ask_for_player_list::default_instance_,
      packetc2l_ask_for_player_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_player_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_player_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_for_player_list));
  packetl2c_ask_for_player_list_result_descriptor_ = file->message_type(16);
  static const int packetl2c_ask_for_player_list_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_player_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_player_list_result, player_list_),
  };
  packetl2c_ask_for_player_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_ask_for_player_list_result_descriptor_,
      packetl2c_ask_for_player_list_result::default_instance_,
      packetl2c_ask_for_player_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_player_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_player_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_ask_for_player_list_result));
  packetc2l_ask_for_history_list_descriptor_ = file->message_type(17);
  static const int packetc2l_ask_for_history_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_history_list, packet_id_),
  };
  packetc2l_ask_for_history_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_for_history_list_descriptor_,
      packetc2l_ask_for_history_list::default_instance_,
      packetc2l_ask_for_history_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_history_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_history_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_for_history_list));
  packetl2c_ask_for_history_list_result_descriptor_ = file->message_type(18);
  static const int packetl2c_ask_for_history_list_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_history_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_history_list_result, history_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_history_list_result, lucky_player_),
  };
  packetl2c_ask_for_history_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_ask_for_history_list_result_descriptor_,
      packetl2c_ask_for_history_list_result::default_instance_,
      packetl2c_ask_for_history_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_history_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_history_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_ask_for_history_list_result));
  packetl2c_bc_begin_bet_descriptor_ = file->message_type(19);
  static const int packetl2c_bc_begin_bet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_bet, packet_id_),
  };
  packetl2c_bc_begin_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_begin_bet_descriptor_,
      packetl2c_bc_begin_bet::default_instance_,
      packetl2c_bc_begin_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_begin_bet));
  packetl2c_timing_starts_descriptor_ = file->message_type(20);
  static const int packetl2c_timing_starts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_timing_starts, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_timing_starts, cd_time_),
  };
  packetl2c_timing_starts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_timing_starts_descriptor_,
      packetl2c_timing_starts::default_instance_,
      packetl2c_timing_starts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_timing_starts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_timing_starts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_timing_starts));
  packetl2c_bc_begin_award_descriptor_ = file->message_type(21);
  static const int packetl2c_bc_begin_award_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, winner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, total_bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, reward_gold_),
  };
  packetl2c_bc_begin_award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_begin_award_descriptor_,
      packetl2c_bc_begin_award::default_instance_,
      packetl2c_bc_begin_award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_begin_award));
  packetl2c_bc_bet_info_descriptor_ = file->message_type(22);
  static const int packetl2c_bc_bet_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_bet_info, bet_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_bet_info, pinfo_),
  };
  packetl2c_bc_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_bet_info_descriptor_,
      packetl2c_bc_bet_info::default_instance_,
      packetl2c_bc_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_bet_info));
  packetc2l_check_state_descriptor_ = file->message_type(23);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetl2c_check_state_result_descriptor_ = file->message_type(24);
  static const int packetl2c_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, is_intable_),
  };
  packetl2c_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_check_state_result_descriptor_,
      packetl2c_check_state_result::default_instance_,
      packetl2c_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_check_state_result));
  packetc2l_gm_descriptor_ = file->message_type(25);
  static const int packetc2l_gm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm, gm_max_),
  };
  packetc2l_gm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_gm_descriptor_,
      packetc2l_gm::default_instance_,
      packetc2l_gm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_gm));
  packetc2l_game_control_descriptor_ = file->message_type(26);
  static const int packetc2l_game_control_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, packet_id_),
  };
  packetc2l_game_control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_game_control_descriptor_,
      packetc2l_game_control::default_instance_,
      packetc2l_game_control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_game_control));
  packetl2c_game_control_descriptor_ = file->message_type(27);
  static const int packetl2c_game_control_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_control, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_control, result_),
  };
  packetl2c_game_control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_game_control_descriptor_,
      packetl2c_game_control::default_instance_,
      packetl2c_game_control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_game_control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_game_control));
  packetl2c_bc_debuginfo_descriptor_ = file->message_type(28);
  static const int packetl2c_bc_debuginfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, debug_infos_),
  };
  packetl2c_bc_debuginfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_debuginfo_descriptor_,
      packetl2c_bc_debuginfo::default_instance_,
      packetl2c_bc_debuginfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_debuginfo));
  packetl2c_notice_all_bet_info_descriptor_ = file->message_type(29);
  static const int packetl2c_notice_all_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, bet_info_list_),
  };
  packetl2c_notice_all_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_all_bet_info_descriptor_,
      packetl2c_notice_all_bet_info::default_instance_,
      packetl2c_notice_all_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_all_bet_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5foneyuanfortune_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_room_info_descriptor_, &msg_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_info_descriptor_, &msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_info2_descriptor_, &msg_bet_info2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_info_descriptor_, &packetc2l_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_info_result_descriptor_, &packetl2c_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_room_descriptor_, &packetc2l_enter_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_room_result_descriptor_, &packetl2c_enter_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    history_info_descriptor_, &history_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_scene_info_descriptor_, &packetc2l_get_room_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_scene_info_result_descriptor_, &packetl2c_get_room_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_room_descriptor_, &packetc2l_leave_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_room_result_descriptor_, &packetl2c_leave_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_add_bet_descriptor_, &packetc2l_add_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_add_bet_result_descriptor_, &packetl2c_add_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_info_descriptor_, &player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_for_player_list_descriptor_, &packetc2l_ask_for_player_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_ask_for_player_list_result_descriptor_, &packetl2c_ask_for_player_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_for_history_list_descriptor_, &packetc2l_ask_for_history_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_ask_for_history_list_result_descriptor_, &packetl2c_ask_for_history_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_begin_bet_descriptor_, &packetl2c_bc_begin_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_timing_starts_descriptor_, &packetl2c_timing_starts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_begin_award_descriptor_, &packetl2c_bc_begin_award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_bet_info_descriptor_, &packetl2c_bc_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_check_state_result_descriptor_, &packetl2c_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_gm_descriptor_, &packetc2l_gm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_game_control_descriptor_, &packetc2l_game_control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_game_control_descriptor_, &packetl2c_game_control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_debuginfo_descriptor_, &packetl2c_bc_debuginfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_all_bet_info_descriptor_, &packetl2c_notice_all_bet_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5foneyuanfortune_5fprotocol_2eproto() {
  delete msg_room_info::default_instance_;
  delete msg_room_info_reflection_;
  delete msg_bet_info::default_instance_;
  delete msg_bet_info_reflection_;
  delete msg_bet_info2::default_instance_;
  delete msg_bet_info2_reflection_;
  delete packetc2l_get_room_info::default_instance_;
  delete packetc2l_get_room_info_reflection_;
  delete packetl2c_get_room_info_result::default_instance_;
  delete packetl2c_get_room_info_result_reflection_;
  delete packetc2l_enter_room::default_instance_;
  delete packetc2l_enter_room_reflection_;
  delete packetl2c_enter_room_result::default_instance_;
  delete packetl2c_enter_room_result_reflection_;
  delete history_info::default_instance_;
  delete history_info_reflection_;
  delete packetc2l_get_room_scene_info::default_instance_;
  delete packetc2l_get_room_scene_info_reflection_;
  delete packetl2c_get_room_scene_info_result::default_instance_;
  delete packetl2c_get_room_scene_info_result_reflection_;
  delete packetc2l_leave_room::default_instance_;
  delete packetc2l_leave_room_reflection_;
  delete packetl2c_leave_room_result::default_instance_;
  delete packetl2c_leave_room_result_reflection_;
  delete packetc2l_add_bet::default_instance_;
  delete packetc2l_add_bet_reflection_;
  delete packetl2c_add_bet_result::default_instance_;
  delete packetl2c_add_bet_result_reflection_;
  delete player_info::default_instance_;
  delete player_info_reflection_;
  delete packetc2l_ask_for_player_list::default_instance_;
  delete packetc2l_ask_for_player_list_reflection_;
  delete packetl2c_ask_for_player_list_result::default_instance_;
  delete packetl2c_ask_for_player_list_result_reflection_;
  delete packetc2l_ask_for_history_list::default_instance_;
  delete packetc2l_ask_for_history_list_reflection_;
  delete packetl2c_ask_for_history_list_result::default_instance_;
  delete packetl2c_ask_for_history_list_result_reflection_;
  delete packetl2c_bc_begin_bet::default_instance_;
  delete packetl2c_bc_begin_bet_reflection_;
  delete packetl2c_timing_starts::default_instance_;
  delete packetl2c_timing_starts_reflection_;
  delete packetl2c_bc_begin_award::default_instance_;
  delete packetl2c_bc_begin_award_reflection_;
  delete packetl2c_bc_bet_info::default_instance_;
  delete packetl2c_bc_bet_info_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetl2c_check_state_result::default_instance_;
  delete packetl2c_check_state_result_reflection_;
  delete packetc2l_gm::default_instance_;
  delete packetc2l_gm_reflection_;
  delete packetc2l_game_control::default_instance_;
  delete packetc2l_game_control_reflection_;
  delete packetl2c_game_control::default_instance_;
  delete packetl2c_game_control_reflection_;
  delete packetl2c_bc_debuginfo::default_instance_;
  delete packetl2c_bc_debuginfo_reflection_;
  delete packetl2c_notice_all_bet_info::default_instance_;
  delete packetl2c_notice_all_bet_info_reflection_;
}

void protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_oneyuanfortune_protocols::protobuf_AddDesc_game_5foneyuanfortune_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"game_oneyuanfortune_protocol.proto\022\035ga"
    "me_oneyuanfortune_protocols\032\035game_oneyua"
    "nfortune_def.proto\032\022msg_type_def.proto\"\037"
    "\n\rmsg_room_info\022\016\n\006roomid\030\001 \001(\005\"T\n\014msg_b"
    "et_info\022\021\n\tplayer_id\030\001 \001(\005\022\020\n\010bet_gold\030\002"
    " \001(\003\022\014\n\004rate\030\003 \001(\005\022\021\n\tbet_count\030\004 \001(\005\"u\n"
    "\rmsg_bet_info2\022\021\n\tplayer_id\030\001 \001(\005\022\020\n\010bet"
    "_gold\030\002 \001(\003\022\014\n\004rate\030\003 \001(\005\022\021\n\tbet_count\030\004"
    " \001(\005\022\014\n\004gold\030\005 \001(\003\022\020\n\010table_id\030\006 \001(\005\"w\n\027"
    "packetc2l_get_room_info\022\\\n\tpacket_id\030\001 \001"
    "(\01620.game_oneyuanfortune_protocols.e_ser"
    "ver_msg_type:\027e_mst_c2l_get_room_info\"\306\001"
    "\n\036packetl2c_get_room_info_result\022c\n\tpack"
    "et_id\030\001 \001(\01620.game_oneyuanfortune_protoc"
    "ols.e_server_msg_type:\036e_mst_l2c_get_roo"
    "m_info_result\022\?\n\troom_list\030\002 \003(\0132,.game_"
    "oneyuanfortune_protocols.msg_room_info\"\201"
    "\001\n\024packetc2l_enter_room\022Y\n\tpacket_id\030\001 \001"
    "(\01620.game_oneyuanfortune_protocols.e_ser"
    "ver_msg_type:\024e_mst_c2l_enter_room\022\016\n\006ro"
    "omid\030\002 \001(\005\"\273\001\n\033packetl2c_enter_room_resu"
    "lt\022`\n\tpacket_id\030\001 \001(\01620.game_oneyuanfort"
    "une_protocols.e_server_msg_type:\033e_mst_l"
    "2c_enter_room_result\022:\n\006result\030\002 \001(\0162\036.m"
    "sg_type_def.e_msg_result_def:\ne_rmt_fail"
    "\"\221\001\n\014history_info\022\020\n\010nickname\030\001 \001(\t\022\014\n\004r"
    "ate\030\002 \001(\005\022\014\n\004gold\030\003 \001(\003\022\020\n\010viplevel\030\004 \001("
    "\005\022\021\n\tplayer_id\030\005 \001(\005\022\023\n\013player_head\030\006 \001("
    "\t\022\031\n\021player_head_frame\030\007 \001(\005\"\203\001\n\035packetc"
    "2l_get_room_scene_info\022b\n\tpacket_id\030\001 \001("
    "\01620.game_oneyuanfortune_protocols.e_serv"
    "er_msg_type:\035e_mst_c2l_get_room_scene_in"
    "fo\"\276\003\n$packetl2c_get_room_scene_info_res"
    "ult\022b\n\tpacket_id\030\001 \001(\01620.game_oneyuanfor"
    "tune_protocols.e_server_msg_type:\035e_mst_"
    "l2c_get_room_scene_info\022\017\n\007room_id\030\002 \001(\005"
    "\022\?\n\nroom_state\030\003 \001(\0162+.game_oneyuanfortu"
    "ne_protocols.e_game_state\022\017\n\007cd_time\030\004 \001"
    "(\005\022B\n\rbet_info_list\030\005 \003(\0132+.game_oneyuan"
    "fortune_protocols.msg_bet_info\022\030\n\020remain"
    "_bet_count\030\006 \001(\005\022\031\n\021self_remain_count\030\007 "
    "\001(\005\022\?\n\013player_list\030\010 \003(\0132*.game_oneyuanf"
    "ortune_protocols.player_info\022\025\n\006timing\030\t"
    " \001(\010:\005false\"q\n\024packetc2l_leave_room\022Y\n\tp"
    "acket_id\030\001 \001(\01620.game_oneyuanfortune_pro"
    "tocols.e_server_msg_type:\024e_mst_c2l_leav"
    "e_room\"\323\001\n\033packetl2c_leave_room_result\022`"
    "\n\tpacket_id\030\001 \001(\01620.game_oneyuanfortune_"
    "protocols.e_server_msg_type:\033e_mst_l2c_l"
    "eave_room_result\022=\n\006result\030\002 \001(\0162\036.msg_t"
    "ype_def.e_msg_result_def:\re_rmt_success\022"
    "\023\n\013player_gold\030\003 \001(\003\"~\n\021packetc2l_add_be"
    "t\022V\n\tpacket_id\030\001 \001(\01620.game_oneyuanfortu"
    "ne_protocols.e_server_msg_type:\021e_mst_c2"
    "l_add_bet\022\021\n\tbet_count\030\002 \001(\005\"\301\001\n\030packetl"
    "2c_add_bet_result\022V\n\tpacket_id\030\001 \001(\01620.g"
    "ame_oneyuanfortune_protocols.e_server_ms"
    "g_type:\021e_mst_l2c_add_bet\022:\n\006result\030\002 \001("
    "\0162\036.msg_type_def.e_msg_result_def:\ne_rmt"
    "_fail\022\021\n\tbet_count\030\003 \001(\005\"\260\001\n\013player_info"
    "\022\021\n\tplayer_id\030\001 \001(\005\022\027\n\017player_nickname\030\002"
    " \001(\t\022\031\n\021player_head_frame\030\003 \001(\005\022\032\n\022playe"
    "r_head_custom\030\004 \001(\t\022\023\n\013player_gold\030\005 \001(\003"
    "\022\022\n\nplayer_sex\030\006 \001(\005\022\025\n\rplayer_vip_lv\030\007 "
    "\001(\005\"\177\n\035packetc2l_ask_for_player_list\022^\n\t"
    "packet_id\030\001 \001(\01620.game_oneyuanfortune_pr"
    "otocols.e_server_msg_type:\031e_mst_c2l_ask"
    "_player_list\"\307\001\n$packetl2c_ask_for_playe"
    "r_list_result\022^\n\tpacket_id\030\001 \001(\01620.game_"
    "oneyuanfortune_protocols.e_server_msg_ty"
    "pe:\031e_mst_l2c_ask_player_list\022\?\n\013player_"
    "list\030\002 \003(\0132*.game_oneyuanfortune_protoco"
    "ls.player_info\"\201\001\n\036packetc2l_ask_for_his"
    "tory_list\022_\n\tpacket_id\030\001 \001(\01620.game_oney"
    "uanfortune_protocols.e_server_msg_type:\032"
    "e_mst_c2l_ask_history_list\"\216\002\n%packetl2c"
    "_ask_for_history_list_result\022_\n\tpacket_i"
    "d\030\001 \001(\01620.game_oneyuanfortune_protocols."
    "e_server_msg_type:\032e_mst_l2c_ask_history"
    "_list\022A\n\014history_list\030\002 \003(\0132+.game_oneyu"
    "anfortune_protocols.history_info\022A\n\014luck"
    "y_player\030\003 \001(\0132+.game_oneyuanfortune_pro"
    "tocols.history_info\"u\n\026packetl2c_bc_begi"
    "n_bet\022[\n\tpacket_id\030\001 \001(\01620.game_oneyuanf"
    "ortune_protocols.e_server_msg_type:\026e_ms"
    "t_l2c_bc_begin_bet\"\214\001\n\027packetl2c_timing_"
    "starts\022`\n\tpacket_id\030\001 \001(\01620.game_oneyuan"
    "fortune_protocols.e_server_msg_type:\033e_m"
    "st_l2c_l2c_timing_starts\022\017\n\007cd_time\030\002 \001("
    "\005\"\233\002\n\030packetl2c_bc_begin_award\022]\n\tpacket"
    "_id\030\001 \001(\01620.game_oneyuanfortune_protocol"
    "s.e_server_msg_type:\030e_mst_l2c_bc_begin_"
    "award\022\021\n\twinner_id\030\002 \001(\005\022\021\n\ttotal_bet\030\003 "
    "\001(\003\022\?\n\013player_list\030\004 \003(\0132*.game_oneyuanf"
    "ortune_protocols.player_info\022\017\n\007cd_time\030"
    "\005 \001(\005\022\023\n\013random_seed\030\006 \001(\005\022\023\n\013reward_gol"
    "d\030\007 \001(\005\"\362\001\n\025packetl2c_bc_bet_info\022Z\n\tpac"
    "ket_id\030\001 \001(\01620.game_oneyuanfortune_proto"
    "cols.e_server_msg_type:\025e_mst_l2c_bc_bet"
    "_info\022B\n\rbet_info_list\030\002 \001(\0132+.game_oney"
    "uanfortune_protocols.msg_bet_info\0229\n\005pin"
    "fo\030\003 \001(\0132*.game_oneyuanfortune_protocols"
    ".player_info\"s\n\025packetc2l_check_state\022Z\n"
    "\tpacket_id\030\001 \001(\01620.game_oneyuanfortune_p"
    "rotocols.e_server_msg_type:\025e_mst_c2l_ch"
    "eck_state\"\234\001\n\034packetl2c_check_state_resu"
    "lt\022a\n\tpacket_id\030\001 \001(\01620.game_oneyuanfort"
    "une_protocols.e_server_msg_type:\034e_mst_l"
    "2c_check_state_result\022\031\n\nis_intable\030\002 \001("
    "\010:\005false\"q\n\014packetc2l_gm\022Q\n\tpacket_id\030\001 "
    "\001(\01620.game_oneyuanfortune_protocols.e_se"
    "rver_msg_type:\014e_mst_c2l_gm\022\016\n\006gm_max\030\002 "
    "\001(\005\"u\n\026packetc2l_game_control\022[\n\tpacket_"
    "id\030\001 \001(\01620.game_oneyuanfortune_protocols"
    ".e_server_msg_type:\026e_mst_c2l_game_contr"
    "ol\"\264\001\n\026packetl2c_game_control\022[\n\tpacket_"
    "id\030\001 \001(\01620.game_oneyuanfortune_protocols"
    ".e_server_msg_type:\026e_mst_l2c_game_contr"
    "ol\022=\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_"
    "result_def:\re_rmt_success\"\345\001\n\026packetl2c_"
    "bc_debuginfo\022[\n\tpacket_id\030\001 \001(\01620.game_o"
    "neyuanfortune_protocols.e_server_msg_typ"
    "e:\026e_mst_l2c_bc_debuginfo\022\021\n\tplayer_id\030\002"
    " \001(\005\022\027\n\014total_profit\030\003 \001(\003:\0010\022\026\n\013total_s"
    "tock\030\004 \001(\003:\0010\022\025\n\ntotal_Rate\030\006 \001(\003:\0010\022\023\n\013"
    "debug_infos\030\005 \001(\t\"\313\001\n\035packetl2c_notice_a"
    "ll_bet_info\022e\n\tpacket_id\030\001 \001(\01620.game_on"
    "eyuanfortune_protocols.e_server_msg_type"
    ": e_mst_l2c_notice_gm_all_bet_info\022C\n\rbe"
    "t_info_list\030\002 \003(\0132,.game_oneyuanfortune_"
    "protocols.msg_bet_info2", 5223);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_oneyuanfortune_protocol.proto", &protobuf_RegisterTypes);
  msg_room_info::default_instance_ = new msg_room_info();
  msg_bet_info::default_instance_ = new msg_bet_info();
  msg_bet_info2::default_instance_ = new msg_bet_info2();
  packetc2l_get_room_info::default_instance_ = new packetc2l_get_room_info();
  packetl2c_get_room_info_result::default_instance_ = new packetl2c_get_room_info_result();
  packetc2l_enter_room::default_instance_ = new packetc2l_enter_room();
  packetl2c_enter_room_result::default_instance_ = new packetl2c_enter_room_result();
  history_info::default_instance_ = new history_info();
  packetc2l_get_room_scene_info::default_instance_ = new packetc2l_get_room_scene_info();
  packetl2c_get_room_scene_info_result::default_instance_ = new packetl2c_get_room_scene_info_result();
  packetc2l_leave_room::default_instance_ = new packetc2l_leave_room();
  packetl2c_leave_room_result::default_instance_ = new packetl2c_leave_room_result();
  packetc2l_add_bet::default_instance_ = new packetc2l_add_bet();
  packetl2c_add_bet_result::default_instance_ = new packetl2c_add_bet_result();
  player_info::default_instance_ = new player_info();
  packetc2l_ask_for_player_list::default_instance_ = new packetc2l_ask_for_player_list();
  packetl2c_ask_for_player_list_result::default_instance_ = new packetl2c_ask_for_player_list_result();
  packetc2l_ask_for_history_list::default_instance_ = new packetc2l_ask_for_history_list();
  packetl2c_ask_for_history_list_result::default_instance_ = new packetl2c_ask_for_history_list_result();
  packetl2c_bc_begin_bet::default_instance_ = new packetl2c_bc_begin_bet();
  packetl2c_timing_starts::default_instance_ = new packetl2c_timing_starts();
  packetl2c_bc_begin_award::default_instance_ = new packetl2c_bc_begin_award();
  packetl2c_bc_bet_info::default_instance_ = new packetl2c_bc_bet_info();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetl2c_check_state_result::default_instance_ = new packetl2c_check_state_result();
  packetc2l_gm::default_instance_ = new packetc2l_gm();
  packetc2l_game_control::default_instance_ = new packetc2l_game_control();
  packetl2c_game_control::default_instance_ = new packetl2c_game_control();
  packetl2c_bc_debuginfo::default_instance_ = new packetl2c_bc_debuginfo();
  packetl2c_notice_all_bet_info::default_instance_ = new packetl2c_notice_all_bet_info();
  msg_room_info::default_instance_->InitAsDefaultInstance();
  msg_bet_info::default_instance_->InitAsDefaultInstance();
  msg_bet_info2::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_room::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_room_result::default_instance_->InitAsDefaultInstance();
  history_info::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_room::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_add_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_add_bet_result::default_instance_->InitAsDefaultInstance();
  player_info::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_for_player_list::default_instance_->InitAsDefaultInstance();
  packetl2c_ask_for_player_list_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_for_history_list::default_instance_->InitAsDefaultInstance();
  packetl2c_ask_for_history_list_result::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_begin_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_timing_starts::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_begin_award::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_bet_info::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetl2c_check_state_result::default_instance_->InitAsDefaultInstance();
  packetc2l_gm::default_instance_->InitAsDefaultInstance();
  packetc2l_game_control::default_instance_->InitAsDefaultInstance();
  packetl2c_game_control::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_debuginfo::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_all_bet_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5foneyuanfortune_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5foneyuanfortune_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5foneyuanfortune_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5foneyuanfortune_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_room_info::kRoomidFieldNumber;
#endif  // !_MSC_VER

msg_room_info::msg_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_room_info::InitAsDefaultInstance() {
}

msg_room_info::msg_room_info(const msg_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_room_info::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_room_info::~msg_room_info() {
  SharedDtor();
}

void msg_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_room_info_descriptor_;
}

const msg_room_info& msg_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

msg_room_info* msg_room_info::default_instance_ = NULL;

msg_room_info* msg_room_info::New() const {
  return new msg_room_info;
}

void msg_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_room_info::MergeFrom(const msg_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_room_info::CopyFrom(const msg_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_room_info::IsInitialized() const {

  return true;
}

void msg_room_info::Swap(msg_room_info* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_room_info_descriptor_;
  metadata.reflection = msg_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_info::kPlayerIdFieldNumber;
const int msg_bet_info::kBetGoldFieldNumber;
const int msg_bet_info::kRateFieldNumber;
const int msg_bet_info::kBetCountFieldNumber;
#endif  // !_MSC_VER

msg_bet_info::msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_bet_info::InitAsDefaultInstance() {
}

msg_bet_info::msg_bet_info(const msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  bet_gold_ = GOOGLE_LONGLONG(0);
  rate_ = 0;
  bet_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_info::~msg_bet_info() {
  SharedDtor();
}

void msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_info_descriptor_;
}

const msg_bet_info& msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

msg_bet_info* msg_bet_info::default_instance_ = NULL;

msg_bet_info* msg_bet_info::New() const {
  return new msg_bet_info;
}

void msg_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    bet_gold_ = GOOGLE_LONGLONG(0);
    rate_ = 0;
    bet_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_gold;
        break;
      }

      // optional int64 bet_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // optional int32 rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bet_count;
        break;
      }

      // optional int32 bet_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int64 bet_gold = 2;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_gold(), output);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }

  // optional int32 bet_count = 4;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bet_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int64 bet_gold = 2;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_gold(), target);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }

  // optional int32 bet_count = 4;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bet_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 bet_gold = 2;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold());
    }

    // optional int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 bet_count = 4;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_info::MergeFrom(const msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_info::CopyFrom(const msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_info::IsInitialized() const {

  return true;
}

void msg_bet_info::Swap(msg_bet_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(rate_, other->rate_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_info_descriptor_;
  metadata.reflection = msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_info2::kPlayerIdFieldNumber;
const int msg_bet_info2::kBetGoldFieldNumber;
const int msg_bet_info2::kRateFieldNumber;
const int msg_bet_info2::kBetCountFieldNumber;
const int msg_bet_info2::kGoldFieldNumber;
const int msg_bet_info2::kTableIdFieldNumber;
#endif  // !_MSC_VER

msg_bet_info2::msg_bet_info2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_bet_info2::InitAsDefaultInstance() {
}

msg_bet_info2::msg_bet_info2(const msg_bet_info2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_bet_info2::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  bet_gold_ = GOOGLE_LONGLONG(0);
  rate_ = 0;
  bet_count_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_info2::~msg_bet_info2() {
  SharedDtor();
}

void msg_bet_info2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_info2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_info2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_info2_descriptor_;
}

const msg_bet_info2& msg_bet_info2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

msg_bet_info2* msg_bet_info2::default_instance_ = NULL;

msg_bet_info2* msg_bet_info2::New() const {
  return new msg_bet_info2;
}

void msg_bet_info2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    bet_gold_ = GOOGLE_LONGLONG(0);
    rate_ = 0;
    bet_count_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_info2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_gold;
        break;
      }

      // optional int64 bet_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // optional int32 rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bet_count;
        break;
      }

      // optional int32 bet_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // optional int64 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_table_id;
        break;
      }

      // optional int32 table_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_bet_info2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int64 bet_gold = 2;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_gold(), output);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }

  // optional int32 bet_count = 4;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bet_count(), output);
  }

  // optional int64 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gold(), output);
  }

  // optional int32 table_id = 6;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_bet_info2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int64 bet_gold = 2;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_gold(), target);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }

  // optional int32 bet_count = 4;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bet_count(), target);
  }

  // optional int64 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gold(), target);
  }

  // optional int32 table_id = 6;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_bet_info2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 bet_gold = 2;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold());
    }

    // optional int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 bet_count = 4;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_count());
    }

    // optional int64 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 table_id = 6;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_info2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_info2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_info2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_info2::MergeFrom(const msg_bet_info2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_info2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_info2::CopyFrom(const msg_bet_info2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_info2::IsInitialized() const {

  return true;
}

void msg_bet_info2::Swap(msg_bet_info2* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(rate_, other->rate_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(gold_, other->gold_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_info2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_info2_descriptor_;
  metadata.reflection = msg_bet_info2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_info::packetc2l_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_info::InitAsDefaultInstance() {
}

packetc2l_get_room_info::packetc2l_get_room_info(const packetc2l_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_info::~packetc2l_get_room_info() {
  SharedDtor();
}

void packetc2l_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_info_descriptor_;
}

const packetc2l_get_room_info& packetc2l_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_info* packetc2l_get_room_info::default_instance_ = NULL;

packetc2l_get_room_info* packetc2l_get_room_info::New() const {
  return new packetc2l_get_room_info;
}

void packetc2l_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_info::MergeFrom(const packetc2l_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_info::CopyFrom(const packetc2l_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_info::Swap(packetc2l_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_info_descriptor_;
  metadata.reflection = packetc2l_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_info_result::kRoomListFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_info_result::packetl2c_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_info_result::packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_info_result::~packetl2c_get_room_info_result() {
  SharedDtor();
}

void packetl2c_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_info_result_descriptor_;
}

const packetl2c_get_room_info_result& packetl2c_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_info_result* packetl2c_get_room_info_result::default_instance_ = NULL;

packetl2c_get_room_info_result* packetl2c_get_room_info_result::New() const {
  return new packetl2c_get_room_info_result;
}

void packetl2c_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
  }
  room_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        break;
      }

      // repeated .game_oneyuanfortune_protocols.msg_room_info room_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_oneyuanfortune_protocols.msg_room_info room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_oneyuanfortune_protocols.msg_room_info room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_oneyuanfortune_protocols.msg_room_info room_list = 2;
  total_size += 1 * this->room_list_size();
  for (int i = 0; i < this->room_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_info_result::MergeFrom(const packetl2c_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_list_.MergeFrom(from.room_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::CopyFrom(const packetl2c_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_info_result::Swap(packetl2c_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_list_.Swap(&other->room_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_room::kPacketIdFieldNumber;
const int packetc2l_enter_room::kRoomidFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_room::packetc2l_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_enter_room::InitAsDefaultInstance() {
}

packetc2l_enter_room::packetc2l_enter_room(const packetc2l_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_enter_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_room::~packetc2l_enter_room() {
  SharedDtor();
}

void packetc2l_enter_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_room_descriptor_;
}

const packetc2l_enter_room& packetc2l_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_room* packetc2l_enter_room::default_instance_ = NULL;

packetc2l_enter_room* packetc2l_enter_room::New() const {
  return new packetc2l_enter_room;
}

void packetc2l_enter_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10002;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_enter_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_room::MergeFrom(const packetc2l_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_room::CopyFrom(const packetc2l_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_room::IsInitialized() const {

  return true;
}

void packetc2l_enter_room::Swap(packetc2l_enter_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_room_descriptor_;
  metadata.reflection = packetc2l_enter_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_room_result::kPacketIdFieldNumber;
const int packetl2c_enter_room_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_room_result::packetl2c_enter_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_enter_room_result::InitAsDefaultInstance() {
}

packetl2c_enter_room_result::packetl2c_enter_room_result(const packetl2c_enter_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_enter_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_room_result::~packetl2c_enter_room_result() {
  SharedDtor();
}

void packetl2c_enter_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_enter_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_room_result_descriptor_;
}

const packetl2c_enter_room_result& packetl2c_enter_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_room_result* packetl2c_enter_room_result::default_instance_ = NULL;

packetl2c_enter_room_result* packetl2c_enter_room_result::New() const {
  return new packetl2c_enter_room_result;
}

void packetl2c_enter_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15002;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_enter_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_enter_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_enter_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_room_result::MergeFrom(const packetl2c_enter_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_room_result::CopyFrom(const packetl2c_enter_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_room_result::IsInitialized() const {

  return true;
}

void packetl2c_enter_room_result::Swap(packetl2c_enter_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_room_result_descriptor_;
  metadata.reflection = packetl2c_enter_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int history_info::kNicknameFieldNumber;
const int history_info::kRateFieldNumber;
const int history_info::kGoldFieldNumber;
const int history_info::kViplevelFieldNumber;
const int history_info::kPlayerIdFieldNumber;
const int history_info::kPlayerHeadFieldNumber;
const int history_info::kPlayerHeadFrameFieldNumber;
#endif  // !_MSC_VER

history_info::history_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void history_info::InitAsDefaultInstance() {
}

history_info::history_info(const history_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void history_info::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rate_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  viplevel_ = 0;
  player_id_ = 0;
  player_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_head_frame_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

history_info::~history_info() {
  SharedDtor();
}

void history_info::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (player_head_ != &::google::protobuf::internal::kEmptyString) {
    delete player_head_;
  }
  if (this != default_instance_) {
  }
}

void history_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* history_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return history_info_descriptor_;
}

const history_info& history_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

history_info* history_info::default_instance_ = NULL;

history_info* history_info::New() const {
  return new history_info;
}

void history_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    rate_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    viplevel_ = 0;
    player_id_ = 0;
    if (has_player_head()) {
      if (player_head_ != &::google::protobuf::internal::kEmptyString) {
        player_head_->clear();
      }
    }
    player_head_frame_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool history_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional int32 rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_player_head;
        break;
      }

      // optional string player_head = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_head().data(), this->player_head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_head_frame;
        break;
      }

      // optional int32 player_head_frame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_head_frame_)));
          set_has_player_head_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void history_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rate(), output);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }

  // optional int32 viplevel = 4;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viplevel(), output);
  }

  // optional int32 player_id = 5;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player_id(), output);
  }

  // optional string player_head = 6;
  if (has_player_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_head().data(), this->player_head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->player_head(), output);
  }

  // optional int32 player_head_frame = 7;
  if (has_player_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->player_head_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* history_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional int32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rate(), target);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }

  // optional int32 viplevel = 4;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->viplevel(), target);
  }

  // optional int32 player_id = 5;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player_id(), target);
  }

  // optional string player_head = 6;
  if (has_player_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_head().data(), this->player_head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->player_head(), target);
  }

  // optional int32 player_head_frame = 7;
  if (has_player_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->player_head_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int history_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 viplevel = 4;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 player_id = 5;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_head = 6;
    if (has_player_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_head());
    }

    // optional int32 player_head_frame = 7;
    if (has_player_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_head_frame());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void history_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const history_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const history_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void history_info::MergeFrom(const history_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_head()) {
      set_player_head(from.player_head());
    }
    if (from.has_player_head_frame()) {
      set_player_head_frame(from.player_head_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void history_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void history_info::CopyFrom(const history_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool history_info::IsInitialized() const {

  return true;
}

void history_info::Swap(history_info* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(rate_, other->rate_);
    std::swap(gold_, other->gold_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_head_, other->player_head_);
    std::swap(player_head_frame_, other->player_head_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata history_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = history_info_descriptor_;
  metadata.reflection = history_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_scene_info::~packetc2l_get_room_scene_info() {
  SharedDtor();
}

void packetc2l_get_room_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_scene_info_descriptor_;
}

const packetc2l_get_room_scene_info& packetc2l_get_room_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::default_instance_ = NULL;

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::New() const {
  return new packetc2l_get_room_scene_info;
}

void packetc2l_get_room_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10007;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_scene_info::MergeFrom(const packetc2l_get_room_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_scene_info::CopyFrom(const packetc2l_get_room_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_scene_info::Swap(packetc2l_get_room_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_room_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kRoomIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kRoomStateFieldNumber;
const int packetl2c_get_room_scene_info_result::kCdTimeFieldNumber;
const int packetl2c_get_room_scene_info_result::kBetInfoListFieldNumber;
const int packetl2c_get_room_scene_info_result::kRemainBetCountFieldNumber;
const int packetl2c_get_room_scene_info_result::kSelfRemainCountFieldNumber;
const int packetl2c_get_room_scene_info_result::kPlayerListFieldNumber;
const int packetl2c_get_room_scene_info_result::kTimingFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_scene_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  room_id_ = 0;
  room_state_ = 0;
  cd_time_ = 0;
  remain_bet_count_ = 0;
  self_remain_count_ = 0;
  timing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_scene_info_result::~packetl2c_get_room_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_room_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_scene_info_result_descriptor_;
}

const packetl2c_get_room_scene_info_result& packetl2c_get_room_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::default_instance_ = NULL;

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::New() const {
  return new packetl2c_get_room_scene_info_result;
}

void packetl2c_get_room_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15010;
    room_id_ = 0;
    room_state_ = 0;
    cd_time_ = 0;
    remain_bet_count_ = 0;
    self_remain_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timing_ = false;
  }
  bet_info_list_.Clear();
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_state;
        break;
      }

      // optional .game_oneyuanfortune_protocols.e_game_state room_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_game_state_IsValid(value)) {
            set_room_state(static_cast< ::game_oneyuanfortune_protocols::e_game_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bet_info_list;
        break;
      }

      // repeated .game_oneyuanfortune_protocols.msg_bet_info bet_info_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bet_info_list;
        if (input->ExpectTag(48)) goto parse_remain_bet_count;
        break;
      }

      // optional int32 remain_bet_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_bet_count_)));
          set_has_remain_bet_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_self_remain_count;
        break;
      }

      // optional int32 self_remain_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_remain_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_remain_count_)));
          set_has_self_remain_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_player_list;
        break;
      }

      // repeated .game_oneyuanfortune_protocols.player_info player_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_player_list;
        if (input->ExpectTag(72)) goto parse_timing;
        break;
      }

      // optional bool timing = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timing_)));
          set_has_timing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional .game_oneyuanfortune_protocols.e_game_state room_state = 3;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->room_state(), output);
  }

  // optional int32 cd_time = 4;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cd_time(), output);
  }

  // repeated .game_oneyuanfortune_protocols.msg_bet_info bet_info_list = 5;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bet_info_list(i), output);
  }

  // optional int32 remain_bet_count = 6;
  if (has_remain_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remain_bet_count(), output);
  }

  // optional int32 self_remain_count = 7;
  if (has_self_remain_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->self_remain_count(), output);
  }

  // repeated .game_oneyuanfortune_protocols.player_info player_list = 8;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->player_list(i), output);
  }

  // optional bool timing = 9 [default = false];
  if (has_timing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->timing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional .game_oneyuanfortune_protocols.e_game_state room_state = 3;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->room_state(), target);
  }

  // optional int32 cd_time = 4;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cd_time(), target);
  }

  // repeated .game_oneyuanfortune_protocols.msg_bet_info bet_info_list = 5;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bet_info_list(i), target);
  }

  // optional int32 remain_bet_count = 6;
  if (has_remain_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->remain_bet_count(), target);
  }

  // optional int32 self_remain_count = 7;
  if (has_self_remain_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->self_remain_count(), target);
  }

  // repeated .game_oneyuanfortune_protocols.player_info player_list = 8;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->player_list(i), target);
  }

  // optional bool timing = 9 [default = false];
  if (has_timing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->timing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional .game_oneyuanfortune_protocols.e_game_state room_state = 3;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional int32 cd_time = 4;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

    // optional int32 remain_bet_count = 6;
    if (has_remain_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_bet_count());
    }

    // optional int32 self_remain_count = 7;
    if (has_self_remain_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_remain_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool timing = 9 [default = false];
    if (has_timing()) {
      total_size += 1 + 1;
    }

  }
  // repeated .game_oneyuanfortune_protocols.msg_bet_info bet_info_list = 5;
  total_size += 1 * this->bet_info_list_size();
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info_list(i));
  }

  // repeated .game_oneyuanfortune_protocols.player_info player_list = 8;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_scene_info_result::MergeFrom(const packetl2c_get_room_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_list_.MergeFrom(from.bet_info_list_);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_remain_bet_count()) {
      set_remain_bet_count(from.remain_bet_count());
    }
    if (from.has_self_remain_count()) {
      set_self_remain_count(from.self_remain_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timing()) {
      set_timing(from.timing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_scene_info_result::CopyFrom(const packetl2c_get_room_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_scene_info_result::Swap(packetl2c_get_room_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_state_, other->room_state_);
    std::swap(cd_time_, other->cd_time_);
    bet_info_list_.Swap(&other->bet_info_list_);
    std::swap(remain_bet_count_, other->remain_bet_count_);
    std::swap(self_remain_count_, other->self_remain_count_);
    player_list_.Swap(&other->player_list_);
    std::swap(timing_, other->timing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_room::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_room::packetc2l_leave_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_room::InitAsDefaultInstance() {
}

packetc2l_leave_room::packetc2l_leave_room(const packetc2l_leave_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_room::~packetc2l_leave_room() {
  SharedDtor();
}

void packetc2l_leave_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_room_descriptor_;
}

const packetc2l_leave_room& packetc2l_leave_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_room* packetc2l_leave_room::default_instance_ = NULL;

packetc2l_leave_room* packetc2l_leave_room::New() const {
  return new packetc2l_leave_room;
}

void packetc2l_leave_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10003;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_room::MergeFrom(const packetc2l_leave_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_room::CopyFrom(const packetc2l_leave_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_room::IsInitialized() const {

  return true;
}

void packetc2l_leave_room::Swap(packetc2l_leave_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_room_descriptor_;
  metadata.reflection = packetc2l_leave_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_room_result::kPacketIdFieldNumber;
const int packetl2c_leave_room_result::kResultFieldNumber;
const int packetl2c_leave_room_result::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_room_result::packetl2c_leave_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_leave_room_result::InitAsDefaultInstance() {
}

packetl2c_leave_room_result::packetl2c_leave_room_result(const packetl2c_leave_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_leave_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  result_ = 1;
  player_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_room_result::~packetl2c_leave_room_result() {
  SharedDtor();
}

void packetl2c_leave_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_room_result_descriptor_;
}

const packetl2c_leave_room_result& packetl2c_leave_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_room_result* packetl2c_leave_room_result::default_instance_ = NULL;

packetl2c_leave_room_result* packetl2c_leave_room_result::New() const {
  return new packetl2c_leave_room_result;
}

void packetl2c_leave_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15003;
    result_ = 1;
    player_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_leave_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->player_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_leave_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->player_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_leave_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 player_gold = 3;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_room_result::MergeFrom(const packetl2c_leave_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_room_result::CopyFrom(const packetl2c_leave_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_room_result::IsInitialized() const {

  return true;
}

void packetl2c_leave_room_result::Swap(packetl2c_leave_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_room_result_descriptor_;
  metadata.reflection = packetl2c_leave_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_add_bet::kPacketIdFieldNumber;
const int packetc2l_add_bet::kBetCountFieldNumber;
#endif  // !_MSC_VER

packetc2l_add_bet::packetc2l_add_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_add_bet::InitAsDefaultInstance() {
}

packetc2l_add_bet::packetc2l_add_bet(const packetc2l_add_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_add_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10004;
  bet_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_add_bet::~packetc2l_add_bet() {
  SharedDtor();
}

void packetc2l_add_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_add_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_add_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_add_bet_descriptor_;
}

const packetc2l_add_bet& packetc2l_add_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_add_bet* packetc2l_add_bet::default_instance_ = NULL;

packetc2l_add_bet* packetc2l_add_bet::New() const {
  return new packetc2l_add_bet;
}

void packetc2l_add_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10004;
    bet_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_add_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_count;
        break;
      }

      // optional int32 bet_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_add_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bet_count = 2;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bet_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_add_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bet_count = 2;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bet_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_add_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bet_count = 2;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_add_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_add_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_add_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_add_bet::MergeFrom(const packetc2l_add_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_add_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_add_bet::CopyFrom(const packetc2l_add_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_add_bet::IsInitialized() const {

  return true;
}

void packetc2l_add_bet::Swap(packetc2l_add_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_add_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_add_bet_descriptor_;
  metadata.reflection = packetc2l_add_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_add_bet_result::kPacketIdFieldNumber;
const int packetl2c_add_bet_result::kResultFieldNumber;
const int packetl2c_add_bet_result::kBetCountFieldNumber;
#endif  // !_MSC_VER

packetl2c_add_bet_result::packetl2c_add_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_add_bet_result::InitAsDefaultInstance() {
}

packetl2c_add_bet_result::packetl2c_add_bet_result(const packetl2c_add_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_add_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15004;
  result_ = 2;
  bet_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_add_bet_result::~packetl2c_add_bet_result() {
  SharedDtor();
}

void packetl2c_add_bet_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_add_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_add_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_add_bet_result_descriptor_;
}

const packetl2c_add_bet_result& packetl2c_add_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_add_bet_result* packetl2c_add_bet_result::default_instance_ = NULL;

packetl2c_add_bet_result* packetl2c_add_bet_result::New() const {
  return new packetl2c_add_bet_result;
}

void packetl2c_add_bet_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15004;
    result_ = 2;
    bet_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_add_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_count;
        break;
      }

      // optional int32 bet_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_add_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 bet_count = 3;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bet_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_add_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 bet_count = 3;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bet_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_add_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 bet_count = 3;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_add_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_add_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_add_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_add_bet_result::MergeFrom(const packetl2c_add_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_add_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_add_bet_result::CopyFrom(const packetl2c_add_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_add_bet_result::IsInitialized() const {

  return true;
}

void packetl2c_add_bet_result::Swap(packetl2c_add_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_add_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_add_bet_result_descriptor_;
  metadata.reflection = packetl2c_add_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_info::kPlayerIdFieldNumber;
const int player_info::kPlayerNicknameFieldNumber;
const int player_info::kPlayerHeadFrameFieldNumber;
const int player_info::kPlayerHeadCustomFieldNumber;
const int player_info::kPlayerGoldFieldNumber;
const int player_info::kPlayerSexFieldNumber;
const int player_info::kPlayerVipLvFieldNumber;
#endif  // !_MSC_VER

player_info::player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_info::InitAsDefaultInstance() {
}

player_info::player_info(const player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_head_frame_ = 0;
  player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  player_vip_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_info::~player_info() {
  SharedDtor();
}

void player_info::SharedDtor() {
  if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete player_nickname_;
  }
  if (player_head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete player_head_custom_;
  }
  if (this != default_instance_) {
  }
}

void player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_info_descriptor_;
}

const player_info& player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

player_info* player_info::default_instance_ = NULL;

player_info* player_info::New() const {
  return new player_info;
}

void player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_nickname()) {
      if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
        player_nickname_->clear();
      }
    }
    player_head_frame_ = 0;
    if (has_player_head_custom()) {
      if (player_head_custom_ != &::google::protobuf::internal::kEmptyString) {
        player_head_custom_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
    player_sex_ = 0;
    player_vip_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_nickname;
        break;
      }

      // optional string player_nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_nickname().data(), this->player_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_head_frame;
        break;
      }

      // optional int32 player_head_frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_head_frame_)));
          set_has_player_head_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_head_custom;
        break;
      }

      // optional string player_head_custom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_head_custom().data(), this->player_head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_vip_lv;
        break;
      }

      // optional int32 player_vip_lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_vip_lv_)));
          set_has_player_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_nickname(), output);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_head_frame(), output);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->player_head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_sex(), output);
  }

  // optional int32 player_vip_lv = 7;
  if (has_player_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->player_vip_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_nickname(), target);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_head_frame(), target);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_sex(), target);
  }

  // optional int32 player_vip_lv = 7;
  if (has_player_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->player_vip_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_nickname = 2;
    if (has_player_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_nickname());
    }

    // optional int32 player_head_frame = 3;
    if (has_player_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_head_frame());
    }

    // optional string player_head_custom = 4;
    if (has_player_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 6;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 player_vip_lv = 7;
    if (has_player_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_vip_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_info::MergeFrom(const player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_nickname()) {
      set_player_nickname(from.player_nickname());
    }
    if (from.has_player_head_frame()) {
      set_player_head_frame(from.player_head_frame());
    }
    if (from.has_player_head_custom()) {
      set_player_head_custom(from.player_head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_player_vip_lv()) {
      set_player_vip_lv(from.player_vip_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_info::CopyFrom(const player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_info::IsInitialized() const {

  return true;
}

void player_info::Swap(player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_nickname_, other->player_nickname_);
    std::swap(player_head_frame_, other->player_head_frame_);
    std::swap(player_head_custom_, other->player_head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(player_vip_lv_, other->player_vip_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_info_descriptor_;
  metadata.reflection = player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_for_player_list::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_for_player_list::packetc2l_ask_for_player_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_for_player_list::InitAsDefaultInstance() {
}

packetc2l_ask_for_player_list::packetc2l_ask_for_player_list(const packetc2l_ask_for_player_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_for_player_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10013;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_for_player_list::~packetc2l_ask_for_player_list() {
  SharedDtor();
}

void packetc2l_ask_for_player_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_for_player_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_for_player_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_for_player_list_descriptor_;
}

const packetc2l_ask_for_player_list& packetc2l_ask_for_player_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_for_player_list* packetc2l_ask_for_player_list::default_instance_ = NULL;

packetc2l_ask_for_player_list* packetc2l_ask_for_player_list::New() const {
  return new packetc2l_ask_for_player_list;
}

void packetc2l_ask_for_player_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10013;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_for_player_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_for_player_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_for_player_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_for_player_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_for_player_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_for_player_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_for_player_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_for_player_list::MergeFrom(const packetc2l_ask_for_player_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_for_player_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_for_player_list::CopyFrom(const packetc2l_ask_for_player_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_for_player_list::IsInitialized() const {

  return true;
}

void packetc2l_ask_for_player_list::Swap(packetc2l_ask_for_player_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_for_player_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_for_player_list_descriptor_;
  metadata.reflection = packetc2l_ask_for_player_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_ask_for_player_list_result::kPacketIdFieldNumber;
const int packetl2c_ask_for_player_list_result::kPlayerListFieldNumber;
#endif  // !_MSC_VER

packetl2c_ask_for_player_list_result::packetl2c_ask_for_player_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_ask_for_player_list_result::InitAsDefaultInstance() {
}

packetl2c_ask_for_player_list_result::packetl2c_ask_for_player_list_result(const packetl2c_ask_for_player_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_ask_for_player_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15020;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_ask_for_player_list_result::~packetl2c_ask_for_player_list_result() {
  SharedDtor();
}

void packetl2c_ask_for_player_list_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_ask_for_player_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_ask_for_player_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_ask_for_player_list_result_descriptor_;
}

const packetl2c_ask_for_player_list_result& packetl2c_ask_for_player_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_ask_for_player_list_result* packetl2c_ask_for_player_list_result::default_instance_ = NULL;

packetl2c_ask_for_player_list_result* packetl2c_ask_for_player_list_result::New() const {
  return new packetl2c_ask_for_player_list_result;
}

void packetl2c_ask_for_player_list_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15020;
  }
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_ask_for_player_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        break;
      }

      // repeated .game_oneyuanfortune_protocols.player_info player_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_ask_for_player_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_oneyuanfortune_protocols.player_info player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_ask_for_player_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_oneyuanfortune_protocols.player_info player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_ask_for_player_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_oneyuanfortune_protocols.player_info player_list = 2;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_ask_for_player_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_ask_for_player_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_ask_for_player_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_ask_for_player_list_result::MergeFrom(const packetl2c_ask_for_player_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_ask_for_player_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_ask_for_player_list_result::CopyFrom(const packetl2c_ask_for_player_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_ask_for_player_list_result::IsInitialized() const {

  return true;
}

void packetl2c_ask_for_player_list_result::Swap(packetl2c_ask_for_player_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_ask_for_player_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_ask_for_player_list_result_descriptor_;
  metadata.reflection = packetl2c_ask_for_player_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_for_history_list::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_for_history_list::packetc2l_ask_for_history_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_for_history_list::InitAsDefaultInstance() {
}

packetc2l_ask_for_history_list::packetc2l_ask_for_history_list(const packetc2l_ask_for_history_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_for_history_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10015;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_for_history_list::~packetc2l_ask_for_history_list() {
  SharedDtor();
}

void packetc2l_ask_for_history_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_for_history_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_for_history_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_for_history_list_descriptor_;
}

const packetc2l_ask_for_history_list& packetc2l_ask_for_history_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_for_history_list* packetc2l_ask_for_history_list::default_instance_ = NULL;

packetc2l_ask_for_history_list* packetc2l_ask_for_history_list::New() const {
  return new packetc2l_ask_for_history_list;
}

void packetc2l_ask_for_history_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10015;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_for_history_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_for_history_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_for_history_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_for_history_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_for_history_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_for_history_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_for_history_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_for_history_list::MergeFrom(const packetc2l_ask_for_history_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_for_history_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_for_history_list::CopyFrom(const packetc2l_ask_for_history_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_for_history_list::IsInitialized() const {

  return true;
}

void packetc2l_ask_for_history_list::Swap(packetc2l_ask_for_history_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_for_history_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_for_history_list_descriptor_;
  metadata.reflection = packetc2l_ask_for_history_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_ask_for_history_list_result::kPacketIdFieldNumber;
const int packetl2c_ask_for_history_list_result::kHistoryListFieldNumber;
const int packetl2c_ask_for_history_list_result::kLuckyPlayerFieldNumber;
#endif  // !_MSC_VER

packetl2c_ask_for_history_list_result::packetl2c_ask_for_history_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_ask_for_history_list_result::InitAsDefaultInstance() {
  lucky_player_ = const_cast< ::game_oneyuanfortune_protocols::history_info*>(&::game_oneyuanfortune_protocols::history_info::default_instance());
}

packetl2c_ask_for_history_list_result::packetl2c_ask_for_history_list_result(const packetl2c_ask_for_history_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_ask_for_history_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15022;
  lucky_player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_ask_for_history_list_result::~packetl2c_ask_for_history_list_result() {
  SharedDtor();
}

void packetl2c_ask_for_history_list_result::SharedDtor() {
  if (this != default_instance_) {
    delete lucky_player_;
  }
}

void packetl2c_ask_for_history_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_ask_for_history_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_ask_for_history_list_result_descriptor_;
}

const packetl2c_ask_for_history_list_result& packetl2c_ask_for_history_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_ask_for_history_list_result* packetl2c_ask_for_history_list_result::default_instance_ = NULL;

packetl2c_ask_for_history_list_result* packetl2c_ask_for_history_list_result::New() const {
  return new packetl2c_ask_for_history_list_result;
}

void packetl2c_ask_for_history_list_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15022;
    if (has_lucky_player()) {
      if (lucky_player_ != NULL) lucky_player_->::game_oneyuanfortune_protocols::history_info::Clear();
    }
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_ask_for_history_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        break;
      }

      // repeated .game_oneyuanfortune_protocols.history_info history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        if (input->ExpectTag(26)) goto parse_lucky_player;
        break;
      }

      // optional .game_oneyuanfortune_protocols.history_info lucky_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lucky_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lucky_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_ask_for_history_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_oneyuanfortune_protocols.history_info history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_list(i), output);
  }

  // optional .game_oneyuanfortune_protocols.history_info lucky_player = 3;
  if (has_lucky_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lucky_player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_ask_for_history_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_oneyuanfortune_protocols.history_info history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history_list(i), target);
  }

  // optional .game_oneyuanfortune_protocols.history_info lucky_player = 3;
  if (has_lucky_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lucky_player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_ask_for_history_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_oneyuanfortune_protocols.history_info lucky_player = 3;
    if (has_lucky_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lucky_player());
    }

  }
  // repeated .game_oneyuanfortune_protocols.history_info history_list = 2;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_ask_for_history_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_ask_for_history_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_ask_for_history_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_ask_for_history_list_result::MergeFrom(const packetl2c_ask_for_history_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lucky_player()) {
      mutable_lucky_player()->::game_oneyuanfortune_protocols::history_info::MergeFrom(from.lucky_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_ask_for_history_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_ask_for_history_list_result::CopyFrom(const packetl2c_ask_for_history_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_ask_for_history_list_result::IsInitialized() const {

  return true;
}

void packetl2c_ask_for_history_list_result::Swap(packetl2c_ask_for_history_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(lucky_player_, other->lucky_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_ask_for_history_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_ask_for_history_list_result_descriptor_;
  metadata.reflection = packetl2c_ask_for_history_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_begin_bet::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_begin_bet::packetl2c_bc_begin_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_begin_bet::InitAsDefaultInstance() {
}

packetl2c_bc_begin_bet::packetl2c_bc_begin_bet(const packetl2c_bc_begin_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_begin_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_begin_bet::~packetl2c_bc_begin_bet() {
  SharedDtor();
}

void packetl2c_bc_begin_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_begin_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_begin_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_begin_bet_descriptor_;
}

const packetl2c_bc_begin_bet& packetl2c_bc_begin_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_begin_bet* packetl2c_bc_begin_bet::default_instance_ = NULL;

packetl2c_bc_begin_bet* packetl2c_bc_begin_bet::New() const {
  return new packetl2c_bc_begin_bet;
}

void packetl2c_bc_begin_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15007;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_begin_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_begin_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_begin_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_begin_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_begin_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_begin_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_begin_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_begin_bet::MergeFrom(const packetl2c_bc_begin_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_begin_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_begin_bet::CopyFrom(const packetl2c_bc_begin_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_begin_bet::IsInitialized() const {

  return true;
}

void packetl2c_bc_begin_bet::Swap(packetl2c_bc_begin_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_begin_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_begin_bet_descriptor_;
  metadata.reflection = packetl2c_bc_begin_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_timing_starts::kPacketIdFieldNumber;
const int packetl2c_timing_starts::kCdTimeFieldNumber;
#endif  // !_MSC_VER

packetl2c_timing_starts::packetl2c_timing_starts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_timing_starts::InitAsDefaultInstance() {
}

packetl2c_timing_starts::packetl2c_timing_starts(const packetl2c_timing_starts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_timing_starts::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15027;
  cd_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_timing_starts::~packetl2c_timing_starts() {
  SharedDtor();
}

void packetl2c_timing_starts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_timing_starts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_timing_starts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_timing_starts_descriptor_;
}

const packetl2c_timing_starts& packetl2c_timing_starts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_timing_starts* packetl2c_timing_starts::default_instance_ = NULL;

packetl2c_timing_starts* packetl2c_timing_starts::New() const {
  return new packetl2c_timing_starts;
}

void packetl2c_timing_starts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15027;
    cd_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_timing_starts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_l2c_timing_starts];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_timing_starts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_l2c_timing_starts];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 cd_time = 2;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_timing_starts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_l2c_timing_starts];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 cd_time = 2;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_timing_starts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_l2c_timing_starts];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 cd_time = 2;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_timing_starts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_timing_starts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_timing_starts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_timing_starts::MergeFrom(const packetl2c_timing_starts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_timing_starts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_timing_starts::CopyFrom(const packetl2c_timing_starts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_timing_starts::IsInitialized() const {

  return true;
}

void packetl2c_timing_starts::Swap(packetl2c_timing_starts* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_timing_starts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_timing_starts_descriptor_;
  metadata.reflection = packetl2c_timing_starts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_begin_award::kPacketIdFieldNumber;
const int packetl2c_bc_begin_award::kWinnerIdFieldNumber;
const int packetl2c_bc_begin_award::kTotalBetFieldNumber;
const int packetl2c_bc_begin_award::kPlayerListFieldNumber;
const int packetl2c_bc_begin_award::kCdTimeFieldNumber;
const int packetl2c_bc_begin_award::kRandomSeedFieldNumber;
const int packetl2c_bc_begin_award::kRewardGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_begin_award::packetl2c_bc_begin_award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_begin_award::InitAsDefaultInstance() {
}

packetl2c_bc_begin_award::packetl2c_bc_begin_award(const packetl2c_bc_begin_award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_begin_award::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15008;
  winner_id_ = 0;
  total_bet_ = GOOGLE_LONGLONG(0);
  cd_time_ = 0;
  random_seed_ = 0;
  reward_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_begin_award::~packetl2c_bc_begin_award() {
  SharedDtor();
}

void packetl2c_bc_begin_award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_begin_award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_begin_award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_begin_award_descriptor_;
}

const packetl2c_bc_begin_award& packetl2c_bc_begin_award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_begin_award* packetl2c_bc_begin_award::default_instance_ = NULL;

packetl2c_bc_begin_award* packetl2c_bc_begin_award::New() const {
  return new packetl2c_bc_begin_award;
}

void packetl2c_bc_begin_award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15008;
    winner_id_ = 0;
    total_bet_ = GOOGLE_LONGLONG(0);
    cd_time_ = 0;
    random_seed_ = 0;
    reward_gold_ = 0;
  }
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_begin_award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winner_id;
        break;
      }

      // optional int32 winner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_id_)));
          set_has_winner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_bet;
        break;
      }

      // optional int64 total_bet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bet_)));
          set_has_total_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        break;
      }

      // repeated .game_oneyuanfortune_protocols.player_info player_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        if (input->ExpectTag(40)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_random_seed;
        break;
      }

      // optional int32 random_seed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reward_gold;
        break;
      }

      // optional int32 reward_gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_gold_)));
          set_has_reward_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_begin_award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 winner_id = 2;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winner_id(), output);
  }

  // optional int64 total_bet = 3;
  if (has_total_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_bet(), output);
  }

  // repeated .game_oneyuanfortune_protocols.player_info player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(i), output);
  }

  // optional int32 cd_time = 5;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cd_time(), output);
  }

  // optional int32 random_seed = 6;
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->random_seed(), output);
  }

  // optional int32 reward_gold = 7;
  if (has_reward_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reward_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_begin_award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 winner_id = 2;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winner_id(), target);
  }

  // optional int64 total_bet = 3;
  if (has_total_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_bet(), target);
  }

  // repeated .game_oneyuanfortune_protocols.player_info player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_list(i), target);
  }

  // optional int32 cd_time = 5;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cd_time(), target);
  }

  // optional int32 random_seed = 6;
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->random_seed(), target);
  }

  // optional int32 reward_gold = 7;
  if (has_reward_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reward_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_begin_award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 winner_id = 2;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_id());
    }

    // optional int64 total_bet = 3;
    if (has_total_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_bet());
    }

    // optional int32 cd_time = 5;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

    // optional int32 random_seed = 6;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_seed());
    }

    // optional int32 reward_gold = 7;
    if (has_reward_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_gold());
    }

  }
  // repeated .game_oneyuanfortune_protocols.player_info player_list = 4;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_begin_award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_begin_award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_begin_award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_begin_award::MergeFrom(const packetl2c_bc_begin_award& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_winner_id()) {
      set_winner_id(from.winner_id());
    }
    if (from.has_total_bet()) {
      set_total_bet(from.total_bet());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_reward_gold()) {
      set_reward_gold(from.reward_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_begin_award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_begin_award::CopyFrom(const packetl2c_bc_begin_award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_begin_award::IsInitialized() const {

  return true;
}

void packetl2c_bc_begin_award::Swap(packetl2c_bc_begin_award* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(winner_id_, other->winner_id_);
    std::swap(total_bet_, other->total_bet_);
    player_list_.Swap(&other->player_list_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(reward_gold_, other->reward_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_begin_award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_begin_award_descriptor_;
  metadata.reflection = packetl2c_bc_begin_award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_bet_info::kPacketIdFieldNumber;
const int packetl2c_bc_bet_info::kBetInfoListFieldNumber;
const int packetl2c_bc_bet_info::kPinfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_bet_info::packetl2c_bc_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_bet_info::InitAsDefaultInstance() {
  bet_info_list_ = const_cast< ::game_oneyuanfortune_protocols::msg_bet_info*>(&::game_oneyuanfortune_protocols::msg_bet_info::default_instance());
  pinfo_ = const_cast< ::game_oneyuanfortune_protocols::player_info*>(&::game_oneyuanfortune_protocols::player_info::default_instance());
}

packetl2c_bc_bet_info::packetl2c_bc_bet_info(const packetl2c_bc_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  bet_info_list_ = NULL;
  pinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_bet_info::~packetl2c_bc_bet_info() {
  SharedDtor();
}

void packetl2c_bc_bet_info::SharedDtor() {
  if (this != default_instance_) {
    delete bet_info_list_;
    delete pinfo_;
  }
}

void packetl2c_bc_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_bet_info_descriptor_;
}

const packetl2c_bc_bet_info& packetl2c_bc_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_bet_info* packetl2c_bc_bet_info::default_instance_ = NULL;

packetl2c_bc_bet_info* packetl2c_bc_bet_info::New() const {
  return new packetl2c_bc_bet_info;
}

void packetl2c_bc_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15009;
    if (has_bet_info_list()) {
      if (bet_info_list_ != NULL) bet_info_list_->::game_oneyuanfortune_protocols::msg_bet_info::Clear();
    }
    if (has_pinfo()) {
      if (pinfo_ != NULL) pinfo_->::game_oneyuanfortune_protocols::player_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_bet_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        break;
      }

      // optional .game_oneyuanfortune_protocols.msg_bet_info bet_info_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bet_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pinfo;
        break;
      }

      // optional .game_oneyuanfortune_protocols.player_info pinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_oneyuanfortune_protocols.msg_bet_info bet_info_list = 2;
  if (has_bet_info_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info_list(), output);
  }

  // optional .game_oneyuanfortune_protocols.player_info pinfo = 3;
  if (has_pinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_oneyuanfortune_protocols.msg_bet_info bet_info_list = 2;
  if (has_bet_info_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info_list(), target);
  }

  // optional .game_oneyuanfortune_protocols.player_info pinfo = 3;
  if (has_pinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_oneyuanfortune_protocols.msg_bet_info bet_info_list = 2;
    if (has_bet_info_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bet_info_list());
    }

    // optional .game_oneyuanfortune_protocols.player_info pinfo = 3;
    if (has_pinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_bet_info::MergeFrom(const packetl2c_bc_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bet_info_list()) {
      mutable_bet_info_list()->::game_oneyuanfortune_protocols::msg_bet_info::MergeFrom(from.bet_info_list());
    }
    if (from.has_pinfo()) {
      mutable_pinfo()->::game_oneyuanfortune_protocols::player_info::MergeFrom(from.pinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_bet_info::CopyFrom(const packetl2c_bc_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_bet_info::IsInitialized() const {

  return true;
}

void packetl2c_bc_bet_info::Swap(packetl2c_bc_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bet_info_list_, other->bet_info_list_);
    std::swap(pinfo_, other->pinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_bet_info_descriptor_;
  metadata.reflection = packetl2c_bc_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10008;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_check_state_result::kPacketIdFieldNumber;
const int packetl2c_check_state_result::kIsIntableFieldNumber;
#endif  // !_MSC_VER

packetl2c_check_state_result::packetl2c_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_check_state_result::InitAsDefaultInstance() {
}

packetl2c_check_state_result::packetl2c_check_state_result(const packetl2c_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15013;
  is_intable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_check_state_result::~packetl2c_check_state_result() {
  SharedDtor();
}

void packetl2c_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_check_state_result_descriptor_;
}

const packetl2c_check_state_result& packetl2c_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_check_state_result* packetl2c_check_state_result::default_instance_ = NULL;

packetl2c_check_state_result* packetl2c_check_state_result::New() const {
  return new packetl2c_check_state_result;
}

void packetl2c_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15013;
    is_intable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_intable;
        break;
      }

      // optional bool is_intable = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_intable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_intable_)));
          set_has_is_intable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool is_intable = 2 [default = false];
  if (has_is_intable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_intable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool is_intable = 2 [default = false];
  if (has_is_intable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_intable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool is_intable = 2 [default = false];
    if (has_is_intable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_check_state_result::MergeFrom(const packetl2c_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_is_intable()) {
      set_is_intable(from.is_intable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_check_state_result::CopyFrom(const packetl2c_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_check_state_result::IsInitialized() const {

  return true;
}

void packetl2c_check_state_result::Swap(packetl2c_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(is_intable_, other->is_intable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_check_state_result_descriptor_;
  metadata.reflection = packetl2c_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_gm::kPacketIdFieldNumber;
const int packetc2l_gm::kGmMaxFieldNumber;
#endif  // !_MSC_VER

packetc2l_gm::packetc2l_gm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_gm::InitAsDefaultInstance() {
}

packetc2l_gm::packetc2l_gm(const packetc2l_gm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_gm::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10009;
  gm_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_gm::~packetc2l_gm() {
  SharedDtor();
}

void packetc2l_gm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_gm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_gm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_gm_descriptor_;
}

const packetc2l_gm& packetc2l_gm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_gm* packetc2l_gm::default_instance_ = NULL;

packetc2l_gm* packetc2l_gm::New() const {
  return new packetc2l_gm;
}

void packetc2l_gm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10009;
    gm_max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_gm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gm_max;
        break;
      }

      // optional int32 gm_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gm_max_)));
          set_has_gm_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_gm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 gm_max = 2;
  if (has_gm_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gm_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_gm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 gm_max = 2;
  if (has_gm_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gm_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_gm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 gm_max = 2;
    if (has_gm_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gm_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_gm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_gm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_gm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_gm::MergeFrom(const packetc2l_gm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gm_max()) {
      set_gm_max(from.gm_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_gm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_gm::CopyFrom(const packetc2l_gm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_gm::IsInitialized() const {

  return true;
}

void packetc2l_gm::Swap(packetc2l_gm* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gm_max_, other->gm_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_gm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_gm_descriptor_;
  metadata.reflection = packetc2l_gm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_game_control::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_game_control::packetc2l_game_control()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_game_control::InitAsDefaultInstance() {
}

packetc2l_game_control::packetc2l_game_control(const packetc2l_game_control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_game_control::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10016;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_game_control::~packetc2l_game_control() {
  SharedDtor();
}

void packetc2l_game_control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_game_control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_game_control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_game_control_descriptor_;
}

const packetc2l_game_control& packetc2l_game_control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_game_control* packetc2l_game_control::default_instance_ = NULL;

packetc2l_game_control* packetc2l_game_control::New() const {
  return new packetc2l_game_control;
}

void packetc2l_game_control::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10016;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_game_control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_game_control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_game_control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_game_control::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_game_control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_game_control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_game_control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_game_control::MergeFrom(const packetc2l_game_control& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_game_control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_game_control::CopyFrom(const packetc2l_game_control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_game_control::IsInitialized() const {

  return true;
}

void packetc2l_game_control::Swap(packetc2l_game_control* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_game_control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_game_control_descriptor_;
  metadata.reflection = packetc2l_game_control_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_game_control::kPacketIdFieldNumber;
const int packetl2c_game_control::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_game_control::packetl2c_game_control()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_game_control::InitAsDefaultInstance() {
}

packetl2c_game_control::packetl2c_game_control(const packetl2c_game_control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_game_control::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15026;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_game_control::~packetl2c_game_control() {
  SharedDtor();
}

void packetl2c_game_control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_game_control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_game_control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_game_control_descriptor_;
}

const packetl2c_game_control& packetl2c_game_control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_game_control* packetl2c_game_control::default_instance_ = NULL;

packetl2c_game_control* packetl2c_game_control::New() const {
  return new packetl2c_game_control;
}

void packetl2c_game_control::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15026;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_game_control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_game_control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_game_control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_game_control::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_game_control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_game_control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_game_control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_game_control::MergeFrom(const packetl2c_game_control& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_game_control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_game_control::CopyFrom(const packetl2c_game_control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_game_control::IsInitialized() const {

  return true;
}

void packetl2c_game_control::Swap(packetl2c_game_control* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_game_control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_game_control_descriptor_;
  metadata.reflection = packetl2c_game_control_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_debuginfo::kPacketIdFieldNumber;
const int packetl2c_bc_debuginfo::kPlayerIdFieldNumber;
const int packetl2c_bc_debuginfo::kTotalProfitFieldNumber;
const int packetl2c_bc_debuginfo::kTotalStockFieldNumber;
const int packetl2c_bc_debuginfo::kTotalRateFieldNumber;
const int packetl2c_bc_debuginfo::kDebugInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_debuginfo::InitAsDefaultInstance() {
}

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15024;
  player_id_ = 0;
  total_profit_ = GOOGLE_LONGLONG(0);
  total_stock_ = GOOGLE_LONGLONG(0);
  total_rate_ = GOOGLE_LONGLONG(0);
  debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_debuginfo::~packetl2c_bc_debuginfo() {
  SharedDtor();
}

void packetl2c_bc_debuginfo::SharedDtor() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_bc_debuginfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_debuginfo_descriptor_;
}

const packetl2c_bc_debuginfo& packetl2c_bc_debuginfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::default_instance_ = NULL;

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::New() const {
  return new packetl2c_bc_debuginfo;
}

void packetl2c_bc_debuginfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15024;
    player_id_ = 0;
    total_profit_ = GOOGLE_LONGLONG(0);
    total_stock_ = GOOGLE_LONGLONG(0);
    total_rate_ = GOOGLE_LONGLONG(0);
    if (has_debug_infos()) {
      if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
        debug_infos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_debuginfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_profit;
        break;
      }

      // optional int64 total_profit = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_profit_)));
          set_has_total_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_stock;
        break;
      }

      // optional int64 total_stock = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_stock_)));
          set_has_total_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_debug_infos;
        break;
      }

      // optional string debug_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_infos().data(), this->debug_infos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_Rate;
        break;
      }

      // optional int64 total_Rate = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_rate_)));
          set_has_total_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_debuginfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_profit(), output);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_stock(), output);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->debug_infos(), output);
  }

  // optional int64 total_Rate = 6 [default = 0];
  if (has_total_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_debuginfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_profit(), target);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_stock(), target);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug_infos(), target);
  }

  // optional int64 total_Rate = 6 [default = 0];
  if (has_total_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_debuginfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 total_profit = 3 [default = 0];
    if (has_total_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_profit());
    }

    // optional int64 total_stock = 4 [default = 0];
    if (has_total_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_stock());
    }

    // optional int64 total_Rate = 6 [default = 0];
    if (has_total_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_rate());
    }

    // optional string debug_infos = 5;
    if (has_debug_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_debuginfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_debuginfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_debuginfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_debuginfo::MergeFrom(const packetl2c_bc_debuginfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_total_profit()) {
      set_total_profit(from.total_profit());
    }
    if (from.has_total_stock()) {
      set_total_stock(from.total_stock());
    }
    if (from.has_total_rate()) {
      set_total_rate(from.total_rate());
    }
    if (from.has_debug_infos()) {
      set_debug_infos(from.debug_infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_debuginfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::CopyFrom(const packetl2c_bc_debuginfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_debuginfo::IsInitialized() const {

  return true;
}

void packetl2c_bc_debuginfo::Swap(packetl2c_bc_debuginfo* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(total_profit_, other->total_profit_);
    std::swap(total_stock_, other->total_stock_);
    std::swap(total_rate_, other->total_rate_);
    std::swap(debug_infos_, other->debug_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_debuginfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_debuginfo_descriptor_;
  metadata.reflection = packetl2c_bc_debuginfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_all_bet_info::kPacketIdFieldNumber;
const int packetl2c_notice_all_bet_info::kBetInfoListFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_all_bet_info::packetl2c_notice_all_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_all_bet_info::InitAsDefaultInstance() {
}

packetl2c_notice_all_bet_info::packetl2c_notice_all_bet_info(const packetl2c_notice_all_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_all_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15025;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_all_bet_info::~packetl2c_notice_all_bet_info() {
  SharedDtor();
}

void packetl2c_notice_all_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_all_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_all_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_all_bet_info_descriptor_;
}

const packetl2c_notice_all_bet_info& packetl2c_notice_all_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5foneyuanfortune_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_all_bet_info* packetl2c_notice_all_bet_info::default_instance_ = NULL;

packetl2c_notice_all_bet_info* packetl2c_notice_all_bet_info::New() const {
  return new packetl2c_notice_all_bet_info;
}

void packetl2c_notice_all_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15025;
  }
  bet_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_all_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_oneyuanfortune_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_oneyuanfortune_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        break;
      }

      // repeated .game_oneyuanfortune_protocols.msg_bet_info2 bet_info_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_all_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_oneyuanfortune_protocols.msg_bet_info2 bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_all_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_oneyuanfortune_protocols.msg_bet_info2 bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_all_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_oneyuanfortune_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_oneyuanfortune_protocols.msg_bet_info2 bet_info_list = 2;
  total_size += 1 * this->bet_info_list_size();
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_all_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_all_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_all_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_all_bet_info::MergeFrom(const packetl2c_notice_all_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_list_.MergeFrom(from.bet_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_all_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_all_bet_info::CopyFrom(const packetl2c_notice_all_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_all_bet_info::IsInitialized() const {

  return true;
}

void packetl2c_notice_all_bet_info::Swap(packetl2c_notice_all_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_info_list_.Swap(&other->bet_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_all_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_all_bet_info_descriptor_;
  metadata.reflection = packetl2c_notice_all_bet_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_oneyuanfortune_protocols

// @@protoc_insertion_point(global_scope)
