// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_share.proto

#ifndef PROTOBUF_client2world_5fshare_2eproto__INCLUDED
#define PROTOBUF_client2world_5fshare_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fshare_2eproto();
void protobuf_AssignDesc_client2world_5fshare_2eproto();
void protobuf_ShutdownFile_client2world_5fshare_2eproto();

class packetw2c_notify_share;
class packetc2w_receive_share_reward;
class packetw2c_receive_share_reward_result;

// ===================================================================

class packetw2c_notify_share : public ::google::protobuf::Message {
 public:
  packetw2c_notify_share();
  virtual ~packetw2c_notify_share();

  packetw2c_notify_share(const packetw2c_notify_share& from);

  inline packetw2c_notify_share& operator=(const packetw2c_notify_share& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_notify_share& default_instance();

  void Swap(packetw2c_notify_share* other);

  // implements Message ----------------------------------------------

  packetw2c_notify_share* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_notify_share& from);
  void MergeFrom(const packetw2c_notify_share& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_share];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int64 win_gold = 4;
  inline bool has_win_gold() const;
  inline void clear_win_gold();
  static const int kWinGoldFieldNumber = 4;
  inline ::google::protobuf::int64 win_gold() const;
  inline void set_win_gold(::google::protobuf::int64 value);

  // optional int32 share_reward = 5;
  inline bool has_share_reward() const;
  inline void clear_share_reward();
  static const int kShareRewardFieldNumber = 5;
  inline ::google::protobuf::int32 share_reward() const;
  inline void set_share_reward(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_notify_share)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_win_gold();
  inline void clear_has_win_gold();
  inline void set_has_share_reward();
  inline void clear_has_share_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 game_id_;
  ::google::protobuf::int64 win_gold_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 share_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fshare_2eproto();
  friend void protobuf_AssignDesc_client2world_5fshare_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fshare_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_notify_share* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_receive_share_reward : public ::google::protobuf::Message {
 public:
  packetc2w_receive_share_reward();
  virtual ~packetc2w_receive_share_reward();

  packetc2w_receive_share_reward(const packetc2w_receive_share_reward& from);

  inline packetc2w_receive_share_reward& operator=(const packetc2w_receive_share_reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_receive_share_reward& default_instance();

  void Swap(packetc2w_receive_share_reward* other);

  // implements Message ----------------------------------------------

  packetc2w_receive_share_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_receive_share_reward& from);
  void MergeFrom(const packetc2w_receive_share_reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_share_reward];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_receive_share_reward)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fshare_2eproto();
  friend void protobuf_AssignDesc_client2world_5fshare_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fshare_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_receive_share_reward* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_receive_share_reward_result : public ::google::protobuf::Message {
 public:
  packetw2c_receive_share_reward_result();
  virtual ~packetw2c_receive_share_reward_result();

  packetw2c_receive_share_reward_result(const packetw2c_receive_share_reward_result& from);

  inline packetw2c_receive_share_reward_result& operator=(const packetw2c_receive_share_reward_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_receive_share_reward_result& default_instance();

  void Swap(packetw2c_receive_share_reward_result* other);

  // implements Message ----------------------------------------------

  packetw2c_receive_share_reward_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_receive_share_reward_result& from);
  void MergeFrom(const packetw2c_receive_share_reward_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_share_reward_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline ::google::protobuf::int64 reward() const;
  inline void set_reward(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_receive_share_reward_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fshare_2eproto();
  friend void protobuf_AssignDesc_client2world_5fshare_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fshare_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_receive_share_reward_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetw2c_notify_share

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_share];
inline bool packetw2c_notify_share::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_notify_share::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_notify_share::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_notify_share::clear_packet_id() {
  packet_id_ = 7599;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_notify_share::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_notify_share::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 game_id = 2;
inline bool packetw2c_notify_share::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_notify_share::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_notify_share::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_notify_share::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 packetw2c_notify_share::game_id() const {
  return game_id_;
}
inline void packetw2c_notify_share::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional int32 room_id = 3;
inline bool packetw2c_notify_share::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_notify_share::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_notify_share::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_notify_share::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetw2c_notify_share::room_id() const {
  return room_id_;
}
inline void packetw2c_notify_share::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int64 win_gold = 4;
inline bool packetw2c_notify_share::has_win_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_notify_share::set_has_win_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_notify_share::clear_has_win_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_notify_share::clear_win_gold() {
  win_gold_ = GOOGLE_LONGLONG(0);
  clear_has_win_gold();
}
inline ::google::protobuf::int64 packetw2c_notify_share::win_gold() const {
  return win_gold_;
}
inline void packetw2c_notify_share::set_win_gold(::google::protobuf::int64 value) {
  set_has_win_gold();
  win_gold_ = value;
}

// optional int32 share_reward = 5;
inline bool packetw2c_notify_share::has_share_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_notify_share::set_has_share_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_notify_share::clear_has_share_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_notify_share::clear_share_reward() {
  share_reward_ = 0;
  clear_has_share_reward();
}
inline ::google::protobuf::int32 packetw2c_notify_share::share_reward() const {
  return share_reward_;
}
inline void packetw2c_notify_share::set_share_reward(::google::protobuf::int32 value) {
  set_has_share_reward();
  share_reward_ = value;
}

// -------------------------------------------------------------------

// packetc2w_receive_share_reward

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_share_reward];
inline bool packetc2w_receive_share_reward::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_receive_share_reward::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_receive_share_reward::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_receive_share_reward::clear_packet_id() {
  packet_id_ = 5091;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_receive_share_reward::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_receive_share_reward::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_receive_share_reward_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_receive_share_reward_result];
inline bool packetw2c_receive_share_reward_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_receive_share_reward_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_receive_share_reward_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_receive_share_reward_result::clear_packet_id() {
  packet_id_ = 7600;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_receive_share_reward_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_receive_share_reward_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_receive_share_reward_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_receive_share_reward_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_receive_share_reward_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_receive_share_reward_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_receive_share_reward_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_receive_share_reward_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 reward = 3;
inline bool packetw2c_receive_share_reward_result::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_receive_share_reward_result::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_receive_share_reward_result::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_receive_share_reward_result::clear_reward() {
  reward_ = GOOGLE_LONGLONG(0);
  clear_has_reward();
}
inline ::google::protobuf::int64 packetw2c_receive_share_reward_result::reward() const {
  return reward_;
}
inline void packetw2c_receive_share_reward_result::set_reward(::google::protobuf::int64 value) {
  set_has_reward();
  reward_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fshare_2eproto__INCLUDED
