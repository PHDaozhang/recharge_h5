// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_zhajinhua_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_zhajinhua_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_zhajinhua_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_cards_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_compare_cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_compare_cards_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_settlement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_settlement_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_table_state_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_seat_state_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_player_declare_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fzhajinhua_5fdef_2eproto() {
  protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_zhajinhua_def.proto");
  GOOGLE_CHECK(file != NULL);
  msg_player_info_descriptor_ = file->message_type(0);
  static const int msg_player_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, cur_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, has_bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_declare_),
  };
  msg_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_info_descriptor_,
      msg_player_info::default_instance_,
      msg_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_info));
  msg_player_cards_descriptor_ = file->message_type(1);
  static const int msg_player_cards_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_cards, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_cards, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_cards, check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_cards, card_type_),
  };
  msg_player_cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_cards_descriptor_,
      msg_player_cards::default_instance_,
      msg_player_cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_cards));
  msg_compare_cards_descriptor_ = file->message_type(2);
  static const int msg_compare_cards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_compare_cards, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_compare_cards, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_compare_cards, check_),
  };
  msg_compare_cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_compare_cards_descriptor_,
      msg_compare_cards::default_instance_,
      msg_compare_cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_compare_cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_compare_cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_compare_cards));
  msg_player_settlement_descriptor_ = file->message_type(3);
  static const int msg_player_settlement_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_settlement, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_settlement, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_settlement, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_settlement, check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_settlement, can_check_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_settlement, card_type_),
  };
  msg_player_settlement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_settlement_descriptor_,
      msg_player_settlement::default_instance_,
      msg_player_settlement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_settlement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_settlement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_settlement));
  e_server_msg_type_descriptor_ = file->enum_type(0);
  e_table_state_descriptor_ = file->enum_type(1);
  e_seat_state_descriptor_ = file->enum_type(2);
  e_player_declare_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fzhajinhua_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_info_descriptor_, &msg_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_cards_descriptor_, &msg_player_cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_compare_cards_descriptor_, &msg_compare_cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_settlement_descriptor_, &msg_player_settlement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fzhajinhua_5fdef_2eproto() {
  delete msg_player_info::default_instance_;
  delete msg_player_info_reflection_;
  delete msg_player_cards::default_instance_;
  delete msg_player_cards_reflection_;
  delete msg_compare_cards::default_instance_;
  delete msg_compare_cards_reflection_;
  delete msg_player_settlement::default_instance_;
  delete msg_player_settlement_reflection_;
}

void protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030game_zhajinhua_def.proto\022\030game_zhajinh"
    "ua_protocols\"\254\002\n\017msg_player_info\022\021\n\tplay"
    "er_id\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\021\n\tcur_chi"
    "ps\030\003 \001(\005\022\017\n\007has_bet\030\004 \001(\005\022\014\n\004seat\030\005 \001(\005\022"
    "5\n\005state\030\006 \001(\0162&.game_zhajinhua_protocol"
    "s.e_seat_state\022\022\n\nhead_frame\030\007 \001(\005\022\023\n\013he"
    "ad_custom\030\010 \001(\t\022\013\n\003sex\030\t \001(\005\022\021\n\tvip_leve"
    "l\030\n \001(\005\022B\n\016player_declare\030\013 \001(\0162*.game_z"
    "hajinhua_protocols.e_player_declare\"V\n\020m"
    "sg_player_cards\022\021\n\tplayer_id\030\001 \001(\005\022\r\n\005ca"
    "rds\030\002 \003(\005\022\r\n\005check\030\003 \001(\010\022\021\n\tcard_type\030\004 "
    "\001(\005\"D\n\021msg_compare_cards\022\021\n\tplayer_id\030\001 "
    "\001(\005\022\r\n\005cards\030\002 \003(\005\022\r\n\005check\030\003 \001(\010\"\204\001\n\025ms"
    "g_player_settlement\022\021\n\tplayer_id\030\001 \001(\005\022\r"
    "\n\005score\030\002 \001(\005\022\r\n\005cards\030\003 \003(\005\022\r\n\005check\030\004 "
    "\001(\010\022\030\n\020can_check_player\030\005 \003(\005\022\021\n\tcard_ty"
    "pe\030\006 \001(\005*\340\007\n\021e_server_msg_type\022\024\n\017e_mst_"
    "start_c2l\020\220N\022\034\n\027e_mst_c2l_get_room_info\020"
    "\221N\022\031\n\024e_mst_c2l_join_table\020\222N\022\032\n\025e_mst_c"
    "2l_leave_table\020\223N\022\032\n\025e_mst_c2l_req_sitdo"
    "wn\020\224N\022\030\n\023e_mst_c2l_set_ready\020\225N\022\035\n\030e_mst"
    "_c2l_player_declare\020\226N\022\034\n\027e_mst_c2l_comp"
    "are_cards\020\230N\022#\n\036e_mst_c2l_get_table_scen"
    "e_info\020\231N\022\033\n\026e_mst_c2l_change_table\020\232N\022\031"
    "\n\024e_mst_c2l_show_cards\020\233N\022\032\n\025e_mst_c2l_c"
    "heck_state\020\234N\022\024\n\017e_mst_start_l2c\020\230u\022#\n\036e"
    "_mst_l2c_get_room_info_result\020\231u\022 \n\033e_ms"
    "t_l2c_join_table_result\020\232u\022!\n\034e_mst_l2c_"
    "leave_table_result\020\233u\022!\n\034e_mst_l2c_req_s"
    "itdown_result\020\234u\022\037\n\032e_mst_l2c_set_ready_"
    "result\020\235u\022\031\n\024e_mst_l2c_game_start\020\236u\022$\n\037"
    "e_mst_l2c_player_declare_result\020\237u\022!\n\034e_"
    "mst_l2c_check_cards_result\020\240u\022#\n\036e_mst_l"
    "2c_compare_cards_result\020\241u\022\036\n\031e_mst_l2c_"
    "game_settlement\020\242u\022*\n%e_mst_l2c_get_tabl"
    "e_scene_info_result\020\243u\022\035\n\030e_mst_12c_noti"
    "fy_declare\020\244u\022\033\n\026e_mst_l2c_bc_join_room\020"
    "\245u\022\"\n\035e_mst_l2c_change_table_result\020\246u\022\035"
    "\n\030e_mst_l2c_bc_leave_table\020\247u\022 \n\033e_mst_l"
    "2c_notify_show_cards\020\250u\022!\n\034e_mst_l2c_che"
    "ck_state_result\020\251u\022\027\n\021e_mst_clend_index\020"
    "\240\234\001*U\n\re_table_state\022\016\n\ne_gst_wait\020\000\022\017\n\013"
    "e_gst_start\020\001\022\024\n\020e_gst_settlement\020\003\022\r\n\te"
    "_gst_end\020\004*p\n\014e_seat_state\022\020\n\014e_state_no"
    "ne\020\000\022\027\n\023e_state_occupy_seat\020\001\022\021\n\re_state"
    "_ready\020\002\022\020\n\014e_state_game\020\003\022\020\n\014e_state_lo"
    "se\020\004*\245\001\n\020e_player_declare\022\022\n\016e_declare_n"
    "one\020\000\022\023\n\017e_declare_check\020\001\022\022\n\016e_declare_"
    "fold\020\002\022\022\n\016e_declare_call\020\003\022\025\n\021e_declare_"
    "compare\020\004\022\023\n\017e_declare_raise\020\005\022\024\n\020e_decl"
    "are_all_in\020\006", 2012);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_zhajinhua_def.proto", &protobuf_RegisterTypes);
  msg_player_info::default_instance_ = new msg_player_info();
  msg_player_cards::default_instance_ = new msg_player_cards();
  msg_compare_cards::default_instance_ = new msg_compare_cards();
  msg_player_settlement::default_instance_ = new msg_player_settlement();
  msg_player_info::default_instance_->InitAsDefaultInstance();
  msg_player_cards::default_instance_->InitAsDefaultInstance();
  msg_compare_cards::default_instance_->InitAsDefaultInstance();
  msg_player_settlement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fzhajinhua_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fzhajinhua_5fdef_2eproto {
  StaticDescriptorInitializer_game_5fzhajinhua_5fdef_2eproto() {
    protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  }
} static_descriptor_initializer_game_5fzhajinhua_5fdef_2eproto_;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_server_msg_type_descriptor_;
}
bool e_server_msg_type_IsValid(int value) {
  switch(value) {
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 15000:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
    case 15006:
    case 15007:
    case 15008:
    case 15009:
    case 15010:
    case 15011:
    case 15012:
    case 15013:
    case 15014:
    case 15015:
    case 15016:
    case 15017:
    case 20000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_table_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_table_state_descriptor_;
}
bool e_table_state_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_seat_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_seat_state_descriptor_;
}
bool e_seat_state_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_player_declare_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_player_declare_descriptor_;
}
bool e_player_declare_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_info::kPlayerIdFieldNumber;
const int msg_player_info::kNicknameFieldNumber;
const int msg_player_info::kCurChipsFieldNumber;
const int msg_player_info::kHasBetFieldNumber;
const int msg_player_info::kSeatFieldNumber;
const int msg_player_info::kStateFieldNumber;
const int msg_player_info::kHeadFrameFieldNumber;
const int msg_player_info::kHeadCustomFieldNumber;
const int msg_player_info::kSexFieldNumber;
const int msg_player_info::kVipLevelFieldNumber;
const int msg_player_info::kPlayerDeclareFieldNumber;
#endif  // !_MSC_VER

msg_player_info::msg_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_info::InitAsDefaultInstance() {
}

msg_player_info::msg_player_info(const msg_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cur_chips_ = 0;
  has_bet_ = 0;
  seat_ = 0;
  state_ = 0;
  head_frame_ = 0;
  head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  vip_level_ = 0;
  player_declare_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_info::~msg_player_info() {
  SharedDtor();
}

void msg_player_info::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_info_descriptor_;
}

const msg_player_info& msg_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  return *default_instance_;
}

msg_player_info* msg_player_info::default_instance_ = NULL;

msg_player_info* msg_player_info::New() const {
  return new msg_player_info;
}

void msg_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    cur_chips_ = 0;
    has_bet_ = 0;
    seat_ = 0;
    state_ = 0;
    head_frame_ = 0;
    if (has_head_custom()) {
      if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
        head_custom_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sex_ = 0;
    vip_level_ = 0;
    player_declare_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_chips;
        break;
      }

      // optional int32 cur_chips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chips_)));
          set_has_cur_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_has_bet;
        break;
      }

      // optional int32 has_bet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_bet_)));
          set_has_has_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seat;
        break;
      }

      // optional int32 seat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional .game_zhajinhua_protocols.e_seat_state state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_seat_state_IsValid(value)) {
            set_state(static_cast< ::game_zhajinhua_protocols::e_seat_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_head_frame;
        break;
      }

      // optional int32 head_frame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_frame_)));
          set_has_head_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_head_custom;
        break;
      }

      // optional string head_custom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head_custom().data(), this->head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // optional int32 sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_player_declare;
        break;
      }

      // optional .game_zhajinhua_protocols.e_player_declare player_declare = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_declare:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_zhajinhua_protocols::e_player_declare_IsValid(value)) {
            set_player_declare(static_cast< ::game_zhajinhua_protocols::e_player_declare >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 cur_chips = 3;
  if (has_cur_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_chips(), output);
  }

  // optional int32 has_bet = 4;
  if (has_has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->has_bet(), output);
  }

  // optional int32 seat = 5;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seat(), output);
  }

  // optional .game_zhajinhua_protocols.e_seat_state state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional int32 head_frame = 7;
  if (has_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->head_frame(), output);
  }

  // optional string head_custom = 8;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->head_custom(), output);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sex(), output);
  }

  // optional int32 vip_level = 10;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip_level(), output);
  }

  // optional .game_zhajinhua_protocols.e_player_declare player_declare = 11;
  if (has_player_declare()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->player_declare(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 cur_chips = 3;
  if (has_cur_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_chips(), target);
  }

  // optional int32 has_bet = 4;
  if (has_has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->has_bet(), target);
  }

  // optional int32 seat = 5;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seat(), target);
  }

  // optional .game_zhajinhua_protocols.e_seat_state state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // optional int32 head_frame = 7;
  if (has_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->head_frame(), target);
  }

  // optional string head_custom = 8;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->head_custom(), target);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sex(), target);
  }

  // optional int32 vip_level = 10;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip_level(), target);
  }

  // optional .game_zhajinhua_protocols.e_player_declare player_declare = 11;
  if (has_player_declare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->player_declare(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 cur_chips = 3;
    if (has_cur_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chips());
    }

    // optional int32 has_bet = 4;
    if (has_has_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_bet());
    }

    // optional int32 seat = 5;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional .game_zhajinhua_protocols.e_seat_state state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 head_frame = 7;
    if (has_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_frame());
    }

    // optional string head_custom = 8;
    if (has_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_custom());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 vip_level = 10;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional .game_zhajinhua_protocols.e_player_declare player_declare = 11;
    if (has_player_declare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->player_declare());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_info::MergeFrom(const msg_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_cur_chips()) {
      set_cur_chips(from.cur_chips());
    }
    if (from.has_has_bet()) {
      set_has_bet(from.has_bet());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_head_frame()) {
      set_head_frame(from.head_frame());
    }
    if (from.has_head_custom()) {
      set_head_custom(from.head_custom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_player_declare()) {
      set_player_declare(from.player_declare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_info::CopyFrom(const msg_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_info::IsInitialized() const {

  return true;
}

void msg_player_info::Swap(msg_player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(cur_chips_, other->cur_chips_);
    std::swap(has_bet_, other->has_bet_);
    std::swap(seat_, other->seat_);
    std::swap(state_, other->state_);
    std::swap(head_frame_, other->head_frame_);
    std::swap(head_custom_, other->head_custom_);
    std::swap(sex_, other->sex_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(player_declare_, other->player_declare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_info_descriptor_;
  metadata.reflection = msg_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_cards::kPlayerIdFieldNumber;
const int msg_player_cards::kCardsFieldNumber;
const int msg_player_cards::kCheckFieldNumber;
const int msg_player_cards::kCardTypeFieldNumber;
#endif  // !_MSC_VER

msg_player_cards::msg_player_cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_cards::InitAsDefaultInstance() {
}

msg_player_cards::msg_player_cards(const msg_player_cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_cards::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  check_ = false;
  card_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_cards::~msg_player_cards() {
  SharedDtor();
}

void msg_player_cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_player_cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_cards_descriptor_;
}

const msg_player_cards& msg_player_cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  return *default_instance_;
}

msg_player_cards* msg_player_cards::default_instance_ = NULL;

msg_player_cards* msg_player_cards::New() const {
  return new msg_player_cards;
}

void msg_player_cards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    check_ = false;
    card_type_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectTag(24)) goto parse_check;
        break;
      }

      // optional bool check = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_card_type;
        break;
      }

      // optional int32 card_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  // optional bool check = 3;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->check(), output);
  }

  // optional int32 card_type = 4;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->card_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  // optional bool check = 3;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->check(), target);
  }

  // optional int32 card_type = 4;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->card_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_cards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional bool check = 3;
    if (has_check()) {
      total_size += 1 + 1;
    }

    // optional int32 card_type = 4;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_type());
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_cards::MergeFrom(const msg_player_cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_check()) {
      set_check(from.check());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_cards::CopyFrom(const msg_player_cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_cards::IsInitialized() const {

  return true;
}

void msg_player_cards::Swap(msg_player_cards* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    cards_.Swap(&other->cards_);
    std::swap(check_, other->check_);
    std::swap(card_type_, other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_cards_descriptor_;
  metadata.reflection = msg_player_cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_compare_cards::kPlayerIdFieldNumber;
const int msg_compare_cards::kCardsFieldNumber;
const int msg_compare_cards::kCheckFieldNumber;
#endif  // !_MSC_VER

msg_compare_cards::msg_compare_cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_compare_cards::InitAsDefaultInstance() {
}

msg_compare_cards::msg_compare_cards(const msg_compare_cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_compare_cards::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_compare_cards::~msg_compare_cards() {
  SharedDtor();
}

void msg_compare_cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_compare_cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_compare_cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_compare_cards_descriptor_;
}

const msg_compare_cards& msg_compare_cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  return *default_instance_;
}

msg_compare_cards* msg_compare_cards::default_instance_ = NULL;

msg_compare_cards* msg_compare_cards::New() const {
  return new msg_compare_cards;
}

void msg_compare_cards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    check_ = false;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_compare_cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectTag(24)) goto parse_check;
        break;
      }

      // optional bool check = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_compare_cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  // optional bool check = 3;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_compare_cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  // optional bool check = 3;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_compare_cards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional bool check = 3;
    if (has_check()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_compare_cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_compare_cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_compare_cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_compare_cards::MergeFrom(const msg_compare_cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_check()) {
      set_check(from.check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_compare_cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_compare_cards::CopyFrom(const msg_compare_cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_compare_cards::IsInitialized() const {

  return true;
}

void msg_compare_cards::Swap(msg_compare_cards* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    cards_.Swap(&other->cards_);
    std::swap(check_, other->check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_compare_cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_compare_cards_descriptor_;
  metadata.reflection = msg_compare_cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_settlement::kPlayerIdFieldNumber;
const int msg_player_settlement::kScoreFieldNumber;
const int msg_player_settlement::kCardsFieldNumber;
const int msg_player_settlement::kCheckFieldNumber;
const int msg_player_settlement::kCanCheckPlayerFieldNumber;
const int msg_player_settlement::kCardTypeFieldNumber;
#endif  // !_MSC_VER

msg_player_settlement::msg_player_settlement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_settlement::InitAsDefaultInstance() {
}

msg_player_settlement::msg_player_settlement(const msg_player_settlement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_settlement::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  score_ = 0;
  check_ = false;
  card_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_settlement::~msg_player_settlement() {
  SharedDtor();
}

void msg_player_settlement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_player_settlement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_settlement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_settlement_descriptor_;
}

const msg_player_settlement& msg_player_settlement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fzhajinhua_5fdef_2eproto();
  return *default_instance_;
}

msg_player_settlement* msg_player_settlement::default_instance_ = NULL;

msg_player_settlement* msg_player_settlement::New() const {
  return new msg_player_settlement;
}

void msg_player_settlement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    score_ = 0;
    check_ = false;
    card_type_ = 0;
  }
  cards_.Clear();
  can_check_player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_settlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        if (input->ExpectTag(32)) goto parse_check;
        break;
      }

      // optional bool check = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_can_check_player;
        break;
      }

      // repeated int32 can_check_player = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_check_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_can_check_player())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_can_check_player())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_can_check_player;
        if (input->ExpectTag(48)) goto parse_card_type;
        break;
      }

      // optional int32 card_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_settlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  // optional bool check = 4;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->check(), output);
  }

  // repeated int32 can_check_player = 5;
  for (int i = 0; i < this->can_check_player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->can_check_player(i), output);
  }

  // optional int32 card_type = 6;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->card_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_settlement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cards(i), target);
  }

  // optional bool check = 4;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->check(), target);
  }

  // repeated int32 can_check_player = 5;
  for (int i = 0; i < this->can_check_player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->can_check_player(i), target);
  }

  // optional int32 card_type = 6;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->card_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_settlement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional bool check = 4;
    if (has_check()) {
      total_size += 1 + 1;
    }

    // optional int32 card_type = 6;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_type());
    }

  }
  // repeated int32 cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated int32 can_check_player = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->can_check_player_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->can_check_player(i));
    }
    total_size += 1 * this->can_check_player_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_settlement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_settlement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_settlement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_settlement::MergeFrom(const msg_player_settlement& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  can_check_player_.MergeFrom(from.can_check_player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_check()) {
      set_check(from.check());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_settlement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_settlement::CopyFrom(const msg_player_settlement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_settlement::IsInitialized() const {

  return true;
}

void msg_player_settlement::Swap(msg_player_settlement* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(score_, other->score_);
    cards_.Swap(&other->cards_);
    std::swap(check_, other->check_);
    can_check_player_.Swap(&other->can_check_player_);
    std::swap(card_type_, other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_settlement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_settlement_descriptor_;
  metadata.reflection = msg_player_settlement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_zhajinhua_protocols

// @@protoc_insertion_point(global_scope)
