// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_rouletteak_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_rouletteak_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_rouletteak_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_gold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_gold_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_result_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_result_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_prepare_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_prepare_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_bet_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_bet_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_sync_scene_bet_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_sync_scene_bet_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_deal_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_deal_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_result_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_result_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bet_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bet_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_supply_chip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_supply_chip_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_supply_chip_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_supply_chip_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_room_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_room_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_room_history_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_room_history_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_room_history_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_room_history_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notify_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notify_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_continue_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_continue_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_continue_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_continue_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_cancel_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_cancel_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_cancel_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_cancel_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_set_bead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_set_bead_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_set_bead_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_set_bead_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_rouletteak_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  msg_room_info_descriptor_ = file->message_type(0);
  static const int msg_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, roomid_),
  };
  msg_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_room_info_descriptor_,
      msg_room_info::default_instance_,
      msg_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_room_info));
  packetc2l_get_room_info_descriptor_ = file->message_type(1);
  static const int packetc2l_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, packet_id_),
  };
  packetc2l_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_info_descriptor_,
      packetc2l_get_room_info::default_instance_,
      packetc2l_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_info));
  packetl2c_get_room_info_result_descriptor_ = file->message_type(2);
  static const int packetl2c_get_room_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, room_list_),
  };
  packetl2c_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_info_result_descriptor_,
      packetl2c_get_room_info_result::default_instance_,
      packetl2c_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_info_result));
  packetc2l_enter_room_descriptor_ = file->message_type(3);
  static const int packetc2l_enter_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, roomid_),
  };
  packetc2l_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_room_descriptor_,
      packetc2l_enter_room::default_instance_,
      packetc2l_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_room));
  packetl2c_enter_room_result_descriptor_ = file->message_type(4);
  static const int packetl2c_enter_room_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, scene_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, self_gold_),
  };
  packetl2c_enter_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_room_result_descriptor_,
      packetl2c_enter_room_result::default_instance_,
      packetl2c_enter_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_room_result));
  packetc2l_leave_room_descriptor_ = file->message_type(5);
  static const int packetc2l_leave_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, packet_id_),
  };
  packetc2l_leave_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_room_descriptor_,
      packetc2l_leave_room::default_instance_,
      packetc2l_leave_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_room));
  packetl2c_leave_room_result_descriptor_ = file->message_type(6);
  static const int packetl2c_leave_room_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, player_gold_),
  };
  packetl2c_leave_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_room_result_descriptor_,
      packetl2c_leave_room_result::default_instance_,
      packetl2c_leave_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_room_result));
  msg_player_info_descriptor_ = file->message_type(7);
  static const int msg_player_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, history_bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, win_count_),
  };
  msg_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_info_descriptor_,
      msg_player_info::default_instance_,
      msg_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_info));
  msg_bet_info_descriptor_ = file->message_type(8);
  static const int msg_bet_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, cur_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, chip_index_),
  };
  msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_info_descriptor_,
      msg_bet_info::default_instance_,
      msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_info));
  msg_player_gold_descriptor_ = file->message_type(9);
  static const int msg_player_gold_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_gold, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_gold, win_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_gold, cur_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_gold, history_bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_gold, win_count_),
  };
  msg_player_gold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_gold_descriptor_,
      msg_player_gold::default_instance_,
      msg_player_gold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_gold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_gold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_gold));
  msg_result_info_descriptor_ = file->message_type(10);
  static const int msg_result_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, player_golds_),
  };
  msg_result_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_result_info_descriptor_,
      msg_result_info::default_instance_,
      msg_result_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_result_info));
  msg_scene_info_descriptor_ = file->message_type(11);
  static const int msg_scene_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, scene_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, bet_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, pos_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, bet_gold_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, bet_gold_self_),
  };
  msg_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_scene_info_descriptor_,
      msg_scene_info::default_instance_,
      msg_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_scene_info));
  packetc2l_get_scene_info_descriptor_ = file->message_type(12);
  static const int packetc2l_get_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, packet_id_),
  };
  packetc2l_get_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_scene_info_descriptor_,
      packetc2l_get_scene_info::default_instance_,
      packetc2l_get_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_scene_info));
  packetl2c_get_scene_info_result_descriptor_ = file->message_type(13);
  static const int packetl2c_get_scene_info_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, scene_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, self_gold_),
  };
  packetl2c_get_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_scene_info_result_descriptor_,
      packetl2c_get_scene_info_result::default_instance_,
      packetl2c_get_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_scene_info_result));
  packetl2c_bc_scene_prepare_into_descriptor_ = file->message_type(14);
  static const int packetl2c_bc_scene_prepare_into_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, cd_),
  };
  packetl2c_bc_scene_prepare_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_prepare_into_descriptor_,
      packetl2c_bc_scene_prepare_into::default_instance_,
      packetl2c_bc_scene_prepare_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_prepare_into));
  packetl2c_bc_scene_bet_into_descriptor_ = file->message_type(15);
  static const int packetl2c_bc_scene_bet_into_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, cd_),
  };
  packetl2c_bc_scene_bet_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_bet_into_descriptor_,
      packetl2c_bc_scene_bet_into::default_instance_,
      packetl2c_bc_scene_bet_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_bet_into));
  packetl2c_bc_sync_scene_bet_into_descriptor_ = file->message_type(16);
  static const int packetl2c_bc_sync_scene_bet_into_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, bet_list_),
  };
  packetl2c_bc_sync_scene_bet_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_sync_scene_bet_into_descriptor_,
      packetl2c_bc_sync_scene_bet_into::default_instance_,
      packetl2c_bc_sync_scene_bet_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_sync_scene_bet_into));
  packetl2c_bc_scene_deal_into_descriptor_ = file->message_type(17);
  static const int packetl2c_bc_scene_deal_into_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, number_),
  };
  packetl2c_bc_scene_deal_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_deal_into_descriptor_,
      packetl2c_bc_scene_deal_into::default_instance_,
      packetl2c_bc_scene_deal_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_deal_into));
  packetl2c_bc_scene_result_into_descriptor_ = file->message_type(18);
  static const int packetl2c_bc_scene_result_into_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, result_info_),
  };
  packetl2c_bc_scene_result_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_result_into_descriptor_,
      packetl2c_bc_scene_result_into::default_instance_,
      packetl2c_bc_scene_result_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_result_into));
  packetc2l_ask_bet_info_descriptor_ = file->message_type(19);
  static const int packetc2l_ask_bet_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, bet_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, chip_index_),
  };
  packetc2l_ask_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_bet_info_descriptor_,
      packetc2l_ask_bet_info::default_instance_,
      packetc2l_ask_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_bet_info));
  packetl2c_bet_info_result_descriptor_ = file->message_type(20);
  static const int packetl2c_bet_info_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, bet_info_),
  };
  packetl2c_bet_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bet_info_result_descriptor_,
      packetl2c_bet_info_result::default_instance_,
      packetl2c_bet_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bet_info_result));
  packetl2c_enter_player_info_descriptor_ = file->message_type(21);
  static const int packetl2c_enter_player_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, player_info_),
  };
  packetl2c_enter_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_player_info_descriptor_,
      packetl2c_enter_player_info::default_instance_,
      packetl2c_enter_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_player_info));
  packetl2c_leave_player_info_descriptor_ = file->message_type(22);
  static const int packetl2c_leave_player_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, player_id_),
  };
  packetl2c_leave_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_player_info_descriptor_,
      packetl2c_leave_player_info::default_instance_,
      packetl2c_leave_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_player_info));
  packetl2c_bc_change_attr_descriptor_ = file->message_type(23);
  static const int packetl2c_bc_change_attr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, change_value_),
  };
  packetl2c_bc_change_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_attr_descriptor_,
      packetl2c_bc_change_attr::default_instance_,
      packetl2c_bc_change_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_attr));
  packetc2l_supply_chip_descriptor_ = file->message_type(24);
  static const int packetc2l_supply_chip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_supply_chip, packet_id_),
  };
  packetc2l_supply_chip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_supply_chip_descriptor_,
      packetc2l_supply_chip::default_instance_,
      packetc2l_supply_chip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_supply_chip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_supply_chip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_supply_chip));
  packetl2c_supply_chip_result_descriptor_ = file->message_type(25);
  static const int packetl2c_supply_chip_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, gold_),
  };
  packetl2c_supply_chip_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_supply_chip_result_descriptor_,
      packetl2c_supply_chip_result::default_instance_,
      packetl2c_supply_chip_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_supply_chip_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_supply_chip_result));
  packetc2l_check_state_descriptor_ = file->message_type(26);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetc2l_check_state_result_descriptor_ = file->message_type(27);
  static const int packetc2l_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, room_id_),
  };
  packetc2l_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_result_descriptor_,
      packetc2l_check_state_result::default_instance_,
      packetc2l_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state_result));
  msg_room_history_descriptor_ = file->message_type(28);
  static const int msg_room_history_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_history, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_history, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_history, pos_list_),
  };
  msg_room_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_room_history_descriptor_,
      msg_room_history::default_instance_,
      msg_room_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_room_history));
  packetc2l_room_history_list_descriptor_ = file->message_type(29);
  static const int packetc2l_room_history_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_room_history_list, packet_id_),
  };
  packetc2l_room_history_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_room_history_list_descriptor_,
      packetc2l_room_history_list::default_instance_,
      packetc2l_room_history_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_room_history_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_room_history_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_room_history_list));
  packetl2c_room_history_list_result_descriptor_ = file->message_type(30);
  static const int packetl2c_room_history_list_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_room_history_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_room_history_list_result, history_list_),
  };
  packetl2c_room_history_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_room_history_list_result_descriptor_,
      packetl2c_room_history_list_result::default_instance_,
      packetl2c_room_history_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_room_history_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_room_history_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_room_history_list_result));
  packetl2c_notify_history_descriptor_ = file->message_type(31);
  static const int packetl2c_notify_history_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_history, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_history, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_history, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_history, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_history, pos_),
  };
  packetl2c_notify_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notify_history_descriptor_,
      packetl2c_notify_history::default_instance_,
      packetl2c_notify_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notify_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notify_history));
  packetc2l_continue_bet_descriptor_ = file->message_type(32);
  static const int packetc2l_continue_bet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_continue_bet, packet_id_),
  };
  packetc2l_continue_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_continue_bet_descriptor_,
      packetc2l_continue_bet::default_instance_,
      packetc2l_continue_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_continue_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_continue_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_continue_bet));
  packetl2c_continue_bet_result_descriptor_ = file->message_type(33);
  static const int packetl2c_continue_bet_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, cur_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, bet_list_),
  };
  packetl2c_continue_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_continue_bet_result_descriptor_,
      packetl2c_continue_bet_result::default_instance_,
      packetl2c_continue_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_continue_bet_result));
  packetc2l_cancel_bet_descriptor_ = file->message_type(34);
  static const int packetc2l_cancel_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_cancel_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_cancel_bet, bet_pos_),
  };
  packetc2l_cancel_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_cancel_bet_descriptor_,
      packetc2l_cancel_bet::default_instance_,
      packetc2l_cancel_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_cancel_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_cancel_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_cancel_bet));
  packetl2c_cancel_bet_result_descriptor_ = file->message_type(35);
  static const int packetl2c_cancel_bet_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_cancel_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_cancel_bet_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_cancel_bet_result, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_cancel_bet_result, cur_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_cancel_bet_result, bet_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_cancel_bet_result, change_gold_),
  };
  packetl2c_cancel_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_cancel_bet_result_descriptor_,
      packetl2c_cancel_bet_result::default_instance_,
      packetl2c_cancel_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_cancel_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_cancel_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_cancel_bet_result));
  room_player_descriptor_ = file->message_type(36);
  static const int room_player_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, profit_today_),
  };
  room_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_player_descriptor_,
      room_player::default_instance_,
      room_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_player));
  packetl2c_gm_get_room_info_descriptor_ = file->message_type(37);
  static const int packetl2c_gm_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info, packet_id_),
  };
  packetl2c_gm_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_get_room_info_descriptor_,
      packetl2c_gm_get_room_info::default_instance_,
      packetl2c_gm_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_get_room_info));
  packetl2c_gm_get_room_info_result_descriptor_ = file->message_type(38);
  static const int packetl2c_gm_get_room_info_result_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, bead_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, water_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, kill_),
  };
  packetl2c_gm_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_get_room_info_result_descriptor_,
      packetl2c_gm_get_room_info_result::default_instance_,
      packetl2c_gm_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_get_room_info_result));
  packetl2c_gm_set_bead_descriptor_ = file->message_type(39);
  static const int packetl2c_gm_set_bead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead, bead_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead, kill_),
  };
  packetl2c_gm_set_bead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_set_bead_descriptor_,
      packetl2c_gm_set_bead::default_instance_,
      packetl2c_gm_set_bead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_set_bead));
  packetl2c_gm_set_bead_result_descriptor_ = file->message_type(40);
  static const int packetl2c_gm_set_bead_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead_result, bead_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead_result, kill_),
  };
  packetl2c_gm_set_bead_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_set_bead_result_descriptor_,
      packetl2c_gm_set_bead_result::default_instance_,
      packetl2c_gm_set_bead_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_set_bead_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_set_bead_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5frouletteak_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_room_info_descriptor_, &msg_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_info_descriptor_, &packetc2l_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_info_result_descriptor_, &packetl2c_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_room_descriptor_, &packetc2l_enter_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_room_result_descriptor_, &packetl2c_enter_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_room_descriptor_, &packetc2l_leave_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_room_result_descriptor_, &packetl2c_leave_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_info_descriptor_, &msg_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_info_descriptor_, &msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_gold_descriptor_, &msg_player_gold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_result_info_descriptor_, &msg_result_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_scene_info_descriptor_, &msg_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_scene_info_descriptor_, &packetc2l_get_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_scene_info_result_descriptor_, &packetl2c_get_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_prepare_into_descriptor_, &packetl2c_bc_scene_prepare_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_bet_into_descriptor_, &packetl2c_bc_scene_bet_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_sync_scene_bet_into_descriptor_, &packetl2c_bc_sync_scene_bet_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_deal_into_descriptor_, &packetl2c_bc_scene_deal_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_result_into_descriptor_, &packetl2c_bc_scene_result_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_bet_info_descriptor_, &packetc2l_ask_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bet_info_result_descriptor_, &packetl2c_bet_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_player_info_descriptor_, &packetl2c_enter_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_player_info_descriptor_, &packetl2c_leave_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_attr_descriptor_, &packetl2c_bc_change_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_supply_chip_descriptor_, &packetc2l_supply_chip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_supply_chip_result_descriptor_, &packetl2c_supply_chip_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_result_descriptor_, &packetc2l_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_room_history_descriptor_, &msg_room_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_room_history_list_descriptor_, &packetc2l_room_history_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_room_history_list_result_descriptor_, &packetl2c_room_history_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notify_history_descriptor_, &packetl2c_notify_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_continue_bet_descriptor_, &packetc2l_continue_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_continue_bet_result_descriptor_, &packetl2c_continue_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_cancel_bet_descriptor_, &packetc2l_cancel_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_cancel_bet_result_descriptor_, &packetl2c_cancel_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_player_descriptor_, &room_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_get_room_info_descriptor_, &packetl2c_gm_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_get_room_info_result_descriptor_, &packetl2c_gm_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_set_bead_descriptor_, &packetl2c_gm_set_bead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_set_bead_result_descriptor_, &packetl2c_gm_set_bead_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto() {
  delete msg_room_info::default_instance_;
  delete msg_room_info_reflection_;
  delete packetc2l_get_room_info::default_instance_;
  delete packetc2l_get_room_info_reflection_;
  delete packetl2c_get_room_info_result::default_instance_;
  delete packetl2c_get_room_info_result_reflection_;
  delete packetc2l_enter_room::default_instance_;
  delete packetc2l_enter_room_reflection_;
  delete packetl2c_enter_room_result::default_instance_;
  delete packetl2c_enter_room_result_reflection_;
  delete packetc2l_leave_room::default_instance_;
  delete packetc2l_leave_room_reflection_;
  delete packetl2c_leave_room_result::default_instance_;
  delete packetl2c_leave_room_result_reflection_;
  delete msg_player_info::default_instance_;
  delete msg_player_info_reflection_;
  delete msg_bet_info::default_instance_;
  delete msg_bet_info_reflection_;
  delete msg_player_gold::default_instance_;
  delete msg_player_gold_reflection_;
  delete msg_result_info::default_instance_;
  delete msg_result_info_reflection_;
  delete msg_scene_info::default_instance_;
  delete msg_scene_info_reflection_;
  delete packetc2l_get_scene_info::default_instance_;
  delete packetc2l_get_scene_info_reflection_;
  delete packetl2c_get_scene_info_result::default_instance_;
  delete packetl2c_get_scene_info_result_reflection_;
  delete packetl2c_bc_scene_prepare_into::default_instance_;
  delete packetl2c_bc_scene_prepare_into_reflection_;
  delete packetl2c_bc_scene_bet_into::default_instance_;
  delete packetl2c_bc_scene_bet_into_reflection_;
  delete packetl2c_bc_sync_scene_bet_into::default_instance_;
  delete packetl2c_bc_sync_scene_bet_into_reflection_;
  delete packetl2c_bc_scene_deal_into::default_instance_;
  delete packetl2c_bc_scene_deal_into_reflection_;
  delete packetl2c_bc_scene_result_into::default_instance_;
  delete packetl2c_bc_scene_result_into_reflection_;
  delete packetc2l_ask_bet_info::default_instance_;
  delete packetc2l_ask_bet_info_reflection_;
  delete packetl2c_bet_info_result::default_instance_;
  delete packetl2c_bet_info_result_reflection_;
  delete packetl2c_enter_player_info::default_instance_;
  delete packetl2c_enter_player_info_reflection_;
  delete packetl2c_leave_player_info::default_instance_;
  delete packetl2c_leave_player_info_reflection_;
  delete packetl2c_bc_change_attr::default_instance_;
  delete packetl2c_bc_change_attr_reflection_;
  delete packetc2l_supply_chip::default_instance_;
  delete packetc2l_supply_chip_reflection_;
  delete packetl2c_supply_chip_result::default_instance_;
  delete packetl2c_supply_chip_result_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetc2l_check_state_result::default_instance_;
  delete packetc2l_check_state_result_reflection_;
  delete msg_room_history::default_instance_;
  delete msg_room_history_reflection_;
  delete packetc2l_room_history_list::default_instance_;
  delete packetc2l_room_history_list_reflection_;
  delete packetl2c_room_history_list_result::default_instance_;
  delete packetl2c_room_history_list_result_reflection_;
  delete packetl2c_notify_history::default_instance_;
  delete packetl2c_notify_history_reflection_;
  delete packetc2l_continue_bet::default_instance_;
  delete packetc2l_continue_bet_reflection_;
  delete packetl2c_continue_bet_result::default_instance_;
  delete packetl2c_continue_bet_result_reflection_;
  delete packetc2l_cancel_bet::default_instance_;
  delete packetc2l_cancel_bet_reflection_;
  delete packetl2c_cancel_bet_result::default_instance_;
  delete packetl2c_cancel_bet_result_reflection_;
  delete room_player::default_instance_;
  delete room_player_reflection_;
  delete packetl2c_gm_get_room_info::default_instance_;
  delete packetl2c_gm_get_room_info_reflection_;
  delete packetl2c_gm_get_room_info_result::default_instance_;
  delete packetl2c_gm_get_room_info_result_reflection_;
  delete packetl2c_gm_set_bead::default_instance_;
  delete packetl2c_gm_set_bead_reflection_;
  delete packetl2c_gm_set_bead_result::default_instance_;
  delete packetl2c_gm_set_bead_result_reflection_;
}

void protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_rouletteak_protocols::protobuf_AddDesc_game_5frouletteak_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036game_rouletteak_protocol.proto\022\031game_r"
    "ouletteak_protocols\032\031game_rouletteak_def"
    ".proto\032\022msg_type_def.proto\"\037\n\rmsg_room_i"
    "nfo\022\016\n\006roomid\030\001 \001(\005\"s\n\027packetc2l_get_roo"
    "m_info\022X\n\tpacket_id\030\001 \001(\0162,.game_roulett"
    "eak_protocols.e_server_msg_type:\027e_mst_c"
    "2l_get_room_info\"\276\001\n\036packetl2c_get_room_"
    "info_result\022_\n\tpacket_id\030\001 \001(\0162,.game_ro"
    "uletteak_protocols.e_server_msg_type:\036e_"
    "mst_l2c_get_room_info_result\022;\n\troom_lis"
    "t\030\002 \003(\0132(.game_rouletteak_protocols.msg_"
    "room_info\"}\n\024packetc2l_enter_room\022U\n\tpac"
    "ket_id\030\001 \001(\0162,.game_rouletteak_protocols"
    ".e_server_msg_type:\024e_mst_c2l_enter_room"
    "\022\016\n\006roomid\030\002 \001(\005\"\211\002\n\033packetl2c_enter_roo"
    "m_result\022\\\n\tpacket_id\030\001 \001(\0162,.game_roule"
    "tteak_protocols.e_server_msg_type:\033e_mst"
    "_l2c_enter_room_result\022:\n\006result\030\002 \001(\0162\036"
    ".msg_type_def.e_msg_result_def:\ne_rmt_fa"
    "il\022=\n\nscene_info\030\003 \001(\0132).game_rouletteak"
    "_protocols.msg_scene_info\022\021\n\tself_gold\030\004"
    " \001(\003\"m\n\024packetc2l_leave_room\022U\n\tpacket_i"
    "d\030\001 \001(\0162,.game_rouletteak_protocols.e_se"
    "rver_msg_type:\024e_mst_c2l_leave_room\"\317\001\n\033"
    "packetl2c_leave_room_result\022\\\n\tpacket_id"
    "\030\001 \001(\0162,.game_rouletteak_protocols.e_ser"
    "ver_msg_type:\033e_mst_l2c_leave_room_resul"
    "t\022=\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_r"
    "esult_def:\re_rmt_success\022\023\n\013player_gold\030"
    "\003 \001(\003\"\313\001\n\017msg_player_info\022\021\n\tplayer_id\030\001"
    " \001(\005\022\023\n\013player_name\030\002 \001(\t\022\022\n\nhead_frame\030"
    "\003 \001(\005\022\023\n\013head_custom\030\004 \001(\t\022\023\n\013player_gol"
    "d\030\005 \001(\003\022\022\n\nplayer_sex\030\006 \001(\005\022\021\n\tvip_level"
    "\030\007 \001(\005\022\030\n\020history_bet_gold\030\010 \001(\005\022\021\n\twin_"
    "count\030\t \001(\005\"j\n\014msg_bet_info\022\021\n\tplayer_id"
    "\030\001 \001(\005\022\017\n\007bet_pos\030\002 \001(\005\022\020\n\010bet_gold\030\003 \001("
    "\003\022\020\n\010cur_gold\030\004 \001(\003\022\022\n\nchip_index\030\005 \001(\005\""
    "u\n\017msg_player_gold\022\021\n\tplayer_id\030\001 \001(\005\022\020\n"
    "\010win_gold\030\002 \001(\003\022\020\n\010cur_gold\030\003 \001(\003\022\030\n\020his"
    "tory_bet_gold\030\004 \001(\005\022\021\n\twin_count\030\005 \001(\003\"c"
    "\n\017msg_result_info\022\016\n\006number\030\001 \001(\005\022@\n\014pla"
    "yer_golds\030\002 \003(\0132*.game_rouletteak_protoc"
    "ols.msg_player_gold\"\277\002\n\016msg_scene_info\022\016"
    "\n\006roomid\030\001 \001(\005\022\023\n\013scene_state\030\002 \001(\005\022\n\n\002c"
    "d\030\003 \001(\005\022\?\n\013player_list\030\004 \003(\0132*.game_roul"
    "etteak_protocols.msg_player_info\022:\n\tbet_"
    "infos\030\005 \003(\0132\'.game_rouletteak_protocols."
    "msg_bet_info\022\?\n\013result_info\030\006 \001(\0132*.game"
    "_rouletteak_protocols.msg_result_info\022\020\n"
    "\010pos_list\030\007 \003(\005\022\025\n\rbet_gold_room\030\010 \001(\003\022\025"
    "\n\rbet_gold_self\030\t \001(\003\"u\n\030packetc2l_get_s"
    "cene_info\022Y\n\tpacket_id\030\001 \001(\0162,.game_roul"
    "etteak_protocols.e_server_msg_type:\030e_ms"
    "t_c2l_get_scene_info\"\325\001\n\037packetl2c_get_s"
    "cene_info_result\022`\n\tpacket_id\030\001 \001(\0162,.ga"
    "me_rouletteak_protocols.e_server_msg_typ"
    "e:\037e_mst_l2c_get_scene_info_result\022=\n\nsc"
    "ene_info\030\002 \001(\0132).game_rouletteak_protoco"
    "ls.msg_scene_info\022\021\n\tself_gold\030\003 \001(\003\"\217\001\n"
    "\037packetl2c_bc_scene_prepare_into\022`\n\tpack"
    "et_id\030\001 \001(\0162,.game_rouletteak_protocols."
    "e_server_msg_type:\037e_mst_l2c_bc_scene_pr"
    "epare_into\022\n\n\002cd\030\002 \001(\005\"\207\001\n\033packetl2c_bc_"
    "scene_bet_into\022\\\n\tpacket_id\030\001 \001(\0162,.game"
    "_rouletteak_protocols.e_server_msg_type:"
    "\033e_mst_l2c_bc_scene_bet_into\022\n\n\002cd\030\002 \001(\005"
    "\"\300\001\n packetl2c_bc_sync_scene_bet_into\022a\n"
    "\tpacket_id\030\001 \001(\0162,.game_rouletteak_proto"
    "cols.e_server_msg_type: e_mst_l2c_bc_syn"
    "c_scene_bet_into\0229\n\010bet_list\030\002 \003(\0132\'.gam"
    "e_rouletteak_protocols.msg_bet_info\"\231\001\n\034"
    "packetl2c_bc_scene_deal_into\022]\n\tpacket_i"
    "d\030\001 \001(\0162,.game_rouletteak_protocols.e_se"
    "rver_msg_type:\034e_mst_l2c_bc_scene_deal_i"
    "nto\022\n\n\002cd\030\002 \001(\005\022\016\n\006number\030\003 \001(\005\"\316\001\n\036pack"
    "etl2c_bc_scene_result_into\022_\n\tpacket_id\030"
    "\001 \001(\0162,.game_rouletteak_protocols.e_serv"
    "er_msg_type:\036e_mst_l2c_bc_scene_result_i"
    "nto\022\n\n\002cd\030\002 \001(\005\022\?\n\013result_info\030\003 \001(\0132*.g"
    "ame_rouletteak_protocols.msg_result_info"
    "\"\250\001\n\026packetc2l_ask_bet_info\022W\n\tpacket_id"
    "\030\001 \001(\0162,.game_rouletteak_protocols.e_ser"
    "ver_msg_type:\026e_mst_c2l_ask_bet_info\022\017\n\007"
    "bet_pos\030\002 \001(\005\022\020\n\010bet_gold\030\003 \001(\003\022\022\n\nchip_"
    "index\030\004 \001(\005\"\356\001\n\031packetl2c_bet_info_resul"
    "t\022Z\n\tpacket_id\030\001 \001(\0162,.game_rouletteak_p"
    "rotocols.e_server_msg_type:\031e_mst_l2c_be"
    "t_info_result\022:\n\006result\030\002 \001(\0162\036.msg_type"
    "_def.e_msg_result_def:\ne_rmt_fail\0229\n\010bet"
    "_info\030\003 \001(\0132\'.game_rouletteak_protocols."
    "msg_bet_info\"\274\001\n\033packetl2c_enter_player_"
    "info\022\\\n\tpacket_id\030\001 \001(\0162,.game_roulettea"
    "k_protocols.e_server_msg_type:\033e_mst_l2c"
    "_enter_player_info\022\?\n\013player_info\030\002 \001(\0132"
    "*.game_rouletteak_protocols.msg_player_i"
    "nfo\"\216\001\n\033packetl2c_leave_player_info\022\\\n\tp"
    "acket_id\030\001 \001(\0162,.game_rouletteak_protoco"
    "ls.e_server_msg_type:\033e_mst_l2c_leave_pl"
    "ayer_info\022\021\n\tplayer_id\030\002 \001(\005\"\261\001\n\030packetl"
    "2c_bc_change_attr\022Y\n\tpacket_id\030\001 \001(\0162,.g"
    "ame_rouletteak_protocols.e_server_msg_ty"
    "pe:\030e_mst_l2c_bc_change_attr\022\021\n\tplayer_i"
    "d\030\002 \001(\005\022\021\n\titem_type\030\003 \001(\005\022\024\n\014change_val"
    "ue\030\004 \001(\003\"o\n\025packetc2l_supply_chip\022V\n\tpac"
    "ket_id\030\001 \001(\0162,.game_rouletteak_protocols"
    ".e_server_msg_type:\025e_mst_c2l_supply_chi"
    "p\"\307\001\n\034packetl2c_supply_chip_result\022]\n\tpa"
    "cket_id\030\001 \001(\0162,.game_rouletteak_protocol"
    "s.e_server_msg_type:\034e_mst_l2c_supply_ch"
    "ip_result\022:\n\006result\030\002 \001(\0162\036.msg_type_def"
    ".e_msg_result_def:\ne_rmt_fail\022\014\n\004gold\030\006 "
    "\001(\003\"o\n\025packetc2l_check_state\022V\n\tpacket_i"
    "d\030\001 \001(\0162,.game_rouletteak_protocols.e_se"
    "rver_msg_type:\025e_mst_c2l_check_state\"\216\001\n"
    "\034packetc2l_check_state_result\022]\n\tpacket_"
    "id\030\001 \001(\0162,.game_rouletteak_protocols.e_s"
    "erver_msg_type:\034e_mst_l2c_check_state_re"
    "sult\022\017\n\007room_id\030\002 \001(\005\"P\n\020msg_room_histor"
    "y\022\017\n\007room_id\030\001 \001(\005\022\r\n\005state\030\002 \001(\005\022\n\n\002cd\030"
    "\003 \001(\005\022\020\n\010pos_list\030\004 \003(\005\"{\n\033packetc2l_roo"
    "m_history_list\022\\\n\tpacket_id\030\001 \001(\0162,.game"
    "_rouletteak_protocols.e_server_msg_type:"
    "\033e_mst_c2l_room_history_list\"\314\001\n\"packetl"
    "2c_room_history_list_result\022c\n\tpacket_id"
    "\030\001 \001(\0162,.game_rouletteak_protocols.e_ser"
    "ver_msg_type:\"e_mst_l2c_room_history_lis"
    "t_result\022A\n\014history_list\030\002 \003(\0132+.game_ro"
    "uletteak_protocols.msg_room_history\"\256\001\n\030"
    "packetl2c_notify_history\022Y\n\tpacket_id\030\001 "
    "\001(\0162,.game_rouletteak_protocols.e_server"
    "_msg_type:\030e_mst_l2c_notify_history\022\017\n\007r"
    "oom_id\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\n\n\002cd\030\004 \001(\005\022"
    "\013\n\003pos\030\005 \001(\005\"q\n\026packetc2l_continue_bet\022W"
    "\n\tpacket_id\030\001 \001(\0162,.game_rouletteak_prot"
    "ocols.e_server_msg_type:\026e_mst_c2l_conti"
    "nue_bet\"\210\002\n\035packetl2c_continue_bet_resul"
    "t\022^\n\tpacket_id\030\001 \001(\0162,.game_rouletteak_p"
    "rotocols.e_server_msg_type:\035e_mst_l2c_co"
    "ntinue_bet_result\022:\n\006result\030\002 \001(\0162\036.msg_"
    "type_def.e_msg_result_def:\ne_rmt_fail\022\020\n"
    "\010cur_gold\030\003 \001(\003\0229\n\010bet_list\030\004 \003(\0132\'.game"
    "_rouletteak_protocols.msg_bet_info\"\202\001\n\024p"
    "acketc2l_cancel_bet\022U\n\tpacket_id\030\001 \001(\0162,"
    ".game_rouletteak_protocols.e_server_msg_"
    "type:\024e_mst_c2l_cancel_bet\022\023\n\007bet_pos\030\002 "
    "\001(\005:\002-1\"\202\002\n\033packetl2c_cancel_bet_result\022"
    "\\\n\tpacket_id\030\001 \001(\0162,.game_rouletteak_pro"
    "tocols.e_server_msg_type:\033e_mst_l2c_canc"
    "el_bet_result\022:\n\006result\030\002 \001(\0162\036.msg_type"
    "_def.e_msg_result_def:\ne_rmt_fail\022\021\n\tpla"
    "yer_id\030\003 \001(\005\022\020\n\010cur_gold\030\004 \001(\003\022\017\n\007bet_po"
    "s\030\005 \001(\005\022\023\n\013change_gold\030\006 \001(\003\"D\n\013room_pla"
    "yer\022\021\n\tplayer_id\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\022\024\n\014"
    "profit_today\030\003 \001(\003\"y\n\032packetl2c_gm_get_r"
    "oom_info\022[\n\tpacket_id\030\001 \001(\0162,.game_roule"
    "tteak_protocols.e_server_msg_type:\032e_mst"
    "_c2l_gm_get_room_info\"\222\002\n!packetl2c_gm_g"
    "et_room_info_result\022b\n\tpacket_id\030\001 \001(\0162,"
    ".game_rouletteak_protocols.e_server_msg_"
    "type:!e_mst_l2c_gm_get_room_info_result\022"
    "\016\n\006result\030\002 \001(\005\022\024\n\010bead_num\030\003 \001(\005:\002-1\0227\n"
    "\007players\030\004 \003(\0132&.game_rouletteak_protoco"
    "ls.room_player\022\r\n\005stock\030\005 \001(\003\022\r\n\005water\030\006"
    " \001(\003\022\014\n\004kill\030\007 \001(\005\"\217\001\n\025packetl2c_gm_set_"
    "bead\022V\n\tpacket_id\030\001 \001(\0162,.game_roulettea"
    "k_protocols.e_server_msg_type:\025e_mst_c2l"
    "_gm_set_bead\022\020\n\010bead_num\030\002 \001(\005\022\014\n\004kill\030\003"
    " \001(\005\"\255\001\n\034packetl2c_gm_set_bead_result\022]\n"
    "\tpacket_id\030\001 \001(\0162,.game_rouletteak_proto"
    "cols.e_server_msg_type:\034e_mst_l2c_gm_set"
    "_bead_result\022\016\n\006result\030\002 \001(\005\022\020\n\010bead_num"
    "\030\003 \001(\005\022\014\n\004kill\030\004 \001(\005", 6860);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_rouletteak_protocol.proto", &protobuf_RegisterTypes);
  msg_room_info::default_instance_ = new msg_room_info();
  packetc2l_get_room_info::default_instance_ = new packetc2l_get_room_info();
  packetl2c_get_room_info_result::default_instance_ = new packetl2c_get_room_info_result();
  packetc2l_enter_room::default_instance_ = new packetc2l_enter_room();
  packetl2c_enter_room_result::default_instance_ = new packetl2c_enter_room_result();
  packetc2l_leave_room::default_instance_ = new packetc2l_leave_room();
  packetl2c_leave_room_result::default_instance_ = new packetl2c_leave_room_result();
  msg_player_info::default_instance_ = new msg_player_info();
  msg_bet_info::default_instance_ = new msg_bet_info();
  msg_player_gold::default_instance_ = new msg_player_gold();
  msg_result_info::default_instance_ = new msg_result_info();
  msg_scene_info::default_instance_ = new msg_scene_info();
  packetc2l_get_scene_info::default_instance_ = new packetc2l_get_scene_info();
  packetl2c_get_scene_info_result::default_instance_ = new packetl2c_get_scene_info_result();
  packetl2c_bc_scene_prepare_into::default_instance_ = new packetl2c_bc_scene_prepare_into();
  packetl2c_bc_scene_bet_into::default_instance_ = new packetl2c_bc_scene_bet_into();
  packetl2c_bc_sync_scene_bet_into::default_instance_ = new packetl2c_bc_sync_scene_bet_into();
  packetl2c_bc_scene_deal_into::default_instance_ = new packetl2c_bc_scene_deal_into();
  packetl2c_bc_scene_result_into::default_instance_ = new packetl2c_bc_scene_result_into();
  packetc2l_ask_bet_info::default_instance_ = new packetc2l_ask_bet_info();
  packetl2c_bet_info_result::default_instance_ = new packetl2c_bet_info_result();
  packetl2c_enter_player_info::default_instance_ = new packetl2c_enter_player_info();
  packetl2c_leave_player_info::default_instance_ = new packetl2c_leave_player_info();
  packetl2c_bc_change_attr::default_instance_ = new packetl2c_bc_change_attr();
  packetc2l_supply_chip::default_instance_ = new packetc2l_supply_chip();
  packetl2c_supply_chip_result::default_instance_ = new packetl2c_supply_chip_result();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetc2l_check_state_result::default_instance_ = new packetc2l_check_state_result();
  msg_room_history::default_instance_ = new msg_room_history();
  packetc2l_room_history_list::default_instance_ = new packetc2l_room_history_list();
  packetl2c_room_history_list_result::default_instance_ = new packetl2c_room_history_list_result();
  packetl2c_notify_history::default_instance_ = new packetl2c_notify_history();
  packetc2l_continue_bet::default_instance_ = new packetc2l_continue_bet();
  packetl2c_continue_bet_result::default_instance_ = new packetl2c_continue_bet_result();
  packetc2l_cancel_bet::default_instance_ = new packetc2l_cancel_bet();
  packetl2c_cancel_bet_result::default_instance_ = new packetl2c_cancel_bet_result();
  room_player::default_instance_ = new room_player();
  packetl2c_gm_get_room_info::default_instance_ = new packetl2c_gm_get_room_info();
  packetl2c_gm_get_room_info_result::default_instance_ = new packetl2c_gm_get_room_info_result();
  packetl2c_gm_set_bead::default_instance_ = new packetl2c_gm_set_bead();
  packetl2c_gm_set_bead_result::default_instance_ = new packetl2c_gm_set_bead_result();
  msg_room_info::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_room::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_room::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_room_result::default_instance_->InitAsDefaultInstance();
  msg_player_info::default_instance_->InitAsDefaultInstance();
  msg_bet_info::default_instance_->InitAsDefaultInstance();
  msg_player_gold::default_instance_->InitAsDefaultInstance();
  msg_result_info::default_instance_->InitAsDefaultInstance();
  msg_scene_info::default_instance_->InitAsDefaultInstance();
  packetc2l_get_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_prepare_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_bet_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_sync_scene_bet_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_deal_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_result_into::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bet_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_player_info::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_player_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_attr::default_instance_->InitAsDefaultInstance();
  packetc2l_supply_chip::default_instance_->InitAsDefaultInstance();
  packetl2c_supply_chip_result::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state_result::default_instance_->InitAsDefaultInstance();
  msg_room_history::default_instance_->InitAsDefaultInstance();
  packetc2l_room_history_list::default_instance_->InitAsDefaultInstance();
  packetl2c_room_history_list_result::default_instance_->InitAsDefaultInstance();
  packetl2c_notify_history::default_instance_->InitAsDefaultInstance();
  packetc2l_continue_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_continue_bet_result::default_instance_->InitAsDefaultInstance();
  packetc2l_cancel_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_cancel_bet_result::default_instance_->InitAsDefaultInstance();
  room_player::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_get_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_set_bead::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_set_bead_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5frouletteak_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5frouletteak_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5frouletteak_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5frouletteak_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_room_info::kRoomidFieldNumber;
#endif  // !_MSC_VER

msg_room_info::msg_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_room_info::InitAsDefaultInstance() {
}

msg_room_info::msg_room_info(const msg_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_room_info::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_room_info::~msg_room_info() {
  SharedDtor();
}

void msg_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_room_info_descriptor_;
}

const msg_room_info& msg_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

msg_room_info* msg_room_info::default_instance_ = NULL;

msg_room_info* msg_room_info::New() const {
  return new msg_room_info;
}

void msg_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_room_info::MergeFrom(const msg_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_room_info::CopyFrom(const msg_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_room_info::IsInitialized() const {

  return true;
}

void msg_room_info::Swap(msg_room_info* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_room_info_descriptor_;
  metadata.reflection = msg_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_info::packetc2l_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_room_info::InitAsDefaultInstance() {
}

packetc2l_get_room_info::packetc2l_get_room_info(const packetc2l_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10014;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_info::~packetc2l_get_room_info() {
  SharedDtor();
}

void packetc2l_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_info_descriptor_;
}

const packetc2l_get_room_info& packetc2l_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_info* packetc2l_get_room_info::default_instance_ = NULL;

packetc2l_get_room_info* packetc2l_get_room_info::New() const {
  return new packetc2l_get_room_info;
}

void packetc2l_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10014;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_info::MergeFrom(const packetc2l_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_info::CopyFrom(const packetc2l_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_info::Swap(packetc2l_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_info_descriptor_;
  metadata.reflection = packetc2l_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_info_result::kRoomListFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_info_result::packetl2c_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_info_result::packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15058;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_info_result::~packetl2c_get_room_info_result() {
  SharedDtor();
}

void packetl2c_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_info_result_descriptor_;
}

const packetl2c_get_room_info_result& packetl2c_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_info_result* packetl2c_get_room_info_result::default_instance_ = NULL;

packetl2c_get_room_info_result* packetl2c_get_room_info_result::New() const {
  return new packetl2c_get_room_info_result;
}

void packetl2c_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15058;
  }
  room_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        break;
      }

      // repeated .game_rouletteak_protocols.msg_room_info room_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_rouletteak_protocols.msg_room_info room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_rouletteak_protocols.msg_room_info room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_rouletteak_protocols.msg_room_info room_list = 2;
  total_size += 1 * this->room_list_size();
  for (int i = 0; i < this->room_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_info_result::MergeFrom(const packetl2c_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_list_.MergeFrom(from.room_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::CopyFrom(const packetl2c_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_info_result::Swap(packetl2c_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_list_.Swap(&other->room_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_room::kPacketIdFieldNumber;
const int packetc2l_enter_room::kRoomidFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_room::packetc2l_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_enter_room::InitAsDefaultInstance() {
}

packetc2l_enter_room::packetc2l_enter_room(const packetc2l_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_enter_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10015;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_room::~packetc2l_enter_room() {
  SharedDtor();
}

void packetc2l_enter_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_room_descriptor_;
}

const packetc2l_enter_room& packetc2l_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_room* packetc2l_enter_room::default_instance_ = NULL;

packetc2l_enter_room* packetc2l_enter_room::New() const {
  return new packetc2l_enter_room;
}

void packetc2l_enter_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10015;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_enter_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_room::MergeFrom(const packetc2l_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_room::CopyFrom(const packetc2l_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_room::IsInitialized() const {

  return true;
}

void packetc2l_enter_room::Swap(packetc2l_enter_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_room_descriptor_;
  metadata.reflection = packetc2l_enter_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_room_result::kPacketIdFieldNumber;
const int packetl2c_enter_room_result::kResultFieldNumber;
const int packetl2c_enter_room_result::kSceneInfoFieldNumber;
const int packetl2c_enter_room_result::kSelfGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_room_result::packetl2c_enter_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_enter_room_result::InitAsDefaultInstance() {
  scene_info_ = const_cast< ::game_rouletteak_protocols::msg_scene_info*>(&::game_rouletteak_protocols::msg_scene_info::default_instance());
}

packetl2c_enter_room_result::packetl2c_enter_room_result(const packetl2c_enter_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_enter_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15059;
  result_ = 2;
  scene_info_ = NULL;
  self_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_room_result::~packetl2c_enter_room_result() {
  SharedDtor();
}

void packetl2c_enter_room_result::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info_;
  }
}

void packetl2c_enter_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_room_result_descriptor_;
}

const packetl2c_enter_room_result& packetl2c_enter_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_room_result* packetl2c_enter_room_result::default_instance_ = NULL;

packetl2c_enter_room_result* packetl2c_enter_room_result::New() const {
  return new packetl2c_enter_room_result;
}

void packetl2c_enter_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15059;
    result_ = 2;
    if (has_scene_info()) {
      if (scene_info_ != NULL) scene_info_->::game_rouletteak_protocols::msg_scene_info::Clear();
    }
    self_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scene_info;
        break;
      }

      // optional .game_rouletteak_protocols.msg_scene_info scene_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_gold;
        break;
      }

      // optional int64 self_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_gold_)));
          set_has_self_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_enter_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .game_rouletteak_protocols.msg_scene_info scene_info = 3;
  if (has_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scene_info(), output);
  }

  // optional int64 self_gold = 4;
  if (has_self_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->self_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_enter_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .game_rouletteak_protocols.msg_scene_info scene_info = 3;
  if (has_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scene_info(), target);
  }

  // optional int64 self_gold = 4;
  if (has_self_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->self_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_enter_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .game_rouletteak_protocols.msg_scene_info scene_info = 3;
    if (has_scene_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info());
    }

    // optional int64 self_gold = 4;
    if (has_self_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_room_result::MergeFrom(const packetl2c_enter_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_scene_info()) {
      mutable_scene_info()->::game_rouletteak_protocols::msg_scene_info::MergeFrom(from.scene_info());
    }
    if (from.has_self_gold()) {
      set_self_gold(from.self_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_room_result::CopyFrom(const packetl2c_enter_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_room_result::IsInitialized() const {

  return true;
}

void packetl2c_enter_room_result::Swap(packetl2c_enter_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(scene_info_, other->scene_info_);
    std::swap(self_gold_, other->self_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_room_result_descriptor_;
  metadata.reflection = packetl2c_enter_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_room::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_room::packetc2l_leave_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_leave_room::InitAsDefaultInstance() {
}

packetc2l_leave_room::packetc2l_leave_room(const packetc2l_leave_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_leave_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10016;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_room::~packetc2l_leave_room() {
  SharedDtor();
}

void packetc2l_leave_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_room_descriptor_;
}

const packetc2l_leave_room& packetc2l_leave_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_room* packetc2l_leave_room::default_instance_ = NULL;

packetc2l_leave_room* packetc2l_leave_room::New() const {
  return new packetc2l_leave_room;
}

void packetc2l_leave_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10016;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_leave_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_leave_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_leave_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_room::MergeFrom(const packetc2l_leave_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_room::CopyFrom(const packetc2l_leave_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_room::IsInitialized() const {

  return true;
}

void packetc2l_leave_room::Swap(packetc2l_leave_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_room_descriptor_;
  metadata.reflection = packetc2l_leave_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_room_result::kPacketIdFieldNumber;
const int packetl2c_leave_room_result::kResultFieldNumber;
const int packetl2c_leave_room_result::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_room_result::packetl2c_leave_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_leave_room_result::InitAsDefaultInstance() {
}

packetl2c_leave_room_result::packetl2c_leave_room_result(const packetl2c_leave_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_leave_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15060;
  result_ = 1;
  player_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_room_result::~packetl2c_leave_room_result() {
  SharedDtor();
}

void packetl2c_leave_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_room_result_descriptor_;
}

const packetl2c_leave_room_result& packetl2c_leave_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_room_result* packetl2c_leave_room_result::default_instance_ = NULL;

packetl2c_leave_room_result* packetl2c_leave_room_result::New() const {
  return new packetl2c_leave_room_result;
}

void packetl2c_leave_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15060;
    result_ = 1;
    player_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_leave_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->player_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_leave_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->player_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_leave_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 player_gold = 3;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_room_result::MergeFrom(const packetl2c_leave_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_room_result::CopyFrom(const packetl2c_leave_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_room_result::IsInitialized() const {

  return true;
}

void packetl2c_leave_room_result::Swap(packetl2c_leave_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_room_result_descriptor_;
  metadata.reflection = packetl2c_leave_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_info::kPlayerIdFieldNumber;
const int msg_player_info::kPlayerNameFieldNumber;
const int msg_player_info::kHeadFrameFieldNumber;
const int msg_player_info::kHeadCustomFieldNumber;
const int msg_player_info::kPlayerGoldFieldNumber;
const int msg_player_info::kPlayerSexFieldNumber;
const int msg_player_info::kVipLevelFieldNumber;
const int msg_player_info::kHistoryBetGoldFieldNumber;
const int msg_player_info::kWinCountFieldNumber;
#endif  // !_MSC_VER

msg_player_info::msg_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_info::InitAsDefaultInstance() {
}

msg_player_info::msg_player_info(const msg_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_frame_ = 0;
  head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  vip_level_ = 0;
  history_bet_gold_ = 0;
  win_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_info::~msg_player_info() {
  SharedDtor();
}

void msg_player_info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_info_descriptor_;
}

const msg_player_info& msg_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

msg_player_info* msg_player_info::default_instance_ = NULL;

msg_player_info* msg_player_info::New() const {
  return new msg_player_info;
}

void msg_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    head_frame_ = 0;
    if (has_head_custom()) {
      if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
        head_custom_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
    player_sex_ = 0;
    vip_level_ = 0;
    history_bet_gold_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    win_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_frame;
        break;
      }

      // optional int32 head_frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_frame_)));
          set_has_head_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head_custom;
        break;
      }

      // optional string head_custom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head_custom().data(), this->head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_history_bet_gold;
        break;
      }

      // optional int32 history_bet_gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_bet_gold_)));
          set_has_history_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_win_count;
        break;
      }

      // optional int32 win_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->head_frame(), output);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_sex(), output);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_level(), output);
  }

  // optional int32 history_bet_gold = 8;
  if (has_history_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->history_bet_gold(), output);
  }

  // optional int32 win_count = 9;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->win_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->head_frame(), target);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_sex(), target);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_level(), target);
  }

  // optional int32 history_bet_gold = 8;
  if (has_history_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->history_bet_gold(), target);
  }

  // optional int32 win_count = 9;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->win_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional int32 head_frame = 3;
    if (has_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_frame());
    }

    // optional string head_custom = 4;
    if (has_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 6;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 vip_level = 7;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 history_bet_gold = 8;
    if (has_history_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_bet_gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 win_count = 9;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_info::MergeFrom(const msg_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_head_frame()) {
      set_head_frame(from.head_frame());
    }
    if (from.has_head_custom()) {
      set_head_custom(from.head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_history_bet_gold()) {
      set_history_bet_gold(from.history_bet_gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_info::CopyFrom(const msg_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_info::IsInitialized() const {

  return true;
}

void msg_player_info::Swap(msg_player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(head_frame_, other->head_frame_);
    std::swap(head_custom_, other->head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(history_bet_gold_, other->history_bet_gold_);
    std::swap(win_count_, other->win_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_info_descriptor_;
  metadata.reflection = msg_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_info::kPlayerIdFieldNumber;
const int msg_bet_info::kBetPosFieldNumber;
const int msg_bet_info::kBetGoldFieldNumber;
const int msg_bet_info::kCurGoldFieldNumber;
const int msg_bet_info::kChipIndexFieldNumber;
#endif  // !_MSC_VER

msg_bet_info::msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_bet_info::InitAsDefaultInstance() {
}

msg_bet_info::msg_bet_info(const msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  bet_pos_ = 0;
  bet_gold_ = GOOGLE_LONGLONG(0);
  cur_gold_ = GOOGLE_LONGLONG(0);
  chip_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_info::~msg_bet_info() {
  SharedDtor();
}

void msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_info_descriptor_;
}

const msg_bet_info& msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

msg_bet_info* msg_bet_info::default_instance_ = NULL;

msg_bet_info* msg_bet_info::New() const {
  return new msg_bet_info;
}

void msg_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    bet_pos_ = 0;
    bet_gold_ = GOOGLE_LONGLONG(0);
    cur_gold_ = GOOGLE_LONGLONG(0);
    chip_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_pos;
        break;
      }

      // optional int32 bet_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_pos_)));
          set_has_bet_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_gold;
        break;
      }

      // optional int64 bet_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_gold;
        break;
      }

      // optional int64 cur_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_gold_)));
          set_has_cur_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chip_index;
        break;
      }

      // optional int32 chip_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chip_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_index_)));
          set_has_chip_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 bet_pos = 2;
  if (has_bet_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bet_pos(), output);
  }

  // optional int64 bet_gold = 3;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bet_gold(), output);
  }

  // optional int64 cur_gold = 4;
  if (has_cur_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cur_gold(), output);
  }

  // optional int32 chip_index = 5;
  if (has_chip_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chip_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 bet_pos = 2;
  if (has_bet_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bet_pos(), target);
  }

  // optional int64 bet_gold = 3;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bet_gold(), target);
  }

  // optional int64 cur_gold = 4;
  if (has_cur_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cur_gold(), target);
  }

  // optional int32 chip_index = 5;
  if (has_chip_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chip_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 bet_pos = 2;
    if (has_bet_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_pos());
    }

    // optional int64 bet_gold = 3;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold());
    }

    // optional int64 cur_gold = 4;
    if (has_cur_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_gold());
    }

    // optional int32 chip_index = 5;
    if (has_chip_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chip_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_info::MergeFrom(const msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_bet_pos()) {
      set_bet_pos(from.bet_pos());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
    if (from.has_cur_gold()) {
      set_cur_gold(from.cur_gold());
    }
    if (from.has_chip_index()) {
      set_chip_index(from.chip_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_info::CopyFrom(const msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_info::IsInitialized() const {

  return true;
}

void msg_bet_info::Swap(msg_bet_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(bet_pos_, other->bet_pos_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(cur_gold_, other->cur_gold_);
    std::swap(chip_index_, other->chip_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_info_descriptor_;
  metadata.reflection = msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_gold::kPlayerIdFieldNumber;
const int msg_player_gold::kWinGoldFieldNumber;
const int msg_player_gold::kCurGoldFieldNumber;
const int msg_player_gold::kHistoryBetGoldFieldNumber;
const int msg_player_gold::kWinCountFieldNumber;
#endif  // !_MSC_VER

msg_player_gold::msg_player_gold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_gold::InitAsDefaultInstance() {
}

msg_player_gold::msg_player_gold(const msg_player_gold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_gold::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  win_gold_ = GOOGLE_LONGLONG(0);
  cur_gold_ = GOOGLE_LONGLONG(0);
  history_bet_gold_ = 0;
  win_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_gold::~msg_player_gold() {
  SharedDtor();
}

void msg_player_gold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_player_gold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_gold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_gold_descriptor_;
}

const msg_player_gold& msg_player_gold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

msg_player_gold* msg_player_gold::default_instance_ = NULL;

msg_player_gold* msg_player_gold::New() const {
  return new msg_player_gold;
}

void msg_player_gold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    win_gold_ = GOOGLE_LONGLONG(0);
    cur_gold_ = GOOGLE_LONGLONG(0);
    history_bet_gold_ = 0;
    win_count_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_gold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_gold;
        break;
      }

      // optional int64 win_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_gold_)));
          set_has_win_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_gold;
        break;
      }

      // optional int64 cur_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_gold_)));
          set_has_cur_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_history_bet_gold;
        break;
      }

      // optional int32 history_bet_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_bet_gold_)));
          set_has_history_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_count;
        break;
      }

      // optional int64 win_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_gold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int64 win_gold = 2;
  if (has_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->win_gold(), output);
  }

  // optional int64 cur_gold = 3;
  if (has_cur_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_gold(), output);
  }

  // optional int32 history_bet_gold = 4;
  if (has_history_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->history_bet_gold(), output);
  }

  // optional int64 win_count = 5;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->win_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_gold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int64 win_gold = 2;
  if (has_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->win_gold(), target);
  }

  // optional int64 cur_gold = 3;
  if (has_cur_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_gold(), target);
  }

  // optional int32 history_bet_gold = 4;
  if (has_history_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->history_bet_gold(), target);
  }

  // optional int64 win_count = 5;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->win_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_gold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 win_gold = 2;
    if (has_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_gold());
    }

    // optional int64 cur_gold = 3;
    if (has_cur_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_gold());
    }

    // optional int32 history_bet_gold = 4;
    if (has_history_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_bet_gold());
    }

    // optional int64 win_count = 5;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_gold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_gold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_gold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_gold::MergeFrom(const msg_player_gold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_win_gold()) {
      set_win_gold(from.win_gold());
    }
    if (from.has_cur_gold()) {
      set_cur_gold(from.cur_gold());
    }
    if (from.has_history_bet_gold()) {
      set_history_bet_gold(from.history_bet_gold());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_gold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_gold::CopyFrom(const msg_player_gold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_gold::IsInitialized() const {

  return true;
}

void msg_player_gold::Swap(msg_player_gold* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(win_gold_, other->win_gold_);
    std::swap(cur_gold_, other->cur_gold_);
    std::swap(history_bet_gold_, other->history_bet_gold_);
    std::swap(win_count_, other->win_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_gold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_gold_descriptor_;
  metadata.reflection = msg_player_gold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_result_info::kNumberFieldNumber;
const int msg_result_info::kPlayerGoldsFieldNumber;
#endif  // !_MSC_VER

msg_result_info::msg_result_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_result_info::InitAsDefaultInstance() {
}

msg_result_info::msg_result_info(const msg_result_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_result_info::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_result_info::~msg_result_info() {
  SharedDtor();
}

void msg_result_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_result_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_result_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_result_info_descriptor_;
}

const msg_result_info& msg_result_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

msg_result_info* msg_result_info::default_instance_ = NULL;

msg_result_info* msg_result_info::New() const {
  return new msg_result_info;
}

void msg_result_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
  }
  player_golds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_result_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_golds;
        break;
      }

      // repeated .game_rouletteak_protocols.msg_player_gold player_golds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_golds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_golds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_golds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_result_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // repeated .game_rouletteak_protocols.msg_player_gold player_golds = 2;
  for (int i = 0; i < this->player_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_golds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_result_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // repeated .game_rouletteak_protocols.msg_player_gold player_golds = 2;
  for (int i = 0; i < this->player_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_golds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_result_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  // repeated .game_rouletteak_protocols.msg_player_gold player_golds = 2;
  total_size += 1 * this->player_golds_size();
  for (int i = 0; i < this->player_golds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_golds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_result_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_result_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_result_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_result_info::MergeFrom(const msg_result_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_golds_.MergeFrom(from.player_golds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_result_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_result_info::CopyFrom(const msg_result_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_result_info::IsInitialized() const {

  return true;
}

void msg_result_info::Swap(msg_result_info* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    player_golds_.Swap(&other->player_golds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_result_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_result_info_descriptor_;
  metadata.reflection = msg_result_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_scene_info::kRoomidFieldNumber;
const int msg_scene_info::kSceneStateFieldNumber;
const int msg_scene_info::kCdFieldNumber;
const int msg_scene_info::kPlayerListFieldNumber;
const int msg_scene_info::kBetInfosFieldNumber;
const int msg_scene_info::kResultInfoFieldNumber;
const int msg_scene_info::kPosListFieldNumber;
const int msg_scene_info::kBetGoldRoomFieldNumber;
const int msg_scene_info::kBetGoldSelfFieldNumber;
#endif  // !_MSC_VER

msg_scene_info::msg_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_scene_info::InitAsDefaultInstance() {
  result_info_ = const_cast< ::game_rouletteak_protocols::msg_result_info*>(&::game_rouletteak_protocols::msg_result_info::default_instance());
}

msg_scene_info::msg_scene_info(const msg_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_scene_info::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  scene_state_ = 0;
  cd_ = 0;
  result_info_ = NULL;
  bet_gold_room_ = GOOGLE_LONGLONG(0);
  bet_gold_self_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_scene_info::~msg_scene_info() {
  SharedDtor();
}

void msg_scene_info::SharedDtor() {
  if (this != default_instance_) {
    delete result_info_;
  }
}

void msg_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_scene_info_descriptor_;
}

const msg_scene_info& msg_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

msg_scene_info* msg_scene_info::default_instance_ = NULL;

msg_scene_info* msg_scene_info::New() const {
  return new msg_scene_info;
}

void msg_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    scene_state_ = 0;
    cd_ = 0;
    if (has_result_info()) {
      if (result_info_ != NULL) result_info_->::game_rouletteak_protocols::msg_result_info::Clear();
    }
    bet_gold_room_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bet_gold_self_ = GOOGLE_LONGLONG(0);
  }
  player_list_.Clear();
  bet_infos_.Clear();
  pos_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_state;
        break;
      }

      // optional int32 scene_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_state_)));
          set_has_scene_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // optional int32 cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        break;
      }

      // repeated .game_rouletteak_protocols.msg_player_info player_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        if (input->ExpectTag(42)) goto parse_bet_infos;
        break;
      }

      // repeated .game_rouletteak_protocols.msg_bet_info bet_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bet_infos;
        if (input->ExpectTag(50)) goto parse_result_info;
        break;
      }

      // optional .game_rouletteak_protocols.msg_result_info result_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos_list;
        break;
      }

      // repeated int32 pos_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_pos_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos_list;
        if (input->ExpectTag(64)) goto parse_bet_gold_room;
        break;
      }

      // optional int64 bet_gold_room = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold_room:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_room_)));
          set_has_bet_gold_room();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bet_gold_self;
        break;
      }

      // optional int64 bet_gold_self = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_self_)));
          set_has_bet_gold_self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 scene_state = 2;
  if (has_scene_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_state(), output);
  }

  // optional int32 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cd(), output);
  }

  // repeated .game_rouletteak_protocols.msg_player_info player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(i), output);
  }

  // repeated .game_rouletteak_protocols.msg_bet_info bet_infos = 5;
  for (int i = 0; i < this->bet_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bet_infos(i), output);
  }

  // optional .game_rouletteak_protocols.msg_result_info result_info = 6;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->result_info(), output);
  }

  // repeated int32 pos_list = 7;
  for (int i = 0; i < this->pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->pos_list(i), output);
  }

  // optional int64 bet_gold_room = 8;
  if (has_bet_gold_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->bet_gold_room(), output);
  }

  // optional int64 bet_gold_self = 9;
  if (has_bet_gold_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->bet_gold_self(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 scene_state = 2;
  if (has_scene_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_state(), target);
  }

  // optional int32 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cd(), target);
  }

  // repeated .game_rouletteak_protocols.msg_player_info player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_list(i), target);
  }

  // repeated .game_rouletteak_protocols.msg_bet_info bet_infos = 5;
  for (int i = 0; i < this->bet_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bet_infos(i), target);
  }

  // optional .game_rouletteak_protocols.msg_result_info result_info = 6;
  if (has_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->result_info(), target);
  }

  // repeated int32 pos_list = 7;
  for (int i = 0; i < this->pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->pos_list(i), target);
  }

  // optional int64 bet_gold_room = 8;
  if (has_bet_gold_room()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->bet_gold_room(), target);
  }

  // optional int64 bet_gold_self = 9;
  if (has_bet_gold_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->bet_gold_self(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 scene_state = 2;
    if (has_scene_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_state());
    }

    // optional int32 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // optional .game_rouletteak_protocols.msg_result_info result_info = 6;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result_info());
    }

    // optional int64 bet_gold_room = 8;
    if (has_bet_gold_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold_room());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 bet_gold_self = 9;
    if (has_bet_gold_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold_self());
    }

  }
  // repeated .game_rouletteak_protocols.msg_player_info player_list = 4;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .game_rouletteak_protocols.msg_bet_info bet_infos = 5;
  total_size += 1 * this->bet_infos_size();
  for (int i = 0; i < this->bet_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_infos(i));
  }

  // repeated int32 pos_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos_list(i));
    }
    total_size += 1 * this->pos_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_scene_info::MergeFrom(const msg_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  bet_infos_.MergeFrom(from.bet_infos_);
  pos_list_.MergeFrom(from.pos_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_scene_state()) {
      set_scene_state(from.scene_state());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_result_info()) {
      mutable_result_info()->::game_rouletteak_protocols::msg_result_info::MergeFrom(from.result_info());
    }
    if (from.has_bet_gold_room()) {
      set_bet_gold_room(from.bet_gold_room());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bet_gold_self()) {
      set_bet_gold_self(from.bet_gold_self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_scene_info::CopyFrom(const msg_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_scene_info::IsInitialized() const {

  return true;
}

void msg_scene_info::Swap(msg_scene_info* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(scene_state_, other->scene_state_);
    std::swap(cd_, other->cd_);
    player_list_.Swap(&other->player_list_);
    bet_infos_.Swap(&other->bet_infos_);
    std::swap(result_info_, other->result_info_);
    pos_list_.Swap(&other->pos_list_);
    std::swap(bet_gold_room_, other->bet_gold_room_);
    std::swap(bet_gold_self_, other->bet_gold_self_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_scene_info_descriptor_;
  metadata.reflection = msg_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_scene_info::packetc2l_get_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_scene_info::packetc2l_get_scene_info(const packetc2l_get_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_scene_info::~packetc2l_get_scene_info() {
  SharedDtor();
}

void packetc2l_get_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_scene_info_descriptor_;
}

const packetc2l_get_scene_info& packetc2l_get_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_scene_info* packetc2l_get_scene_info::default_instance_ = NULL;

packetc2l_get_scene_info* packetc2l_get_scene_info::New() const {
  return new packetc2l_get_scene_info;
}

void packetc2l_get_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_scene_info::MergeFrom(const packetc2l_get_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_scene_info::CopyFrom(const packetc2l_get_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_scene_info::Swap(packetc2l_get_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_scene_info_result::kSceneInfoFieldNumber;
const int packetl2c_get_scene_info_result::kSelfGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_scene_info_result::InitAsDefaultInstance() {
  scene_info_ = const_cast< ::game_rouletteak_protocols::msg_scene_info*>(&::game_rouletteak_protocols::msg_scene_info::default_instance());
}

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result(const packetl2c_get_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  scene_info_ = NULL;
  self_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_scene_info_result::~packetl2c_get_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info_;
  }
}

void packetl2c_get_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_scene_info_result_descriptor_;
}

const packetl2c_get_scene_info_result& packetl2c_get_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::default_instance_ = NULL;

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::New() const {
  return new packetl2c_get_scene_info_result;
}

void packetl2c_get_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
    if (has_scene_info()) {
      if (scene_info_ != NULL) scene_info_->::game_rouletteak_protocols::msg_scene_info::Clear();
    }
    self_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene_info;
        break;
      }

      // optional .game_rouletteak_protocols.msg_scene_info scene_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_self_gold;
        break;
      }

      // optional int64 self_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_gold_)));
          set_has_self_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_rouletteak_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scene_info(), output);
  }

  // optional int64 self_gold = 3;
  if (has_self_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->self_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_rouletteak_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scene_info(), target);
  }

  // optional int64 self_gold = 3;
  if (has_self_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->self_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_rouletteak_protocols.msg_scene_info scene_info = 2;
    if (has_scene_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info());
    }

    // optional int64 self_gold = 3;
    if (has_self_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_scene_info_result::MergeFrom(const packetl2c_get_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_info()) {
      mutable_scene_info()->::game_rouletteak_protocols::msg_scene_info::MergeFrom(from.scene_info());
    }
    if (from.has_self_gold()) {
      set_self_gold(from.self_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::CopyFrom(const packetl2c_get_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_scene_info_result::Swap(packetl2c_get_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_info_, other->scene_info_);
    std::swap(self_gold_, other->self_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_prepare_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_prepare_into::kCdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_prepare_into::packetl2c_bc_scene_prepare_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_prepare_into::InitAsDefaultInstance() {
}

packetl2c_bc_scene_prepare_into::packetl2c_bc_scene_prepare_into(const packetl2c_bc_scene_prepare_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_prepare_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15050;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_prepare_into::~packetl2c_bc_scene_prepare_into() {
  SharedDtor();
}

void packetl2c_bc_scene_prepare_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_scene_prepare_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_prepare_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_prepare_into_descriptor_;
}

const packetl2c_bc_scene_prepare_into& packetl2c_bc_scene_prepare_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_prepare_into* packetl2c_bc_scene_prepare_into::default_instance_ = NULL;

packetl2c_bc_scene_prepare_into* packetl2c_bc_scene_prepare_into::New() const {
  return new packetl2c_bc_scene_prepare_into;
}

void packetl2c_bc_scene_prepare_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15050;
    cd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_prepare_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // optional int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_prepare_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_prepare_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_prepare_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_prepare_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_prepare_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_prepare_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_prepare_into::MergeFrom(const packetl2c_bc_scene_prepare_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_prepare_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_prepare_into::CopyFrom(const packetl2c_bc_scene_prepare_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_prepare_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_prepare_into::Swap(packetl2c_bc_scene_prepare_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_prepare_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_prepare_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_prepare_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_bet_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_bet_into::kCdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_bet_into::packetl2c_bc_scene_bet_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_bet_into::InitAsDefaultInstance() {
}

packetl2c_bc_scene_bet_into::packetl2c_bc_scene_bet_into(const packetl2c_bc_scene_bet_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_bet_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15051;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_bet_into::~packetl2c_bc_scene_bet_into() {
  SharedDtor();
}

void packetl2c_bc_scene_bet_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_scene_bet_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_bet_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_bet_into_descriptor_;
}

const packetl2c_bc_scene_bet_into& packetl2c_bc_scene_bet_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_bet_into* packetl2c_bc_scene_bet_into::default_instance_ = NULL;

packetl2c_bc_scene_bet_into* packetl2c_bc_scene_bet_into::New() const {
  return new packetl2c_bc_scene_bet_into;
}

void packetl2c_bc_scene_bet_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15051;
    cd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_bet_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // optional int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_bet_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_bet_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_bet_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_bet_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_bet_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_bet_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_bet_into::MergeFrom(const packetl2c_bc_scene_bet_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_bet_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_bet_into::CopyFrom(const packetl2c_bc_scene_bet_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_bet_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_bet_into::Swap(packetl2c_bc_scene_bet_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_bet_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_bet_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_bet_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_sync_scene_bet_into::kPacketIdFieldNumber;
const int packetl2c_bc_sync_scene_bet_into::kBetListFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_sync_scene_bet_into::packetl2c_bc_sync_scene_bet_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_sync_scene_bet_into::InitAsDefaultInstance() {
}

packetl2c_bc_sync_scene_bet_into::packetl2c_bc_sync_scene_bet_into(const packetl2c_bc_sync_scene_bet_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_sync_scene_bet_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15052;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_sync_scene_bet_into::~packetl2c_bc_sync_scene_bet_into() {
  SharedDtor();
}

void packetl2c_bc_sync_scene_bet_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_sync_scene_bet_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_sync_scene_bet_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_sync_scene_bet_into_descriptor_;
}

const packetl2c_bc_sync_scene_bet_into& packetl2c_bc_sync_scene_bet_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_sync_scene_bet_into* packetl2c_bc_sync_scene_bet_into::default_instance_ = NULL;

packetl2c_bc_sync_scene_bet_into* packetl2c_bc_sync_scene_bet_into::New() const {
  return new packetl2c_bc_sync_scene_bet_into;
}

void packetl2c_bc_sync_scene_bet_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15052;
  }
  bet_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_sync_scene_bet_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_list;
        break;
      }

      // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_sync_scene_bet_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 2;
  for (int i = 0; i < this->bet_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_sync_scene_bet_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 2;
  for (int i = 0; i < this->bet_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_sync_scene_bet_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 2;
  total_size += 1 * this->bet_list_size();
  for (int i = 0; i < this->bet_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_sync_scene_bet_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_sync_scene_bet_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_sync_scene_bet_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_sync_scene_bet_into::MergeFrom(const packetl2c_bc_sync_scene_bet_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_list_.MergeFrom(from.bet_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_sync_scene_bet_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_sync_scene_bet_into::CopyFrom(const packetl2c_bc_sync_scene_bet_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_sync_scene_bet_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_sync_scene_bet_into::Swap(packetl2c_bc_sync_scene_bet_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_list_.Swap(&other->bet_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_sync_scene_bet_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_sync_scene_bet_into_descriptor_;
  metadata.reflection = packetl2c_bc_sync_scene_bet_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_deal_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_deal_into::kCdFieldNumber;
const int packetl2c_bc_scene_deal_into::kNumberFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_deal_into::packetl2c_bc_scene_deal_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_deal_into::InitAsDefaultInstance() {
}

packetl2c_bc_scene_deal_into::packetl2c_bc_scene_deal_into(const packetl2c_bc_scene_deal_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_deal_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15053;
  cd_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_deal_into::~packetl2c_bc_scene_deal_into() {
  SharedDtor();
}

void packetl2c_bc_scene_deal_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_scene_deal_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_deal_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_deal_into_descriptor_;
}

const packetl2c_bc_scene_deal_into& packetl2c_bc_scene_deal_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_deal_into* packetl2c_bc_scene_deal_into::default_instance_ = NULL;

packetl2c_bc_scene_deal_into* packetl2c_bc_scene_deal_into::New() const {
  return new packetl2c_bc_scene_deal_into;
}

void packetl2c_bc_scene_deal_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15053;
    cd_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_deal_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // optional int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_deal_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  // optional int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_deal_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  // optional int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_deal_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_deal_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_deal_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_deal_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_deal_into::MergeFrom(const packetl2c_bc_scene_deal_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_deal_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_deal_into::CopyFrom(const packetl2c_bc_scene_deal_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_deal_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_deal_into::Swap(packetl2c_bc_scene_deal_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(cd_, other->cd_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_deal_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_deal_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_deal_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_result_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_result_into::kCdFieldNumber;
const int packetl2c_bc_scene_result_into::kResultInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_result_into::packetl2c_bc_scene_result_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_result_into::InitAsDefaultInstance() {
  result_info_ = const_cast< ::game_rouletteak_protocols::msg_result_info*>(&::game_rouletteak_protocols::msg_result_info::default_instance());
}

packetl2c_bc_scene_result_into::packetl2c_bc_scene_result_into(const packetl2c_bc_scene_result_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_result_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15054;
  cd_ = 0;
  result_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_result_into::~packetl2c_bc_scene_result_into() {
  SharedDtor();
}

void packetl2c_bc_scene_result_into::SharedDtor() {
  if (this != default_instance_) {
    delete result_info_;
  }
}

void packetl2c_bc_scene_result_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_result_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_result_into_descriptor_;
}

const packetl2c_bc_scene_result_into& packetl2c_bc_scene_result_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_result_into* packetl2c_bc_scene_result_into::default_instance_ = NULL;

packetl2c_bc_scene_result_into* packetl2c_bc_scene_result_into::New() const {
  return new packetl2c_bc_scene_result_into;
}

void packetl2c_bc_scene_result_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15054;
    cd_ = 0;
    if (has_result_info()) {
      if (result_info_ != NULL) result_info_->::game_rouletteak_protocols::msg_result_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_result_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // optional int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }

      // optional .game_rouletteak_protocols.msg_result_info result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_result_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  // optional .game_rouletteak_protocols.msg_result_info result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_result_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  // optional .game_rouletteak_protocols.msg_result_info result_info = 3;
  if (has_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_result_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // optional .game_rouletteak_protocols.msg_result_info result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_result_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_result_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_result_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_result_into::MergeFrom(const packetl2c_bc_scene_result_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_result_info()) {
      mutable_result_info()->::game_rouletteak_protocols::msg_result_info::MergeFrom(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_result_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_result_into::CopyFrom(const packetl2c_bc_scene_result_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_result_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_result_into::Swap(packetl2c_bc_scene_result_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(cd_, other->cd_);
    std::swap(result_info_, other->result_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_result_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_result_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_result_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_bet_info::kPacketIdFieldNumber;
const int packetc2l_ask_bet_info::kBetPosFieldNumber;
const int packetc2l_ask_bet_info::kBetGoldFieldNumber;
const int packetc2l_ask_bet_info::kChipIndexFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_bet_info::packetc2l_ask_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_bet_info::InitAsDefaultInstance() {
}

packetc2l_ask_bet_info::packetc2l_ask_bet_info(const packetc2l_ask_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  bet_pos_ = 0;
  bet_gold_ = GOOGLE_LONGLONG(0);
  chip_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_bet_info::~packetc2l_ask_bet_info() {
  SharedDtor();
}

void packetc2l_ask_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_bet_info_descriptor_;
}

const packetc2l_ask_bet_info& packetc2l_ask_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_bet_info* packetc2l_ask_bet_info::default_instance_ = NULL;

packetc2l_ask_bet_info* packetc2l_ask_bet_info::New() const {
  return new packetc2l_ask_bet_info;
}

void packetc2l_ask_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10011;
    bet_pos_ = 0;
    bet_gold_ = GOOGLE_LONGLONG(0);
    chip_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_pos;
        break;
      }

      // optional int32 bet_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_pos_)));
          set_has_bet_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_gold;
        break;
      }

      // optional int64 bet_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chip_index;
        break;
      }

      // optional int32 chip_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chip_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_index_)));
          set_has_chip_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bet_pos = 2;
  if (has_bet_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bet_pos(), output);
  }

  // optional int64 bet_gold = 3;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bet_gold(), output);
  }

  // optional int32 chip_index = 4;
  if (has_chip_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chip_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bet_pos = 2;
  if (has_bet_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bet_pos(), target);
  }

  // optional int64 bet_gold = 3;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bet_gold(), target);
  }

  // optional int32 chip_index = 4;
  if (has_chip_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chip_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bet_pos = 2;
    if (has_bet_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_pos());
    }

    // optional int64 bet_gold = 3;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_gold());
    }

    // optional int32 chip_index = 4;
    if (has_chip_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chip_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_bet_info::MergeFrom(const packetc2l_ask_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bet_pos()) {
      set_bet_pos(from.bet_pos());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
    if (from.has_chip_index()) {
      set_chip_index(from.chip_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_bet_info::CopyFrom(const packetc2l_ask_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_bet_info::IsInitialized() const {

  return true;
}

void packetc2l_ask_bet_info::Swap(packetc2l_ask_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bet_pos_, other->bet_pos_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(chip_index_, other->chip_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_bet_info_descriptor_;
  metadata.reflection = packetc2l_ask_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bet_info_result::kPacketIdFieldNumber;
const int packetl2c_bet_info_result::kResultFieldNumber;
const int packetl2c_bet_info_result::kBetInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bet_info_result::packetl2c_bet_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bet_info_result::InitAsDefaultInstance() {
  bet_info_ = const_cast< ::game_rouletteak_protocols::msg_bet_info*>(&::game_rouletteak_protocols::msg_bet_info::default_instance());
}

packetl2c_bet_info_result::packetl2c_bet_info_result(const packetl2c_bet_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bet_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  result_ = 2;
  bet_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bet_info_result::~packetl2c_bet_info_result() {
  SharedDtor();
}

void packetl2c_bet_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete bet_info_;
  }
}

void packetl2c_bet_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bet_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bet_info_result_descriptor_;
}

const packetl2c_bet_info_result& packetl2c_bet_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bet_info_result* packetl2c_bet_info_result::default_instance_ = NULL;

packetl2c_bet_info_result* packetl2c_bet_info_result::New() const {
  return new packetl2c_bet_info_result;
}

void packetl2c_bet_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
    result_ = 2;
    if (has_bet_info()) {
      if (bet_info_ != NULL) bet_info_->::game_rouletteak_protocols::msg_bet_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bet_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bet_info;
        break;
      }

      // optional .game_rouletteak_protocols.msg_bet_info bet_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bet_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .game_rouletteak_protocols.msg_bet_info bet_info = 3;
  if (has_bet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bet_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bet_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .game_rouletteak_protocols.msg_bet_info bet_info = 3;
  if (has_bet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bet_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bet_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .game_rouletteak_protocols.msg_bet_info bet_info = 3;
    if (has_bet_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bet_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bet_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bet_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bet_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bet_info_result::MergeFrom(const packetl2c_bet_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bet_info()) {
      mutable_bet_info()->::game_rouletteak_protocols::msg_bet_info::MergeFrom(from.bet_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bet_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bet_info_result::CopyFrom(const packetl2c_bet_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bet_info_result::IsInitialized() const {

  return true;
}

void packetl2c_bet_info_result::Swap(packetl2c_bet_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(bet_info_, other->bet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bet_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bet_info_result_descriptor_;
  metadata.reflection = packetl2c_bet_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_player_info::kPacketIdFieldNumber;
const int packetl2c_enter_player_info::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_player_info::packetl2c_enter_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_enter_player_info::InitAsDefaultInstance() {
  player_info_ = const_cast< ::game_rouletteak_protocols::msg_player_info*>(&::game_rouletteak_protocols::msg_player_info::default_instance());
}

packetl2c_enter_player_info::packetl2c_enter_player_info(const packetl2c_enter_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_enter_player_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15055;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_player_info::~packetl2c_enter_player_info() {
  SharedDtor();
}

void packetl2c_enter_player_info::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void packetl2c_enter_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_player_info_descriptor_;
}

const packetl2c_enter_player_info& packetl2c_enter_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_player_info* packetl2c_enter_player_info::default_instance_ = NULL;

packetl2c_enter_player_info* packetl2c_enter_player_info::New() const {
  return new packetl2c_enter_player_info;
}

void packetl2c_enter_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15055;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::game_rouletteak_protocols::msg_player_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }

      // optional .game_rouletteak_protocols.msg_player_info player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_enter_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_rouletteak_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_enter_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_rouletteak_protocols.msg_player_info player_info = 2;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_enter_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_player_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_rouletteak_protocols.msg_player_info player_info = 2;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_player_info::MergeFrom(const packetl2c_enter_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::game_rouletteak_protocols::msg_player_info::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_player_info::CopyFrom(const packetl2c_enter_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_player_info::IsInitialized() const {

  return true;
}

void packetl2c_enter_player_info::Swap(packetl2c_enter_player_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_info_, other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_player_info_descriptor_;
  metadata.reflection = packetl2c_enter_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_player_info::kPacketIdFieldNumber;
const int packetl2c_leave_player_info::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_player_info::packetl2c_leave_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_leave_player_info::InitAsDefaultInstance() {
}

packetl2c_leave_player_info::packetl2c_leave_player_info(const packetl2c_leave_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_leave_player_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15056;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_player_info::~packetl2c_leave_player_info() {
  SharedDtor();
}

void packetl2c_leave_player_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_player_info_descriptor_;
}

const packetl2c_leave_player_info& packetl2c_leave_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_player_info* packetl2c_leave_player_info::default_instance_ = NULL;

packetl2c_leave_player_info* packetl2c_leave_player_info::New() const {
  return new packetl2c_leave_player_info;
}

void packetl2c_leave_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15056;
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_leave_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_leave_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_leave_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_player_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_player_info::MergeFrom(const packetl2c_leave_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_player_info::CopyFrom(const packetl2c_leave_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_player_info::IsInitialized() const {

  return true;
}

void packetl2c_leave_player_info::Swap(packetl2c_leave_player_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_player_info_descriptor_;
  metadata.reflection = packetl2c_leave_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_attr::kPacketIdFieldNumber;
const int packetl2c_bc_change_attr::kPlayerIdFieldNumber;
const int packetl2c_bc_change_attr::kItemTypeFieldNumber;
const int packetl2c_bc_change_attr::kChangeValueFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_attr::packetl2c_bc_change_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_change_attr::InitAsDefaultInstance() {
}

packetl2c_bc_change_attr::packetl2c_bc_change_attr(const packetl2c_bc_change_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15066;
  player_id_ = 0;
  item_type_ = 0;
  change_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_attr::~packetl2c_bc_change_attr() {
  SharedDtor();
}

void packetl2c_bc_change_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_change_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_attr_descriptor_;
}

const packetl2c_bc_change_attr& packetl2c_bc_change_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_attr* packetl2c_bc_change_attr::default_instance_ = NULL;

packetl2c_bc_change_attr* packetl2c_bc_change_attr::New() const {
  return new packetl2c_bc_change_attr;
}

void packetl2c_bc_change_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15066;
    player_id_ = 0;
    item_type_ = 0;
    change_value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_type;
        break;
      }

      // optional int32 item_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change_value;
        break;
      }

      // optional int64 change_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_value_)));
          set_has_change_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_change_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 item_type = 3;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_type(), output);
  }

  // optional int64 change_value = 4;
  if (has_change_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->change_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_change_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 item_type = 3;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_type(), target);
  }

  // optional int64 change_value = 4;
  if (has_change_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->change_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_change_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_attr];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 item_type = 3;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // optional int64 change_value = 4;
    if (has_change_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_attr::MergeFrom(const packetl2c_bc_change_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_change_value()) {
      set_change_value(from.change_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_attr::CopyFrom(const packetl2c_bc_change_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_attr::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_attr::Swap(packetl2c_bc_change_attr* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(item_type_, other->item_type_);
    std::swap(change_value_, other->change_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_attr_descriptor_;
  metadata.reflection = packetl2c_bc_change_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_supply_chip::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_supply_chip::packetc2l_supply_chip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_supply_chip::InitAsDefaultInstance() {
}

packetc2l_supply_chip::packetc2l_supply_chip(const packetc2l_supply_chip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_supply_chip::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10020;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_supply_chip::~packetc2l_supply_chip() {
  SharedDtor();
}

void packetc2l_supply_chip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_supply_chip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_supply_chip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_supply_chip_descriptor_;
}

const packetc2l_supply_chip& packetc2l_supply_chip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_supply_chip* packetc2l_supply_chip::default_instance_ = NULL;

packetc2l_supply_chip* packetc2l_supply_chip::New() const {
  return new packetc2l_supply_chip;
}

void packetc2l_supply_chip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10020;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_supply_chip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_supply_chip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_supply_chip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_supply_chip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_supply_chip];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_supply_chip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_supply_chip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_supply_chip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_supply_chip::MergeFrom(const packetc2l_supply_chip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_supply_chip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_supply_chip::CopyFrom(const packetc2l_supply_chip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_supply_chip::IsInitialized() const {

  return true;
}

void packetc2l_supply_chip::Swap(packetc2l_supply_chip* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_supply_chip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_supply_chip_descriptor_;
  metadata.reflection = packetc2l_supply_chip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_supply_chip_result::kPacketIdFieldNumber;
const int packetl2c_supply_chip_result::kResultFieldNumber;
const int packetl2c_supply_chip_result::kGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_supply_chip_result::packetl2c_supply_chip_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_supply_chip_result::InitAsDefaultInstance() {
}

packetl2c_supply_chip_result::packetl2c_supply_chip_result(const packetl2c_supply_chip_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_supply_chip_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15067;
  result_ = 2;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_supply_chip_result::~packetl2c_supply_chip_result() {
  SharedDtor();
}

void packetl2c_supply_chip_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_supply_chip_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_supply_chip_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_supply_chip_result_descriptor_;
}

const packetl2c_supply_chip_result& packetl2c_supply_chip_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_supply_chip_result* packetl2c_supply_chip_result::default_instance_ = NULL;

packetl2c_supply_chip_result* packetl2c_supply_chip_result::New() const {
  return new packetl2c_supply_chip_result;
}

void packetl2c_supply_chip_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15067;
    result_ = 2;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_supply_chip_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional int64 gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_supply_chip_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_supply_chip_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_supply_chip_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_supply_chip_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_supply_chip_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_supply_chip_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_supply_chip_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_supply_chip_result::MergeFrom(const packetl2c_supply_chip_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_supply_chip_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_supply_chip_result::CopyFrom(const packetl2c_supply_chip_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_supply_chip_result::IsInitialized() const {

  return true;
}

void packetl2c_supply_chip_result::Swap(packetl2c_supply_chip_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_supply_chip_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_supply_chip_result_descriptor_;
  metadata.reflection = packetl2c_supply_chip_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10021;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10021;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state_result::kPacketIdFieldNumber;
const int packetc2l_check_state_result::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state_result::packetc2l_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_check_state_result::InitAsDefaultInstance() {
}

packetc2l_check_state_result::packetc2l_check_state_result(const packetc2l_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15068;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state_result::~packetc2l_check_state_result() {
  SharedDtor();
}

void packetc2l_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_result_descriptor_;
}

const packetc2l_check_state_result& packetc2l_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state_result* packetc2l_check_state_result::default_instance_ = NULL;

packetc2l_check_state_result* packetc2l_check_state_result::New() const {
  return new packetc2l_check_state_result;
}

void packetc2l_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15068;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state_result::MergeFrom(const packetc2l_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state_result::CopyFrom(const packetc2l_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state_result::IsInitialized() const {

  return true;
}

void packetc2l_check_state_result::Swap(packetc2l_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_result_descriptor_;
  metadata.reflection = packetc2l_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_room_history::kRoomIdFieldNumber;
const int msg_room_history::kStateFieldNumber;
const int msg_room_history::kCdFieldNumber;
const int msg_room_history::kPosListFieldNumber;
#endif  // !_MSC_VER

msg_room_history::msg_room_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_room_history::InitAsDefaultInstance() {
}

msg_room_history::msg_room_history(const msg_room_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_room_history::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  state_ = 0;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_room_history::~msg_room_history() {
  SharedDtor();
}

void msg_room_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_room_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_room_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_room_history_descriptor_;
}

const msg_room_history& msg_room_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

msg_room_history* msg_room_history::default_instance_ = NULL;

msg_room_history* msg_room_history::New() const {
  return new msg_room_history;
}

void msg_room_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    state_ = 0;
    cd_ = 0;
  }
  pos_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_room_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // optional int32 cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos_list;
        break;
      }

      // repeated int32 pos_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_pos_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_room_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cd(), output);
  }

  // repeated int32 pos_list = 4;
  for (int i = 0; i < this->pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->pos_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_room_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cd(), target);
  }

  // repeated int32 pos_list = 4;
  for (int i = 0; i < this->pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->pos_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_room_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

  }
  // repeated int32 pos_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos_list(i));
    }
    total_size += 1 * this->pos_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_room_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_room_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_room_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_room_history::MergeFrom(const msg_room_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_list_.MergeFrom(from.pos_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_room_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_room_history::CopyFrom(const msg_room_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_room_history::IsInitialized() const {

  return true;
}

void msg_room_history::Swap(msg_room_history* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(state_, other->state_);
    std::swap(cd_, other->cd_);
    pos_list_.Swap(&other->pos_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_room_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_room_history_descriptor_;
  metadata.reflection = msg_room_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_room_history_list::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_room_history_list::packetc2l_room_history_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_room_history_list::InitAsDefaultInstance() {
}

packetc2l_room_history_list::packetc2l_room_history_list(const packetc2l_room_history_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_room_history_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10017;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_room_history_list::~packetc2l_room_history_list() {
  SharedDtor();
}

void packetc2l_room_history_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_room_history_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_room_history_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_room_history_list_descriptor_;
}

const packetc2l_room_history_list& packetc2l_room_history_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_room_history_list* packetc2l_room_history_list::default_instance_ = NULL;

packetc2l_room_history_list* packetc2l_room_history_list::New() const {
  return new packetc2l_room_history_list;
}

void packetc2l_room_history_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10017;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_room_history_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_room_history_list];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_room_history_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_room_history_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_room_history_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_room_history_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_room_history_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_room_history_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_room_history_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_room_history_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_room_history_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_room_history_list::MergeFrom(const packetc2l_room_history_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_room_history_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_room_history_list::CopyFrom(const packetc2l_room_history_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_room_history_list::IsInitialized() const {

  return true;
}

void packetc2l_room_history_list::Swap(packetc2l_room_history_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_room_history_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_room_history_list_descriptor_;
  metadata.reflection = packetc2l_room_history_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_room_history_list_result::kPacketIdFieldNumber;
const int packetl2c_room_history_list_result::kHistoryListFieldNumber;
#endif  // !_MSC_VER

packetl2c_room_history_list_result::packetl2c_room_history_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_room_history_list_result::InitAsDefaultInstance() {
}

packetl2c_room_history_list_result::packetl2c_room_history_list_result(const packetl2c_room_history_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_room_history_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15061;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_room_history_list_result::~packetl2c_room_history_list_result() {
  SharedDtor();
}

void packetl2c_room_history_list_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_room_history_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_room_history_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_room_history_list_result_descriptor_;
}

const packetl2c_room_history_list_result& packetl2c_room_history_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_room_history_list_result* packetl2c_room_history_list_result::default_instance_ = NULL;

packetl2c_room_history_list_result* packetl2c_room_history_list_result::New() const {
  return new packetl2c_room_history_list_result;
}

void packetl2c_room_history_list_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15061;
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_room_history_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_history_list_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        break;
      }

      // repeated .game_rouletteak_protocols.msg_room_history history_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_room_history_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_history_list_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_rouletteak_protocols.msg_room_history history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_room_history_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_history_list_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_rouletteak_protocols.msg_room_history history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_room_history_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_room_history_list_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_rouletteak_protocols.msg_room_history history_list = 2;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_room_history_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_room_history_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_room_history_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_room_history_list_result::MergeFrom(const packetl2c_room_history_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_room_history_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_room_history_list_result::CopyFrom(const packetl2c_room_history_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_room_history_list_result::IsInitialized() const {

  return true;
}

void packetl2c_room_history_list_result::Swap(packetl2c_room_history_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_room_history_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_room_history_list_result_descriptor_;
  metadata.reflection = packetl2c_room_history_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notify_history::kPacketIdFieldNumber;
const int packetl2c_notify_history::kRoomIdFieldNumber;
const int packetl2c_notify_history::kStateFieldNumber;
const int packetl2c_notify_history::kCdFieldNumber;
const int packetl2c_notify_history::kPosFieldNumber;
#endif  // !_MSC_VER

packetl2c_notify_history::packetl2c_notify_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notify_history::InitAsDefaultInstance() {
}

packetl2c_notify_history::packetl2c_notify_history(const packetl2c_notify_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notify_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15062;
  room_id_ = 0;
  state_ = 0;
  cd_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notify_history::~packetl2c_notify_history() {
  SharedDtor();
}

void packetl2c_notify_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notify_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notify_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notify_history_descriptor_;
}

const packetl2c_notify_history& packetl2c_notify_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notify_history* packetl2c_notify_history::default_instance_ = NULL;

packetl2c_notify_history* packetl2c_notify_history::New() const {
  return new packetl2c_notify_history;
}

void packetl2c_notify_history::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15062;
    room_id_ = 0;
    state_ = 0;
    cd_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notify_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_history];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cd;
        break;
      }

      // optional int32 cd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos;
        break;
      }

      // optional int32 pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notify_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 cd = 4;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cd(), output);
  }

  // optional int32 pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notify_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 cd = 4;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cd(), target);
  }

  // optional int32 pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notify_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notify_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 cd = 4;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // optional int32 pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notify_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notify_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notify_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notify_history::MergeFrom(const packetl2c_notify_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notify_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notify_history::CopyFrom(const packetl2c_notify_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notify_history::IsInitialized() const {

  return true;
}

void packetl2c_notify_history::Swap(packetl2c_notify_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(state_, other->state_);
    std::swap(cd_, other->cd_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notify_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notify_history_descriptor_;
  metadata.reflection = packetl2c_notify_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_continue_bet::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_continue_bet::packetc2l_continue_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_continue_bet::InitAsDefaultInstance() {
}

packetc2l_continue_bet::packetc2l_continue_bet(const packetc2l_continue_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_continue_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10012;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_continue_bet::~packetc2l_continue_bet() {
  SharedDtor();
}

void packetc2l_continue_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_continue_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_continue_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_continue_bet_descriptor_;
}

const packetc2l_continue_bet& packetc2l_continue_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_continue_bet* packetc2l_continue_bet::default_instance_ = NULL;

packetc2l_continue_bet* packetc2l_continue_bet::New() const {
  return new packetc2l_continue_bet;
}

void packetc2l_continue_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10012;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_continue_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_continue_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_continue_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_continue_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_continue_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_continue_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_continue_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_continue_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_continue_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_continue_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_continue_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_continue_bet::MergeFrom(const packetc2l_continue_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_continue_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_continue_bet::CopyFrom(const packetc2l_continue_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_continue_bet::IsInitialized() const {

  return true;
}

void packetc2l_continue_bet::Swap(packetc2l_continue_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_continue_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_continue_bet_descriptor_;
  metadata.reflection = packetc2l_continue_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_continue_bet_result::kPacketIdFieldNumber;
const int packetl2c_continue_bet_result::kResultFieldNumber;
const int packetl2c_continue_bet_result::kCurGoldFieldNumber;
const int packetl2c_continue_bet_result::kBetListFieldNumber;
#endif  // !_MSC_VER

packetl2c_continue_bet_result::packetl2c_continue_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_continue_bet_result::InitAsDefaultInstance() {
}

packetl2c_continue_bet_result::packetl2c_continue_bet_result(const packetl2c_continue_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_continue_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15012;
  result_ = 2;
  cur_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_continue_bet_result::~packetl2c_continue_bet_result() {
  SharedDtor();
}

void packetl2c_continue_bet_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_continue_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_continue_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_continue_bet_result_descriptor_;
}

const packetl2c_continue_bet_result& packetl2c_continue_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_continue_bet_result* packetl2c_continue_bet_result::default_instance_ = NULL;

packetl2c_continue_bet_result* packetl2c_continue_bet_result::New() const {
  return new packetl2c_continue_bet_result;
}

void packetl2c_continue_bet_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15012;
    result_ = 2;
    cur_gold_ = GOOGLE_LONGLONG(0);
  }
  bet_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_continue_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_gold;
        break;
      }

      // optional int64 cur_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_gold_)));
          set_has_cur_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bet_list;
        break;
      }

      // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bet_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_continue_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 cur_gold = 3;
  if (has_cur_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_gold(), output);
  }

  // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 4;
  for (int i = 0; i < this->bet_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bet_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_continue_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 cur_gold = 3;
  if (has_cur_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_gold(), target);
  }

  // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 4;
  for (int i = 0; i < this->bet_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bet_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_continue_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 cur_gold = 3;
    if (has_cur_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_gold());
    }

  }
  // repeated .game_rouletteak_protocols.msg_bet_info bet_list = 4;
  total_size += 1 * this->bet_list_size();
  for (int i = 0; i < this->bet_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_continue_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_continue_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_continue_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_continue_bet_result::MergeFrom(const packetl2c_continue_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_list_.MergeFrom(from.bet_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cur_gold()) {
      set_cur_gold(from.cur_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_continue_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_continue_bet_result::CopyFrom(const packetl2c_continue_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_continue_bet_result::IsInitialized() const {

  return true;
}

void packetl2c_continue_bet_result::Swap(packetl2c_continue_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(cur_gold_, other->cur_gold_);
    bet_list_.Swap(&other->bet_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_continue_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_continue_bet_result_descriptor_;
  metadata.reflection = packetl2c_continue_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_cancel_bet::kPacketIdFieldNumber;
const int packetc2l_cancel_bet::kBetPosFieldNumber;
#endif  // !_MSC_VER

packetc2l_cancel_bet::packetc2l_cancel_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_cancel_bet::InitAsDefaultInstance() {
}

packetc2l_cancel_bet::packetc2l_cancel_bet(const packetc2l_cancel_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_cancel_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10022;
  bet_pos_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_cancel_bet::~packetc2l_cancel_bet() {
  SharedDtor();
}

void packetc2l_cancel_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_cancel_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_cancel_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_cancel_bet_descriptor_;
}

const packetc2l_cancel_bet& packetc2l_cancel_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_cancel_bet* packetc2l_cancel_bet::default_instance_ = NULL;

packetc2l_cancel_bet* packetc2l_cancel_bet::New() const {
  return new packetc2l_cancel_bet;
}

void packetc2l_cancel_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10022;
    bet_pos_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_cancel_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_cancel_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_pos;
        break;
      }

      // optional int32 bet_pos = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_pos_)));
          set_has_bet_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_cancel_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_cancel_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bet_pos = 2 [default = -1];
  if (has_bet_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bet_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_cancel_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_cancel_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bet_pos = 2 [default = -1];
  if (has_bet_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bet_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_cancel_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_cancel_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bet_pos = 2 [default = -1];
    if (has_bet_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_cancel_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_cancel_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_cancel_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_cancel_bet::MergeFrom(const packetc2l_cancel_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bet_pos()) {
      set_bet_pos(from.bet_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_cancel_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_cancel_bet::CopyFrom(const packetc2l_cancel_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_cancel_bet::IsInitialized() const {

  return true;
}

void packetc2l_cancel_bet::Swap(packetc2l_cancel_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bet_pos_, other->bet_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_cancel_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_cancel_bet_descriptor_;
  metadata.reflection = packetc2l_cancel_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_cancel_bet_result::kPacketIdFieldNumber;
const int packetl2c_cancel_bet_result::kResultFieldNumber;
const int packetl2c_cancel_bet_result::kPlayerIdFieldNumber;
const int packetl2c_cancel_bet_result::kCurGoldFieldNumber;
const int packetl2c_cancel_bet_result::kBetPosFieldNumber;
const int packetl2c_cancel_bet_result::kChangeGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_cancel_bet_result::packetl2c_cancel_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_cancel_bet_result::InitAsDefaultInstance() {
}

packetl2c_cancel_bet_result::packetl2c_cancel_bet_result(const packetl2c_cancel_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_cancel_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15069;
  result_ = 2;
  player_id_ = 0;
  cur_gold_ = GOOGLE_LONGLONG(0);
  bet_pos_ = 0;
  change_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_cancel_bet_result::~packetl2c_cancel_bet_result() {
  SharedDtor();
}

void packetl2c_cancel_bet_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_cancel_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_cancel_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_cancel_bet_result_descriptor_;
}

const packetl2c_cancel_bet_result& packetl2c_cancel_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_cancel_bet_result* packetl2c_cancel_bet_result::default_instance_ = NULL;

packetl2c_cancel_bet_result* packetl2c_cancel_bet_result::New() const {
  return new packetl2c_cancel_bet_result;
}

void packetl2c_cancel_bet_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15069;
    result_ = 2;
    player_id_ = 0;
    cur_gold_ = GOOGLE_LONGLONG(0);
    bet_pos_ = 0;
    change_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_cancel_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_cancel_bet_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_gold;
        break;
      }

      // optional int64 cur_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_gold_)));
          set_has_cur_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bet_pos;
        break;
      }

      // optional int32 bet_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_pos_)));
          set_has_bet_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_change_gold;
        break;
      }

      // optional int64 change_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_gold_)));
          set_has_change_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_cancel_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_cancel_bet_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // optional int64 cur_gold = 4;
  if (has_cur_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cur_gold(), output);
  }

  // optional int32 bet_pos = 5;
  if (has_bet_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bet_pos(), output);
  }

  // optional int64 change_gold = 6;
  if (has_change_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->change_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_cancel_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_cancel_bet_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // optional int64 cur_gold = 4;
  if (has_cur_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cur_gold(), target);
  }

  // optional int32 bet_pos = 5;
  if (has_bet_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bet_pos(), target);
  }

  // optional int64 change_gold = 6;
  if (has_change_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->change_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_cancel_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_cancel_bet_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 cur_gold = 4;
    if (has_cur_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_gold());
    }

    // optional int32 bet_pos = 5;
    if (has_bet_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_pos());
    }

    // optional int64 change_gold = 6;
    if (has_change_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_cancel_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_cancel_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_cancel_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_cancel_bet_result::MergeFrom(const packetl2c_cancel_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_cur_gold()) {
      set_cur_gold(from.cur_gold());
    }
    if (from.has_bet_pos()) {
      set_bet_pos(from.bet_pos());
    }
    if (from.has_change_gold()) {
      set_change_gold(from.change_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_cancel_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_cancel_bet_result::CopyFrom(const packetl2c_cancel_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_cancel_bet_result::IsInitialized() const {

  return true;
}

void packetl2c_cancel_bet_result::Swap(packetl2c_cancel_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(cur_gold_, other->cur_gold_);
    std::swap(bet_pos_, other->bet_pos_);
    std::swap(change_gold_, other->change_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_cancel_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_cancel_bet_result_descriptor_;
  metadata.reflection = packetl2c_cancel_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int room_player::kPlayerIdFieldNumber;
const int room_player::kGoldFieldNumber;
const int room_player::kProfitTodayFieldNumber;
#endif  // !_MSC_VER

room_player::room_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_player::InitAsDefaultInstance() {
}

room_player::room_player(const room_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_player::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  profit_today_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_player::~room_player() {
  SharedDtor();
}

void room_player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void room_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_player_descriptor_;
}

const room_player& room_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

room_player* room_player::default_instance_ = NULL;

room_player* room_player::New() const {
  return new room_player;
}

void room_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    profit_today_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_profit_today;
        break;
      }

      // optional int64 profit_today = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profit_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &profit_today_)));
          set_has_profit_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional int64 profit_today = 3;
  if (has_profit_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->profit_today(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional int64 profit_today = 3;
  if (has_profit_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->profit_today(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 profit_today = 3;
    if (has_profit_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->profit_today());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_player::MergeFrom(const room_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_profit_today()) {
      set_profit_today(from.profit_today());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_player::CopyFrom(const room_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_player::IsInitialized() const {

  return true;
}

void room_player::Swap(room_player* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(gold_, other->gold_);
    std::swap(profit_today_, other->profit_today_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_player_descriptor_;
  metadata.reflection = room_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_get_room_info::packetl2c_gm_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_get_room_info::InitAsDefaultInstance() {
}

packetl2c_gm_get_room_info::packetl2c_gm_get_room_info(const packetl2c_gm_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10101;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_get_room_info::~packetl2c_gm_get_room_info() {
  SharedDtor();
}

void packetl2c_gm_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_get_room_info_descriptor_;
}

const packetl2c_gm_get_room_info& packetl2c_gm_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_get_room_info* packetl2c_gm_get_room_info::default_instance_ = NULL;

packetl2c_gm_get_room_info* packetl2c_gm_get_room_info::New() const {
  return new packetl2c_gm_get_room_info;
}

void packetl2c_gm_get_room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10101;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_get_room_info::MergeFrom(const packetl2c_gm_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info::CopyFrom(const packetl2c_gm_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_get_room_info::IsInitialized() const {

  return true;
}

void packetl2c_gm_get_room_info::Swap(packetl2c_gm_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_get_room_info_descriptor_;
  metadata.reflection = packetl2c_gm_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_gm_get_room_info_result::kResultFieldNumber;
const int packetl2c_gm_get_room_info_result::kBeadNumFieldNumber;
const int packetl2c_gm_get_room_info_result::kPlayersFieldNumber;
const int packetl2c_gm_get_room_info_result::kStockFieldNumber;
const int packetl2c_gm_get_room_info_result::kWaterFieldNumber;
const int packetl2c_gm_get_room_info_result::kKillFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_get_room_info_result::packetl2c_gm_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_gm_get_room_info_result::packetl2c_gm_get_room_info_result(const packetl2c_gm_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15101;
  result_ = 0;
  bead_num_ = -1;
  stock_ = GOOGLE_LONGLONG(0);
  water_ = GOOGLE_LONGLONG(0);
  kill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_get_room_info_result::~packetl2c_gm_get_room_info_result() {
  SharedDtor();
}

void packetl2c_gm_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_get_room_info_result_descriptor_;
}

const packetl2c_gm_get_room_info_result& packetl2c_gm_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_get_room_info_result* packetl2c_gm_get_room_info_result::default_instance_ = NULL;

packetl2c_gm_get_room_info_result* packetl2c_gm_get_room_info_result::New() const {
  return new packetl2c_gm_get_room_info_result;
}

void packetl2c_gm_get_room_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15101;
    result_ = 0;
    bead_num_ = -1;
    stock_ = GOOGLE_LONGLONG(0);
    water_ = GOOGLE_LONGLONG(0);
    kill_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bead_num;
        break;
      }

      // optional int32 bead_num = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bead_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bead_num_)));
          set_has_bead_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated .game_rouletteak_protocols.room_player players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        if (input->ExpectTag(40)) goto parse_stock;
        break;
      }

      // optional int64 stock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stock_)));
          set_has_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_water;
        break;
      }

      // optional int64 water = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_water:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &water_)));
          set_has_water();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_kill;
        break;
      }

      // optional int32 kill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 bead_num = 3 [default = -1];
  if (has_bead_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bead_num(), output);
  }

  // repeated .game_rouletteak_protocols.room_player players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  // optional int64 stock = 5;
  if (has_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->stock(), output);
  }

  // optional int64 water = 6;
  if (has_water()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->water(), output);
  }

  // optional int32 kill = 7;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 bead_num = 3 [default = -1];
  if (has_bead_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bead_num(), target);
  }

  // repeated .game_rouletteak_protocols.room_player players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->players(i), target);
  }

  // optional int64 stock = 5;
  if (has_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->stock(), target);
  }

  // optional int64 water = 6;
  if (has_water()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->water(), target);
  }

  // optional int32 kill = 7;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->kill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 bead_num = 3 [default = -1];
    if (has_bead_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bead_num());
    }

    // optional int64 stock = 5;
    if (has_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stock());
    }

    // optional int64 water = 6;
    if (has_water()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->water());
    }

    // optional int32 kill = 7;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

  }
  // repeated .game_rouletteak_protocols.room_player players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_get_room_info_result::MergeFrom(const packetl2c_gm_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bead_num()) {
      set_bead_num(from.bead_num());
    }
    if (from.has_stock()) {
      set_stock(from.stock());
    }
    if (from.has_water()) {
      set_water(from.water());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_get_room_info_result::CopyFrom(const packetl2c_gm_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_gm_get_room_info_result::Swap(packetl2c_gm_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(bead_num_, other->bead_num_);
    players_.Swap(&other->players_);
    std::swap(stock_, other->stock_);
    std::swap(water_, other->water_);
    std::swap(kill_, other->kill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_gm_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_set_bead::kPacketIdFieldNumber;
const int packetl2c_gm_set_bead::kBeadNumFieldNumber;
const int packetl2c_gm_set_bead::kKillFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_set_bead::packetl2c_gm_set_bead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_set_bead::InitAsDefaultInstance() {
}

packetl2c_gm_set_bead::packetl2c_gm_set_bead(const packetl2c_gm_set_bead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_set_bead::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10102;
  bead_num_ = 0;
  kill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_set_bead::~packetl2c_gm_set_bead() {
  SharedDtor();
}

void packetl2c_gm_set_bead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_set_bead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_set_bead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_set_bead_descriptor_;
}

const packetl2c_gm_set_bead& packetl2c_gm_set_bead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_set_bead* packetl2c_gm_set_bead::default_instance_ = NULL;

packetl2c_gm_set_bead* packetl2c_gm_set_bead::New() const {
  return new packetl2c_gm_set_bead;
}

void packetl2c_gm_set_bead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10102;
    bead_num_ = 0;
    kill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_set_bead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_set_bead];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bead_num;
        break;
      }

      // optional int32 bead_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bead_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bead_num_)));
          set_has_bead_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill;
        break;
      }

      // optional int32 kill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_set_bead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_set_bead];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bead_num = 2;
  if (has_bead_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bead_num(), output);
  }

  // optional int32 kill = 3;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_set_bead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_set_bead];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bead_num = 2;
  if (has_bead_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bead_num(), target);
  }

  // optional int32 kill = 3;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_set_bead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_set_bead];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bead_num = 2;
    if (has_bead_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bead_num());
    }

    // optional int32 kill = 3;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_set_bead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_set_bead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_set_bead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_set_bead::MergeFrom(const packetl2c_gm_set_bead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bead_num()) {
      set_bead_num(from.bead_num());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_set_bead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_set_bead::CopyFrom(const packetl2c_gm_set_bead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_set_bead::IsInitialized() const {

  return true;
}

void packetl2c_gm_set_bead::Swap(packetl2c_gm_set_bead* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bead_num_, other->bead_num_);
    std::swap(kill_, other->kill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_set_bead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_set_bead_descriptor_;
  metadata.reflection = packetl2c_gm_set_bead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_set_bead_result::kPacketIdFieldNumber;
const int packetl2c_gm_set_bead_result::kResultFieldNumber;
const int packetl2c_gm_set_bead_result::kBeadNumFieldNumber;
const int packetl2c_gm_set_bead_result::kKillFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_set_bead_result::packetl2c_gm_set_bead_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_gm_set_bead_result::InitAsDefaultInstance() {
}

packetl2c_gm_set_bead_result::packetl2c_gm_set_bead_result(const packetl2c_gm_set_bead_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_gm_set_bead_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15102;
  result_ = 0;
  bead_num_ = 0;
  kill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_set_bead_result::~packetl2c_gm_set_bead_result() {
  SharedDtor();
}

void packetl2c_gm_set_bead_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_set_bead_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_set_bead_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_set_bead_result_descriptor_;
}

const packetl2c_gm_set_bead_result& packetl2c_gm_set_bead_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5frouletteak_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_set_bead_result* packetl2c_gm_set_bead_result::default_instance_ = NULL;

packetl2c_gm_set_bead_result* packetl2c_gm_set_bead_result::New() const {
  return new packetl2c_gm_set_bead_result;
}

void packetl2c_gm_set_bead_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15102;
    result_ = 0;
    bead_num_ = 0;
    kill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_set_bead_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_set_bead_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_rouletteak_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_rouletteak_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bead_num;
        break;
      }

      // optional int32 bead_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bead_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bead_num_)));
          set_has_bead_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill;
        break;
      }

      // optional int32 kill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_gm_set_bead_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_set_bead_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 bead_num = 3;
  if (has_bead_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bead_num(), output);
  }

  // optional int32 kill = 4;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_gm_set_bead_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_set_bead_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 bead_num = 3;
  if (has_bead_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bead_num(), target);
  }

  // optional int32 kill = 4;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_gm_set_bead_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_rouletteak_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_set_bead_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 bead_num = 3;
    if (has_bead_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bead_num());
    }

    // optional int32 kill = 4;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_set_bead_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_set_bead_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_set_bead_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_set_bead_result::MergeFrom(const packetl2c_gm_set_bead_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bead_num()) {
      set_bead_num(from.bead_num());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_set_bead_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_set_bead_result::CopyFrom(const packetl2c_gm_set_bead_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_set_bead_result::IsInitialized() const {

  return true;
}

void packetl2c_gm_set_bead_result::Swap(packetl2c_gm_set_bead_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(bead_num_, other->bead_num_);
    std::swap(kill_, other->kill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_set_bead_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_set_bead_result_descriptor_;
  metadata.reflection = packetl2c_gm_set_bead_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_rouletteak_protocols

// @@protoc_insertion_point(global_scope)
