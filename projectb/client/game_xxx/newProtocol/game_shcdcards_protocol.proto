package game_shcdcards_protocols;

import "game_shcdcards_def.proto"; 
import "msg_type_def.proto"; 

//牌信息
message msg_cards_info{
	optional int32 cards_type = 1;	//poker_type
	optional int32 cards_value = 2;	//点数
}

//玩家信息
message msg_player_info{
	optional int32 player_id = 1;			//玩家ID
	optional string player_name = 2;		//玩家昵称
	optional int32 head_frame = 3;			//头像框
	optional string head_custom = 4;		//玩家头像
	optional int64 player_gold = 5;			//玩家金币
	optional int32 player_sex = 6;			// 玩家性别	
	optional int32 vip_level = 7;			// Vip等级
}

//庄家信息
message msg_banker_info{
	optional msg_player_info player_info = 1;
	optional int64 max_bet_gold = 2;
	optional bool can_snatch = 3;
	optional int32 snatch_ticket = 4;
	optional int32 snatch_player_id = 5;
}

//下注信息
message msg_bet_info{
	repeated int64 self_bet_golds = 1;
	repeated int64 total_bet_golds = 2;
}

//结果信息
message msg_result_info{
	optional int64 self_gold = 1;			//自己金钱
	optional int64 banker_win_gold = 2;		//庄家输赢
	optional int64 self_win_gold = 3;		//自己输赢	
	optional bool self_is_bet = 4;			//自己是否下注
	optional int64 self_bet_gold = 5;		//自己下注金额
	optional int64 self_king_gold = 6;		//自己下注王金额
	optional int64 self_bet_win_gold = 7;		//自己下注赢金额
}

//房间信息
message msg_scene_info{
	optional int32 roomid = 1;
	optional int32 scene_state = 2;
	optional int32 count_down = 3;
	optional msg_banker_info banker_info = 4;			//准备
	optional msg_bet_info bet_info = 5;					//下注
	optional msg_cards_info cards_info = 6;				//发牌
	optional msg_result_info result_info = 7;			//结果
	optional int64 max_bet_gold = 8;					//下注金额上限
}

//游戏逻辑
//获取场景信息
message packetc2l_get_scene_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
}

//返回场景信息
message packetl2c_get_scene_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
	optional msg_scene_info scene_info = 2;
	repeated msg_cards_info history_infos = 3;			//牌路记录
}

//广播准备状态
message packetl2c_bc_scene_prepare_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
	optional int32 count_down = 2;
	optional msg_banker_info banker_info = 3;
}

//广播下注状态
message packetl2c_bc_scene_bet_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
	optional int32 count_down = 2;
}

//广播同步下注状态
message packetl2c_bc_sync_scene_bet_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
	repeated int32 bet_golds = 4; 
}	

//广播发牌状态
message packetl2c_bc_scene_deal_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
	optional int32 count_down = 2;
	optional msg_cards_info cards_info = 3;
}

//广播结果状态
message packetl2c_bc_scene_result_into {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
	optional int32 count_down = 2;
	optional msg_result_info result_info = 3;
}

//下注
message packetc2l_ask_bet_info {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
	optional int32 bet_index = 2;
	optional int32 bet_gold = 3;
}

//下注结果
message packetl2c_bet_info_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
	optional int32 bet_index = 3;
	optional int32 bet_gold = 4;
	optional int64 self_gold = 5;
}

//续压
message packetc2l_ask_continue_bet {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
	repeated int32 bet_golds = 2;
}

//续压结果
message packetl2c_continue_bet_result {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
	optional msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
	repeated int32 bet_golds = 3;
	optional int64 self_gold = 4;
}



//游戏控制
message packetc2l_game_control {
	optional e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];

	optional int32 control = 2[default = 0]; //poker_type  0黑1红2梅3方4王
}

//debug信息
message packetl2c_bc_debuginfo {
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
	optional int32 player_id = 2;	
	optional int64 total_profit = 3[default = 0];		//抽水
	optional int64 total_stock = 4[default = 0];		//库存
    optional int64 total_Rate = 6[default = 0];		//抽水率

	optional string debug_infos = 5; //调试信息 lua
}

//下注信息
message msg_bet_infoex{
	optional int32 bet_index = 1;
	optional int64 bet_count = 2;
}

message gm_msg_bet_info
{
	optional msg_player_info player_info=1;
	repeated msg_bet_infoex bet_info=2;
}

//通知所有玩家下注信息
message packetl2c_notice_all_bet_info 
{
	optional e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
	repeated gm_msg_bet_info bet_info_list = 2;

}