// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_ermj_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_ermj_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_ermj_protocols {

namespace {

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_notify_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_action_code_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fermj_5fdef_2eproto() {
  protobuf_AddDesc_game_5fermj_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_ermj_def.proto");
  GOOGLE_CHECK(file != NULL);
  e_server_msg_type_descriptor_ = file->enum_type(0);
  e_notify_type_descriptor_ = file->enum_type(1);
  e_action_code_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fermj_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_game_5fermj_5fdef_2eproto() {
}

void protobuf_AddDesc_game_5fermj_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023game_ermj_def.proto\022\023game_ermj_protoco"
    "ls*\204\007\n\021e_server_msg_type\022\024\n\017e_mst_start_"
    "c2l\020\220N\022\032\n\025e_mst_c2l_check_state\020\221N\022\035\n\030e_"
    "mst_c2l_get_scene_info\020\222N\022\033\n\026e_mst_c2l_u"
    "ser_trustee\020\230N\022\031\n\024e_mst_c2l_enter_room\020\231"
    "N\022\031\n\024e_mst_c2l_leave_room\020\232N\022\024\n\017e_mst_c2"
    "l_ready\020\233N\022\025\n\020e_mst_c2l_bu_hua\020\234N\022\027\n\022e_m"
    "st_c2l_out_card\020\235N\022\033\n\026e_mst_c2l_operate_"
    "card\020\236N\022\026\n\021e_mst_c2l_gm_list\020\237N\022\026\n\021e_mst"
    "_c2l_gm_kill\020\240N\022\024\n\017e_mst_start_l2c\020\230u\022!\n"
    "\034e_mst_l2c_check_state_result\020\231u\022 \n\033e_ms"
    "t_l2c_scene_info_result\020\232u\022\033\n\026e_mst_l2c_"
    "user_trustee\020\240u\022 \n\033e_mst_l2c_enter_room_"
    "result\020\241u\022 \n\033e_mst_l2c_leave_room_result"
    "\020\242u\022\031\n\024e_mst_l2c_game_start\020\245u\022\036\n\031e_mst_"
    "l2c_out_card_notify\020\246u\022\035\n\030e_mst_l2c_oper"
    "ate_notify\020\247u\022\027\n\022e_mst_l2c_game_end\020\250u\022#"
    "\n\036e_mst_l2c_send_all_playerinfos\020\251u\022\032\n\025e"
    "_mst_l2c_game_notify\020\252u\022\035\n\030e_mst_l2c_ope"
    "rate_result\020\253u\022\030\n\023e_mst_l2c_send_card\020\254u"
    "\022\034\n\027e_mst_l2c_bu_hua_notify\020\255u\022\035\n\030e_mst_"
    "l2c_pass_hu_notify\020\256u\022!\n\034e_mst_l2c_other"
    "_player_cards\020\257u\022\026\n\021e_mst_l2c_gm_list\020\260u"
    "\022\027\n\021e_mst_clend_index\020\240\234\001*\243\001\n\re_notify_t"
    "ype\022\026\n\022e_nt_table_dismiss\020\001\022\030\n\024e_nt_gold"
    "_not_enough\020\002\022\021\n\re_nt_shutdown\020\003\022\017\n\013e_nt"
    "_listen\020\004\022\023\n\017e_nt_assembling\020\005\022\025\n\021e_nt_p"
    "layer_leave\020\006\022\020\n\014e_nt_kill_ok\020\007*\262\001\n\re_ac"
    "tion_code\022\r\n\te_ac_null\020\000\022\r\n\te_ac_left\020\001\022"
    "\017\n\013e_ac_center\020\002\022\016\n\ne_ac_right\020\004\022\r\n\te_ac"
    "_peng\020\010\022\r\n\te_ac_gang\020\020\022\017\n\013e_ac_listen\020 \022"
    "\013\n\007e_ac_hu\020@\022\021\n\014e_ac_pass_hu\020\200\001\022\023\n\016e_ac_"
    "qian_gang\020\201\001", 1292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_ermj_def.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fermj_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fermj_5fdef_2eproto {
  StaticDescriptorInitializer_game_5fermj_5fdef_2eproto() {
    protobuf_AddDesc_game_5fermj_5fdef_2eproto();
  }
} static_descriptor_initializer_game_5fermj_5fdef_2eproto_;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_server_msg_type_descriptor_;
}
bool e_server_msg_type_IsValid(int value) {
  switch(value) {
    case 10000:
    case 10001:
    case 10002:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 15000:
    case 15001:
    case 15002:
    case 15008:
    case 15009:
    case 15010:
    case 15013:
    case 15014:
    case 15015:
    case 15016:
    case 15017:
    case 15018:
    case 15019:
    case 15020:
    case 15021:
    case 15022:
    case 15023:
    case 15024:
    case 20000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_notify_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_notify_type_descriptor_;
}
bool e_notify_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_action_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_action_code_descriptor_;
}
bool e_action_code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 129:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_ermj_protocols

// @@protoc_insertion_point(global_scope)
