// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_goldshark_protocol.proto

#ifndef PROTOBUF_game_5fgoldshark_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fgoldshark_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_goldshark_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_goldshark_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

class msg_room_info;
class packetc2l_get_room_info;
class packetl2c_get_room_info_result;
class packetc2l_enter_room;
class packetl2c_enter_room_result;
class packetc2l_check_state;
class packetl2c_check_state_result;
class packetc2l_get_room_scene_info;
class packetl2c_get_room_scene_info_result;
class packetc2l_leave_room;
class packetl2c_leave_room_result;
class packetc2l_add_bet;
class packetl2c_add_bet_result;
class packetc2l_repeat_bet;
class packetl2c_repeat_bet_result;
class packetc2l_clear_bet;
class packetl2c_clear_bet_result;
class packetc2l_ask_for_banker;
class packetl2c_ask_for_banker_result;
class packetc2l_leave_banker;
class packetl2c_leave_banker_result;
class packetc2l_leave_banker_list;
class packetl2c_leave_banker_list;
class packetc2l_ask_for_first_banker;
class packetl2c_ask_for_first_banker_result;
class player_info;
class packetc2l_ask_for_player_list;
class packetl2c_ask_for_player_list_result;
class packetc2l_ask_for_banker_list;
class packetl2c_ask_for_banker_list_result;
class packetc2l_ask_for_history_list;
class packetl2c_ask_for_history_list_result;
class packetl2c_bc_begin_bet;
class PlayerIncomeInfo;
class packetl2c_bc_begin_award;
class msg_master_bets;
class msg_betinfo;
class packetl2c_bc_total_bet_info;
class packetl2c_bc_rob_banker_info;
class packetl2c_bc_change_banker;
class packetl2c_bc_accept_gift;
class packetc2l_gm;
class user_meg_bet_info;
class packetl2c_bc_every_bet_info;
class packetc2l_control_change_result;
class packetl2c_control_change_result;
class packetl2c_bc_debuginfo;
class packetl2c_notice_bank_info;

// ===================================================================

class msg_room_info : public ::google::protobuf::Message {
 public:
  msg_room_info();
  virtual ~msg_room_info();

  msg_room_info(const msg_room_info& from);

  inline msg_room_info& operator=(const msg_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_room_info& default_instance();

  void Swap(msg_room_info* other);

  // implements Message ----------------------------------------------

  msg_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_room_info& from);
  void MergeFrom(const msg_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.msg_room_info)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_info();
  virtual ~packetc2l_get_room_info();

  packetc2l_get_room_info(const packetc2l_get_room_info& from);

  inline packetc2l_get_room_info& operator=(const packetc2l_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_info& default_instance();

  void Swap(packetc2l_get_room_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_info& from);
  void MergeFrom(const packetc2l_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_info_result();
  virtual ~packetl2c_get_room_info_result();

  packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from);

  inline packetl2c_get_room_info_result& operator=(const packetl2c_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_info_result& default_instance();

  void Swap(packetl2c_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_info_result& from);
  void MergeFrom(const packetl2c_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // repeated .game_goldshark_protocols.msg_room_info room_list = 2;
  inline int room_list_size() const;
  inline void clear_room_list();
  static const int kRoomListFieldNumber = 2;
  inline const ::game_goldshark_protocols::msg_room_info& room_list(int index) const;
  inline ::game_goldshark_protocols::msg_room_info* mutable_room_list(int index);
  inline ::game_goldshark_protocols::msg_room_info* add_room_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_room_info >&
      room_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_room_info >*
      mutable_room_list();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_room_info > room_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_room : public ::google::protobuf::Message {
 public:
  packetc2l_enter_room();
  virtual ~packetc2l_enter_room();

  packetc2l_enter_room(const packetc2l_enter_room& from);

  inline packetc2l_enter_room& operator=(const packetc2l_enter_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_room& default_instance();

  void Swap(packetc2l_enter_room* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_room& from);
  void MergeFrom(const packetc2l_enter_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_enter_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_room_result();
  virtual ~packetl2c_enter_room_result();

  packetl2c_enter_room_result(const packetl2c_enter_room_result& from);

  inline packetl2c_enter_room_result& operator=(const packetl2c_enter_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_room_result& default_instance();

  void Swap(packetl2c_enter_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_room_result& from);
  void MergeFrom(const packetl2c_enter_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_enter_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional bool is_intable = 2 [default = false];
  inline bool has_is_intable() const;
  inline void clear_is_intable();
  static const int kIsIntableFieldNumber = 2;
  inline bool is_intable() const;
  inline void set_is_intable(bool value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_is_intable();
  inline void clear_has_is_intable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool is_intable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_scene_info();
  virtual ~packetc2l_get_room_scene_info();

  packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from);

  inline packetc2l_get_room_scene_info& operator=(const packetc2l_get_room_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_scene_info& default_instance();

  void Swap(packetc2l_get_room_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_scene_info& from);
  void MergeFrom(const packetc2l_get_room_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_get_room_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_scene_info_result();
  virtual ~packetl2c_get_room_scene_info_result();

  packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from);

  inline packetl2c_get_room_scene_info_result& operator=(const packetl2c_get_room_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_scene_info_result& default_instance();

  void Swap(packetl2c_get_room_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_scene_info_result& from);
  void MergeFrom(const packetl2c_get_room_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional .game_goldshark_protocols.e_game_state room_state = 3;
  inline bool has_room_state() const;
  inline void clear_room_state();
  static const int kRoomStateFieldNumber = 3;
  inline ::game_goldshark_protocols::e_game_state room_state() const;
  inline void set_room_state(::game_goldshark_protocols::e_game_state value);

  // optional int32 cd_time = 4;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 4;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // repeated .game_goldshark_protocols.msg_betinfo bets = 5;
  inline int bets_size() const;
  inline void clear_bets();
  static const int kBetsFieldNumber = 5;
  inline const ::game_goldshark_protocols::msg_betinfo& bets(int index) const;
  inline ::game_goldshark_protocols::msg_betinfo* mutable_bets(int index);
  inline ::game_goldshark_protocols::msg_betinfo* add_bets();
  inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo >&
      bets() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo >*
      mutable_bets();

  // repeated int32 history_list = 6;
  inline int history_list_size() const;
  inline void clear_history_list();
  static const int kHistoryListFieldNumber = 6;
  inline ::google::protobuf::int32 history_list(int index) const;
  inline void set_history_list(int index, ::google::protobuf::int32 value);
  inline void add_history_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      history_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_history_list();

  // optional .game_goldshark_protocols.player_info banker_info = 7;
  inline bool has_banker_info() const;
  inline void clear_banker_info();
  static const int kBankerInfoFieldNumber = 7;
  inline const ::game_goldshark_protocols::player_info& banker_info() const;
  inline ::game_goldshark_protocols::player_info* mutable_banker_info();
  inline ::game_goldshark_protocols::player_info* release_banker_info();
  inline void set_allocated_banker_info(::game_goldshark_protocols::player_info* banker_info);

  // optional bool is_can_rob_banker = 8;
  inline bool has_is_can_rob_banker() const;
  inline void clear_is_can_rob_banker();
  static const int kIsCanRobBankerFieldNumber = 8;
  inline bool is_can_rob_banker() const;
  inline void set_is_can_rob_banker(bool value);

  // optional int32 continue_count = 9;
  inline bool has_continue_count() const;
  inline void clear_continue_count();
  static const int kContinueCountFieldNumber = 9;
  inline ::google::protobuf::int32 continue_count() const;
  inline void set_continue_count(::google::protobuf::int32 value);

  // repeated int32 self_bet_list = 10;
  inline int self_bet_list_size() const;
  inline void clear_self_bet_list();
  static const int kSelfBetListFieldNumber = 10;
  inline ::google::protobuf::int32 self_bet_list(int index) const;
  inline void set_self_bet_list(int index, ::google::protobuf::int32 value);
  inline void add_self_bet_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      self_bet_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_self_bet_list();

  // optional int64 self_golds = 11;
  inline bool has_self_golds() const;
  inline void clear_self_golds();
  static const int kSelfGoldsFieldNumber = 11;
  inline ::google::protobuf::int64 self_golds() const;
  inline void set_self_golds(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_get_room_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_state();
  inline void clear_has_room_state();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();
  inline void set_has_banker_info();
  inline void clear_has_banker_info();
  inline void set_has_is_can_rob_banker();
  inline void clear_has_is_can_rob_banker();
  inline void set_has_continue_count();
  inline void clear_has_continue_count();
  inline void set_has_self_golds();
  inline void clear_has_self_golds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;
  int room_state_;
  ::google::protobuf::int32 cd_time_;
  ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo > bets_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > history_list_;
  ::game_goldshark_protocols::player_info* banker_info_;
  bool is_can_rob_banker_;
  ::google::protobuf::int32 continue_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > self_bet_list_;
  ::google::protobuf::int64 self_golds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_room : public ::google::protobuf::Message {
 public:
  packetc2l_leave_room();
  virtual ~packetc2l_leave_room();

  packetc2l_leave_room(const packetc2l_leave_room& from);

  inline packetc2l_leave_room& operator=(const packetc2l_leave_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_room& default_instance();

  void Swap(packetc2l_leave_room* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_room& from);
  void MergeFrom(const packetc2l_leave_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_leave_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_room_result();
  virtual ~packetl2c_leave_room_result();

  packetl2c_leave_room_result(const packetl2c_leave_room_result& from);

  inline packetl2c_leave_room_result& operator=(const packetl2c_leave_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_room_result& default_instance();

  void Swap(packetl2c_leave_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_room_result& from);
  void MergeFrom(const packetl2c_leave_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_leave_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_add_bet : public ::google::protobuf::Message {
 public:
  packetc2l_add_bet();
  virtual ~packetc2l_add_bet();

  packetc2l_add_bet(const packetc2l_add_bet& from);

  inline packetc2l_add_bet& operator=(const packetc2l_add_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_add_bet& default_instance();

  void Swap(packetc2l_add_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_add_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_add_bet& from);
  void MergeFrom(const packetc2l_add_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 bet_index = 2;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 2;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int32 bet_count = 3;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 3;
  inline ::google::protobuf::int32 bet_count() const;
  inline void set_bet_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_add_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 bet_index_;
  ::google::protobuf::int32 bet_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_add_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_add_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_add_bet_result();
  virtual ~packetl2c_add_bet_result();

  packetl2c_add_bet_result(const packetl2c_add_bet_result& from);

  inline packetl2c_add_bet_result& operator=(const packetl2c_add_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_add_bet_result& default_instance();

  void Swap(packetl2c_add_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_add_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_add_bet_result& from);
  void MergeFrom(const packetl2c_add_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 bet_index = 3;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 3;
  inline ::google::protobuf::int32 bet_index() const;
  inline void set_bet_index(::google::protobuf::int32 value);

  // optional int32 bet_count = 4;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 4;
  inline ::google::protobuf::int32 bet_count() const;
  inline void set_bet_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_add_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 bet_index_;
  ::google::protobuf::int32 bet_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_add_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_repeat_bet : public ::google::protobuf::Message {
 public:
  packetc2l_repeat_bet();
  virtual ~packetc2l_repeat_bet();

  packetc2l_repeat_bet(const packetc2l_repeat_bet& from);

  inline packetc2l_repeat_bet& operator=(const packetc2l_repeat_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_repeat_bet& default_instance();

  void Swap(packetc2l_repeat_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_repeat_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_repeat_bet& from);
  void MergeFrom(const packetc2l_repeat_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_repeat_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_repeat_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_repeat_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_repeat_bet_result();
  virtual ~packetl2c_repeat_bet_result();

  packetl2c_repeat_bet_result(const packetl2c_repeat_bet_result& from);

  inline packetl2c_repeat_bet_result& operator=(const packetl2c_repeat_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_repeat_bet_result& default_instance();

  void Swap(packetl2c_repeat_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_repeat_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_repeat_bet_result& from);
  void MergeFrom(const packetl2c_repeat_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_repeat_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_repeat_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_clear_bet : public ::google::protobuf::Message {
 public:
  packetc2l_clear_bet();
  virtual ~packetc2l_clear_bet();

  packetc2l_clear_bet(const packetc2l_clear_bet& from);

  inline packetc2l_clear_bet& operator=(const packetc2l_clear_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_clear_bet& default_instance();

  void Swap(packetc2l_clear_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_clear_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_clear_bet& from);
  void MergeFrom(const packetc2l_clear_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_clear_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_clear_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_clear_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_clear_bet_result : public ::google::protobuf::Message {
 public:
  packetl2c_clear_bet_result();
  virtual ~packetl2c_clear_bet_result();

  packetl2c_clear_bet_result(const packetl2c_clear_bet_result& from);

  inline packetl2c_clear_bet_result& operator=(const packetl2c_clear_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_clear_bet_result& default_instance();

  void Swap(packetl2c_clear_bet_result* other);

  // implements Message ----------------------------------------------

  packetl2c_clear_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_clear_bet_result& from);
  void MergeFrom(const packetl2c_clear_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_clear_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_clear_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_for_banker : public ::google::protobuf::Message {
 public:
  packetc2l_ask_for_banker();
  virtual ~packetc2l_ask_for_banker();

  packetc2l_ask_for_banker(const packetc2l_ask_for_banker& from);

  inline packetc2l_ask_for_banker& operator=(const packetc2l_ask_for_banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_for_banker& default_instance();

  void Swap(packetc2l_ask_for_banker* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_for_banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_for_banker& from);
  void MergeFrom(const packetc2l_ask_for_banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_for_banker];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_ask_for_banker)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_for_banker* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_ask_for_banker_result : public ::google::protobuf::Message {
 public:
  packetl2c_ask_for_banker_result();
  virtual ~packetl2c_ask_for_banker_result();

  packetl2c_ask_for_banker_result(const packetl2c_ask_for_banker_result& from);

  inline packetl2c_ask_for_banker_result& operator=(const packetl2c_ask_for_banker_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_ask_for_banker_result& default_instance();

  void Swap(packetl2c_ask_for_banker_result* other);

  // implements Message ----------------------------------------------

  packetl2c_ask_for_banker_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_ask_for_banker_result& from);
  void MergeFrom(const packetl2c_ask_for_banker_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_for_banker];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_ask_for_banker_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_ask_for_banker_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_banker : public ::google::protobuf::Message {
 public:
  packetc2l_leave_banker();
  virtual ~packetc2l_leave_banker();

  packetc2l_leave_banker(const packetc2l_leave_banker& from);

  inline packetc2l_leave_banker& operator=(const packetc2l_leave_banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_banker& default_instance();

  void Swap(packetc2l_leave_banker* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_banker& from);
  void MergeFrom(const packetc2l_leave_banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_banker];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_leave_banker)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_banker* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_banker_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_banker_result();
  virtual ~packetl2c_leave_banker_result();

  packetl2c_leave_banker_result(const packetl2c_leave_banker_result& from);

  inline packetl2c_leave_banker_result& operator=(const packetl2c_leave_banker_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_banker_result& default_instance();

  void Swap(packetl2c_leave_banker_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_banker_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_banker_result& from);
  void MergeFrom(const packetl2c_leave_banker_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_banker];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_leave_banker_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_banker_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_banker_list : public ::google::protobuf::Message {
 public:
  packetc2l_leave_banker_list();
  virtual ~packetc2l_leave_banker_list();

  packetc2l_leave_banker_list(const packetc2l_leave_banker_list& from);

  inline packetc2l_leave_banker_list& operator=(const packetc2l_leave_banker_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_banker_list& default_instance();

  void Swap(packetc2l_leave_banker_list* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_banker_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_banker_list& from);
  void MergeFrom(const packetc2l_leave_banker_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_banker_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_leave_banker_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_banker_list* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_banker_list : public ::google::protobuf::Message {
 public:
  packetl2c_leave_banker_list();
  virtual ~packetl2c_leave_banker_list();

  packetl2c_leave_banker_list(const packetl2c_leave_banker_list& from);

  inline packetl2c_leave_banker_list& operator=(const packetl2c_leave_banker_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_banker_list& default_instance();

  void Swap(packetl2c_leave_banker_list* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_banker_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_banker_list& from);
  void MergeFrom(const packetl2c_leave_banker_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_banker_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_leave_banker_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_banker_list* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_for_first_banker : public ::google::protobuf::Message {
 public:
  packetc2l_ask_for_first_banker();
  virtual ~packetc2l_ask_for_first_banker();

  packetc2l_ask_for_first_banker(const packetc2l_ask_for_first_banker& from);

  inline packetc2l_ask_for_first_banker& operator=(const packetc2l_ask_for_first_banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_for_first_banker& default_instance();

  void Swap(packetc2l_ask_for_first_banker* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_for_first_banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_for_first_banker& from);
  void MergeFrom(const packetc2l_ask_for_first_banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_first_for_banker];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_ask_for_first_banker)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_for_first_banker* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_ask_for_first_banker_result : public ::google::protobuf::Message {
 public:
  packetl2c_ask_for_first_banker_result();
  virtual ~packetl2c_ask_for_first_banker_result();

  packetl2c_ask_for_first_banker_result(const packetl2c_ask_for_first_banker_result& from);

  inline packetl2c_ask_for_first_banker_result& operator=(const packetl2c_ask_for_first_banker_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_ask_for_first_banker_result& default_instance();

  void Swap(packetl2c_ask_for_first_banker_result* other);

  // implements Message ----------------------------------------------

  packetl2c_ask_for_first_banker_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_ask_for_first_banker_result& from);
  void MergeFrom(const packetl2c_ask_for_first_banker_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_first_for_banker];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_ask_for_first_banker_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_ask_for_first_banker_result* default_instance_;
};
// -------------------------------------------------------------------

class player_info : public ::google::protobuf::Message {
 public:
  player_info();
  virtual ~player_info();

  player_info(const player_info& from);

  inline player_info& operator=(const player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_info& default_instance();

  void Swap(player_info* other);

  // implements Message ----------------------------------------------

  player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_info& from);
  void MergeFrom(const player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_nickname = 2;
  inline bool has_player_nickname() const;
  inline void clear_player_nickname();
  static const int kPlayerNicknameFieldNumber = 2;
  inline const ::std::string& player_nickname() const;
  inline void set_player_nickname(const ::std::string& value);
  inline void set_player_nickname(const char* value);
  inline void set_player_nickname(const char* value, size_t size);
  inline ::std::string* mutable_player_nickname();
  inline ::std::string* release_player_nickname();
  inline void set_allocated_player_nickname(::std::string* player_nickname);

  // optional int32 player_head_frame = 3;
  inline bool has_player_head_frame() const;
  inline void clear_player_head_frame();
  static const int kPlayerHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 player_head_frame() const;
  inline void set_player_head_frame(::google::protobuf::int32 value);

  // optional string player_head_custom = 4;
  inline bool has_player_head_custom() const;
  inline void clear_player_head_custom();
  static const int kPlayerHeadCustomFieldNumber = 4;
  inline const ::std::string& player_head_custom() const;
  inline void set_player_head_custom(const ::std::string& value);
  inline void set_player_head_custom(const char* value);
  inline void set_player_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_player_head_custom();
  inline ::std::string* release_player_head_custom();
  inline void set_allocated_player_head_custom(::std::string* player_head_custom);

  // optional int32 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int32 player_gold() const;
  inline void set_player_gold(::google::protobuf::int32 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 player_vip_lv = 7;
  inline bool has_player_vip_lv() const;
  inline void clear_player_vip_lv();
  static const int kPlayerVipLvFieldNumber = 7;
  inline ::google::protobuf::int32 player_vip_lv() const;
  inline void set_player_vip_lv(::google::protobuf::int32 value);

  // optional int32 win_count = 8;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 8;
  inline ::google::protobuf::int32 win_count() const;
  inline void set_win_count(::google::protobuf::int32 value);

  // optional int32 bets = 9;
  inline bool has_bets() const;
  inline void clear_bets();
  static const int kBetsFieldNumber = 9;
  inline ::google::protobuf::int32 bets() const;
  inline void set_bets(::google::protobuf::int32 value);

  // optional int32 play_cnt = 10;
  inline bool has_play_cnt() const;
  inline void clear_play_cnt();
  static const int kPlayCntFieldNumber = 10;
  inline ::google::protobuf::int32 play_cnt() const;
  inline void set_play_cnt(::google::protobuf::int32 value);

  // repeated int32 other_bets = 11;
  inline int other_bets_size() const;
  inline void clear_other_bets();
  static const int kOtherBetsFieldNumber = 11;
  inline ::google::protobuf::int32 other_bets(int index) const;
  inline void set_other_bets(int index, ::google::protobuf::int32 value);
  inline void add_other_bets(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      other_bets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_other_bets();

  // repeated int32 other_win = 12;
  inline int other_win_size() const;
  inline void clear_other_win();
  static const int kOtherWinFieldNumber = 12;
  inline ::google::protobuf::int32 other_win(int index) const;
  inline void set_other_win(int index, ::google::protobuf::int32 value);
  inline void add_other_win(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      other_win() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_other_win();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_nickname();
  inline void clear_has_player_nickname();
  inline void set_has_player_head_frame();
  inline void clear_has_player_head_frame();
  inline void set_has_player_head_custom();
  inline void clear_has_player_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_player_vip_lv();
  inline void clear_has_player_vip_lv();
  inline void set_has_win_count();
  inline void clear_has_win_count();
  inline void set_has_bets();
  inline void clear_has_bets();
  inline void set_has_play_cnt();
  inline void clear_has_play_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_nickname_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 player_head_frame_;
  ::std::string* player_head_custom_;
  ::google::protobuf::int32 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 player_vip_lv_;
  ::google::protobuf::int32 win_count_;
  ::google::protobuf::int32 bets_;
  ::google::protobuf::int32 play_cnt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > other_bets_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > other_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_for_player_list : public ::google::protobuf::Message {
 public:
  packetc2l_ask_for_player_list();
  virtual ~packetc2l_ask_for_player_list();

  packetc2l_ask_for_player_list(const packetc2l_ask_for_player_list& from);

  inline packetc2l_ask_for_player_list& operator=(const packetc2l_ask_for_player_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_for_player_list& default_instance();

  void Swap(packetc2l_ask_for_player_list* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_for_player_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_for_player_list& from);
  void MergeFrom(const packetc2l_ask_for_player_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_ask_for_player_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_for_player_list* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_ask_for_player_list_result : public ::google::protobuf::Message {
 public:
  packetl2c_ask_for_player_list_result();
  virtual ~packetl2c_ask_for_player_list_result();

  packetl2c_ask_for_player_list_result(const packetl2c_ask_for_player_list_result& from);

  inline packetl2c_ask_for_player_list_result& operator=(const packetl2c_ask_for_player_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_ask_for_player_list_result& default_instance();

  void Swap(packetl2c_ask_for_player_list_result* other);

  // implements Message ----------------------------------------------

  packetl2c_ask_for_player_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_ask_for_player_list_result& from);
  void MergeFrom(const packetl2c_ask_for_player_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // repeated .game_goldshark_protocols.player_info player_list = 2;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 2;
  inline const ::game_goldshark_protocols::player_info& player_list(int index) const;
  inline ::game_goldshark_protocols::player_info* mutable_player_list(int index);
  inline ::game_goldshark_protocols::player_info* add_player_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info >&
      player_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info >*
      mutable_player_list();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_ask_for_player_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info > player_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_ask_for_player_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_for_banker_list : public ::google::protobuf::Message {
 public:
  packetc2l_ask_for_banker_list();
  virtual ~packetc2l_ask_for_banker_list();

  packetc2l_ask_for_banker_list(const packetc2l_ask_for_banker_list& from);

  inline packetc2l_ask_for_banker_list& operator=(const packetc2l_ask_for_banker_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_for_banker_list& default_instance();

  void Swap(packetc2l_ask_for_banker_list* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_for_banker_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_for_banker_list& from);
  void MergeFrom(const packetc2l_ask_for_banker_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_banker_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_ask_for_banker_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_for_banker_list* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_ask_for_banker_list_result : public ::google::protobuf::Message {
 public:
  packetl2c_ask_for_banker_list_result();
  virtual ~packetl2c_ask_for_banker_list_result();

  packetl2c_ask_for_banker_list_result(const packetl2c_ask_for_banker_list_result& from);

  inline packetl2c_ask_for_banker_list_result& operator=(const packetl2c_ask_for_banker_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_ask_for_banker_list_result& default_instance();

  void Swap(packetl2c_ask_for_banker_list_result* other);

  // implements Message ----------------------------------------------

  packetl2c_ask_for_banker_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_ask_for_banker_list_result& from);
  void MergeFrom(const packetl2c_ask_for_banker_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_banker_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // repeated .game_goldshark_protocols.player_info banker_list = 2;
  inline int banker_list_size() const;
  inline void clear_banker_list();
  static const int kBankerListFieldNumber = 2;
  inline const ::game_goldshark_protocols::player_info& banker_list(int index) const;
  inline ::game_goldshark_protocols::player_info* mutable_banker_list(int index);
  inline ::game_goldshark_protocols::player_info* add_banker_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info >&
      banker_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info >*
      mutable_banker_list();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_ask_for_banker_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info > banker_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_ask_for_banker_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_for_history_list : public ::google::protobuf::Message {
 public:
  packetc2l_ask_for_history_list();
  virtual ~packetc2l_ask_for_history_list();

  packetc2l_ask_for_history_list(const packetc2l_ask_for_history_list& from);

  inline packetc2l_ask_for_history_list& operator=(const packetc2l_ask_for_history_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_for_history_list& default_instance();

  void Swap(packetc2l_ask_for_history_list* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_for_history_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_for_history_list& from);
  void MergeFrom(const packetc2l_ask_for_history_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_ask_for_history_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_for_history_list* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_ask_for_history_list_result : public ::google::protobuf::Message {
 public:
  packetl2c_ask_for_history_list_result();
  virtual ~packetl2c_ask_for_history_list_result();

  packetl2c_ask_for_history_list_result(const packetl2c_ask_for_history_list_result& from);

  inline packetl2c_ask_for_history_list_result& operator=(const packetl2c_ask_for_history_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_ask_for_history_list_result& default_instance();

  void Swap(packetl2c_ask_for_history_list_result* other);

  // implements Message ----------------------------------------------

  packetl2c_ask_for_history_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_ask_for_history_list_result& from);
  void MergeFrom(const packetl2c_ask_for_history_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // repeated int32 history_list = 2;
  inline int history_list_size() const;
  inline void clear_history_list();
  static const int kHistoryListFieldNumber = 2;
  inline ::google::protobuf::int32 history_list(int index) const;
  inline void set_history_list(int index, ::google::protobuf::int32 value);
  inline void add_history_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      history_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_history_list();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_ask_for_history_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > history_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_ask_for_history_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_begin_bet : public ::google::protobuf::Message {
 public:
  packetl2c_bc_begin_bet();
  virtual ~packetl2c_bc_begin_bet();

  packetl2c_bc_begin_bet(const packetl2c_bc_begin_bet& from);

  inline packetl2c_bc_begin_bet& operator=(const packetl2c_bc_begin_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_begin_bet& default_instance();

  void Swap(packetl2c_bc_begin_bet* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_begin_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_begin_bet& from);
  void MergeFrom(const packetl2c_bc_begin_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 cd_time = 2;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 2;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // optional bool is_can_rob_banker = 3;
  inline bool has_is_can_rob_banker() const;
  inline void clear_is_can_rob_banker();
  static const int kIsCanRobBankerFieldNumber = 3;
  inline bool is_can_rob_banker() const;
  inline void set_is_can_rob_banker(bool value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_bc_begin_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();
  inline void set_has_is_can_rob_banker();
  inline void clear_has_is_can_rob_banker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 cd_time_;
  bool is_can_rob_banker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_begin_bet* default_instance_;
};
// -------------------------------------------------------------------

class PlayerIncomeInfo : public ::google::protobuf::Message {
 public:
  PlayerIncomeInfo();
  virtual ~PlayerIncomeInfo();

  PlayerIncomeInfo(const PlayerIncomeInfo& from);

  inline PlayerIncomeInfo& operator=(const PlayerIncomeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerIncomeInfo& default_instance();

  void Swap(PlayerIncomeInfo* other);

  // implements Message ----------------------------------------------

  PlayerIncomeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerIncomeInfo& from);
  void MergeFrom(const PlayerIncomeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.player_info player_baseInfo = 1;
  inline bool has_player_baseinfo() const;
  inline void clear_player_baseinfo();
  static const int kPlayerBaseInfoFieldNumber = 1;
  inline const ::game_goldshark_protocols::player_info& player_baseinfo() const;
  inline ::game_goldshark_protocols::player_info* mutable_player_baseinfo();
  inline ::game_goldshark_protocols::player_info* release_player_baseinfo();
  inline void set_allocated_player_baseinfo(::game_goldshark_protocols::player_info* player_baseinfo);

  // optional int32 betCount = 2;
  inline bool has_betcount() const;
  inline void clear_betcount();
  static const int kBetCountFieldNumber = 2;
  inline ::google::protobuf::int32 betcount() const;
  inline void set_betcount(::google::protobuf::int32 value);

  // optional int32 income = 3;
  inline bool has_income() const;
  inline void clear_income();
  static const int kIncomeFieldNumber = 3;
  inline ::google::protobuf::int32 income() const;
  inline void set_income(::google::protobuf::int32 value);

  // repeated int32 other_win = 4;
  inline int other_win_size() const;
  inline void clear_other_win();
  static const int kOtherWinFieldNumber = 4;
  inline ::google::protobuf::int32 other_win(int index) const;
  inline void set_other_win(int index, ::google::protobuf::int32 value);
  inline void add_other_win(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      other_win() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_other_win();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.PlayerIncomeInfo)
 private:
  inline void set_has_player_baseinfo();
  inline void clear_has_player_baseinfo();
  inline void set_has_betcount();
  inline void clear_has_betcount();
  inline void set_has_income();
  inline void clear_has_income();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_goldshark_protocols::player_info* player_baseinfo_;
  ::google::protobuf::int32 betcount_;
  ::google::protobuf::int32 income_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > other_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PlayerIncomeInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_begin_award : public ::google::protobuf::Message {
 public:
  packetl2c_bc_begin_award();
  virtual ~packetl2c_bc_begin_award();

  packetl2c_bc_begin_award(const packetl2c_bc_begin_award& from);

  inline packetl2c_bc_begin_award& operator=(const packetl2c_bc_begin_award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_begin_award& default_instance();

  void Swap(packetl2c_bc_begin_award* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_begin_award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_begin_award& from);
  void MergeFrom(const packetl2c_bc_begin_award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 cd_time = 2;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 2;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // optional int32 result_index = 3;
  inline bool has_result_index() const;
  inline void clear_result_index();
  static const int kResultIndexFieldNumber = 3;
  inline ::google::protobuf::int32 result_index() const;
  inline void set_result_index(::google::protobuf::int32 value);

  // optional int32 banker_result = 4;
  inline bool has_banker_result() const;
  inline void clear_banker_result();
  static const int kBankerResultFieldNumber = 4;
  inline ::google::protobuf::int32 banker_result() const;
  inline void set_banker_result(::google::protobuf::int32 value);

  // repeated .game_goldshark_protocols.PlayerIncomeInfo playerIncomeList = 5;
  inline int playerincomelist_size() const;
  inline void clear_playerincomelist();
  static const int kPlayerIncomeListFieldNumber = 5;
  inline const ::game_goldshark_protocols::PlayerIncomeInfo& playerincomelist(int index) const;
  inline ::game_goldshark_protocols::PlayerIncomeInfo* mutable_playerincomelist(int index);
  inline ::game_goldshark_protocols::PlayerIncomeInfo* add_playerincomelist();
  inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::PlayerIncomeInfo >&
      playerincomelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::PlayerIncomeInfo >*
      mutable_playerincomelist();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_bc_begin_award)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();
  inline void set_has_result_index();
  inline void clear_has_result_index();
  inline void set_has_banker_result();
  inline void clear_has_banker_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 cd_time_;
  ::google::protobuf::int32 result_index_;
  ::google::protobuf::int32 banker_result_;
  ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::PlayerIncomeInfo > playerincomelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_begin_award* default_instance_;
};
// -------------------------------------------------------------------

class msg_master_bets : public ::google::protobuf::Message {
 public:
  msg_master_bets();
  virtual ~msg_master_bets();

  msg_master_bets(const msg_master_bets& from);

  inline msg_master_bets& operator=(const msg_master_bets& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_master_bets& default_instance();

  void Swap(msg_master_bets* other);

  // implements Message ----------------------------------------------

  msg_master_bets* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_master_bets& from);
  void MergeFrom(const msg_master_bets& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 player_bets = 2;
  inline bool has_player_bets() const;
  inline void clear_player_bets();
  static const int kPlayerBetsFieldNumber = 2;
  inline ::google::protobuf::int64 player_bets() const;
  inline void set_player_bets(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.msg_master_bets)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_bets();
  inline void clear_has_player_bets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 player_bets_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_master_bets* default_instance_;
};
// -------------------------------------------------------------------

class msg_betinfo : public ::google::protobuf::Message {
 public:
  msg_betinfo();
  virtual ~msg_betinfo();

  msg_betinfo(const msg_betinfo& from);

  inline msg_betinfo& operator=(const msg_betinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_betinfo& default_instance();

  void Swap(msg_betinfo* other);

  // implements Message ----------------------------------------------

  msg_betinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_betinfo& from);
  void MergeFrom(const msg_betinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 bet_golds = 1;
  inline bool has_bet_golds() const;
  inline void clear_bet_golds();
  static const int kBetGoldsFieldNumber = 1;
  inline ::google::protobuf::int64 bet_golds() const;
  inline void set_bet_golds(::google::protobuf::int64 value);

  // repeated .game_goldshark_protocols.msg_master_bets master_bets = 2;
  inline int master_bets_size() const;
  inline void clear_master_bets();
  static const int kMasterBetsFieldNumber = 2;
  inline const ::game_goldshark_protocols::msg_master_bets& master_bets(int index) const;
  inline ::game_goldshark_protocols::msg_master_bets* mutable_master_bets(int index);
  inline ::game_goldshark_protocols::msg_master_bets* add_master_bets();
  inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_master_bets >&
      master_bets() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_master_bets >*
      mutable_master_bets();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.msg_betinfo)
 private:
  inline void set_has_bet_golds();
  inline void clear_has_bet_golds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bet_golds_;
  ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_master_bets > master_bets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_betinfo* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_total_bet_info : public ::google::protobuf::Message {
 public:
  packetl2c_bc_total_bet_info();
  virtual ~packetl2c_bc_total_bet_info();

  packetl2c_bc_total_bet_info(const packetl2c_bc_total_bet_info& from);

  inline packetl2c_bc_total_bet_info& operator=(const packetl2c_bc_total_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_total_bet_info& default_instance();

  void Swap(packetl2c_bc_total_bet_info* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_total_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_total_bet_info& from);
  void MergeFrom(const packetl2c_bc_total_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_total_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // repeated .game_goldshark_protocols.msg_betinfo bets = 2;
  inline int bets_size() const;
  inline void clear_bets();
  static const int kBetsFieldNumber = 2;
  inline const ::game_goldshark_protocols::msg_betinfo& bets(int index) const;
  inline ::game_goldshark_protocols::msg_betinfo* mutable_bets(int index);
  inline ::game_goldshark_protocols::msg_betinfo* add_bets();
  inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo >&
      bets() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo >*
      mutable_bets();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_bc_total_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo > bets_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_total_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_rob_banker_info : public ::google::protobuf::Message {
 public:
  packetl2c_bc_rob_banker_info();
  virtual ~packetl2c_bc_rob_banker_info();

  packetl2c_bc_rob_banker_info(const packetl2c_bc_rob_banker_info& from);

  inline packetl2c_bc_rob_banker_info& operator=(const packetl2c_bc_rob_banker_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_rob_banker_info& default_instance();

  void Swap(packetl2c_bc_rob_banker_info* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_rob_banker_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_rob_banker_info& from);
  void MergeFrom(const packetl2c_bc_rob_banker_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_rob_banker_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 pay_count = 3;
  inline bool has_pay_count() const;
  inline void clear_pay_count();
  static const int kPayCountFieldNumber = 3;
  inline ::google::protobuf::int32 pay_count() const;
  inline void set_pay_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_bc_rob_banker_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_pay_count();
  inline void clear_has_pay_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 pay_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_rob_banker_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_change_banker : public ::google::protobuf::Message {
 public:
  packetl2c_bc_change_banker();
  virtual ~packetl2c_bc_change_banker();

  packetl2c_bc_change_banker(const packetl2c_bc_change_banker& from);

  inline packetl2c_bc_change_banker& operator=(const packetl2c_bc_change_banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_change_banker& default_instance();

  void Swap(packetl2c_bc_change_banker* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_change_banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_change_banker& from);
  void MergeFrom(const packetl2c_bc_change_banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_banker];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .game_goldshark_protocols.player_info banker_info = 2;
  inline bool has_banker_info() const;
  inline void clear_banker_info();
  static const int kBankerInfoFieldNumber = 2;
  inline const ::game_goldshark_protocols::player_info& banker_info() const;
  inline ::game_goldshark_protocols::player_info* mutable_banker_info();
  inline ::game_goldshark_protocols::player_info* release_banker_info();
  inline void set_allocated_banker_info(::game_goldshark_protocols::player_info* banker_info);

  // optional bool is_rob = 3;
  inline bool has_is_rob() const;
  inline void clear_is_rob();
  static const int kIsRobFieldNumber = 3;
  inline bool is_rob() const;
  inline void set_is_rob(bool value);

  // optional int32 old_banker_id = 4;
  inline bool has_old_banker_id() const;
  inline void clear_old_banker_id();
  static const int kOldBankerIdFieldNumber = 4;
  inline ::google::protobuf::int32 old_banker_id() const;
  inline void set_old_banker_id(::google::protobuf::int32 value);

  // optional int32 system_draw_water = 5;
  inline bool has_system_draw_water() const;
  inline void clear_system_draw_water();
  static const int kSystemDrawWaterFieldNumber = 5;
  inline ::google::protobuf::int32 system_draw_water() const;
  inline void set_system_draw_water(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_bc_change_banker)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_banker_info();
  inline void clear_has_banker_info();
  inline void set_has_is_rob();
  inline void clear_has_is_rob();
  inline void set_has_old_banker_id();
  inline void clear_has_old_banker_id();
  inline void set_has_system_draw_water();
  inline void clear_has_system_draw_water();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_goldshark_protocols::player_info* banker_info_;
  int packet_id_;
  bool is_rob_;
  ::google::protobuf::int32 old_banker_id_;
  ::google::protobuf::int32 system_draw_water_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_change_banker* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_accept_gift : public ::google::protobuf::Message {
 public:
  packetl2c_bc_accept_gift();
  virtual ~packetl2c_bc_accept_gift();

  packetl2c_bc_accept_gift(const packetl2c_bc_accept_gift& from);

  inline packetl2c_bc_accept_gift& operator=(const packetl2c_bc_accept_gift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_accept_gift& default_instance();

  void Swap(packetl2c_bc_accept_gift* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_accept_gift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_accept_gift& from);
  void MergeFrom(const packetl2c_bc_accept_gift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_accept_gift];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 gift_id = 3;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 3;
  inline ::google::protobuf::int32 gift_id() const;
  inline void set_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_bc_accept_gift)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_accept_gift* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_gm : public ::google::protobuf::Message {
 public:
  packetc2l_gm();
  virtual ~packetc2l_gm();

  packetc2l_gm(const packetc2l_gm& from);

  inline packetc2l_gm& operator=(const packetc2l_gm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_gm& default_instance();

  void Swap(packetc2l_gm* other);

  // implements Message ----------------------------------------------

  packetc2l_gm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_gm& from);
  void MergeFrom(const packetc2l_gm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 gm_max = 2;
  inline bool has_gm_max() const;
  inline void clear_gm_max();
  static const int kGmMaxFieldNumber = 2;
  inline ::google::protobuf::int32 gm_max() const;
  inline void set_gm_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_gm)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gm_max();
  inline void clear_has_gm_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 gm_max_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_gm* default_instance_;
};
// -------------------------------------------------------------------

class user_meg_bet_info : public ::google::protobuf::Message {
 public:
  user_meg_bet_info();
  virtual ~user_meg_bet_info();

  user_meg_bet_info(const user_meg_bet_info& from);

  inline user_meg_bet_info& operator=(const user_meg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_meg_bet_info& default_instance();

  void Swap(user_meg_bet_info* other);

  // implements Message ----------------------------------------------

  user_meg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_meg_bet_info& from);
  void MergeFrom(const user_meg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.player_info player_info = 1;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::game_goldshark_protocols::player_info& player_info() const;
  inline ::game_goldshark_protocols::player_info* mutable_player_info();
  inline ::game_goldshark_protocols::player_info* release_player_info();
  inline void set_allocated_player_info(::game_goldshark_protocols::player_info* player_info);

  // repeated int32 bet_info_list = 2;
  inline int bet_info_list_size() const;
  inline void clear_bet_info_list();
  static const int kBetInfoListFieldNumber = 2;
  inline ::google::protobuf::int32 bet_info_list(int index) const;
  inline void set_bet_info_list(int index, ::google::protobuf::int32 value);
  inline void add_bet_info_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bet_info_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bet_info_list();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.user_meg_bet_info)
 private:
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_goldshark_protocols::player_info* player_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bet_info_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static user_meg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_every_bet_info : public ::google::protobuf::Message {
 public:
  packetl2c_bc_every_bet_info();
  virtual ~packetl2c_bc_every_bet_info();

  packetl2c_bc_every_bet_info(const packetl2c_bc_every_bet_info& from);

  inline packetl2c_bc_every_bet_info& operator=(const packetl2c_bc_every_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_every_bet_info& default_instance();

  void Swap(packetl2c_bc_every_bet_info* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_every_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_every_bet_info& from);
  void MergeFrom(const packetl2c_bc_every_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_every_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // repeated .game_goldshark_protocols.user_meg_bet_info user_info_list = 2;
  inline int user_info_list_size() const;
  inline void clear_user_info_list();
  static const int kUserInfoListFieldNumber = 2;
  inline const ::game_goldshark_protocols::user_meg_bet_info& user_info_list(int index) const;
  inline ::game_goldshark_protocols::user_meg_bet_info* mutable_user_info_list(int index);
  inline ::game_goldshark_protocols::user_meg_bet_info* add_user_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::user_meg_bet_info >&
      user_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::user_meg_bet_info >*
      mutable_user_info_list();

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_bc_every_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::user_meg_bet_info > user_info_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_every_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_control_change_result : public ::google::protobuf::Message {
 public:
  packetc2l_control_change_result();
  virtual ~packetc2l_control_change_result();

  packetc2l_control_change_result(const packetc2l_control_change_result& from);

  inline packetc2l_control_change_result& operator=(const packetc2l_control_change_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_control_change_result& default_instance();

  void Swap(packetc2l_control_change_result* other);

  // implements Message ----------------------------------------------

  packetc2l_control_change_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_control_change_result& from);
  void MergeFrom(const packetc2l_control_change_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_control_change_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline ::google::protobuf::int32 command() const;
  inline void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetc2l_control_change_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_control_change_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_control_change_result : public ::google::protobuf::Message {
 public:
  packetl2c_control_change_result();
  virtual ~packetl2c_control_change_result();

  packetl2c_control_change_result(const packetl2c_control_change_result& from);

  inline packetl2c_control_change_result& operator=(const packetl2c_control_change_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_control_change_result& default_instance();

  void Swap(packetl2c_control_change_result* other);

  // implements Message ----------------------------------------------

  packetl2c_control_change_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_control_change_result& from);
  void MergeFrom(const packetl2c_control_change_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_change_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_control_change_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_control_change_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_debuginfo : public ::google::protobuf::Message {
 public:
  packetl2c_bc_debuginfo();
  virtual ~packetl2c_bc_debuginfo();

  packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from);

  inline packetl2c_bc_debuginfo& operator=(const packetl2c_bc_debuginfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_debuginfo& default_instance();

  void Swap(packetl2c_bc_debuginfo* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_debuginfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_debuginfo& from);
  void MergeFrom(const packetl2c_bc_debuginfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 total_profit = 3 [default = 0];
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 3;
  inline ::google::protobuf::int64 total_profit() const;
  inline void set_total_profit(::google::protobuf::int64 value);

  // optional int64 total_stock = 4 [default = 0];
  inline bool has_total_stock() const;
  inline void clear_total_stock();
  static const int kTotalStockFieldNumber = 4;
  inline ::google::protobuf::int64 total_stock() const;
  inline void set_total_stock(::google::protobuf::int64 value);

  // optional int64 total_Rate = 6 [default = 0];
  inline bool has_total_rate() const;
  inline void clear_total_rate();
  static const int kTotalRateFieldNumber = 6;
  inline ::google::protobuf::int64 total_rate() const;
  inline void set_total_rate(::google::protobuf::int64 value);

  // optional string debug_infos = 5;
  inline bool has_debug_infos() const;
  inline void clear_debug_infos();
  static const int kDebugInfosFieldNumber = 5;
  inline const ::std::string& debug_infos() const;
  inline void set_debug_infos(const ::std::string& value);
  inline void set_debug_infos(const char* value);
  inline void set_debug_infos(const char* value, size_t size);
  inline ::std::string* mutable_debug_infos();
  inline ::std::string* release_debug_infos();
  inline void set_allocated_debug_infos(::std::string* debug_infos);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_bc_debuginfo)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_stock();
  inline void clear_has_total_stock();
  inline void set_has_total_rate();
  inline void clear_has_total_rate();
  inline void set_has_debug_infos();
  inline void clear_has_debug_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 total_profit_;
  ::google::protobuf::int64 total_stock_;
  ::google::protobuf::int64 total_rate_;
  ::std::string* debug_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_debuginfo* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_bank_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_bank_info();
  virtual ~packetl2c_notice_bank_info();

  packetl2c_notice_bank_info(const packetl2c_notice_bank_info& from);

  inline packetl2c_notice_bank_info& operator=(const packetl2c_notice_bank_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_bank_info& default_instance();

  void Swap(packetl2c_notice_bank_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_bank_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_bank_info& from);
  void MergeFrom(const packetl2c_notice_bank_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_bank_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_goldshark_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_goldshark_protocols::e_server_msg_type value);

  // optional .game_goldshark_protocols.player_info player_info = 2;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::game_goldshark_protocols::player_info& player_info() const;
  inline ::game_goldshark_protocols::player_info* mutable_player_info();
  inline ::game_goldshark_protocols::player_info* release_player_info();
  inline void set_allocated_player_info(::game_goldshark_protocols::player_info* player_info);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_goldshark_protocols.packetl2c_notice_bank_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_info();
  inline void clear_has_player_info();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_goldshark_protocols::player_info* player_info_;
  int packet_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fgoldshark_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fgoldshark_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_bank_info* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_room_info

// optional int32 roomid = 1;
inline bool msg_room_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_room_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_room_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_room_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_room_info::roomid() const {
  return roomid_;
}
inline void msg_room_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_info

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
inline bool packetc2l_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_info::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_get_room_info::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_info::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_info_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
inline bool packetl2c_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_get_room_info_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_info_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_goldshark_protocols.msg_room_info room_list = 2;
inline int packetl2c_get_room_info_result::room_list_size() const {
  return room_list_.size();
}
inline void packetl2c_get_room_info_result::clear_room_list() {
  room_list_.Clear();
}
inline const ::game_goldshark_protocols::msg_room_info& packetl2c_get_room_info_result::room_list(int index) const {
  return room_list_.Get(index);
}
inline ::game_goldshark_protocols::msg_room_info* packetl2c_get_room_info_result::mutable_room_list(int index) {
  return room_list_.Mutable(index);
}
inline ::game_goldshark_protocols::msg_room_info* packetl2c_get_room_info_result::add_room_list() {
  return room_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_room_info >&
packetl2c_get_room_info_result::room_list() const {
  return room_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_room_info >*
packetl2c_get_room_info_result::mutable_room_list() {
  return &room_list_;
}

// -------------------------------------------------------------------

// packetc2l_enter_room

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
inline bool packetc2l_enter_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_room::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_enter_room::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_room::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 roomid = 2;
inline bool packetc2l_enter_room::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_room::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_room::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_room::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 packetc2l_enter_room::roomid() const {
  return roomid_;
}
inline void packetc2l_enter_room::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetl2c_enter_room_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
inline bool packetl2c_enter_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_room_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_enter_room_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_room_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_enter_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_room_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_enter_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_enter_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool is_intable = 2 [default = false];
inline bool packetl2c_check_state_result::has_is_intable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_is_intable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_is_intable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_is_intable() {
  is_intable_ = false;
  clear_has_is_intable();
}
inline bool packetl2c_check_state_result::is_intable() const {
  return is_intable_;
}
inline void packetl2c_check_state_result::set_is_intable(bool value) {
  set_has_is_intable();
  is_intable_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_scene_info

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
inline bool packetc2l_get_room_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_scene_info::clear_packet_id() {
  packet_id_ = 10007;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_get_room_scene_info::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_scene_info::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_scene_info_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
inline bool packetl2c_get_room_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_scene_info_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_get_room_scene_info_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_scene_info_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetl2c_get_room_scene_info_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_room_scene_info_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::room_id() const {
  return room_id_;
}
inline void packetl2c_get_room_scene_info_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional .game_goldshark_protocols.e_game_state room_state = 3;
inline bool packetl2c_get_room_scene_info_result::has_room_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_room_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_room_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_get_room_scene_info_result::clear_room_state() {
  room_state_ = 0;
  clear_has_room_state();
}
inline ::game_goldshark_protocols::e_game_state packetl2c_get_room_scene_info_result::room_state() const {
  return static_cast< ::game_goldshark_protocols::e_game_state >(room_state_);
}
inline void packetl2c_get_room_scene_info_result::set_room_state(::game_goldshark_protocols::e_game_state value) {
  assert(::game_goldshark_protocols::e_game_state_IsValid(value));
  set_has_room_state();
  room_state_ = value;
}

// optional int32 cd_time = 4;
inline bool packetl2c_get_room_scene_info_result::has_cd_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_cd_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_get_room_scene_info_result::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::cd_time() const {
  return cd_time_;
}
inline void packetl2c_get_room_scene_info_result::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// repeated .game_goldshark_protocols.msg_betinfo bets = 5;
inline int packetl2c_get_room_scene_info_result::bets_size() const {
  return bets_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_bets() {
  bets_.Clear();
}
inline const ::game_goldshark_protocols::msg_betinfo& packetl2c_get_room_scene_info_result::bets(int index) const {
  return bets_.Get(index);
}
inline ::game_goldshark_protocols::msg_betinfo* packetl2c_get_room_scene_info_result::mutable_bets(int index) {
  return bets_.Mutable(index);
}
inline ::game_goldshark_protocols::msg_betinfo* packetl2c_get_room_scene_info_result::add_bets() {
  return bets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo >&
packetl2c_get_room_scene_info_result::bets() const {
  return bets_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo >*
packetl2c_get_room_scene_info_result::mutable_bets() {
  return &bets_;
}

// repeated int32 history_list = 6;
inline int packetl2c_get_room_scene_info_result::history_list_size() const {
  return history_list_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_history_list() {
  history_list_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::history_list(int index) const {
  return history_list_.Get(index);
}
inline void packetl2c_get_room_scene_info_result::set_history_list(int index, ::google::protobuf::int32 value) {
  history_list_.Set(index, value);
}
inline void packetl2c_get_room_scene_info_result::add_history_list(::google::protobuf::int32 value) {
  history_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_scene_info_result::history_list() const {
  return history_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_scene_info_result::mutable_history_list() {
  return &history_list_;
}

// optional .game_goldshark_protocols.player_info banker_info = 7;
inline bool packetl2c_get_room_scene_info_result::has_banker_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_banker_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_banker_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_get_room_scene_info_result::clear_banker_info() {
  if (banker_info_ != NULL) banker_info_->::game_goldshark_protocols::player_info::Clear();
  clear_has_banker_info();
}
inline const ::game_goldshark_protocols::player_info& packetl2c_get_room_scene_info_result::banker_info() const {
  return banker_info_ != NULL ? *banker_info_ : *default_instance_->banker_info_;
}
inline ::game_goldshark_protocols::player_info* packetl2c_get_room_scene_info_result::mutable_banker_info() {
  set_has_banker_info();
  if (banker_info_ == NULL) banker_info_ = new ::game_goldshark_protocols::player_info;
  return banker_info_;
}
inline ::game_goldshark_protocols::player_info* packetl2c_get_room_scene_info_result::release_banker_info() {
  clear_has_banker_info();
  ::game_goldshark_protocols::player_info* temp = banker_info_;
  banker_info_ = NULL;
  return temp;
}
inline void packetl2c_get_room_scene_info_result::set_allocated_banker_info(::game_goldshark_protocols::player_info* banker_info) {
  delete banker_info_;
  banker_info_ = banker_info;
  if (banker_info) {
    set_has_banker_info();
  } else {
    clear_has_banker_info();
  }
}

// optional bool is_can_rob_banker = 8;
inline bool packetl2c_get_room_scene_info_result::has_is_can_rob_banker() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_is_can_rob_banker() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_is_can_rob_banker() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_get_room_scene_info_result::clear_is_can_rob_banker() {
  is_can_rob_banker_ = false;
  clear_has_is_can_rob_banker();
}
inline bool packetl2c_get_room_scene_info_result::is_can_rob_banker() const {
  return is_can_rob_banker_;
}
inline void packetl2c_get_room_scene_info_result::set_is_can_rob_banker(bool value) {
  set_has_is_can_rob_banker();
  is_can_rob_banker_ = value;
}

// optional int32 continue_count = 9;
inline bool packetl2c_get_room_scene_info_result::has_continue_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_continue_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_continue_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetl2c_get_room_scene_info_result::clear_continue_count() {
  continue_count_ = 0;
  clear_has_continue_count();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::continue_count() const {
  return continue_count_;
}
inline void packetl2c_get_room_scene_info_result::set_continue_count(::google::protobuf::int32 value) {
  set_has_continue_count();
  continue_count_ = value;
}

// repeated int32 self_bet_list = 10;
inline int packetl2c_get_room_scene_info_result::self_bet_list_size() const {
  return self_bet_list_.size();
}
inline void packetl2c_get_room_scene_info_result::clear_self_bet_list() {
  self_bet_list_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_scene_info_result::self_bet_list(int index) const {
  return self_bet_list_.Get(index);
}
inline void packetl2c_get_room_scene_info_result::set_self_bet_list(int index, ::google::protobuf::int32 value) {
  self_bet_list_.Set(index, value);
}
inline void packetl2c_get_room_scene_info_result::add_self_bet_list(::google::protobuf::int32 value) {
  self_bet_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_scene_info_result::self_bet_list() const {
  return self_bet_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_scene_info_result::mutable_self_bet_list() {
  return &self_bet_list_;
}

// optional int64 self_golds = 11;
inline bool packetl2c_get_room_scene_info_result::has_self_golds() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void packetl2c_get_room_scene_info_result::set_has_self_golds() {
  _has_bits_[0] |= 0x00000400u;
}
inline void packetl2c_get_room_scene_info_result::clear_has_self_golds() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void packetl2c_get_room_scene_info_result::clear_self_golds() {
  self_golds_ = GOOGLE_LONGLONG(0);
  clear_has_self_golds();
}
inline ::google::protobuf::int64 packetl2c_get_room_scene_info_result::self_golds() const {
  return self_golds_;
}
inline void packetl2c_get_room_scene_info_result::set_self_golds(::google::protobuf::int64 value) {
  set_has_self_golds();
  self_golds_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_room

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
inline bool packetc2l_leave_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_room::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_leave_room::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_room::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_room_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
inline bool packetl2c_leave_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_room_result::clear_packet_id() {
  packet_id_ = 15003;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_leave_room_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_room_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_leave_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_room_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_leave_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_leave_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_add_bet

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
inline bool packetc2l_add_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_add_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_add_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_add_bet::clear_packet_id() {
  packet_id_ = 10004;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_add_bet::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_add_bet::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 bet_index = 2;
inline bool packetc2l_add_bet::has_bet_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_add_bet::set_has_bet_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_add_bet::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_add_bet::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 packetc2l_add_bet::bet_index() const {
  return bet_index_;
}
inline void packetc2l_add_bet::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int32 bet_count = 3;
inline bool packetc2l_add_bet::has_bet_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_add_bet::set_has_bet_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_add_bet::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_add_bet::clear_bet_count() {
  bet_count_ = 0;
  clear_has_bet_count();
}
inline ::google::protobuf::int32 packetc2l_add_bet::bet_count() const {
  return bet_count_;
}
inline void packetc2l_add_bet::set_bet_count(::google::protobuf::int32 value) {
  set_has_bet_count();
  bet_count_ = value;
}

// -------------------------------------------------------------------

// packetl2c_add_bet_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
inline bool packetl2c_add_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_add_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_add_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_add_bet_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_add_bet_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_add_bet_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_add_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_add_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_add_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_add_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_add_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_add_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 bet_index = 3;
inline bool packetl2c_add_bet_result::has_bet_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_add_bet_result::set_has_bet_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_add_bet_result::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_add_bet_result::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::google::protobuf::int32 packetl2c_add_bet_result::bet_index() const {
  return bet_index_;
}
inline void packetl2c_add_bet_result::set_bet_index(::google::protobuf::int32 value) {
  set_has_bet_index();
  bet_index_ = value;
}

// optional int32 bet_count = 4;
inline bool packetl2c_add_bet_result::has_bet_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_add_bet_result::set_has_bet_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_add_bet_result::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_add_bet_result::clear_bet_count() {
  bet_count_ = 0;
  clear_has_bet_count();
}
inline ::google::protobuf::int32 packetl2c_add_bet_result::bet_count() const {
  return bet_count_;
}
inline void packetl2c_add_bet_result::set_bet_count(::google::protobuf::int32 value) {
  set_has_bet_count();
  bet_count_ = value;
}

// -------------------------------------------------------------------

// packetc2l_repeat_bet

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
inline bool packetc2l_repeat_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_repeat_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_repeat_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_repeat_bet::clear_packet_id() {
  packet_id_ = 10005;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_repeat_bet::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_repeat_bet::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_repeat_bet_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
inline bool packetl2c_repeat_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_repeat_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_repeat_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_repeat_bet_result::clear_packet_id() {
  packet_id_ = 15005;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_repeat_bet_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_repeat_bet_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_repeat_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_repeat_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_repeat_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_repeat_bet_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_repeat_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_repeat_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_clear_bet

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_clear_bet];
inline bool packetc2l_clear_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_clear_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_clear_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_clear_bet::clear_packet_id() {
  packet_id_ = 10006;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_clear_bet::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_clear_bet::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_clear_bet_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet];
inline bool packetl2c_clear_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_clear_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_clear_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_clear_bet_result::clear_packet_id() {
  packet_id_ = 15006;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_clear_bet_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_clear_bet_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_clear_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_clear_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_clear_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_clear_bet_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_clear_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_clear_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_ask_for_banker

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_for_banker];
inline bool packetc2l_ask_for_banker::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_for_banker::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_for_banker::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_for_banker::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_ask_for_banker::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_for_banker::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_ask_for_banker_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_for_banker];
inline bool packetl2c_ask_for_banker_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_ask_for_banker_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_ask_for_banker_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_ask_for_banker_result::clear_packet_id() {
  packet_id_ = 15016;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_ask_for_banker_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_ask_for_banker_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_ask_for_banker_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_ask_for_banker_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_ask_for_banker_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_ask_for_banker_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_ask_for_banker_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_ask_for_banker_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_banker

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_banker];
inline bool packetc2l_leave_banker::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_banker::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_banker::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_banker::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_leave_banker::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_banker::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_banker_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_banker];
inline bool packetl2c_leave_banker_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_banker_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_banker_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_banker_result::clear_packet_id() {
  packet_id_ = 15017;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_leave_banker_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_banker_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_leave_banker_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_banker_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_banker_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_banker_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_leave_banker_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_leave_banker_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_banker_list

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_banker_list];
inline bool packetc2l_leave_banker_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_banker_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_banker_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_banker_list::clear_packet_id() {
  packet_id_ = 10017;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_leave_banker_list::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_banker_list::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_banker_list

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_banker_list];
inline bool packetl2c_leave_banker_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_banker_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_banker_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_banker_list::clear_packet_id() {
  packet_id_ = 15507;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_leave_banker_list::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_banker_list::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_leave_banker_list::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_banker_list::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_banker_list::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_banker_list::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_leave_banker_list::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_leave_banker_list::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_ask_for_first_banker

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_first_for_banker];
inline bool packetc2l_ask_for_first_banker::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_for_first_banker::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_for_first_banker::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_for_first_banker::clear_packet_id() {
  packet_id_ = 10012;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_ask_for_first_banker::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_for_first_banker::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_ask_for_first_banker_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_first_for_banker];
inline bool packetl2c_ask_for_first_banker_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_ask_for_first_banker_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_ask_for_first_banker_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_ask_for_first_banker_result::clear_packet_id() {
  packet_id_ = 15018;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_ask_for_first_banker_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_ask_for_first_banker_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_ask_for_first_banker_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_ask_for_first_banker_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_ask_for_first_banker_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_ask_for_first_banker_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_ask_for_first_banker_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_ask_for_first_banker_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// player_info

// optional int32 player_id = 1;
inline bool player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 player_info::player_id() const {
  return player_id_;
}
inline void player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_nickname = 2;
inline bool player_info::has_player_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_info::set_has_player_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_info::clear_has_player_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_info::clear_player_nickname() {
  if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
    player_nickname_->clear();
  }
  clear_has_player_nickname();
}
inline const ::std::string& player_info::player_nickname() const {
  return *player_nickname_;
}
inline void player_info::set_player_nickname(const ::std::string& value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
}
inline void player_info::set_player_nickname(const char* value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
}
inline void player_info::set_player_nickname(const char* value, size_t size) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_info::mutable_player_nickname() {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  return player_nickname_;
}
inline ::std::string* player_info::release_player_nickname() {
  clear_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_nickname_;
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_info::set_allocated_player_nickname(::std::string* player_nickname) {
  if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete player_nickname_;
  }
  if (player_nickname) {
    set_has_player_nickname();
    player_nickname_ = player_nickname;
  } else {
    clear_has_player_nickname();
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 player_head_frame = 3;
inline bool player_info::has_player_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_info::set_has_player_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_info::clear_has_player_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_info::clear_player_head_frame() {
  player_head_frame_ = 0;
  clear_has_player_head_frame();
}
inline ::google::protobuf::int32 player_info::player_head_frame() const {
  return player_head_frame_;
}
inline void player_info::set_player_head_frame(::google::protobuf::int32 value) {
  set_has_player_head_frame();
  player_head_frame_ = value;
}

// optional string player_head_custom = 4;
inline bool player_info::has_player_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_info::set_has_player_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_info::clear_has_player_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_info::clear_player_head_custom() {
  if (player_head_custom_ != &::google::protobuf::internal::kEmptyString) {
    player_head_custom_->clear();
  }
  clear_has_player_head_custom();
}
inline const ::std::string& player_info::player_head_custom() const {
  return *player_head_custom_;
}
inline void player_info::set_player_head_custom(const ::std::string& value) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(value);
}
inline void player_info::set_player_head_custom(const char* value) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(value);
}
inline void player_info::set_player_head_custom(const char* value, size_t size) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_info::mutable_player_head_custom() {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_custom_ = new ::std::string;
  }
  return player_head_custom_;
}
inline ::std::string* player_info::release_player_head_custom() {
  clear_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_head_custom_;
    player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_info::set_allocated_player_head_custom(::std::string* player_head_custom) {
  if (player_head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete player_head_custom_;
  }
  if (player_head_custom) {
    set_has_player_head_custom();
    player_head_custom_ = player_head_custom;
  } else {
    clear_has_player_head_custom();
    player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 player_gold = 5;
inline bool player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void player_info::clear_player_gold() {
  player_gold_ = 0;
  clear_has_player_gold();
}
inline ::google::protobuf::int32 player_info::player_gold() const {
  return player_gold_;
}
inline void player_info::set_player_gold(::google::protobuf::int32 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 player_info::player_sex() const {
  return player_sex_;
}
inline void player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 player_vip_lv = 7;
inline bool player_info::has_player_vip_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void player_info::set_has_player_vip_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void player_info::clear_has_player_vip_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void player_info::clear_player_vip_lv() {
  player_vip_lv_ = 0;
  clear_has_player_vip_lv();
}
inline ::google::protobuf::int32 player_info::player_vip_lv() const {
  return player_vip_lv_;
}
inline void player_info::set_player_vip_lv(::google::protobuf::int32 value) {
  set_has_player_vip_lv();
  player_vip_lv_ = value;
}

// optional int32 win_count = 8;
inline bool player_info::has_win_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void player_info::set_has_win_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void player_info::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void player_info::clear_win_count() {
  win_count_ = 0;
  clear_has_win_count();
}
inline ::google::protobuf::int32 player_info::win_count() const {
  return win_count_;
}
inline void player_info::set_win_count(::google::protobuf::int32 value) {
  set_has_win_count();
  win_count_ = value;
}

// optional int32 bets = 9;
inline bool player_info::has_bets() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void player_info::set_has_bets() {
  _has_bits_[0] |= 0x00000100u;
}
inline void player_info::clear_has_bets() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void player_info::clear_bets() {
  bets_ = 0;
  clear_has_bets();
}
inline ::google::protobuf::int32 player_info::bets() const {
  return bets_;
}
inline void player_info::set_bets(::google::protobuf::int32 value) {
  set_has_bets();
  bets_ = value;
}

// optional int32 play_cnt = 10;
inline bool player_info::has_play_cnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void player_info::set_has_play_cnt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void player_info::clear_has_play_cnt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void player_info::clear_play_cnt() {
  play_cnt_ = 0;
  clear_has_play_cnt();
}
inline ::google::protobuf::int32 player_info::play_cnt() const {
  return play_cnt_;
}
inline void player_info::set_play_cnt(::google::protobuf::int32 value) {
  set_has_play_cnt();
  play_cnt_ = value;
}

// repeated int32 other_bets = 11;
inline int player_info::other_bets_size() const {
  return other_bets_.size();
}
inline void player_info::clear_other_bets() {
  other_bets_.Clear();
}
inline ::google::protobuf::int32 player_info::other_bets(int index) const {
  return other_bets_.Get(index);
}
inline void player_info::set_other_bets(int index, ::google::protobuf::int32 value) {
  other_bets_.Set(index, value);
}
inline void player_info::add_other_bets(::google::protobuf::int32 value) {
  other_bets_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
player_info::other_bets() const {
  return other_bets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
player_info::mutable_other_bets() {
  return &other_bets_;
}

// repeated int32 other_win = 12;
inline int player_info::other_win_size() const {
  return other_win_.size();
}
inline void player_info::clear_other_win() {
  other_win_.Clear();
}
inline ::google::protobuf::int32 player_info::other_win(int index) const {
  return other_win_.Get(index);
}
inline void player_info::set_other_win(int index, ::google::protobuf::int32 value) {
  other_win_.Set(index, value);
}
inline void player_info::add_other_win(::google::protobuf::int32 value) {
  other_win_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
player_info::other_win() const {
  return other_win_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
player_info::mutable_other_win() {
  return &other_win_;
}

// -------------------------------------------------------------------

// packetc2l_ask_for_player_list

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
inline bool packetc2l_ask_for_player_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_for_player_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_for_player_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_for_player_list::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_ask_for_player_list::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_for_player_list::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_ask_for_player_list_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
inline bool packetl2c_ask_for_player_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_ask_for_player_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_ask_for_player_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_ask_for_player_list_result::clear_packet_id() {
  packet_id_ = 15020;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_ask_for_player_list_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_ask_for_player_list_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_goldshark_protocols.player_info player_list = 2;
inline int packetl2c_ask_for_player_list_result::player_list_size() const {
  return player_list_.size();
}
inline void packetl2c_ask_for_player_list_result::clear_player_list() {
  player_list_.Clear();
}
inline const ::game_goldshark_protocols::player_info& packetl2c_ask_for_player_list_result::player_list(int index) const {
  return player_list_.Get(index);
}
inline ::game_goldshark_protocols::player_info* packetl2c_ask_for_player_list_result::mutable_player_list(int index) {
  return player_list_.Mutable(index);
}
inline ::game_goldshark_protocols::player_info* packetl2c_ask_for_player_list_result::add_player_list() {
  return player_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info >&
packetl2c_ask_for_player_list_result::player_list() const {
  return player_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info >*
packetl2c_ask_for_player_list_result::mutable_player_list() {
  return &player_list_;
}

// -------------------------------------------------------------------

// packetc2l_ask_for_banker_list

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_banker_list];
inline bool packetc2l_ask_for_banker_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_for_banker_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_for_banker_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_for_banker_list::clear_packet_id() {
  packet_id_ = 10014;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_ask_for_banker_list::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_for_banker_list::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_ask_for_banker_list_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_banker_list];
inline bool packetl2c_ask_for_banker_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_ask_for_banker_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_ask_for_banker_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_ask_for_banker_list_result::clear_packet_id() {
  packet_id_ = 15021;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_ask_for_banker_list_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_ask_for_banker_list_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_goldshark_protocols.player_info banker_list = 2;
inline int packetl2c_ask_for_banker_list_result::banker_list_size() const {
  return banker_list_.size();
}
inline void packetl2c_ask_for_banker_list_result::clear_banker_list() {
  banker_list_.Clear();
}
inline const ::game_goldshark_protocols::player_info& packetl2c_ask_for_banker_list_result::banker_list(int index) const {
  return banker_list_.Get(index);
}
inline ::game_goldshark_protocols::player_info* packetl2c_ask_for_banker_list_result::mutable_banker_list(int index) {
  return banker_list_.Mutable(index);
}
inline ::game_goldshark_protocols::player_info* packetl2c_ask_for_banker_list_result::add_banker_list() {
  return banker_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info >&
packetl2c_ask_for_banker_list_result::banker_list() const {
  return banker_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::player_info >*
packetl2c_ask_for_banker_list_result::mutable_banker_list() {
  return &banker_list_;
}

// -------------------------------------------------------------------

// packetc2l_ask_for_history_list

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
inline bool packetc2l_ask_for_history_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_for_history_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_for_history_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_for_history_list::clear_packet_id() {
  packet_id_ = 10015;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_ask_for_history_list::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_for_history_list::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_ask_for_history_list_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
inline bool packetl2c_ask_for_history_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_ask_for_history_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_ask_for_history_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_ask_for_history_list_result::clear_packet_id() {
  packet_id_ = 15022;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_ask_for_history_list_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_ask_for_history_list_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int32 history_list = 2;
inline int packetl2c_ask_for_history_list_result::history_list_size() const {
  return history_list_.size();
}
inline void packetl2c_ask_for_history_list_result::clear_history_list() {
  history_list_.Clear();
}
inline ::google::protobuf::int32 packetl2c_ask_for_history_list_result::history_list(int index) const {
  return history_list_.Get(index);
}
inline void packetl2c_ask_for_history_list_result::set_history_list(int index, ::google::protobuf::int32 value) {
  history_list_.Set(index, value);
}
inline void packetl2c_ask_for_history_list_result::add_history_list(::google::protobuf::int32 value) {
  history_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_ask_for_history_list_result::history_list() const {
  return history_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_ask_for_history_list_result::mutable_history_list() {
  return &history_list_;
}

// -------------------------------------------------------------------

// packetl2c_bc_begin_bet

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
inline bool packetl2c_bc_begin_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_begin_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_begin_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_begin_bet::clear_packet_id() {
  packet_id_ = 15007;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_bc_begin_bet::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_begin_bet::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 cd_time = 2;
inline bool packetl2c_bc_begin_bet::has_cd_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_begin_bet::set_has_cd_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_begin_bet::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_begin_bet::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 packetl2c_bc_begin_bet::cd_time() const {
  return cd_time_;
}
inline void packetl2c_bc_begin_bet::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// optional bool is_can_rob_banker = 3;
inline bool packetl2c_bc_begin_bet::has_is_can_rob_banker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_begin_bet::set_has_is_can_rob_banker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_begin_bet::clear_has_is_can_rob_banker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_begin_bet::clear_is_can_rob_banker() {
  is_can_rob_banker_ = false;
  clear_has_is_can_rob_banker();
}
inline bool packetl2c_bc_begin_bet::is_can_rob_banker() const {
  return is_can_rob_banker_;
}
inline void packetl2c_bc_begin_bet::set_is_can_rob_banker(bool value) {
  set_has_is_can_rob_banker();
  is_can_rob_banker_ = value;
}

// -------------------------------------------------------------------

// PlayerIncomeInfo

// optional .game_goldshark_protocols.player_info player_baseInfo = 1;
inline bool PlayerIncomeInfo::has_player_baseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerIncomeInfo::set_has_player_baseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerIncomeInfo::clear_has_player_baseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerIncomeInfo::clear_player_baseinfo() {
  if (player_baseinfo_ != NULL) player_baseinfo_->::game_goldshark_protocols::player_info::Clear();
  clear_has_player_baseinfo();
}
inline const ::game_goldshark_protocols::player_info& PlayerIncomeInfo::player_baseinfo() const {
  return player_baseinfo_ != NULL ? *player_baseinfo_ : *default_instance_->player_baseinfo_;
}
inline ::game_goldshark_protocols::player_info* PlayerIncomeInfo::mutable_player_baseinfo() {
  set_has_player_baseinfo();
  if (player_baseinfo_ == NULL) player_baseinfo_ = new ::game_goldshark_protocols::player_info;
  return player_baseinfo_;
}
inline ::game_goldshark_protocols::player_info* PlayerIncomeInfo::release_player_baseinfo() {
  clear_has_player_baseinfo();
  ::game_goldshark_protocols::player_info* temp = player_baseinfo_;
  player_baseinfo_ = NULL;
  return temp;
}
inline void PlayerIncomeInfo::set_allocated_player_baseinfo(::game_goldshark_protocols::player_info* player_baseinfo) {
  delete player_baseinfo_;
  player_baseinfo_ = player_baseinfo;
  if (player_baseinfo) {
    set_has_player_baseinfo();
  } else {
    clear_has_player_baseinfo();
  }
}

// optional int32 betCount = 2;
inline bool PlayerIncomeInfo::has_betcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerIncomeInfo::set_has_betcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerIncomeInfo::clear_has_betcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerIncomeInfo::clear_betcount() {
  betcount_ = 0;
  clear_has_betcount();
}
inline ::google::protobuf::int32 PlayerIncomeInfo::betcount() const {
  return betcount_;
}
inline void PlayerIncomeInfo::set_betcount(::google::protobuf::int32 value) {
  set_has_betcount();
  betcount_ = value;
}

// optional int32 income = 3;
inline bool PlayerIncomeInfo::has_income() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerIncomeInfo::set_has_income() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerIncomeInfo::clear_has_income() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerIncomeInfo::clear_income() {
  income_ = 0;
  clear_has_income();
}
inline ::google::protobuf::int32 PlayerIncomeInfo::income() const {
  return income_;
}
inline void PlayerIncomeInfo::set_income(::google::protobuf::int32 value) {
  set_has_income();
  income_ = value;
}

// repeated int32 other_win = 4;
inline int PlayerIncomeInfo::other_win_size() const {
  return other_win_.size();
}
inline void PlayerIncomeInfo::clear_other_win() {
  other_win_.Clear();
}
inline ::google::protobuf::int32 PlayerIncomeInfo::other_win(int index) const {
  return other_win_.Get(index);
}
inline void PlayerIncomeInfo::set_other_win(int index, ::google::protobuf::int32 value) {
  other_win_.Set(index, value);
}
inline void PlayerIncomeInfo::add_other_win(::google::protobuf::int32 value) {
  other_win_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerIncomeInfo::other_win() const {
  return other_win_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerIncomeInfo::mutable_other_win() {
  return &other_win_;
}

// -------------------------------------------------------------------

// packetl2c_bc_begin_award

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
inline bool packetl2c_bc_begin_award::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_begin_award::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_begin_award::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_begin_award::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_bc_begin_award::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_begin_award::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 cd_time = 2;
inline bool packetl2c_bc_begin_award::has_cd_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_begin_award::set_has_cd_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_begin_award::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_begin_award::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 packetl2c_bc_begin_award::cd_time() const {
  return cd_time_;
}
inline void packetl2c_bc_begin_award::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// optional int32 result_index = 3;
inline bool packetl2c_bc_begin_award::has_result_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_begin_award::set_has_result_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_begin_award::clear_has_result_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_begin_award::clear_result_index() {
  result_index_ = 0;
  clear_has_result_index();
}
inline ::google::protobuf::int32 packetl2c_bc_begin_award::result_index() const {
  return result_index_;
}
inline void packetl2c_bc_begin_award::set_result_index(::google::protobuf::int32 value) {
  set_has_result_index();
  result_index_ = value;
}

// optional int32 banker_result = 4;
inline bool packetl2c_bc_begin_award::has_banker_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_begin_award::set_has_banker_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_begin_award::clear_has_banker_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_begin_award::clear_banker_result() {
  banker_result_ = 0;
  clear_has_banker_result();
}
inline ::google::protobuf::int32 packetl2c_bc_begin_award::banker_result() const {
  return banker_result_;
}
inline void packetl2c_bc_begin_award::set_banker_result(::google::protobuf::int32 value) {
  set_has_banker_result();
  banker_result_ = value;
}

// repeated .game_goldshark_protocols.PlayerIncomeInfo playerIncomeList = 5;
inline int packetl2c_bc_begin_award::playerincomelist_size() const {
  return playerincomelist_.size();
}
inline void packetl2c_bc_begin_award::clear_playerincomelist() {
  playerincomelist_.Clear();
}
inline const ::game_goldshark_protocols::PlayerIncomeInfo& packetl2c_bc_begin_award::playerincomelist(int index) const {
  return playerincomelist_.Get(index);
}
inline ::game_goldshark_protocols::PlayerIncomeInfo* packetl2c_bc_begin_award::mutable_playerincomelist(int index) {
  return playerincomelist_.Mutable(index);
}
inline ::game_goldshark_protocols::PlayerIncomeInfo* packetl2c_bc_begin_award::add_playerincomelist() {
  return playerincomelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::PlayerIncomeInfo >&
packetl2c_bc_begin_award::playerincomelist() const {
  return playerincomelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::PlayerIncomeInfo >*
packetl2c_bc_begin_award::mutable_playerincomelist() {
  return &playerincomelist_;
}

// -------------------------------------------------------------------

// msg_master_bets

// optional int32 player_id = 1;
inline bool msg_master_bets::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_master_bets::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_master_bets::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_master_bets::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_master_bets::player_id() const {
  return player_id_;
}
inline void msg_master_bets::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 player_bets = 2;
inline bool msg_master_bets::has_player_bets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_master_bets::set_has_player_bets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_master_bets::clear_has_player_bets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_master_bets::clear_player_bets() {
  player_bets_ = GOOGLE_LONGLONG(0);
  clear_has_player_bets();
}
inline ::google::protobuf::int64 msg_master_bets::player_bets() const {
  return player_bets_;
}
inline void msg_master_bets::set_player_bets(::google::protobuf::int64 value) {
  set_has_player_bets();
  player_bets_ = value;
}

// -------------------------------------------------------------------

// msg_betinfo

// optional int64 bet_golds = 1;
inline bool msg_betinfo::has_bet_golds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_betinfo::set_has_bet_golds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_betinfo::clear_has_bet_golds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_betinfo::clear_bet_golds() {
  bet_golds_ = GOOGLE_LONGLONG(0);
  clear_has_bet_golds();
}
inline ::google::protobuf::int64 msg_betinfo::bet_golds() const {
  return bet_golds_;
}
inline void msg_betinfo::set_bet_golds(::google::protobuf::int64 value) {
  set_has_bet_golds();
  bet_golds_ = value;
}

// repeated .game_goldshark_protocols.msg_master_bets master_bets = 2;
inline int msg_betinfo::master_bets_size() const {
  return master_bets_.size();
}
inline void msg_betinfo::clear_master_bets() {
  master_bets_.Clear();
}
inline const ::game_goldshark_protocols::msg_master_bets& msg_betinfo::master_bets(int index) const {
  return master_bets_.Get(index);
}
inline ::game_goldshark_protocols::msg_master_bets* msg_betinfo::mutable_master_bets(int index) {
  return master_bets_.Mutable(index);
}
inline ::game_goldshark_protocols::msg_master_bets* msg_betinfo::add_master_bets() {
  return master_bets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_master_bets >&
msg_betinfo::master_bets() const {
  return master_bets_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_master_bets >*
msg_betinfo::mutable_master_bets() {
  return &master_bets_;
}

// -------------------------------------------------------------------

// packetl2c_bc_total_bet_info

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_total_bet_info];
inline bool packetl2c_bc_total_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_total_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_total_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_total_bet_info::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_bc_total_bet_info::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_total_bet_info::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_goldshark_protocols.msg_betinfo bets = 2;
inline int packetl2c_bc_total_bet_info::bets_size() const {
  return bets_.size();
}
inline void packetl2c_bc_total_bet_info::clear_bets() {
  bets_.Clear();
}
inline const ::game_goldshark_protocols::msg_betinfo& packetl2c_bc_total_bet_info::bets(int index) const {
  return bets_.Get(index);
}
inline ::game_goldshark_protocols::msg_betinfo* packetl2c_bc_total_bet_info::mutable_bets(int index) {
  return bets_.Mutable(index);
}
inline ::game_goldshark_protocols::msg_betinfo* packetl2c_bc_total_bet_info::add_bets() {
  return bets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo >&
packetl2c_bc_total_bet_info::bets() const {
  return bets_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::msg_betinfo >*
packetl2c_bc_total_bet_info::mutable_bets() {
  return &bets_;
}

// -------------------------------------------------------------------

// packetl2c_bc_rob_banker_info

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_rob_banker_info];
inline bool packetl2c_bc_rob_banker_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_rob_banker_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_rob_banker_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_rob_banker_info::clear_packet_id() {
  packet_id_ = 15023;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_bc_rob_banker_info::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_rob_banker_info::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_rob_banker_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_rob_banker_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_rob_banker_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_rob_banker_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_rob_banker_info::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_rob_banker_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 pay_count = 3;
inline bool packetl2c_bc_rob_banker_info::has_pay_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_rob_banker_info::set_has_pay_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_rob_banker_info::clear_has_pay_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_rob_banker_info::clear_pay_count() {
  pay_count_ = 0;
  clear_has_pay_count();
}
inline ::google::protobuf::int32 packetl2c_bc_rob_banker_info::pay_count() const {
  return pay_count_;
}
inline void packetl2c_bc_rob_banker_info::set_pay_count(::google::protobuf::int32 value) {
  set_has_pay_count();
  pay_count_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_change_banker

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_banker];
inline bool packetl2c_bc_change_banker::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_change_banker::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_change_banker::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_change_banker::clear_packet_id() {
  packet_id_ = 15019;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_bc_change_banker::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_change_banker::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_goldshark_protocols.player_info banker_info = 2;
inline bool packetl2c_bc_change_banker::has_banker_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_change_banker::set_has_banker_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_change_banker::clear_has_banker_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_change_banker::clear_banker_info() {
  if (banker_info_ != NULL) banker_info_->::game_goldshark_protocols::player_info::Clear();
  clear_has_banker_info();
}
inline const ::game_goldshark_protocols::player_info& packetl2c_bc_change_banker::banker_info() const {
  return banker_info_ != NULL ? *banker_info_ : *default_instance_->banker_info_;
}
inline ::game_goldshark_protocols::player_info* packetl2c_bc_change_banker::mutable_banker_info() {
  set_has_banker_info();
  if (banker_info_ == NULL) banker_info_ = new ::game_goldshark_protocols::player_info;
  return banker_info_;
}
inline ::game_goldshark_protocols::player_info* packetl2c_bc_change_banker::release_banker_info() {
  clear_has_banker_info();
  ::game_goldshark_protocols::player_info* temp = banker_info_;
  banker_info_ = NULL;
  return temp;
}
inline void packetl2c_bc_change_banker::set_allocated_banker_info(::game_goldshark_protocols::player_info* banker_info) {
  delete banker_info_;
  banker_info_ = banker_info;
  if (banker_info) {
    set_has_banker_info();
  } else {
    clear_has_banker_info();
  }
}

// optional bool is_rob = 3;
inline bool packetl2c_bc_change_banker::has_is_rob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_change_banker::set_has_is_rob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_change_banker::clear_has_is_rob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_change_banker::clear_is_rob() {
  is_rob_ = false;
  clear_has_is_rob();
}
inline bool packetl2c_bc_change_banker::is_rob() const {
  return is_rob_;
}
inline void packetl2c_bc_change_banker::set_is_rob(bool value) {
  set_has_is_rob();
  is_rob_ = value;
}

// optional int32 old_banker_id = 4;
inline bool packetl2c_bc_change_banker::has_old_banker_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_change_banker::set_has_old_banker_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_change_banker::clear_has_old_banker_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_change_banker::clear_old_banker_id() {
  old_banker_id_ = 0;
  clear_has_old_banker_id();
}
inline ::google::protobuf::int32 packetl2c_bc_change_banker::old_banker_id() const {
  return old_banker_id_;
}
inline void packetl2c_bc_change_banker::set_old_banker_id(::google::protobuf::int32 value) {
  set_has_old_banker_id();
  old_banker_id_ = value;
}

// optional int32 system_draw_water = 5;
inline bool packetl2c_bc_change_banker::has_system_draw_water() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_change_banker::set_has_system_draw_water() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_change_banker::clear_has_system_draw_water() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_change_banker::clear_system_draw_water() {
  system_draw_water_ = 0;
  clear_has_system_draw_water();
}
inline ::google::protobuf::int32 packetl2c_bc_change_banker::system_draw_water() const {
  return system_draw_water_;
}
inline void packetl2c_bc_change_banker::set_system_draw_water(::google::protobuf::int32 value) {
  set_has_system_draw_water();
  system_draw_water_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_accept_gift

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_accept_gift];
inline bool packetl2c_bc_accept_gift::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_accept_gift::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_accept_gift::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_accept_gift::clear_packet_id() {
  packet_id_ = 15015;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_bc_accept_gift::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_accept_gift::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_accept_gift::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_accept_gift::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_accept_gift::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_accept_gift::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_accept_gift::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_accept_gift::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 gift_id = 3;
inline bool packetl2c_bc_accept_gift::has_gift_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_accept_gift::set_has_gift_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_accept_gift::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_accept_gift::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 packetl2c_bc_accept_gift::gift_id() const {
  return gift_id_;
}
inline void packetl2c_bc_accept_gift::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_gm

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
inline bool packetc2l_gm::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_gm::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_gm::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_gm::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_gm::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_gm::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 gm_max = 2;
inline bool packetc2l_gm::has_gm_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_gm::set_has_gm_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_gm::clear_has_gm_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_gm::clear_gm_max() {
  gm_max_ = 0;
  clear_has_gm_max();
}
inline ::google::protobuf::int32 packetc2l_gm::gm_max() const {
  return gm_max_;
}
inline void packetc2l_gm::set_gm_max(::google::protobuf::int32 value) {
  set_has_gm_max();
  gm_max_ = value;
}

// -------------------------------------------------------------------

// user_meg_bet_info

// optional .game_goldshark_protocols.player_info player_info = 1;
inline bool user_meg_bet_info::has_player_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_meg_bet_info::set_has_player_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_meg_bet_info::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_meg_bet_info::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_goldshark_protocols::player_info::Clear();
  clear_has_player_info();
}
inline const ::game_goldshark_protocols::player_info& user_meg_bet_info::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_goldshark_protocols::player_info* user_meg_bet_info::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_goldshark_protocols::player_info;
  return player_info_;
}
inline ::game_goldshark_protocols::player_info* user_meg_bet_info::release_player_info() {
  clear_has_player_info();
  ::game_goldshark_protocols::player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void user_meg_bet_info::set_allocated_player_info(::game_goldshark_protocols::player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// repeated int32 bet_info_list = 2;
inline int user_meg_bet_info::bet_info_list_size() const {
  return bet_info_list_.size();
}
inline void user_meg_bet_info::clear_bet_info_list() {
  bet_info_list_.Clear();
}
inline ::google::protobuf::int32 user_meg_bet_info::bet_info_list(int index) const {
  return bet_info_list_.Get(index);
}
inline void user_meg_bet_info::set_bet_info_list(int index, ::google::protobuf::int32 value) {
  bet_info_list_.Set(index, value);
}
inline void user_meg_bet_info::add_bet_info_list(::google::protobuf::int32 value) {
  bet_info_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
user_meg_bet_info::bet_info_list() const {
  return bet_info_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
user_meg_bet_info::mutable_bet_info_list() {
  return &bet_info_list_;
}

// -------------------------------------------------------------------

// packetl2c_bc_every_bet_info

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_every_bet_info];
inline bool packetl2c_bc_every_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_every_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_every_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_every_bet_info::clear_packet_id() {
  packet_id_ = 15500;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_bc_every_bet_info::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_every_bet_info::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_goldshark_protocols.user_meg_bet_info user_info_list = 2;
inline int packetl2c_bc_every_bet_info::user_info_list_size() const {
  return user_info_list_.size();
}
inline void packetl2c_bc_every_bet_info::clear_user_info_list() {
  user_info_list_.Clear();
}
inline const ::game_goldshark_protocols::user_meg_bet_info& packetl2c_bc_every_bet_info::user_info_list(int index) const {
  return user_info_list_.Get(index);
}
inline ::game_goldshark_protocols::user_meg_bet_info* packetl2c_bc_every_bet_info::mutable_user_info_list(int index) {
  return user_info_list_.Mutable(index);
}
inline ::game_goldshark_protocols::user_meg_bet_info* packetl2c_bc_every_bet_info::add_user_info_list() {
  return user_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::user_meg_bet_info >&
packetl2c_bc_every_bet_info::user_info_list() const {
  return user_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_goldshark_protocols::user_meg_bet_info >*
packetl2c_bc_every_bet_info::mutable_user_info_list() {
  return &user_info_list_;
}

// -------------------------------------------------------------------

// packetc2l_control_change_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_control_change_result];
inline bool packetc2l_control_change_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_control_change_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_control_change_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_control_change_result::clear_packet_id() {
  packet_id_ = 10016;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetc2l_control_change_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_control_change_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 command = 2;
inline bool packetc2l_control_change_result::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_control_change_result::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_control_change_result::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_control_change_result::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::google::protobuf::int32 packetc2l_control_change_result::command() const {
  return command_;
}
inline void packetc2l_control_change_result::set_command(::google::protobuf::int32 value) {
  set_has_command();
  command_ = value;
}

// -------------------------------------------------------------------

// packetl2c_control_change_result

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_control_change_result];
inline bool packetl2c_control_change_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_control_change_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_control_change_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_control_change_result::clear_packet_id() {
  packet_id_ = 15502;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_control_change_result::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_control_change_result::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_control_change_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_control_change_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_control_change_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_control_change_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_control_change_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_control_change_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetl2c_bc_debuginfo

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
inline bool packetl2c_bc_debuginfo::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_packet_id() {
  packet_id_ = 15505;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_bc_debuginfo::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_debuginfo::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_debuginfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_debuginfo::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_debuginfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 total_profit = 3 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_profit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_profit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_total_profit() {
  total_profit_ = GOOGLE_LONGLONG(0);
  clear_has_total_profit();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_profit() const {
  return total_profit_;
}
inline void packetl2c_bc_debuginfo::set_total_profit(::google::protobuf::int64 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional int64 total_stock = 4 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_stock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_stock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_stock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_total_stock() {
  total_stock_ = GOOGLE_LONGLONG(0);
  clear_has_total_stock();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_stock() const {
  return total_stock_;
}
inline void packetl2c_bc_debuginfo::set_total_stock(::google::protobuf::int64 value) {
  set_has_total_stock();
  total_stock_ = value;
}

// optional int64 total_Rate = 6 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_total_rate() {
  total_rate_ = GOOGLE_LONGLONG(0);
  clear_has_total_rate();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_rate() const {
  return total_rate_;
}
inline void packetl2c_bc_debuginfo::set_total_rate(::google::protobuf::int64 value) {
  set_has_total_rate();
  total_rate_ = value;
}

// optional string debug_infos = 5;
inline bool packetl2c_bc_debuginfo::has_debug_infos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_debug_infos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_bc_debuginfo::clear_has_debug_infos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_bc_debuginfo::clear_debug_infos() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    debug_infos_->clear();
  }
  clear_has_debug_infos();
}
inline const ::std::string& packetl2c_bc_debuginfo::debug_infos() const {
  return *debug_infos_;
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const ::std::string& value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value, size_t size) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_bc_debuginfo::mutable_debug_infos() {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  return debug_infos_;
}
inline ::std::string* packetl2c_bc_debuginfo::release_debug_infos() {
  clear_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_infos_;
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_bc_debuginfo::set_allocated_debug_infos(::std::string* debug_infos) {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (debug_infos) {
    set_has_debug_infos();
    debug_infos_ = debug_infos;
  } else {
    clear_has_debug_infos();
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetl2c_notice_bank_info

// optional .game_goldshark_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_bank_info];
inline bool packetl2c_notice_bank_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_bank_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_bank_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_bank_info::clear_packet_id() {
  packet_id_ = 15506;
  clear_has_packet_id();
}
inline ::game_goldshark_protocols::e_server_msg_type packetl2c_notice_bank_info::packet_id() const {
  return static_cast< ::game_goldshark_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_bank_info::set_packet_id(::game_goldshark_protocols::e_server_msg_type value) {
  assert(::game_goldshark_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_goldshark_protocols.player_info player_info = 2;
inline bool packetl2c_notice_bank_info::has_player_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_bank_info::set_has_player_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_bank_info::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_bank_info::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_goldshark_protocols::player_info::Clear();
  clear_has_player_info();
}
inline const ::game_goldshark_protocols::player_info& packetl2c_notice_bank_info::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_goldshark_protocols::player_info* packetl2c_notice_bank_info::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_goldshark_protocols::player_info;
  return player_info_;
}
inline ::game_goldshark_protocols::player_info* packetl2c_notice_bank_info::release_player_info() {
  clear_has_player_info();
  ::game_goldshark_protocols::player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void packetl2c_notice_bank_info::set_allocated_player_info(::game_goldshark_protocols::player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// optional int32 type = 3;
inline bool packetl2c_notice_bank_info::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_bank_info::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_bank_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_bank_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 packetl2c_notice_bank_info::type() const {
  return type_;
}
inline void packetl2c_notice_bank_info::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_goldshark_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fgoldshark_5fprotocol_2eproto__INCLUDED
