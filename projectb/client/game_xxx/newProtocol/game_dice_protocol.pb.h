// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_dice_protocol.proto

#ifndef PROTOBUF_game_5fdice_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fdice_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_dice_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace dice_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

class packetc2l_check_state;
class packetc2l_check_state_result;
class packetc2l_get_room_info;
class room_info;
class packetl2c_get_room_info_result;
class player_info;
class msg_master_bets;
class other_bet;
class table_info;
class packetc2l_entertable;
class packetc2l_entertable_result;
class packetc2l_leavetable;
class packetc2l_leavetable_result;
class packetc2l_get_table_info;
class packetc2l_get_table_info_result;
class dice_bet;
class bet_info;
class packetc2l_bet;
class packetc2l_bet_again;
class packetc2l_bet_result;
class packetc2l_bc_bet;
class packetc2l_unbet;
class packetc2l_unbet_result;
class packetc2l_bc_unbet;
class packetc2l_bc_client_shake;
class packetc2l_bc_client_beginbet;
class packetc2l_bc_client_endbet;
class dice_info;
class packetc2l_bc_client_dice;
class gold_change_info;
class packetc2l_bc_gold_change;
class packetc2l_bc_table_info;
class chang_table;
class chang_table_result;
class gm_command;
class other_player_info;
class balance_result;
class bc_other_bet;
class packetc2l_game_control;
class packetl2c_game_control_result;
class packetl2c_debuginfo;
class msg_bet_info;
class gm_msg_bet_info;
class packetl2c_notice_all_bet_info;
class packetl2c_bc_debuginfo;
class msg_player_info;
class packetc2l_ask_playerlist;
class packetl2c_playerlist_result;

// ===================================================================

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state_result : public ::google::protobuf::Message {
 public:
  packetc2l_check_state_result();
  virtual ~packetc2l_check_state_result();

  packetc2l_check_state_result(const packetc2l_check_state_result& from);

  inline packetc2l_check_state_result& operator=(const packetc2l_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state_result& default_instance();

  void Swap(packetc2l_check_state_result* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state_result& from);
  void MergeFrom(const packetc2l_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional bool in_table = 2 [default = false];
  inline bool has_in_table() const;
  inline void clear_in_table();
  static const int kInTableFieldNumber = 2;
  inline bool in_table() const;
  inline void set_in_table(bool value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_in_table();
  inline void clear_has_in_table();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool in_table_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_info();
  virtual ~packetc2l_get_room_info();

  packetc2l_get_room_info(const packetc2l_get_room_info& from);

  inline packetc2l_get_room_info& operator=(const packetc2l_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_info& default_instance();

  void Swap(packetc2l_get_room_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_info& from);
  void MergeFrom(const packetc2l_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class room_info : public ::google::protobuf::Message {
 public:
  room_info();
  virtual ~room_info();

  room_info(const room_info& from);

  inline room_info& operator=(const room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const room_info& default_instance();

  void Swap(room_info* other);

  // implements Message ----------------------------------------------

  room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_info& from);
  void MergeFrom(const room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.room_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_info_result();
  virtual ~packetl2c_get_room_info_result();

  packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from);

  inline packetl2c_get_room_info_result& operator=(const packetl2c_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_info_result& default_instance();

  void Swap(packetl2c_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_info_result& from);
  void MergeFrom(const packetl2c_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // repeated .dice_protocols.room_info room = 2;
  inline int room_size() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 2;
  inline const ::dice_protocols::room_info& room(int index) const;
  inline ::dice_protocols::room_info* mutable_room(int index);
  inline ::dice_protocols::room_info* add_room();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::room_info >&
      room() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::room_info >*
      mutable_room();

  // @@protoc_insertion_point(class_scope:dice_protocols.packetl2c_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dice_protocols::room_info > room_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class player_info : public ::google::protobuf::Message {
 public:
  player_info();
  virtual ~player_info();

  player_info(const player_info& from);

  inline player_info& operator=(const player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_info& default_instance();

  void Swap(player_info* other);

  // implements Message ----------------------------------------------

  player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_info& from);
  void MergeFrom(const player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_nickname = 3;
  inline bool has_player_nickname() const;
  inline void clear_player_nickname();
  static const int kPlayerNicknameFieldNumber = 3;
  inline const ::std::string& player_nickname() const;
  inline void set_player_nickname(const ::std::string& value);
  inline void set_player_nickname(const char* value);
  inline void set_player_nickname(const char* value, size_t size);
  inline ::std::string* mutable_player_nickname();
  inline ::std::string* release_player_nickname();
  inline void set_allocated_player_nickname(::std::string* player_nickname);

  // optional int32 player_head_id = 4;
  inline bool has_player_head_id() const;
  inline void clear_player_head_id();
  static const int kPlayerHeadIdFieldNumber = 4;
  inline ::google::protobuf::int32 player_head_id() const;
  inline void set_player_head_id(::google::protobuf::int32 value);

  // optional string player_head_id_custom = 5;
  inline bool has_player_head_id_custom() const;
  inline void clear_player_head_id_custom();
  static const int kPlayerHeadIdCustomFieldNumber = 5;
  inline const ::std::string& player_head_id_custom() const;
  inline void set_player_head_id_custom(const ::std::string& value);
  inline void set_player_head_id_custom(const char* value);
  inline void set_player_head_id_custom(const char* value, size_t size);
  inline ::std::string* mutable_player_head_id_custom();
  inline ::std::string* release_player_head_id_custom();
  inline void set_allocated_player_head_id_custom(::std::string* player_head_id_custom);

  // optional int64 player_gold = 6;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 6;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 7;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 7;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 player_vip_lv = 8;
  inline bool has_player_vip_lv() const;
  inline void clear_player_vip_lv();
  static const int kPlayerVipLvFieldNumber = 8;
  inline ::google::protobuf::int32 player_vip_lv() const;
  inline void set_player_vip_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_nickname();
  inline void clear_has_player_nickname();
  inline void set_has_player_head_id();
  inline void clear_has_player_head_id();
  inline void set_has_player_head_id_custom();
  inline void clear_has_player_head_id_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_player_vip_lv();
  inline void clear_has_player_vip_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_nickname_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 player_head_id_;
  ::std::string* player_head_id_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 player_vip_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static player_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_master_bets : public ::google::protobuf::Message {
 public:
  msg_master_bets();
  virtual ~msg_master_bets();

  msg_master_bets(const msg_master_bets& from);

  inline msg_master_bets& operator=(const msg_master_bets& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_master_bets& default_instance();

  void Swap(msg_master_bets* other);

  // implements Message ----------------------------------------------

  msg_master_bets* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_master_bets& from);
  void MergeFrom(const msg_master_bets& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 player_bets = 2;
  inline bool has_player_bets() const;
  inline void clear_player_bets();
  static const int kPlayerBetsFieldNumber = 2;
  inline ::google::protobuf::int64 player_bets() const;
  inline void set_player_bets(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.msg_master_bets)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_bets();
  inline void clear_has_player_bets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 player_bets_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_master_bets* default_instance_;
};
// -------------------------------------------------------------------

class other_bet : public ::google::protobuf::Message {
 public:
  other_bet();
  virtual ~other_bet();

  other_bet(const other_bet& from);

  inline other_bet& operator=(const other_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const other_bet& default_instance();

  void Swap(other_bet* other);

  // implements Message ----------------------------------------------

  other_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const other_bet& from);
  void MergeFrom(const other_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bet_area = 1;
  inline bool has_bet_area() const;
  inline void clear_bet_area();
  static const int kBetAreaFieldNumber = 1;
  inline ::google::protobuf::int32 bet_area() const;
  inline void set_bet_area(::google::protobuf::int32 value);

  // optional int64 bet_gold = 2;
  inline bool has_bet_gold() const;
  inline void clear_bet_gold();
  static const int kBetGoldFieldNumber = 2;
  inline ::google::protobuf::int64 bet_gold() const;
  inline void set_bet_gold(::google::protobuf::int64 value);

  // repeated .dice_protocols.msg_master_bets master_bets = 3;
  inline int master_bets_size() const;
  inline void clear_master_bets();
  static const int kMasterBetsFieldNumber = 3;
  inline const ::dice_protocols::msg_master_bets& master_bets(int index) const;
  inline ::dice_protocols::msg_master_bets* mutable_master_bets(int index);
  inline ::dice_protocols::msg_master_bets* add_master_bets();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_master_bets >&
      master_bets() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_master_bets >*
      mutable_master_bets();

  // @@protoc_insertion_point(class_scope:dice_protocols.other_bet)
 private:
  inline void set_has_bet_area();
  inline void clear_has_bet_area();
  inline void set_has_bet_gold();
  inline void clear_has_bet_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bet_gold_;
  ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_master_bets > master_bets_;
  ::google::protobuf::int32 bet_area_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static other_bet* default_instance_;
};
// -------------------------------------------------------------------

class table_info : public ::google::protobuf::Message {
 public:
  table_info();
  virtual ~table_info();

  table_info(const table_info& from);

  inline table_info& operator=(const table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const table_info& default_instance();

  void Swap(table_info* other);

  // implements Message ----------------------------------------------

  table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const table_info& from);
  void MergeFrom(const table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_msg_gamestate_type game_state = 1;
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 1;
  inline ::dice_protocols::e_msg_gamestate_type game_state() const;
  inline void set_game_state(::dice_protocols::e_msg_gamestate_type value);

  // optional int32 cd_time = 2;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 2;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // repeated .dice_protocols.dice_info list_info = 4;
  inline int list_info_size() const;
  inline void clear_list_info();
  static const int kListInfoFieldNumber = 4;
  inline const ::dice_protocols::dice_info& list_info(int index) const;
  inline ::dice_protocols::dice_info* mutable_list_info(int index);
  inline ::dice_protocols::dice_info* add_list_info();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_info >&
      list_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_info >*
      mutable_list_info();

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 playe_ticket_count = 6;
  inline bool has_playe_ticket_count() const;
  inline void clear_playe_ticket_count();
  static const int kPlayeTicketCountFieldNumber = 6;
  inline ::google::protobuf::int32 playe_ticket_count() const;
  inline void set_playe_ticket_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.table_info)
 private:
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_playe_ticket_count();
  inline void clear_has_playe_ticket_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int game_state_;
  ::google::protobuf::int32 cd_time_;
  ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_info > list_info_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 playe_ticket_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static table_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_entertable : public ::google::protobuf::Message {
 public:
  packetc2l_entertable();
  virtual ~packetc2l_entertable();

  packetc2l_entertable(const packetc2l_entertable& from);

  inline packetc2l_entertable& operator=(const packetc2l_entertable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_entertable& default_instance();

  void Swap(packetc2l_entertable* other);

  // implements Message ----------------------------------------------

  packetc2l_entertable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_entertable& from);
  void MergeFrom(const packetc2l_entertable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_table];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_entertable)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_entertable* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_entertable_result : public ::google::protobuf::Message {
 public:
  packetc2l_entertable_result();
  virtual ~packetc2l_entertable_result();

  packetc2l_entertable_result(const packetc2l_entertable_result& from);

  inline packetc2l_entertable_result& operator=(const packetc2l_entertable_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_entertable_result& default_instance();

  void Swap(packetc2l_entertable_result* other);

  // implements Message ----------------------------------------------

  packetc2l_entertable_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_entertable_result& from);
  void MergeFrom(const packetc2l_entertable_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_table_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_entertable_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_entertable_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leavetable : public ::google::protobuf::Message {
 public:
  packetc2l_leavetable();
  virtual ~packetc2l_leavetable();

  packetc2l_leavetable(const packetc2l_leavetable& from);

  inline packetc2l_leavetable& operator=(const packetc2l_leavetable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leavetable& default_instance();

  void Swap(packetc2l_leavetable* other);

  // implements Message ----------------------------------------------

  packetc2l_leavetable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leavetable& from);
  void MergeFrom(const packetc2l_leavetable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_leavetable)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leavetable* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leavetable_result : public ::google::protobuf::Message {
 public:
  packetc2l_leavetable_result();
  virtual ~packetc2l_leavetable_result();

  packetc2l_leavetable_result(const packetc2l_leavetable_result& from);

  inline packetc2l_leavetable_result& operator=(const packetc2l_leavetable_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leavetable_result& default_instance();

  void Swap(packetc2l_leavetable_result* other);

  // implements Message ----------------------------------------------

  packetc2l_leavetable_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leavetable_result& from);
  void MergeFrom(const packetc2l_leavetable_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_leavetable_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leavetable_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_table_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_table_info();
  virtual ~packetc2l_get_table_info();

  packetc2l_get_table_info(const packetc2l_get_table_info& from);

  inline packetc2l_get_table_info& operator=(const packetc2l_get_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_table_info& default_instance();

  void Swap(packetc2l_get_table_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_table_info& from);
  void MergeFrom(const packetc2l_get_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_get_table_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_table_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_table_info_result : public ::google::protobuf::Message {
 public:
  packetc2l_get_table_info_result();
  virtual ~packetc2l_get_table_info_result();

  packetc2l_get_table_info_result(const packetc2l_get_table_info_result& from);

  inline packetc2l_get_table_info_result& operator=(const packetc2l_get_table_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_table_info_result& default_instance();

  void Swap(packetc2l_get_table_info_result* other);

  // implements Message ----------------------------------------------

  packetc2l_get_table_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_table_info_result& from);
  void MergeFrom(const packetc2l_get_table_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional .dice_protocols.table_info table = 3;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 3;
  inline const ::dice_protocols::table_info& table() const;
  inline ::dice_protocols::table_info* mutable_table();
  inline ::dice_protocols::table_info* release_table();
  inline void set_allocated_table(::dice_protocols::table_info* table);

  // repeated .dice_protocols.other_bet info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::dice_protocols::other_bet& info(int index) const;
  inline ::dice_protocols::other_bet* mutable_info(int index);
  inline ::dice_protocols::other_bet* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >*
      mutable_info();

  // repeated .dice_protocols.other_bet self_info = 5;
  inline int self_info_size() const;
  inline void clear_self_info();
  static const int kSelfInfoFieldNumber = 5;
  inline const ::dice_protocols::other_bet& self_info(int index) const;
  inline ::dice_protocols::other_bet* mutable_self_info(int index);
  inline ::dice_protocols::other_bet* add_self_info();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >&
      self_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >*
      mutable_self_info();

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_get_table_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_table();
  inline void clear_has_table();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_id_;
  ::dice_protocols::table_info* table_;
  ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet > info_;
  ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet > self_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_table_info_result* default_instance_;
};
// -------------------------------------------------------------------

class dice_bet : public ::google::protobuf::Message {
 public:
  dice_bet();
  virtual ~dice_bet();

  dice_bet(const dice_bet& from);

  inline dice_bet& operator=(const dice_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_bet& default_instance();

  void Swap(dice_bet* other);

  // implements Message ----------------------------------------------

  dice_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_bet& from);
  void MergeFrom(const dice_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chip_type = 1;
  inline bool has_chip_type() const;
  inline void clear_chip_type();
  static const int kChipTypeFieldNumber = 1;
  inline ::google::protobuf::int32 chip_type() const;
  inline void set_chip_type(::google::protobuf::int32 value);

  // optional .dice_protocols.e_dice_type dice_type = 2;
  inline bool has_dice_type() const;
  inline void clear_dice_type();
  static const int kDiceTypeFieldNumber = 2;
  inline ::dice_protocols::e_dice_type dice_type() const;
  inline void set_dice_type(::dice_protocols::e_dice_type value);

  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.dice_bet)
 private:
  inline void set_has_chip_type();
  inline void clear_has_chip_type();
  inline void set_has_dice_type();
  inline void clear_has_dice_type();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chip_type_;
  int dice_type_;
  ::google::protobuf::int64 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static dice_bet* default_instance_;
};
// -------------------------------------------------------------------

class bet_info : public ::google::protobuf::Message {
 public:
  bet_info();
  virtual ~bet_info();

  bet_info(const bet_info& from);

  inline bet_info& operator=(const bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bet_info& default_instance();

  void Swap(bet_info* other);

  // implements Message ----------------------------------------------

  bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bet_info& from);
  void MergeFrom(const bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // repeated .dice_protocols.dice_bet db = 3;
  inline int db_size() const;
  inline void clear_db();
  static const int kDbFieldNumber = 3;
  inline const ::dice_protocols::dice_bet& db(int index) const;
  inline ::dice_protocols::dice_bet* mutable_db(int index);
  inline ::dice_protocols::dice_bet* add_db();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet >&
      db() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet >*
      mutable_db();

  // @@protoc_insertion_point(class_scope:dice_protocols.bet_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet > db_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bet : public ::google::protobuf::Message {
 public:
  packetc2l_bet();
  virtual ~packetc2l_bet();

  packetc2l_bet(const packetc2l_bet& from);

  inline packetc2l_bet& operator=(const packetc2l_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bet& default_instance();

  void Swap(packetc2l_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bet& from);
  void MergeFrom(const packetc2l_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .dice_protocols.dice_bet db = 2;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 2;
  inline const ::dice_protocols::dice_bet& db() const;
  inline ::dice_protocols::dice_bet* mutable_db();
  inline ::dice_protocols::dice_bet* release_db();
  inline void set_allocated_db(::dice_protocols::dice_bet* db);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_db();
  inline void clear_has_db();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dice_protocols::dice_bet* db_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bet_again : public ::google::protobuf::Message {
 public:
  packetc2l_bet_again();
  virtual ~packetc2l_bet_again();

  packetc2l_bet_again(const packetc2l_bet_again& from);

  inline packetc2l_bet_again& operator=(const packetc2l_bet_again& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bet_again& default_instance();

  void Swap(packetc2l_bet_again* other);

  // implements Message ----------------------------------------------

  packetc2l_bet_again* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bet_again& from);
  void MergeFrom(const packetc2l_bet_again& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_again];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // repeated .dice_protocols.dice_bet db = 2;
  inline int db_size() const;
  inline void clear_db();
  static const int kDbFieldNumber = 2;
  inline const ::dice_protocols::dice_bet& db(int index) const;
  inline ::dice_protocols::dice_bet* mutable_db(int index);
  inline ::dice_protocols::dice_bet* add_db();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet >&
      db() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet >*
      mutable_db();

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bet_again)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet > db_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bet_again* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bet_result : public ::google::protobuf::Message {
 public:
  packetc2l_bet_result();
  virtual ~packetc2l_bet_result();

  packetc2l_bet_result(const packetc2l_bet_result& from);

  inline packetc2l_bet_result& operator=(const packetc2l_bet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bet_result& default_instance();

  void Swap(packetc2l_bet_result* other);

  // implements Message ----------------------------------------------

  packetc2l_bet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bet_result& from);
  void MergeFrom(const packetc2l_bet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional .dice_protocols.dice_bet db = 3;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 3;
  inline const ::dice_protocols::dice_bet& db() const;
  inline ::dice_protocols::dice_bet* mutable_db();
  inline ::dice_protocols::dice_bet* release_db();
  inline void set_allocated_db(::dice_protocols::dice_bet* db);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_db();
  inline void clear_has_db();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::dice_protocols::dice_bet* db_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bc_bet : public ::google::protobuf::Message {
 public:
  packetc2l_bc_bet();
  virtual ~packetc2l_bc_bet();

  packetc2l_bc_bet(const packetc2l_bc_bet& from);

  inline packetc2l_bc_bet& operator=(const packetc2l_bc_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bc_bet& default_instance();

  void Swap(packetc2l_bc_bet* other);

  // implements Message ----------------------------------------------

  packetc2l_bc_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bc_bet& from);
  void MergeFrom(const packetc2l_bc_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .dice_protocols.bet_info bi = 2;
  inline bool has_bi() const;
  inline void clear_bi();
  static const int kBiFieldNumber = 2;
  inline const ::dice_protocols::bet_info& bi() const;
  inline ::dice_protocols::bet_info* mutable_bi();
  inline ::dice_protocols::bet_info* release_bi();
  inline void set_allocated_bi(::dice_protocols::bet_info* bi);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bc_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bi();
  inline void clear_has_bi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dice_protocols::bet_info* bi_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bc_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_unbet : public ::google::protobuf::Message {
 public:
  packetc2l_unbet();
  virtual ~packetc2l_unbet();

  packetc2l_unbet(const packetc2l_unbet& from);

  inline packetc2l_unbet& operator=(const packetc2l_unbet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_unbet& default_instance();

  void Swap(packetc2l_unbet* other);

  // implements Message ----------------------------------------------

  packetc2l_unbet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_unbet& from);
  void MergeFrom(const packetc2l_unbet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_unbet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_unbet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_unbet* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_unbet_result : public ::google::protobuf::Message {
 public:
  packetc2l_unbet_result();
  virtual ~packetc2l_unbet_result();

  packetc2l_unbet_result(const packetc2l_unbet_result& from);

  inline packetc2l_unbet_result& operator=(const packetc2l_unbet_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_unbet_result& default_instance();

  void Swap(packetc2l_unbet_result* other);

  // implements Message ----------------------------------------------

  packetc2l_unbet_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_unbet_result& from);
  void MergeFrom(const packetc2l_unbet_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_unbet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_unbet_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_unbet_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bc_unbet : public ::google::protobuf::Message {
 public:
  packetc2l_bc_unbet();
  virtual ~packetc2l_bc_unbet();

  packetc2l_bc_unbet(const packetc2l_bc_unbet& from);

  inline packetc2l_bc_unbet& operator=(const packetc2l_bc_unbet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bc_unbet& default_instance();

  void Swap(packetc2l_bc_unbet* other);

  // implements Message ----------------------------------------------

  packetc2l_bc_unbet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bc_unbet& from);
  void MergeFrom(const packetc2l_bc_unbet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_unbet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bc_unbet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bc_unbet* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bc_client_shake : public ::google::protobuf::Message {
 public:
  packetc2l_bc_client_shake();
  virtual ~packetc2l_bc_client_shake();

  packetc2l_bc_client_shake(const packetc2l_bc_client_shake& from);

  inline packetc2l_bc_client_shake& operator=(const packetc2l_bc_client_shake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bc_client_shake& default_instance();

  void Swap(packetc2l_bc_client_shake* other);

  // implements Message ----------------------------------------------

  packetc2l_bc_client_shake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bc_client_shake& from);
  void MergeFrom(const packetc2l_bc_client_shake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_shake];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bc_client_shake)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bc_client_shake* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bc_client_beginbet : public ::google::protobuf::Message {
 public:
  packetc2l_bc_client_beginbet();
  virtual ~packetc2l_bc_client_beginbet();

  packetc2l_bc_client_beginbet(const packetc2l_bc_client_beginbet& from);

  inline packetc2l_bc_client_beginbet& operator=(const packetc2l_bc_client_beginbet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bc_client_beginbet& default_instance();

  void Swap(packetc2l_bc_client_beginbet* other);

  // implements Message ----------------------------------------------

  packetc2l_bc_client_beginbet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bc_client_beginbet& from);
  void MergeFrom(const packetc2l_bc_client_beginbet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_beginbet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional int32 cd_time = 2;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 2;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bc_client_beginbet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 cd_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bc_client_beginbet* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bc_client_endbet : public ::google::protobuf::Message {
 public:
  packetc2l_bc_client_endbet();
  virtual ~packetc2l_bc_client_endbet();

  packetc2l_bc_client_endbet(const packetc2l_bc_client_endbet& from);

  inline packetc2l_bc_client_endbet& operator=(const packetc2l_bc_client_endbet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bc_client_endbet& default_instance();

  void Swap(packetc2l_bc_client_endbet* other);

  // implements Message ----------------------------------------------

  packetc2l_bc_client_endbet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bc_client_endbet& from);
  void MergeFrom(const packetc2l_bc_client_endbet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_endbet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bc_client_endbet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bc_client_endbet* default_instance_;
};
// -------------------------------------------------------------------

class dice_info : public ::google::protobuf::Message {
 public:
  dice_info();
  virtual ~dice_info();

  dice_info(const dice_info& from);

  inline dice_info& operator=(const dice_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_info& default_instance();

  void Swap(dice_info* other);

  // implements Message ----------------------------------------------

  dice_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_info& from);
  void MergeFrom(const dice_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dice1 = 1;
  inline bool has_dice1() const;
  inline void clear_dice1();
  static const int kDice1FieldNumber = 1;
  inline ::google::protobuf::int32 dice1() const;
  inline void set_dice1(::google::protobuf::int32 value);

  // optional int32 dice2 = 2;
  inline bool has_dice2() const;
  inline void clear_dice2();
  static const int kDice2FieldNumber = 2;
  inline ::google::protobuf::int32 dice2() const;
  inline void set_dice2(::google::protobuf::int32 value);

  // optional int32 dice3 = 3;
  inline bool has_dice3() const;
  inline void clear_dice3();
  static const int kDice3FieldNumber = 3;
  inline ::google::protobuf::int32 dice3() const;
  inline void set_dice3(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.dice_info)
 private:
  inline void set_has_dice1();
  inline void clear_has_dice1();
  inline void set_has_dice2();
  inline void clear_has_dice2();
  inline void set_has_dice3();
  inline void clear_has_dice3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dice1_;
  ::google::protobuf::int32 dice2_;
  ::google::protobuf::int32 dice3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static dice_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bc_client_dice : public ::google::protobuf::Message {
 public:
  packetc2l_bc_client_dice();
  virtual ~packetc2l_bc_client_dice();

  packetc2l_bc_client_dice(const packetc2l_bc_client_dice& from);

  inline packetc2l_bc_client_dice& operator=(const packetc2l_bc_client_dice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bc_client_dice& default_instance();

  void Swap(packetc2l_bc_client_dice* other);

  // implements Message ----------------------------------------------

  packetc2l_bc_client_dice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bc_client_dice& from);
  void MergeFrom(const packetc2l_bc_client_dice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_dice];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .dice_protocols.dice_info di = 2;
  inline bool has_di() const;
  inline void clear_di();
  static const int kDiFieldNumber = 2;
  inline const ::dice_protocols::dice_info& di() const;
  inline ::dice_protocols::dice_info* mutable_di();
  inline ::dice_protocols::dice_info* release_di();
  inline void set_allocated_di(::dice_protocols::dice_info* di);

  // optional int32 cd_time = 3;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 3;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bc_client_dice)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_di();
  inline void clear_has_di();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dice_protocols::dice_info* di_;
  int packet_id_;
  ::google::protobuf::int32 cd_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bc_client_dice* default_instance_;
};
// -------------------------------------------------------------------

class gold_change_info : public ::google::protobuf::Message {
 public:
  gold_change_info();
  virtual ~gold_change_info();

  gold_change_info(const gold_change_info& from);

  inline gold_change_info& operator=(const gold_change_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gold_change_info& default_instance();

  void Swap(gold_change_info* other);

  // implements Message ----------------------------------------------

  gold_change_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gold_change_info& from);
  void MergeFrom(const gold_change_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.gold_change_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gold_change_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bc_gold_change : public ::google::protobuf::Message {
 public:
  packetc2l_bc_gold_change();
  virtual ~packetc2l_bc_gold_change();

  packetc2l_bc_gold_change(const packetc2l_bc_gold_change& from);

  inline packetc2l_bc_gold_change& operator=(const packetc2l_bc_gold_change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bc_gold_change& default_instance();

  void Swap(packetc2l_bc_gold_change* other);

  // implements Message ----------------------------------------------

  packetc2l_bc_gold_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bc_gold_change& from);
  void MergeFrom(const packetc2l_bc_gold_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_gold_change];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .dice_protocols.gold_change_info change = 2;
  inline bool has_change() const;
  inline void clear_change();
  static const int kChangeFieldNumber = 2;
  inline const ::dice_protocols::gold_change_info& change() const;
  inline ::dice_protocols::gold_change_info* mutable_change();
  inline ::dice_protocols::gold_change_info* release_change();
  inline void set_allocated_change(::dice_protocols::gold_change_info* change);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bc_gold_change)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_change();
  inline void clear_has_change();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dice_protocols::gold_change_info* change_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bc_gold_change* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bc_table_info : public ::google::protobuf::Message {
 public:
  packetc2l_bc_table_info();
  virtual ~packetc2l_bc_table_info();

  packetc2l_bc_table_info(const packetc2l_bc_table_info& from);

  inline packetc2l_bc_table_info& operator=(const packetc2l_bc_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bc_table_info& default_instance();

  void Swap(packetc2l_bc_table_info* other);

  // implements Message ----------------------------------------------

  packetc2l_bc_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bc_table_info& from);
  void MergeFrom(const packetc2l_bc_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_table_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .dice_protocols.table_info table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::dice_protocols::table_info& table() const;
  inline ::dice_protocols::table_info* mutable_table();
  inline ::dice_protocols::table_info* release_table();
  inline void set_allocated_table(::dice_protocols::table_info* table);

  // optional int32 flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_bc_table_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dice_protocols::table_info* table_;
  int packet_id_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bc_table_info* default_instance_;
};
// -------------------------------------------------------------------

class chang_table : public ::google::protobuf::Message {
 public:
  chang_table();
  virtual ~chang_table();

  chang_table(const chang_table& from);

  inline chang_table& operator=(const chang_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chang_table& default_instance();

  void Swap(chang_table* other);

  // implements Message ----------------------------------------------

  chang_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chang_table& from);
  void MergeFrom(const chang_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:dice_protocols.chang_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static chang_table* default_instance_;
};
// -------------------------------------------------------------------

class chang_table_result : public ::google::protobuf::Message {
 public:
  chang_table_result();
  virtual ~chang_table_result();

  chang_table_result(const chang_table_result& from);

  inline chang_table_result& operator=(const chang_table_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chang_table_result& default_instance();

  void Swap(chang_table_result* other);

  // implements Message ----------------------------------------------

  chang_table_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chang_table_result& from);
  void MergeFrom(const chang_table_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:dice_protocols.chang_table_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static chang_table_result* default_instance_;
};
// -------------------------------------------------------------------

class gm_command : public ::google::protobuf::Message {
 public:
  gm_command();
  virtual ~gm_command();

  gm_command(const gm_command& from);

  inline gm_command& operator=(const gm_command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_command& default_instance();

  void Swap(gm_command* other);

  // implements Message ----------------------------------------------

  gm_command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_command& from);
  void MergeFrom(const gm_command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gm_command];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional int32 dice1 = 2;
  inline bool has_dice1() const;
  inline void clear_dice1();
  static const int kDice1FieldNumber = 2;
  inline ::google::protobuf::int32 dice1() const;
  inline void set_dice1(::google::protobuf::int32 value);

  // optional int32 dice2 = 3;
  inline bool has_dice2() const;
  inline void clear_dice2();
  static const int kDice2FieldNumber = 3;
  inline ::google::protobuf::int32 dice2() const;
  inline void set_dice2(::google::protobuf::int32 value);

  // optional int32 dice3 = 4;
  inline bool has_dice3() const;
  inline void clear_dice3();
  static const int kDice3FieldNumber = 4;
  inline ::google::protobuf::int32 dice3() const;
  inline void set_dice3(::google::protobuf::int32 value);

  // optional int32 open = 5;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 5;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.gm_command)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_dice1();
  inline void clear_has_dice1();
  inline void set_has_dice2();
  inline void clear_has_dice2();
  inline void set_has_dice3();
  inline void clear_has_dice3();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 dice1_;
  ::google::protobuf::int32 dice2_;
  ::google::protobuf::int32 dice3_;
  ::google::protobuf::int32 open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gm_command* default_instance_;
};
// -------------------------------------------------------------------

class other_player_info : public ::google::protobuf::Message {
 public:
  other_player_info();
  virtual ~other_player_info();

  other_player_info(const other_player_info& from);

  inline other_player_info& operator=(const other_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const other_player_info& default_instance();

  void Swap(other_player_info* other);

  // implements Message ----------------------------------------------

  other_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const other_player_info& from);
  void MergeFrom(const other_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 player_gold = 1;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 1;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.other_player_info)
 private:
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 player_gold_;
  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static other_player_info* default_instance_;
};
// -------------------------------------------------------------------

class balance_result : public ::google::protobuf::Message {
 public:
  balance_result();
  virtual ~balance_result();

  balance_result(const balance_result& from);

  inline balance_result& operator=(const balance_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const balance_result& default_instance();

  void Swap(balance_result* other);

  // implements Message ----------------------------------------------

  balance_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const balance_result& from);
  void MergeFrom(const balance_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_balance_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional int64 player_gold = 2;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 2;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 playe_ticket_count = 3;
  inline bool has_playe_ticket_count() const;
  inline void clear_playe_ticket_count();
  static const int kPlayeTicketCountFieldNumber = 3;
  inline ::google::protobuf::int32 playe_ticket_count() const;
  inline void set_playe_ticket_count(::google::protobuf::int32 value);

  // repeated .dice_protocols.other_player_info info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::dice_protocols::other_player_info& info(int index) const;
  inline ::dice_protocols::other_player_info* mutable_info(int index);
  inline ::dice_protocols::other_player_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_player_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_player_info >*
      mutable_info();

  // optional int64 bet_gold = 5;
  inline bool has_bet_gold() const;
  inline void clear_bet_gold();
  static const int kBetGoldFieldNumber = 5;
  inline ::google::protobuf::int64 bet_gold() const;
  inline void set_bet_gold(::google::protobuf::int64 value);

  // optional int64 win_gold = 6;
  inline bool has_win_gold() const;
  inline void clear_win_gold();
  static const int kWinGoldFieldNumber = 6;
  inline ::google::protobuf::int64 win_gold() const;
  inline void set_win_gold(::google::protobuf::int64 value);

  // optional int32 orderIndex = 7;
  inline bool has_orderindex() const;
  inline void clear_orderindex();
  static const int kOrderIndexFieldNumber = 7;
  inline ::google::protobuf::int32 orderindex() const;
  inline void set_orderindex(::google::protobuf::int32 value);

  // optional int32 cd_time = 8;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 8;
  inline ::google::protobuf::int32 cd_time() const;
  inline void set_cd_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.balance_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_playe_ticket_count();
  inline void clear_has_playe_ticket_count();
  inline void set_has_bet_gold();
  inline void clear_has_bet_gold();
  inline void set_has_win_gold();
  inline void clear_has_win_gold();
  inline void set_has_orderindex();
  inline void clear_has_orderindex();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 player_gold_;
  int packet_id_;
  ::google::protobuf::int32 playe_ticket_count_;
  ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_player_info > info_;
  ::google::protobuf::int64 bet_gold_;
  ::google::protobuf::int64 win_gold_;
  ::google::protobuf::int32 orderindex_;
  ::google::protobuf::int32 cd_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static balance_result* default_instance_;
};
// -------------------------------------------------------------------

class bc_other_bet : public ::google::protobuf::Message {
 public:
  bc_other_bet();
  virtual ~bc_other_bet();

  bc_other_bet(const bc_other_bet& from);

  inline bc_other_bet& operator=(const bc_other_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bc_other_bet& default_instance();

  void Swap(bc_other_bet* other);

  // implements Message ----------------------------------------------

  bc_other_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bc_other_bet& from);
  void MergeFrom(const bc_other_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_other_bet];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // repeated .dice_protocols.other_bet info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::dice_protocols::other_bet& info(int index) const;
  inline ::dice_protocols::other_bet* mutable_info(int index);
  inline ::dice_protocols::other_bet* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:dice_protocols.bc_other_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet > info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static bc_other_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_game_control : public ::google::protobuf::Message {
 public:
  packetc2l_game_control();
  virtual ~packetc2l_game_control();

  packetc2l_game_control(const packetc2l_game_control& from);

  inline packetc2l_game_control& operator=(const packetc2l_game_control& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_game_control& default_instance();

  void Swap(packetc2l_game_control* other);

  // implements Message ----------------------------------------------

  packetc2l_game_control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_game_control& from);
  void MergeFrom(const packetc2l_game_control& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional int32 dice1 = 2;
  inline bool has_dice1() const;
  inline void clear_dice1();
  static const int kDice1FieldNumber = 2;
  inline ::google::protobuf::int32 dice1() const;
  inline void set_dice1(::google::protobuf::int32 value);

  // optional int32 dice2 = 3;
  inline bool has_dice2() const;
  inline void clear_dice2();
  static const int kDice2FieldNumber = 3;
  inline ::google::protobuf::int32 dice2() const;
  inline void set_dice2(::google::protobuf::int32 value);

  // optional int32 dice3 = 4;
  inline bool has_dice3() const;
  inline void clear_dice3();
  static const int kDice3FieldNumber = 4;
  inline ::google::protobuf::int32 dice3() const;
  inline void set_dice3(::google::protobuf::int32 value);

  // optional int32 diceBigSmall = 5;
  inline bool has_dicebigsmall() const;
  inline void clear_dicebigsmall();
  static const int kDiceBigSmallFieldNumber = 5;
  inline ::google::protobuf::int32 dicebigsmall() const;
  inline void set_dicebigsmall(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_game_control)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_dice1();
  inline void clear_has_dice1();
  inline void set_has_dice2();
  inline void clear_has_dice2();
  inline void set_has_dice3();
  inline void clear_has_dice3();
  inline void set_has_dicebigsmall();
  inline void clear_has_dicebigsmall();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 dice1_;
  ::google::protobuf::int32 dice2_;
  ::google::protobuf::int32 dice3_;
  ::google::protobuf::int32 dicebigsmall_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_game_control* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_control_result : public ::google::protobuf::Message {
 public:
  packetl2c_game_control_result();
  virtual ~packetl2c_game_control_result();

  packetl2c_game_control_result(const packetl2c_game_control_result& from);

  inline packetl2c_game_control_result& operator=(const packetl2c_game_control_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_control_result& default_instance();

  void Swap(packetl2c_game_control_result* other);

  // implements Message ----------------------------------------------

  packetl2c_game_control_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_control_result& from);
  void MergeFrom(const packetl2c_game_control_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetl2c_game_control_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_control_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_debuginfo : public ::google::protobuf::Message {
 public:
  packetl2c_debuginfo();
  virtual ~packetl2c_debuginfo();

  packetl2c_debuginfo(const packetl2c_debuginfo& from);

  inline packetl2c_debuginfo& operator=(const packetl2c_debuginfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_debuginfo& default_instance();

  void Swap(packetl2c_debuginfo* other);

  // implements Message ----------------------------------------------

  packetl2c_debuginfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_debuginfo& from);
  void MergeFrom(const packetl2c_debuginfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debuginfo];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional string debug_infos = 2;
  inline bool has_debug_infos() const;
  inline void clear_debug_infos();
  static const int kDebugInfosFieldNumber = 2;
  inline const ::std::string& debug_infos() const;
  inline void set_debug_infos(const ::std::string& value);
  inline void set_debug_infos(const char* value);
  inline void set_debug_infos(const char* value, size_t size);
  inline ::std::string* mutable_debug_infos();
  inline ::std::string* release_debug_infos();
  inline void set_allocated_debug_infos(::std::string* debug_infos);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetl2c_debuginfo)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_debug_infos();
  inline void clear_has_debug_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* debug_infos_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_debuginfo* default_instance_;
};
// -------------------------------------------------------------------

class msg_bet_info : public ::google::protobuf::Message {
 public:
  msg_bet_info();
  virtual ~msg_bet_info();

  msg_bet_info(const msg_bet_info& from);

  inline msg_bet_info& operator=(const msg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bet_info& default_instance();

  void Swap(msg_bet_info* other);

  // implements Message ----------------------------------------------

  msg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bet_info& from);
  void MergeFrom(const msg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_dice_type bet_index = 1;
  inline bool has_bet_index() const;
  inline void clear_bet_index();
  static const int kBetIndexFieldNumber = 1;
  inline ::dice_protocols::e_dice_type bet_index() const;
  inline void set_bet_index(::dice_protocols::e_dice_type value);

  // optional int64 bet_count = 2;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 2;
  inline ::google::protobuf::int64 bet_count() const;
  inline void set_bet_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dice_protocols.msg_bet_info)
 private:
  inline void set_has_bet_index();
  inline void clear_has_bet_index();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bet_count_;
  int bet_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class gm_msg_bet_info : public ::google::protobuf::Message {
 public:
  gm_msg_bet_info();
  virtual ~gm_msg_bet_info();

  gm_msg_bet_info(const gm_msg_bet_info& from);

  inline gm_msg_bet_info& operator=(const gm_msg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_msg_bet_info& default_instance();

  void Swap(gm_msg_bet_info* other);

  // implements Message ----------------------------------------------

  gm_msg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_msg_bet_info& from);
  void MergeFrom(const gm_msg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.player_info player_info = 1;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::dice_protocols::player_info& player_info() const;
  inline ::dice_protocols::player_info* mutable_player_info();
  inline ::dice_protocols::player_info* release_player_info();
  inline void set_allocated_player_info(::dice_protocols::player_info* player_info);

  // repeated .dice_protocols.msg_bet_info bet_info = 2;
  inline int bet_info_size() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 2;
  inline const ::dice_protocols::msg_bet_info& bet_info(int index) const;
  inline ::dice_protocols::msg_bet_info* mutable_bet_info(int index);
  inline ::dice_protocols::msg_bet_info* add_bet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_bet_info >&
      bet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_bet_info >*
      mutable_bet_info();

  // @@protoc_insertion_point(class_scope:dice_protocols.gm_msg_bet_info)
 private:
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dice_protocols::player_info* player_info_;
  ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_bet_info > bet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static gm_msg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_all_bet_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_all_bet_info();
  virtual ~packetl2c_notice_all_bet_info();

  packetl2c_notice_all_bet_info(const packetl2c_notice_all_bet_info& from);

  inline packetl2c_notice_all_bet_info& operator=(const packetl2c_notice_all_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_all_bet_info& default_instance();

  void Swap(packetl2c_notice_all_bet_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_all_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_all_bet_info& from);
  void MergeFrom(const packetl2c_notice_all_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // repeated .dice_protocols.gm_msg_bet_info bet_info_list = 2;
  inline int bet_info_list_size() const;
  inline void clear_bet_info_list();
  static const int kBetInfoListFieldNumber = 2;
  inline const ::dice_protocols::gm_msg_bet_info& bet_info_list(int index) const;
  inline ::dice_protocols::gm_msg_bet_info* mutable_bet_info_list(int index);
  inline ::dice_protocols::gm_msg_bet_info* add_bet_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::gm_msg_bet_info >&
      bet_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::gm_msg_bet_info >*
      mutable_bet_info_list();

  // @@protoc_insertion_point(class_scope:dice_protocols.packetl2c_notice_all_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dice_protocols::gm_msg_bet_info > bet_info_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_all_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bc_debuginfo : public ::google::protobuf::Message {
 public:
  packetl2c_bc_debuginfo();
  virtual ~packetl2c_bc_debuginfo();

  packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from);

  inline packetl2c_bc_debuginfo& operator=(const packetl2c_bc_debuginfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bc_debuginfo& default_instance();

  void Swap(packetl2c_bc_debuginfo* other);

  // implements Message ----------------------------------------------

  packetl2c_bc_debuginfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bc_debuginfo& from);
  void MergeFrom(const packetl2c_bc_debuginfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int64 total_profit = 3 [default = 0];
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 3;
  inline ::google::protobuf::int64 total_profit() const;
  inline void set_total_profit(::google::protobuf::int64 value);

  // optional int64 total_stock = 4 [default = 0];
  inline bool has_total_stock() const;
  inline void clear_total_stock();
  static const int kTotalStockFieldNumber = 4;
  inline ::google::protobuf::int64 total_stock() const;
  inline void set_total_stock(::google::protobuf::int64 value);

  // optional string debug_infos = 5;
  inline bool has_debug_infos() const;
  inline void clear_debug_infos();
  static const int kDebugInfosFieldNumber = 5;
  inline const ::std::string& debug_infos() const;
  inline void set_debug_infos(const ::std::string& value);
  inline void set_debug_infos(const char* value);
  inline void set_debug_infos(const char* value, size_t size);
  inline ::std::string* mutable_debug_infos();
  inline ::std::string* release_debug_infos();
  inline void set_allocated_debug_infos(::std::string* debug_infos);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetl2c_bc_debuginfo)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_stock();
  inline void clear_has_total_stock();
  inline void set_has_debug_infos();
  inline void clear_has_debug_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int64 total_profit_;
  ::google::protobuf::int64 total_stock_;
  ::std::string* debug_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bc_debuginfo* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 head_frame = 3;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // optional string head_custom = 4;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 4;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int32 win_count = 8;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 8;
  inline ::google::protobuf::int32 win_count() const;
  inline void set_win_count(::google::protobuf::int32 value);

  // optional int32 bets = 9;
  inline bool has_bets() const;
  inline void clear_bets();
  static const int kBetsFieldNumber = 9;
  inline ::google::protobuf::int32 bets() const;
  inline void set_bets(::google::protobuf::int32 value);

  // optional int32 play_cnt = 10;
  inline bool has_play_cnt() const;
  inline void clear_play_cnt();
  static const int kPlayCntFieldNumber = 10;
  inline ::google::protobuf::int32 play_cnt() const;
  inline void set_play_cnt(::google::protobuf::int32 value);

  // repeated int32 other_bets = 11;
  inline int other_bets_size() const;
  inline void clear_other_bets();
  static const int kOtherBetsFieldNumber = 11;
  inline ::google::protobuf::int32 other_bets(int index) const;
  inline void set_other_bets(int index, ::google::protobuf::int32 value);
  inline void add_other_bets(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      other_bets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_other_bets();

  // repeated int32 other_win = 12;
  inline int other_win_size() const;
  inline void clear_other_win();
  static const int kOtherWinFieldNumber = 12;
  inline ::google::protobuf::int32 other_win(int index) const;
  inline void set_other_win(int index, ::google::protobuf::int32 value);
  inline void add_other_win(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      other_win() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_other_win();

  // @@protoc_insertion_point(class_scope:dice_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_win_count();
  inline void clear_has_win_count();
  inline void set_has_bets();
  inline void clear_has_bets();
  inline void set_has_play_cnt();
  inline void clear_has_play_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 head_frame_;
  ::std::string* head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 win_count_;
  ::google::protobuf::int32 bets_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > other_bets_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > other_win_;
  ::google::protobuf::int32 play_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ask_playerlist : public ::google::protobuf::Message {
 public:
  packetc2l_ask_playerlist();
  virtual ~packetc2l_ask_playerlist();

  packetc2l_ask_playerlist(const packetc2l_ask_playerlist& from);

  inline packetc2l_ask_playerlist& operator=(const packetc2l_ask_playerlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ask_playerlist& default_instance();

  void Swap(packetc2l_ask_playerlist* other);

  // implements Message ----------------------------------------------

  packetc2l_ask_playerlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ask_playerlist& from);
  void MergeFrom(const packetc2l_ask_playerlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_playerlist];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:dice_protocols.packetc2l_ask_playerlist)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ask_playerlist* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_playerlist_result : public ::google::protobuf::Message {
 public:
  packetl2c_playerlist_result();
  virtual ~packetl2c_playerlist_result();

  packetl2c_playerlist_result(const packetl2c_playerlist_result& from);

  inline packetl2c_playerlist_result& operator=(const packetl2c_playerlist_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_playerlist_result& default_instance();

  void Swap(packetl2c_playerlist_result* other);

  // implements Message ----------------------------------------------

  packetl2c_playerlist_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_playerlist_result& from);
  void MergeFrom(const packetl2c_playerlist_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playerlist_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::dice_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::dice_protocols::e_server_msg_type value);

  // repeated .dice_protocols.msg_player_info player_infos = 2;
  inline int player_infos_size() const;
  inline void clear_player_infos();
  static const int kPlayerInfosFieldNumber = 2;
  inline const ::dice_protocols::msg_player_info& player_infos(int index) const;
  inline ::dice_protocols::msg_player_info* mutable_player_infos(int index);
  inline ::dice_protocols::msg_player_info* add_player_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_player_info >&
      player_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_player_info >*
      mutable_player_infos();

  // @@protoc_insertion_point(class_scope:dice_protocols.packetl2c_playerlist_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_player_info > player_infos_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fdice_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fdice_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_playerlist_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2l_check_state

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetc2l_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_check_state_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool in_table = 2 [default = false];
inline bool packetc2l_check_state_result::has_in_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_check_state_result::set_has_in_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_check_state_result::clear_has_in_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_check_state_result::clear_in_table() {
  in_table_ = false;
  clear_has_in_table();
}
inline bool packetc2l_check_state_result::in_table() const {
  return in_table_;
}
inline void packetc2l_check_state_result::set_in_table(bool value) {
  set_has_in_table();
  in_table_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_info

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
inline bool packetc2l_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_info::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_get_room_info::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_info::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// room_info

// optional int32 id = 1;
inline bool room_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void room_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void room_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 room_info::id() const {
  return id_;
}
inline void room_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_info_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
inline bool packetl2c_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetl2c_get_room_info_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_info_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .dice_protocols.room_info room = 2;
inline int packetl2c_get_room_info_result::room_size() const {
  return room_.size();
}
inline void packetl2c_get_room_info_result::clear_room() {
  room_.Clear();
}
inline const ::dice_protocols::room_info& packetl2c_get_room_info_result::room(int index) const {
  return room_.Get(index);
}
inline ::dice_protocols::room_info* packetl2c_get_room_info_result::mutable_room(int index) {
  return room_.Mutable(index);
}
inline ::dice_protocols::room_info* packetl2c_get_room_info_result::add_room() {
  return room_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::room_info >&
packetl2c_get_room_info_result::room() const {
  return room_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::room_info >*
packetl2c_get_room_info_result::mutable_room() {
  return &room_;
}

// -------------------------------------------------------------------

// player_info

// optional int32 player_id = 2;
inline bool player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 player_info::player_id() const {
  return player_id_;
}
inline void player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_nickname = 3;
inline bool player_info::has_player_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_info::set_has_player_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_info::clear_has_player_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_info::clear_player_nickname() {
  if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
    player_nickname_->clear();
  }
  clear_has_player_nickname();
}
inline const ::std::string& player_info::player_nickname() const {
  return *player_nickname_;
}
inline void player_info::set_player_nickname(const ::std::string& value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
}
inline void player_info::set_player_nickname(const char* value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
}
inline void player_info::set_player_nickname(const char* value, size_t size) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_info::mutable_player_nickname() {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    player_nickname_ = new ::std::string;
  }
  return player_nickname_;
}
inline ::std::string* player_info::release_player_nickname() {
  clear_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_nickname_;
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_info::set_allocated_player_nickname(::std::string* player_nickname) {
  if (player_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete player_nickname_;
  }
  if (player_nickname) {
    set_has_player_nickname();
    player_nickname_ = player_nickname;
  } else {
    clear_has_player_nickname();
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 player_head_id = 4;
inline bool player_info::has_player_head_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_info::set_has_player_head_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_info::clear_has_player_head_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_info::clear_player_head_id() {
  player_head_id_ = 0;
  clear_has_player_head_id();
}
inline ::google::protobuf::int32 player_info::player_head_id() const {
  return player_head_id_;
}
inline void player_info::set_player_head_id(::google::protobuf::int32 value) {
  set_has_player_head_id();
  player_head_id_ = value;
}

// optional string player_head_id_custom = 5;
inline bool player_info::has_player_head_id_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_info::set_has_player_head_id_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_info::clear_has_player_head_id_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_info::clear_player_head_id_custom() {
  if (player_head_id_custom_ != &::google::protobuf::internal::kEmptyString) {
    player_head_id_custom_->clear();
  }
  clear_has_player_head_id_custom();
}
inline const ::std::string& player_info::player_head_id_custom() const {
  return *player_head_id_custom_;
}
inline void player_info::set_player_head_id_custom(const ::std::string& value) {
  set_has_player_head_id_custom();
  if (player_head_id_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_id_custom_ = new ::std::string;
  }
  player_head_id_custom_->assign(value);
}
inline void player_info::set_player_head_id_custom(const char* value) {
  set_has_player_head_id_custom();
  if (player_head_id_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_id_custom_ = new ::std::string;
  }
  player_head_id_custom_->assign(value);
}
inline void player_info::set_player_head_id_custom(const char* value, size_t size) {
  set_has_player_head_id_custom();
  if (player_head_id_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_id_custom_ = new ::std::string;
  }
  player_head_id_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* player_info::mutable_player_head_id_custom() {
  set_has_player_head_id_custom();
  if (player_head_id_custom_ == &::google::protobuf::internal::kEmptyString) {
    player_head_id_custom_ = new ::std::string;
  }
  return player_head_id_custom_;
}
inline ::std::string* player_info::release_player_head_id_custom() {
  clear_has_player_head_id_custom();
  if (player_head_id_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_head_id_custom_;
    player_head_id_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void player_info::set_allocated_player_head_id_custom(::std::string* player_head_id_custom) {
  if (player_head_id_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete player_head_id_custom_;
  }
  if (player_head_id_custom) {
    set_has_player_head_id_custom();
    player_head_id_custom_ = player_head_id_custom;
  } else {
    clear_has_player_head_id_custom();
    player_head_id_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 6;
inline bool player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 player_info::player_gold() const {
  return player_gold_;
}
inline void player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 7;
inline bool player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 player_info::player_sex() const {
  return player_sex_;
}
inline void player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 player_vip_lv = 8;
inline bool player_info::has_player_vip_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void player_info::set_has_player_vip_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void player_info::clear_has_player_vip_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void player_info::clear_player_vip_lv() {
  player_vip_lv_ = 0;
  clear_has_player_vip_lv();
}
inline ::google::protobuf::int32 player_info::player_vip_lv() const {
  return player_vip_lv_;
}
inline void player_info::set_player_vip_lv(::google::protobuf::int32 value) {
  set_has_player_vip_lv();
  player_vip_lv_ = value;
}

// -------------------------------------------------------------------

// msg_master_bets

// optional int32 player_id = 1;
inline bool msg_master_bets::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_master_bets::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_master_bets::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_master_bets::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_master_bets::player_id() const {
  return player_id_;
}
inline void msg_master_bets::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 player_bets = 2;
inline bool msg_master_bets::has_player_bets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_master_bets::set_has_player_bets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_master_bets::clear_has_player_bets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_master_bets::clear_player_bets() {
  player_bets_ = GOOGLE_LONGLONG(0);
  clear_has_player_bets();
}
inline ::google::protobuf::int64 msg_master_bets::player_bets() const {
  return player_bets_;
}
inline void msg_master_bets::set_player_bets(::google::protobuf::int64 value) {
  set_has_player_bets();
  player_bets_ = value;
}

// -------------------------------------------------------------------

// other_bet

// optional int32 bet_area = 1;
inline bool other_bet::has_bet_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void other_bet::set_has_bet_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void other_bet::clear_has_bet_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void other_bet::clear_bet_area() {
  bet_area_ = 0;
  clear_has_bet_area();
}
inline ::google::protobuf::int32 other_bet::bet_area() const {
  return bet_area_;
}
inline void other_bet::set_bet_area(::google::protobuf::int32 value) {
  set_has_bet_area();
  bet_area_ = value;
}

// optional int64 bet_gold = 2;
inline bool other_bet::has_bet_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void other_bet::set_has_bet_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void other_bet::clear_has_bet_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void other_bet::clear_bet_gold() {
  bet_gold_ = GOOGLE_LONGLONG(0);
  clear_has_bet_gold();
}
inline ::google::protobuf::int64 other_bet::bet_gold() const {
  return bet_gold_;
}
inline void other_bet::set_bet_gold(::google::protobuf::int64 value) {
  set_has_bet_gold();
  bet_gold_ = value;
}

// repeated .dice_protocols.msg_master_bets master_bets = 3;
inline int other_bet::master_bets_size() const {
  return master_bets_.size();
}
inline void other_bet::clear_master_bets() {
  master_bets_.Clear();
}
inline const ::dice_protocols::msg_master_bets& other_bet::master_bets(int index) const {
  return master_bets_.Get(index);
}
inline ::dice_protocols::msg_master_bets* other_bet::mutable_master_bets(int index) {
  return master_bets_.Mutable(index);
}
inline ::dice_protocols::msg_master_bets* other_bet::add_master_bets() {
  return master_bets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_master_bets >&
other_bet::master_bets() const {
  return master_bets_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_master_bets >*
other_bet::mutable_master_bets() {
  return &master_bets_;
}

// -------------------------------------------------------------------

// table_info

// optional .dice_protocols.e_msg_gamestate_type game_state = 1;
inline bool table_info::has_game_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void table_info::set_has_game_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void table_info::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void table_info::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::dice_protocols::e_msg_gamestate_type table_info::game_state() const {
  return static_cast< ::dice_protocols::e_msg_gamestate_type >(game_state_);
}
inline void table_info::set_game_state(::dice_protocols::e_msg_gamestate_type value) {
  assert(::dice_protocols::e_msg_gamestate_type_IsValid(value));
  set_has_game_state();
  game_state_ = value;
}

// optional int32 cd_time = 2;
inline bool table_info::has_cd_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void table_info::set_has_cd_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void table_info::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void table_info::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 table_info::cd_time() const {
  return cd_time_;
}
inline void table_info::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// repeated .dice_protocols.dice_info list_info = 4;
inline int table_info::list_info_size() const {
  return list_info_.size();
}
inline void table_info::clear_list_info() {
  list_info_.Clear();
}
inline const ::dice_protocols::dice_info& table_info::list_info(int index) const {
  return list_info_.Get(index);
}
inline ::dice_protocols::dice_info* table_info::mutable_list_info(int index) {
  return list_info_.Mutable(index);
}
inline ::dice_protocols::dice_info* table_info::add_list_info() {
  return list_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_info >&
table_info::list_info() const {
  return list_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_info >*
table_info::mutable_list_info() {
  return &list_info_;
}

// optional int64 player_gold = 5;
inline bool table_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void table_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void table_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void table_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 table_info::player_gold() const {
  return player_gold_;
}
inline void table_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 playe_ticket_count = 6;
inline bool table_info::has_playe_ticket_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void table_info::set_has_playe_ticket_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void table_info::clear_has_playe_ticket_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void table_info::clear_playe_ticket_count() {
  playe_ticket_count_ = 0;
  clear_has_playe_ticket_count();
}
inline ::google::protobuf::int32 table_info::playe_ticket_count() const {
  return playe_ticket_count_;
}
inline void table_info::set_playe_ticket_count(::google::protobuf::int32 value) {
  set_has_playe_ticket_count();
  playe_ticket_count_ = value;
}

// -------------------------------------------------------------------

// packetc2l_entertable

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_table];
inline bool packetc2l_entertable::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_entertable::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_entertable::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_entertable::clear_packet_id() {
  packet_id_ = 10004;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_entertable::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_entertable::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetc2l_entertable::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_entertable::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_entertable::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_entertable::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_entertable::room_id() const {
  return room_id_;
}
inline void packetc2l_entertable::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_entertable_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_table_result];
inline bool packetc2l_entertable_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_entertable_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_entertable_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_entertable_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_entertable_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_entertable_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetc2l_entertable_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_entertable_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_entertable_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_entertable_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetc2l_entertable_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetc2l_entertable_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 room_id = 3;
inline bool packetc2l_entertable_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_entertable_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_entertable_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_entertable_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_entertable_result::room_id() const {
  return room_id_;
}
inline void packetc2l_entertable_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leavetable

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
inline bool packetc2l_leavetable::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leavetable::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leavetable::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leavetable::clear_packet_id() {
  packet_id_ = 10005;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_leavetable::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leavetable::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leavetable_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
inline bool packetc2l_leavetable_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leavetable_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leavetable_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leavetable_result::clear_packet_id() {
  packet_id_ = 15005;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_leavetable_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leavetable_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_table_info

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_info];
inline bool packetc2l_get_table_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_table_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_table_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_table_info::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_get_table_info::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_table_info::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_table_info_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_info_result];
inline bool packetc2l_get_table_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_table_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_table_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_table_info_result::clear_packet_id() {
  packet_id_ = 15003;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_get_table_info_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_table_info_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_id = 2;
inline bool packetc2l_get_table_info_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_get_table_info_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_get_table_info_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_get_table_info_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_get_table_info_result::room_id() const {
  return room_id_;
}
inline void packetc2l_get_table_info_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional .dice_protocols.table_info table = 3;
inline bool packetc2l_get_table_info_result::has_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_get_table_info_result::set_has_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_get_table_info_result::clear_has_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_get_table_info_result::clear_table() {
  if (table_ != NULL) table_->::dice_protocols::table_info::Clear();
  clear_has_table();
}
inline const ::dice_protocols::table_info& packetc2l_get_table_info_result::table() const {
  return table_ != NULL ? *table_ : *default_instance_->table_;
}
inline ::dice_protocols::table_info* packetc2l_get_table_info_result::mutable_table() {
  set_has_table();
  if (table_ == NULL) table_ = new ::dice_protocols::table_info;
  return table_;
}
inline ::dice_protocols::table_info* packetc2l_get_table_info_result::release_table() {
  clear_has_table();
  ::dice_protocols::table_info* temp = table_;
  table_ = NULL;
  return temp;
}
inline void packetc2l_get_table_info_result::set_allocated_table(::dice_protocols::table_info* table) {
  delete table_;
  table_ = table;
  if (table) {
    set_has_table();
  } else {
    clear_has_table();
  }
}

// repeated .dice_protocols.other_bet info = 4;
inline int packetc2l_get_table_info_result::info_size() const {
  return info_.size();
}
inline void packetc2l_get_table_info_result::clear_info() {
  info_.Clear();
}
inline const ::dice_protocols::other_bet& packetc2l_get_table_info_result::info(int index) const {
  return info_.Get(index);
}
inline ::dice_protocols::other_bet* packetc2l_get_table_info_result::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::dice_protocols::other_bet* packetc2l_get_table_info_result::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >&
packetc2l_get_table_info_result::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >*
packetc2l_get_table_info_result::mutable_info() {
  return &info_;
}

// repeated .dice_protocols.other_bet self_info = 5;
inline int packetc2l_get_table_info_result::self_info_size() const {
  return self_info_.size();
}
inline void packetc2l_get_table_info_result::clear_self_info() {
  self_info_.Clear();
}
inline const ::dice_protocols::other_bet& packetc2l_get_table_info_result::self_info(int index) const {
  return self_info_.Get(index);
}
inline ::dice_protocols::other_bet* packetc2l_get_table_info_result::mutable_self_info(int index) {
  return self_info_.Mutable(index);
}
inline ::dice_protocols::other_bet* packetc2l_get_table_info_result::add_self_info() {
  return self_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >&
packetc2l_get_table_info_result::self_info() const {
  return self_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >*
packetc2l_get_table_info_result::mutable_self_info() {
  return &self_info_;
}

// -------------------------------------------------------------------

// dice_bet

// optional int32 chip_type = 1;
inline bool dice_bet::has_chip_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dice_bet::set_has_chip_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dice_bet::clear_has_chip_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dice_bet::clear_chip_type() {
  chip_type_ = 0;
  clear_has_chip_type();
}
inline ::google::protobuf::int32 dice_bet::chip_type() const {
  return chip_type_;
}
inline void dice_bet::set_chip_type(::google::protobuf::int32 value) {
  set_has_chip_type();
  chip_type_ = value;
}

// optional .dice_protocols.e_dice_type dice_type = 2;
inline bool dice_bet::has_dice_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dice_bet::set_has_dice_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dice_bet::clear_has_dice_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dice_bet::clear_dice_type() {
  dice_type_ = 0;
  clear_has_dice_type();
}
inline ::dice_protocols::e_dice_type dice_bet::dice_type() const {
  return static_cast< ::dice_protocols::e_dice_type >(dice_type_);
}
inline void dice_bet::set_dice_type(::dice_protocols::e_dice_type value) {
  assert(::dice_protocols::e_dice_type_IsValid(value));
  set_has_dice_type();
  dice_type_ = value;
}

// optional int64 gold = 3;
inline bool dice_bet::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dice_bet::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dice_bet::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dice_bet::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 dice_bet::gold() const {
  return gold_;
}
inline void dice_bet::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// bet_info

// optional int32 player_id = 1;
inline bool bet_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bet_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bet_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bet_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 bet_info::player_id() const {
  return player_id_;
}
inline void bet_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 gold = 2;
inline bool bet_info::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bet_info::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bet_info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bet_info::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 bet_info::gold() const {
  return gold_;
}
inline void bet_info::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// repeated .dice_protocols.dice_bet db = 3;
inline int bet_info::db_size() const {
  return db_.size();
}
inline void bet_info::clear_db() {
  db_.Clear();
}
inline const ::dice_protocols::dice_bet& bet_info::db(int index) const {
  return db_.Get(index);
}
inline ::dice_protocols::dice_bet* bet_info::mutable_db(int index) {
  return db_.Mutable(index);
}
inline ::dice_protocols::dice_bet* bet_info::add_db() {
  return db_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet >&
bet_info::db() const {
  return db_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet >*
bet_info::mutable_db() {
  return &db_;
}

// -------------------------------------------------------------------

// packetc2l_bet

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet];
inline bool packetc2l_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bet::clear_packet_id() {
  packet_id_ = 10006;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bet::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bet::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .dice_protocols.dice_bet db = 2;
inline bool packetc2l_bet::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bet::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bet::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bet::clear_db() {
  if (db_ != NULL) db_->::dice_protocols::dice_bet::Clear();
  clear_has_db();
}
inline const ::dice_protocols::dice_bet& packetc2l_bet::db() const {
  return db_ != NULL ? *db_ : *default_instance_->db_;
}
inline ::dice_protocols::dice_bet* packetc2l_bet::mutable_db() {
  set_has_db();
  if (db_ == NULL) db_ = new ::dice_protocols::dice_bet;
  return db_;
}
inline ::dice_protocols::dice_bet* packetc2l_bet::release_db() {
  clear_has_db();
  ::dice_protocols::dice_bet* temp = db_;
  db_ = NULL;
  return temp;
}
inline void packetc2l_bet::set_allocated_db(::dice_protocols::dice_bet* db) {
  delete db_;
  db_ = db;
  if (db) {
    set_has_db();
  } else {
    clear_has_db();
  }
}

// -------------------------------------------------------------------

// packetc2l_bet_again

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_again];
inline bool packetc2l_bet_again::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bet_again::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bet_again::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bet_again::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bet_again::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bet_again::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .dice_protocols.dice_bet db = 2;
inline int packetc2l_bet_again::db_size() const {
  return db_.size();
}
inline void packetc2l_bet_again::clear_db() {
  db_.Clear();
}
inline const ::dice_protocols::dice_bet& packetc2l_bet_again::db(int index) const {
  return db_.Get(index);
}
inline ::dice_protocols::dice_bet* packetc2l_bet_again::mutable_db(int index) {
  return db_.Mutable(index);
}
inline ::dice_protocols::dice_bet* packetc2l_bet_again::add_db() {
  return db_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet >&
packetc2l_bet_again::db() const {
  return db_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::dice_bet >*
packetc2l_bet_again::mutable_db() {
  return &db_;
}

// -------------------------------------------------------------------

// packetc2l_bet_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
inline bool packetc2l_bet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bet_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bet_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bet_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetc2l_bet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bet_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetc2l_bet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetc2l_bet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .dice_protocols.dice_bet db = 3;
inline bool packetc2l_bet_result::has_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_bet_result::set_has_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_bet_result::clear_has_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_bet_result::clear_db() {
  if (db_ != NULL) db_->::dice_protocols::dice_bet::Clear();
  clear_has_db();
}
inline const ::dice_protocols::dice_bet& packetc2l_bet_result::db() const {
  return db_ != NULL ? *db_ : *default_instance_->db_;
}
inline ::dice_protocols::dice_bet* packetc2l_bet_result::mutable_db() {
  set_has_db();
  if (db_ == NULL) db_ = new ::dice_protocols::dice_bet;
  return db_;
}
inline ::dice_protocols::dice_bet* packetc2l_bet_result::release_db() {
  clear_has_db();
  ::dice_protocols::dice_bet* temp = db_;
  db_ = NULL;
  return temp;
}
inline void packetc2l_bet_result::set_allocated_db(::dice_protocols::dice_bet* db) {
  delete db_;
  db_ = db;
  if (db) {
    set_has_db();
  } else {
    clear_has_db();
  }
}

// -------------------------------------------------------------------

// packetc2l_bc_bet

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_bet];
inline bool packetc2l_bc_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bc_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bc_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bc_bet::clear_packet_id() {
  packet_id_ = 15012;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bc_bet::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bc_bet::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .dice_protocols.bet_info bi = 2;
inline bool packetc2l_bc_bet::has_bi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bc_bet::set_has_bi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bc_bet::clear_has_bi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bc_bet::clear_bi() {
  if (bi_ != NULL) bi_->::dice_protocols::bet_info::Clear();
  clear_has_bi();
}
inline const ::dice_protocols::bet_info& packetc2l_bc_bet::bi() const {
  return bi_ != NULL ? *bi_ : *default_instance_->bi_;
}
inline ::dice_protocols::bet_info* packetc2l_bc_bet::mutable_bi() {
  set_has_bi();
  if (bi_ == NULL) bi_ = new ::dice_protocols::bet_info;
  return bi_;
}
inline ::dice_protocols::bet_info* packetc2l_bc_bet::release_bi() {
  clear_has_bi();
  ::dice_protocols::bet_info* temp = bi_;
  bi_ = NULL;
  return temp;
}
inline void packetc2l_bc_bet::set_allocated_bi(::dice_protocols::bet_info* bi) {
  delete bi_;
  bi_ = bi;
  if (bi) {
    set_has_bi();
  } else {
    clear_has_bi();
  }
}

// -------------------------------------------------------------------

// packetc2l_unbet

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_unbet];
inline bool packetc2l_unbet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_unbet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_unbet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_unbet::clear_packet_id() {
  packet_id_ = 10007;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_unbet::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_unbet::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetc2l_unbet::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_unbet::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_unbet::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_unbet::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetc2l_unbet::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetc2l_unbet::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_unbet_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_unbet_result];
inline bool packetc2l_unbet_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_unbet_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_unbet_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_unbet_result::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_unbet_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_unbet_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetc2l_unbet_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_unbet_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_unbet_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_unbet_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetc2l_unbet_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetc2l_unbet_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_bc_unbet

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_unbet];
inline bool packetc2l_bc_unbet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bc_unbet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bc_unbet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bc_unbet::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bc_unbet::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bc_unbet::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetc2l_bc_unbet::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bc_unbet::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bc_unbet::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bc_unbet::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetc2l_bc_unbet::player_id() const {
  return player_id_;
}
inline void packetc2l_bc_unbet::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_bc_client_shake

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_shake];
inline bool packetc2l_bc_client_shake::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bc_client_shake::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bc_client_shake::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bc_client_shake::clear_packet_id() {
  packet_id_ = 15006;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bc_client_shake::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bc_client_shake::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_bc_client_beginbet

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_beginbet];
inline bool packetc2l_bc_client_beginbet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bc_client_beginbet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bc_client_beginbet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bc_client_beginbet::clear_packet_id() {
  packet_id_ = 15007;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bc_client_beginbet::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bc_client_beginbet::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 cd_time = 2;
inline bool packetc2l_bc_client_beginbet::has_cd_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bc_client_beginbet::set_has_cd_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bc_client_beginbet::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bc_client_beginbet::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 packetc2l_bc_client_beginbet::cd_time() const {
  return cd_time_;
}
inline void packetc2l_bc_client_beginbet::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// -------------------------------------------------------------------

// packetc2l_bc_client_endbet

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_endbet];
inline bool packetc2l_bc_client_endbet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bc_client_endbet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bc_client_endbet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bc_client_endbet::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bc_client_endbet::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bc_client_endbet::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// dice_info

// optional int32 dice1 = 1;
inline bool dice_info::has_dice1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dice_info::set_has_dice1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dice_info::clear_has_dice1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dice_info::clear_dice1() {
  dice1_ = 0;
  clear_has_dice1();
}
inline ::google::protobuf::int32 dice_info::dice1() const {
  return dice1_;
}
inline void dice_info::set_dice1(::google::protobuf::int32 value) {
  set_has_dice1();
  dice1_ = value;
}

// optional int32 dice2 = 2;
inline bool dice_info::has_dice2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dice_info::set_has_dice2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dice_info::clear_has_dice2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dice_info::clear_dice2() {
  dice2_ = 0;
  clear_has_dice2();
}
inline ::google::protobuf::int32 dice_info::dice2() const {
  return dice2_;
}
inline void dice_info::set_dice2(::google::protobuf::int32 value) {
  set_has_dice2();
  dice2_ = value;
}

// optional int32 dice3 = 3;
inline bool dice_info::has_dice3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dice_info::set_has_dice3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dice_info::clear_has_dice3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dice_info::clear_dice3() {
  dice3_ = 0;
  clear_has_dice3();
}
inline ::google::protobuf::int32 dice_info::dice3() const {
  return dice3_;
}
inline void dice_info::set_dice3(::google::protobuf::int32 value) {
  set_has_dice3();
  dice3_ = value;
}

// -------------------------------------------------------------------

// packetc2l_bc_client_dice

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_dice];
inline bool packetc2l_bc_client_dice::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bc_client_dice::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bc_client_dice::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bc_client_dice::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bc_client_dice::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bc_client_dice::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .dice_protocols.dice_info di = 2;
inline bool packetc2l_bc_client_dice::has_di() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bc_client_dice::set_has_di() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bc_client_dice::clear_has_di() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bc_client_dice::clear_di() {
  if (di_ != NULL) di_->::dice_protocols::dice_info::Clear();
  clear_has_di();
}
inline const ::dice_protocols::dice_info& packetc2l_bc_client_dice::di() const {
  return di_ != NULL ? *di_ : *default_instance_->di_;
}
inline ::dice_protocols::dice_info* packetc2l_bc_client_dice::mutable_di() {
  set_has_di();
  if (di_ == NULL) di_ = new ::dice_protocols::dice_info;
  return di_;
}
inline ::dice_protocols::dice_info* packetc2l_bc_client_dice::release_di() {
  clear_has_di();
  ::dice_protocols::dice_info* temp = di_;
  di_ = NULL;
  return temp;
}
inline void packetc2l_bc_client_dice::set_allocated_di(::dice_protocols::dice_info* di) {
  delete di_;
  di_ = di;
  if (di) {
    set_has_di();
  } else {
    clear_has_di();
  }
}

// optional int32 cd_time = 3;
inline bool packetc2l_bc_client_dice::has_cd_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_bc_client_dice::set_has_cd_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_bc_client_dice::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_bc_client_dice::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 packetc2l_bc_client_dice::cd_time() const {
  return cd_time_;
}
inline void packetc2l_bc_client_dice::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// -------------------------------------------------------------------

// gold_change_info

// optional int32 player_id = 1;
inline bool gold_change_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gold_change_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gold_change_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gold_change_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 gold_change_info::player_id() const {
  return player_id_;
}
inline void gold_change_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 gold = 2;
inline bool gold_change_info::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gold_change_info::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gold_change_info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gold_change_info::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 gold_change_info::gold() const {
  return gold_;
}
inline void gold_change_info::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_bc_gold_change

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_gold_change];
inline bool packetc2l_bc_gold_change::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bc_gold_change::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bc_gold_change::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bc_gold_change::clear_packet_id() {
  packet_id_ = 15015;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bc_gold_change::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bc_gold_change::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .dice_protocols.gold_change_info change = 2;
inline bool packetc2l_bc_gold_change::has_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bc_gold_change::set_has_change() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bc_gold_change::clear_has_change() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bc_gold_change::clear_change() {
  if (change_ != NULL) change_->::dice_protocols::gold_change_info::Clear();
  clear_has_change();
}
inline const ::dice_protocols::gold_change_info& packetc2l_bc_gold_change::change() const {
  return change_ != NULL ? *change_ : *default_instance_->change_;
}
inline ::dice_protocols::gold_change_info* packetc2l_bc_gold_change::mutable_change() {
  set_has_change();
  if (change_ == NULL) change_ = new ::dice_protocols::gold_change_info;
  return change_;
}
inline ::dice_protocols::gold_change_info* packetc2l_bc_gold_change::release_change() {
  clear_has_change();
  ::dice_protocols::gold_change_info* temp = change_;
  change_ = NULL;
  return temp;
}
inline void packetc2l_bc_gold_change::set_allocated_change(::dice_protocols::gold_change_info* change) {
  delete change_;
  change_ = change;
  if (change) {
    set_has_change();
  } else {
    clear_has_change();
  }
}

// -------------------------------------------------------------------

// packetc2l_bc_table_info

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_table_info];
inline bool packetc2l_bc_table_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bc_table_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bc_table_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bc_table_info::clear_packet_id() {
  packet_id_ = 15014;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_bc_table_info::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bc_table_info::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .dice_protocols.table_info table = 2;
inline bool packetc2l_bc_table_info::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bc_table_info::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bc_table_info::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bc_table_info::clear_table() {
  if (table_ != NULL) table_->::dice_protocols::table_info::Clear();
  clear_has_table();
}
inline const ::dice_protocols::table_info& packetc2l_bc_table_info::table() const {
  return table_ != NULL ? *table_ : *default_instance_->table_;
}
inline ::dice_protocols::table_info* packetc2l_bc_table_info::mutable_table() {
  set_has_table();
  if (table_ == NULL) table_ = new ::dice_protocols::table_info;
  return table_;
}
inline ::dice_protocols::table_info* packetc2l_bc_table_info::release_table() {
  clear_has_table();
  ::dice_protocols::table_info* temp = table_;
  table_ = NULL;
  return temp;
}
inline void packetc2l_bc_table_info::set_allocated_table(::dice_protocols::table_info* table) {
  delete table_;
  table_ = table;
  if (table) {
    set_has_table();
  } else {
    clear_has_table();
  }
}

// optional int32 flag = 3;
inline bool packetc2l_bc_table_info::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_bc_table_info::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_bc_table_info::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_bc_table_info::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 packetc2l_bc_table_info::flag() const {
  return flag_;
}
inline void packetc2l_bc_table_info::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// chang_table

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table];
inline bool chang_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chang_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chang_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chang_table::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type chang_table::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void chang_table::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// chang_table_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_chang_table_result];
inline bool chang_table_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chang_table_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chang_table_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chang_table_result::clear_packet_id() {
  packet_id_ = 15016;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type chang_table_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void chang_table_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool chang_table_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chang_table_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chang_table_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chang_table_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def chang_table_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void chang_table_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// gm_command

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gm_command];
inline bool gm_command::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_command::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_command::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_command::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type gm_command::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void gm_command::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 dice1 = 2;
inline bool gm_command::has_dice1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gm_command::set_has_dice1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gm_command::clear_has_dice1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gm_command::clear_dice1() {
  dice1_ = 0;
  clear_has_dice1();
}
inline ::google::protobuf::int32 gm_command::dice1() const {
  return dice1_;
}
inline void gm_command::set_dice1(::google::protobuf::int32 value) {
  set_has_dice1();
  dice1_ = value;
}

// optional int32 dice2 = 3;
inline bool gm_command::has_dice2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gm_command::set_has_dice2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gm_command::clear_has_dice2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gm_command::clear_dice2() {
  dice2_ = 0;
  clear_has_dice2();
}
inline ::google::protobuf::int32 gm_command::dice2() const {
  return dice2_;
}
inline void gm_command::set_dice2(::google::protobuf::int32 value) {
  set_has_dice2();
  dice2_ = value;
}

// optional int32 dice3 = 4;
inline bool gm_command::has_dice3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gm_command::set_has_dice3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gm_command::clear_has_dice3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gm_command::clear_dice3() {
  dice3_ = 0;
  clear_has_dice3();
}
inline ::google::protobuf::int32 gm_command::dice3() const {
  return dice3_;
}
inline void gm_command::set_dice3(::google::protobuf::int32 value) {
  set_has_dice3();
  dice3_ = value;
}

// optional int32 open = 5;
inline bool gm_command::has_open() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gm_command::set_has_open() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gm_command::clear_has_open() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gm_command::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 gm_command::open() const {
  return open_;
}
inline void gm_command::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// other_player_info

// optional int64 player_gold = 1;
inline bool other_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void other_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void other_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void other_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 other_player_info::player_gold() const {
  return player_gold_;
}
inline void other_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional string player_name = 2;
inline bool other_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void other_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void other_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void other_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& other_player_info::player_name() const {
  return *player_name_;
}
inline void other_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void other_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void other_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* other_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* other_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void other_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 player_id = 3;
inline bool other_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void other_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void other_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void other_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 other_player_info::player_id() const {
  return player_id_;
}
inline void other_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// balance_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_balance_result];
inline bool balance_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void balance_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void balance_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void balance_result::clear_packet_id() {
  packet_id_ = 15017;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type balance_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void balance_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 player_gold = 2;
inline bool balance_result::has_player_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void balance_result::set_has_player_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void balance_result::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void balance_result::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 balance_result::player_gold() const {
  return player_gold_;
}
inline void balance_result::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 playe_ticket_count = 3;
inline bool balance_result::has_playe_ticket_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void balance_result::set_has_playe_ticket_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void balance_result::clear_has_playe_ticket_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void balance_result::clear_playe_ticket_count() {
  playe_ticket_count_ = 0;
  clear_has_playe_ticket_count();
}
inline ::google::protobuf::int32 balance_result::playe_ticket_count() const {
  return playe_ticket_count_;
}
inline void balance_result::set_playe_ticket_count(::google::protobuf::int32 value) {
  set_has_playe_ticket_count();
  playe_ticket_count_ = value;
}

// repeated .dice_protocols.other_player_info info = 4;
inline int balance_result::info_size() const {
  return info_.size();
}
inline void balance_result::clear_info() {
  info_.Clear();
}
inline const ::dice_protocols::other_player_info& balance_result::info(int index) const {
  return info_.Get(index);
}
inline ::dice_protocols::other_player_info* balance_result::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::dice_protocols::other_player_info* balance_result::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_player_info >&
balance_result::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_player_info >*
balance_result::mutable_info() {
  return &info_;
}

// optional int64 bet_gold = 5;
inline bool balance_result::has_bet_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void balance_result::set_has_bet_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void balance_result::clear_has_bet_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void balance_result::clear_bet_gold() {
  bet_gold_ = GOOGLE_LONGLONG(0);
  clear_has_bet_gold();
}
inline ::google::protobuf::int64 balance_result::bet_gold() const {
  return bet_gold_;
}
inline void balance_result::set_bet_gold(::google::protobuf::int64 value) {
  set_has_bet_gold();
  bet_gold_ = value;
}

// optional int64 win_gold = 6;
inline bool balance_result::has_win_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void balance_result::set_has_win_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void balance_result::clear_has_win_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void balance_result::clear_win_gold() {
  win_gold_ = GOOGLE_LONGLONG(0);
  clear_has_win_gold();
}
inline ::google::protobuf::int64 balance_result::win_gold() const {
  return win_gold_;
}
inline void balance_result::set_win_gold(::google::protobuf::int64 value) {
  set_has_win_gold();
  win_gold_ = value;
}

// optional int32 orderIndex = 7;
inline bool balance_result::has_orderindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void balance_result::set_has_orderindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void balance_result::clear_has_orderindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void balance_result::clear_orderindex() {
  orderindex_ = 0;
  clear_has_orderindex();
}
inline ::google::protobuf::int32 balance_result::orderindex() const {
  return orderindex_;
}
inline void balance_result::set_orderindex(::google::protobuf::int32 value) {
  set_has_orderindex();
  orderindex_ = value;
}

// optional int32 cd_time = 8;
inline bool balance_result::has_cd_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void balance_result::set_has_cd_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void balance_result::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void balance_result::clear_cd_time() {
  cd_time_ = 0;
  clear_has_cd_time();
}
inline ::google::protobuf::int32 balance_result::cd_time() const {
  return cd_time_;
}
inline void balance_result::set_cd_time(::google::protobuf::int32 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// -------------------------------------------------------------------

// bc_other_bet

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_bc_other_bet];
inline bool bc_other_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bc_other_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bc_other_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bc_other_bet::clear_packet_id() {
  packet_id_ = 15019;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type bc_other_bet::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void bc_other_bet::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .dice_protocols.other_bet info = 2;
inline int bc_other_bet::info_size() const {
  return info_.size();
}
inline void bc_other_bet::clear_info() {
  info_.Clear();
}
inline const ::dice_protocols::other_bet& bc_other_bet::info(int index) const {
  return info_.Get(index);
}
inline ::dice_protocols::other_bet* bc_other_bet::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::dice_protocols::other_bet* bc_other_bet::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >&
bc_other_bet::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::other_bet >*
bc_other_bet::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// packetc2l_game_control

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
inline bool packetc2l_game_control::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_game_control::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_game_control::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_game_control::clear_packet_id() {
  packet_id_ = 10012;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_game_control::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_game_control::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 dice1 = 2;
inline bool packetc2l_game_control::has_dice1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_game_control::set_has_dice1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_game_control::clear_has_dice1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_game_control::clear_dice1() {
  dice1_ = 0;
  clear_has_dice1();
}
inline ::google::protobuf::int32 packetc2l_game_control::dice1() const {
  return dice1_;
}
inline void packetc2l_game_control::set_dice1(::google::protobuf::int32 value) {
  set_has_dice1();
  dice1_ = value;
}

// optional int32 dice2 = 3;
inline bool packetc2l_game_control::has_dice2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_game_control::set_has_dice2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_game_control::clear_has_dice2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_game_control::clear_dice2() {
  dice2_ = 0;
  clear_has_dice2();
}
inline ::google::protobuf::int32 packetc2l_game_control::dice2() const {
  return dice2_;
}
inline void packetc2l_game_control::set_dice2(::google::protobuf::int32 value) {
  set_has_dice2();
  dice2_ = value;
}

// optional int32 dice3 = 4;
inline bool packetc2l_game_control::has_dice3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2l_game_control::set_has_dice3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2l_game_control::clear_has_dice3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2l_game_control::clear_dice3() {
  dice3_ = 0;
  clear_has_dice3();
}
inline ::google::protobuf::int32 packetc2l_game_control::dice3() const {
  return dice3_;
}
inline void packetc2l_game_control::set_dice3(::google::protobuf::int32 value) {
  set_has_dice3();
  dice3_ = value;
}

// optional int32 diceBigSmall = 5;
inline bool packetc2l_game_control::has_dicebigsmall() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2l_game_control::set_has_dicebigsmall() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2l_game_control::clear_has_dicebigsmall() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2l_game_control::clear_dicebigsmall() {
  dicebigsmall_ = 0;
  clear_has_dicebigsmall();
}
inline ::google::protobuf::int32 packetc2l_game_control::dicebigsmall() const {
  return dicebigsmall_;
}
inline void packetc2l_game_control::set_dicebigsmall(::google::protobuf::int32 value) {
  set_has_dicebigsmall();
  dicebigsmall_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_control_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_control_result];
inline bool packetl2c_game_control_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_control_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_control_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_control_result::clear_packet_id() {
  packet_id_ = 15022;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetl2c_game_control_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_control_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_game_control_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_control_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_control_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_control_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_game_control_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_game_control_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetl2c_debuginfo

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_debuginfo];
inline bool packetl2c_debuginfo::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_debuginfo::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_debuginfo::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_debuginfo::clear_packet_id() {
  packet_id_ = 15020;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetl2c_debuginfo::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_debuginfo::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string debug_infos = 2;
inline bool packetl2c_debuginfo::has_debug_infos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_debuginfo::set_has_debug_infos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_debuginfo::clear_has_debug_infos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_debuginfo::clear_debug_infos() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    debug_infos_->clear();
  }
  clear_has_debug_infos();
}
inline const ::std::string& packetl2c_debuginfo::debug_infos() const {
  return *debug_infos_;
}
inline void packetl2c_debuginfo::set_debug_infos(const ::std::string& value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_debuginfo::set_debug_infos(const char* value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_debuginfo::set_debug_infos(const char* value, size_t size) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_debuginfo::mutable_debug_infos() {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  return debug_infos_;
}
inline ::std::string* packetl2c_debuginfo::release_debug_infos() {
  clear_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_infos_;
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_debuginfo::set_allocated_debug_infos(::std::string* debug_infos) {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (debug_infos) {
    set_has_debug_infos();
    debug_infos_ = debug_infos;
  } else {
    clear_has_debug_infos();
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_bet_info

// optional .dice_protocols.e_dice_type bet_index = 1;
inline bool msg_bet_info::has_bet_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_bet_info::set_has_bet_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_bet_info::clear_has_bet_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_bet_info::clear_bet_index() {
  bet_index_ = 0;
  clear_has_bet_index();
}
inline ::dice_protocols::e_dice_type msg_bet_info::bet_index() const {
  return static_cast< ::dice_protocols::e_dice_type >(bet_index_);
}
inline void msg_bet_info::set_bet_index(::dice_protocols::e_dice_type value) {
  assert(::dice_protocols::e_dice_type_IsValid(value));
  set_has_bet_index();
  bet_index_ = value;
}

// optional int64 bet_count = 2;
inline bool msg_bet_info::has_bet_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_bet_info::set_has_bet_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_bet_info::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_bet_info::clear_bet_count() {
  bet_count_ = GOOGLE_LONGLONG(0);
  clear_has_bet_count();
}
inline ::google::protobuf::int64 msg_bet_info::bet_count() const {
  return bet_count_;
}
inline void msg_bet_info::set_bet_count(::google::protobuf::int64 value) {
  set_has_bet_count();
  bet_count_ = value;
}

// -------------------------------------------------------------------

// gm_msg_bet_info

// optional .dice_protocols.player_info player_info = 1;
inline bool gm_msg_bet_info::has_player_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_msg_bet_info::set_has_player_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_msg_bet_info::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_msg_bet_info::clear_player_info() {
  if (player_info_ != NULL) player_info_->::dice_protocols::player_info::Clear();
  clear_has_player_info();
}
inline const ::dice_protocols::player_info& gm_msg_bet_info::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::dice_protocols::player_info* gm_msg_bet_info::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::dice_protocols::player_info;
  return player_info_;
}
inline ::dice_protocols::player_info* gm_msg_bet_info::release_player_info() {
  clear_has_player_info();
  ::dice_protocols::player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void gm_msg_bet_info::set_allocated_player_info(::dice_protocols::player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// repeated .dice_protocols.msg_bet_info bet_info = 2;
inline int gm_msg_bet_info::bet_info_size() const {
  return bet_info_.size();
}
inline void gm_msg_bet_info::clear_bet_info() {
  bet_info_.Clear();
}
inline const ::dice_protocols::msg_bet_info& gm_msg_bet_info::bet_info(int index) const {
  return bet_info_.Get(index);
}
inline ::dice_protocols::msg_bet_info* gm_msg_bet_info::mutable_bet_info(int index) {
  return bet_info_.Mutable(index);
}
inline ::dice_protocols::msg_bet_info* gm_msg_bet_info::add_bet_info() {
  return bet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_bet_info >&
gm_msg_bet_info::bet_info() const {
  return bet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_bet_info >*
gm_msg_bet_info::mutable_bet_info() {
  return &bet_info_;
}

// -------------------------------------------------------------------

// packetl2c_notice_all_bet_info

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
inline bool packetl2c_notice_all_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_all_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_all_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_all_bet_info::clear_packet_id() {
  packet_id_ = 15021;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetl2c_notice_all_bet_info::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_all_bet_info::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .dice_protocols.gm_msg_bet_info bet_info_list = 2;
inline int packetl2c_notice_all_bet_info::bet_info_list_size() const {
  return bet_info_list_.size();
}
inline void packetl2c_notice_all_bet_info::clear_bet_info_list() {
  bet_info_list_.Clear();
}
inline const ::dice_protocols::gm_msg_bet_info& packetl2c_notice_all_bet_info::bet_info_list(int index) const {
  return bet_info_list_.Get(index);
}
inline ::dice_protocols::gm_msg_bet_info* packetl2c_notice_all_bet_info::mutable_bet_info_list(int index) {
  return bet_info_list_.Mutable(index);
}
inline ::dice_protocols::gm_msg_bet_info* packetl2c_notice_all_bet_info::add_bet_info_list() {
  return bet_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::gm_msg_bet_info >&
packetl2c_notice_all_bet_info::bet_info_list() const {
  return bet_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::gm_msg_bet_info >*
packetl2c_notice_all_bet_info::mutable_bet_info_list() {
  return &bet_info_list_;
}

// -------------------------------------------------------------------

// packetl2c_bc_debuginfo

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
inline bool packetl2c_bc_debuginfo::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bc_debuginfo::clear_packet_id() {
  packet_id_ = 15023;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetl2c_bc_debuginfo::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bc_debuginfo::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetl2c_bc_debuginfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bc_debuginfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_bc_debuginfo::player_id() const {
  return player_id_;
}
inline void packetl2c_bc_debuginfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 total_profit = 3 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_profit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_profit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_bc_debuginfo::clear_total_profit() {
  total_profit_ = GOOGLE_LONGLONG(0);
  clear_has_total_profit();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_profit() const {
  return total_profit_;
}
inline void packetl2c_bc_debuginfo::set_total_profit(::google::protobuf::int64 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional int64 total_stock = 4 [default = 0];
inline bool packetl2c_bc_debuginfo::has_total_stock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_total_stock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_has_total_stock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_bc_debuginfo::clear_total_stock() {
  total_stock_ = GOOGLE_LONGLONG(0);
  clear_has_total_stock();
}
inline ::google::protobuf::int64 packetl2c_bc_debuginfo::total_stock() const {
  return total_stock_;
}
inline void packetl2c_bc_debuginfo::set_total_stock(::google::protobuf::int64 value) {
  set_has_total_stock();
  total_stock_ = value;
}

// optional string debug_infos = 5;
inline bool packetl2c_bc_debuginfo::has_debug_infos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_bc_debuginfo::set_has_debug_infos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_has_debug_infos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_bc_debuginfo::clear_debug_infos() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    debug_infos_->clear();
  }
  clear_has_debug_infos();
}
inline const ::std::string& packetl2c_bc_debuginfo::debug_infos() const {
  return *debug_infos_;
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const ::std::string& value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(value);
}
inline void packetl2c_bc_debuginfo::set_debug_infos(const char* value, size_t size) {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  debug_infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2c_bc_debuginfo::mutable_debug_infos() {
  set_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    debug_infos_ = new ::std::string;
  }
  return debug_infos_;
}
inline ::std::string* packetl2c_bc_debuginfo::release_debug_infos() {
  clear_has_debug_infos();
  if (debug_infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_infos_;
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2c_bc_debuginfo::set_allocated_debug_infos(::std::string* debug_infos) {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (debug_infos) {
    set_has_debug_infos();
    debug_infos_ = debug_infos;
  } else {
    clear_has_debug_infos();
    debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool msg_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_player_info::player_name() const {
  return *player_name_;
}
inline void msg_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_frame = 3;
inline bool msg_player_info::has_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::head_frame() const {
  return head_frame_;
}
inline void msg_player_info::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// optional string head_custom = 4;
inline bool msg_player_info::has_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_player_info::head_custom() const {
  return *head_custom_;
}
inline void msg_player_info::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_player_info::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 5;
inline bool msg_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_info::player_gold() const {
  return player_gold_;
}
inline void msg_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool msg_player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 msg_player_info::player_sex() const {
  return player_sex_;
}
inline void msg_player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 vip_level = 7;
inline bool msg_player_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_player_info::vip_level() const {
  return vip_level_;
}
inline void msg_player_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 win_count = 8;
inline bool msg_player_info::has_win_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_player_info::set_has_win_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_player_info::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_player_info::clear_win_count() {
  win_count_ = 0;
  clear_has_win_count();
}
inline ::google::protobuf::int32 msg_player_info::win_count() const {
  return win_count_;
}
inline void msg_player_info::set_win_count(::google::protobuf::int32 value) {
  set_has_win_count();
  win_count_ = value;
}

// optional int32 bets = 9;
inline bool msg_player_info::has_bets() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_player_info::set_has_bets() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_player_info::clear_has_bets() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_player_info::clear_bets() {
  bets_ = 0;
  clear_has_bets();
}
inline ::google::protobuf::int32 msg_player_info::bets() const {
  return bets_;
}
inline void msg_player_info::set_bets(::google::protobuf::int32 value) {
  set_has_bets();
  bets_ = value;
}

// optional int32 play_cnt = 10;
inline bool msg_player_info::has_play_cnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_player_info::set_has_play_cnt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_player_info::clear_has_play_cnt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_player_info::clear_play_cnt() {
  play_cnt_ = 0;
  clear_has_play_cnt();
}
inline ::google::protobuf::int32 msg_player_info::play_cnt() const {
  return play_cnt_;
}
inline void msg_player_info::set_play_cnt(::google::protobuf::int32 value) {
  set_has_play_cnt();
  play_cnt_ = value;
}

// repeated int32 other_bets = 11;
inline int msg_player_info::other_bets_size() const {
  return other_bets_.size();
}
inline void msg_player_info::clear_other_bets() {
  other_bets_.Clear();
}
inline ::google::protobuf::int32 msg_player_info::other_bets(int index) const {
  return other_bets_.Get(index);
}
inline void msg_player_info::set_other_bets(int index, ::google::protobuf::int32 value) {
  other_bets_.Set(index, value);
}
inline void msg_player_info::add_other_bets(::google::protobuf::int32 value) {
  other_bets_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_player_info::other_bets() const {
  return other_bets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_player_info::mutable_other_bets() {
  return &other_bets_;
}

// repeated int32 other_win = 12;
inline int msg_player_info::other_win_size() const {
  return other_win_.size();
}
inline void msg_player_info::clear_other_win() {
  other_win_.Clear();
}
inline ::google::protobuf::int32 msg_player_info::other_win(int index) const {
  return other_win_.Get(index);
}
inline void msg_player_info::set_other_win(int index, ::google::protobuf::int32 value) {
  other_win_.Set(index, value);
}
inline void msg_player_info::add_other_win(::google::protobuf::int32 value) {
  other_win_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_player_info::other_win() const {
  return other_win_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_player_info::mutable_other_win() {
  return &other_win_;
}

// -------------------------------------------------------------------

// packetc2l_ask_playerlist

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_playerlist];
inline bool packetc2l_ask_playerlist::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ask_playerlist::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ask_playerlist::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ask_playerlist::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetc2l_ask_playerlist::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ask_playerlist::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_playerlist_result

// optional .dice_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playerlist_result];
inline bool packetl2c_playerlist_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_playerlist_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_playerlist_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_playerlist_result::clear_packet_id() {
  packet_id_ = 15024;
  clear_has_packet_id();
}
inline ::dice_protocols::e_server_msg_type packetl2c_playerlist_result::packet_id() const {
  return static_cast< ::dice_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_playerlist_result::set_packet_id(::dice_protocols::e_server_msg_type value) {
  assert(::dice_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .dice_protocols.msg_player_info player_infos = 2;
inline int packetl2c_playerlist_result::player_infos_size() const {
  return player_infos_.size();
}
inline void packetl2c_playerlist_result::clear_player_infos() {
  player_infos_.Clear();
}
inline const ::dice_protocols::msg_player_info& packetl2c_playerlist_result::player_infos(int index) const {
  return player_infos_.Get(index);
}
inline ::dice_protocols::msg_player_info* packetl2c_playerlist_result::mutable_player_infos(int index) {
  return player_infos_.Mutable(index);
}
inline ::dice_protocols::msg_player_info* packetl2c_playerlist_result::add_player_infos() {
  return player_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_player_info >&
packetl2c_playerlist_result::player_infos() const {
  return player_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::dice_protocols::msg_player_info >*
packetl2c_playerlist_result::mutable_player_infos() {
  return &player_infos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dice_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fdice_5fprotocol_2eproto__INCLUDED
