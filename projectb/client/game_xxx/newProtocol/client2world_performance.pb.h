// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_performance.proto

#ifndef PROTOBUF_client2world_5fperformance_2eproto__INCLUDED
#define PROTOBUF_client2world_5fperformance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fperformance_2eproto();
void protobuf_AssignDesc_client2world_5fperformance_2eproto();
void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

class msg_performance_info;
class msg_performance_team;
class packetc2w_performance_list;
class packetw2c_performance_list_result;
class packetc2w_performance_gain;
class packetw2c_performance_gain_result;
class packetc2w_performance_child;
class packetw2c_performance_child_result;
class packetc2w_performance_check_gain;
class packetw2c_performance_check_gain_result;
class packetc2w_performance_team_create;
class packetw2c_performance_team_create_result;
class packetc2w_performance_team_list;
class packetw2c_performance_team_list_result;
class packetc2w_performance_team_info;
class packetw2c_performance_team_info_result;
class packetc2w_performance_team_update;
class packetw2c_performance_team_update_result;
class packetc2w_performance_info;
class packetw2c_performance_info_result;
class packetc2w_performance_info_self_today;
class packetw2c_performance_info_self_today_result;
class packetc2w_performance_info_self_yesterday;
class packetw2c_performance_info_self_yesterday_result;
class packetc2w_performance_info_agent_today;
class packetw2c_performance_info_agent_today_result;
class packetc2w_performance_info_agent_yesterday;
class packetw2c_performance_info_agent_yesterday_result;

// ===================================================================

class msg_performance_info : public ::google::protobuf::Message {
 public:
  msg_performance_info();
  virtual ~msg_performance_info();

  msg_performance_info(const msg_performance_info& from);

  inline msg_performance_info& operator=(const msg_performance_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_performance_info& default_instance();

  void Swap(msg_performance_info* other);

  // implements Message ----------------------------------------------

  msg_performance_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_performance_info& from);
  void MergeFrom(const msg_performance_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 photo_frame = 2;
  inline bool has_photo_frame() const;
  inline void clear_photo_frame();
  static const int kPhotoFrameFieldNumber = 2;
  inline ::google::protobuf::int32 photo_frame() const;
  inline void set_photo_frame(::google::protobuf::int32 value);

  // optional string nick_name = 3;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional int32 parent = 4;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 4;
  inline ::google::protobuf::int32 parent() const;
  inline void set_parent(::google::protobuf::int32 value);

  // optional int64 per_today = 5;
  inline bool has_per_today() const;
  inline void clear_per_today();
  static const int kPerTodayFieldNumber = 5;
  inline ::google::protobuf::int64 per_today() const;
  inline void set_per_today(::google::protobuf::int64 value);

  // optional int64 per_yesterday = 6;
  inline bool has_per_yesterday() const;
  inline void clear_per_yesterday();
  static const int kPerYesterdayFieldNumber = 6;
  inline ::google::protobuf::int64 per_yesterday() const;
  inline void set_per_yesterday(::google::protobuf::int64 value);

  // optional int64 per_sub_today = 7;
  inline bool has_per_sub_today() const;
  inline void clear_per_sub_today();
  static const int kPerSubTodayFieldNumber = 7;
  inline ::google::protobuf::int64 per_sub_today() const;
  inline void set_per_sub_today(::google::protobuf::int64 value);

  // optional int64 per_sub_yesterday = 8;
  inline bool has_per_sub_yesterday() const;
  inline void clear_per_sub_yesterday();
  static const int kPerSubYesterdayFieldNumber = 8;
  inline ::google::protobuf::int64 per_sub_yesterday() const;
  inline void set_per_sub_yesterday(::google::protobuf::int64 value);

  // optional int64 per_tw = 9;
  inline bool has_per_tw() const;
  inline void clear_per_tw();
  static const int kPerTwFieldNumber = 9;
  inline ::google::protobuf::int64 per_tw() const;
  inline void set_per_tw(::google::protobuf::int64 value);

  // optional int64 per_lw = 10;
  inline bool has_per_lw() const;
  inline void clear_per_lw();
  static const int kPerLwFieldNumber = 10;
  inline ::google::protobuf::int64 per_lw() const;
  inline void set_per_lw(::google::protobuf::int64 value);

  // optional int64 per_sub_tw = 11;
  inline bool has_per_sub_tw() const;
  inline void clear_per_sub_tw();
  static const int kPerSubTwFieldNumber = 11;
  inline ::google::protobuf::int64 per_sub_tw() const;
  inline void set_per_sub_tw(::google::protobuf::int64 value);

  // optional int64 per_sub_lw = 12;
  inline bool has_per_sub_lw() const;
  inline void clear_per_sub_lw();
  static const int kPerSubLwFieldNumber = 12;
  inline ::google::protobuf::int64 per_sub_lw() const;
  inline void set_per_sub_lw(::google::protobuf::int64 value);

  // optional int32 ts_create = 13;
  inline bool has_ts_create() const;
  inline void clear_ts_create();
  static const int kTsCreateFieldNumber = 13;
  inline ::google::protobuf::int32 ts_create() const;
  inline void set_ts_create(::google::protobuf::int32 value);

  // optional int32 ac = 14;
  inline bool has_ac() const;
  inline void clear_ac();
  static const int kAcFieldNumber = 14;
  inline ::google::protobuf::int32 ac() const;
  inline void set_ac(::google::protobuf::int32 value);

  // optional int32 ac_inc = 15;
  inline bool has_ac_inc() const;
  inline void clear_ac_inc();
  static const int kAcIncFieldNumber = 15;
  inline ::google::protobuf::int32 ac_inc() const;
  inline void set_ac_inc(::google::protobuf::int32 value);

  // optional int32 ac_inc_yd = 16;
  inline bool has_ac_inc_yd() const;
  inline void clear_ac_inc_yd();
  static const int kAcIncYdFieldNumber = 16;
  inline ::google::protobuf::int32 ac_inc_yd() const;
  inline void set_ac_inc_yd(::google::protobuf::int32 value);

  // optional int32 ac_inc_tw = 17;
  inline bool has_ac_inc_tw() const;
  inline void clear_ac_inc_tw();
  static const int kAcIncTwFieldNumber = 17;
  inline ::google::protobuf::int32 ac_inc_tw() const;
  inline void set_ac_inc_tw(::google::protobuf::int32 value);

  // optional int32 ac_inc_lw = 18;
  inline bool has_ac_inc_lw() const;
  inline void clear_ac_inc_lw();
  static const int kAcIncLwFieldNumber = 18;
  inline ::google::protobuf::int32 ac_inc_lw() const;
  inline void set_ac_inc_lw(::google::protobuf::int32 value);

  // optional int32 ac_inc_tm = 19;
  inline bool has_ac_inc_tm() const;
  inline void clear_ac_inc_tm();
  static const int kAcIncTmFieldNumber = 19;
  inline ::google::protobuf::int32 ac_inc_tm() const;
  inline void set_ac_inc_tm(::google::protobuf::int32 value);

  // optional int32 ac_inc_lm = 20;
  inline bool has_ac_inc_lm() const;
  inline void clear_ac_inc_lm();
  static const int kAcIncLmFieldNumber = 20;
  inline ::google::protobuf::int32 ac_inc_lm() const;
  inline void set_ac_inc_lm(::google::protobuf::int32 value);

  // optional int64 gain_yd = 21;
  inline bool has_gain_yd() const;
  inline void clear_gain_yd();
  static const int kGainYdFieldNumber = 21;
  inline ::google::protobuf::int64 gain_yd() const;
  inline void set_gain_yd(::google::protobuf::int64 value);

  // optional int64 gain_tw = 22;
  inline bool has_gain_tw() const;
  inline void clear_gain_tw();
  static const int kGainTwFieldNumber = 22;
  inline ::google::protobuf::int64 gain_tw() const;
  inline void set_gain_tw(::google::protobuf::int64 value);

  // optional int64 gain_lw = 23;
  inline bool has_gain_lw() const;
  inline void clear_gain_lw();
  static const int kGainLwFieldNumber = 23;
  inline ::google::protobuf::int64 gain_lw() const;
  inline void set_gain_lw(::google::protobuf::int64 value);

  // optional int64 gain = 24;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 24;
  inline ::google::protobuf::int64 gain() const;
  inline void set_gain(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_performance_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_photo_frame();
  inline void clear_has_photo_frame();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_parent();
  inline void clear_has_parent();
  inline void set_has_per_today();
  inline void clear_has_per_today();
  inline void set_has_per_yesterday();
  inline void clear_has_per_yesterday();
  inline void set_has_per_sub_today();
  inline void clear_has_per_sub_today();
  inline void set_has_per_sub_yesterday();
  inline void clear_has_per_sub_yesterday();
  inline void set_has_per_tw();
  inline void clear_has_per_tw();
  inline void set_has_per_lw();
  inline void clear_has_per_lw();
  inline void set_has_per_sub_tw();
  inline void clear_has_per_sub_tw();
  inline void set_has_per_sub_lw();
  inline void clear_has_per_sub_lw();
  inline void set_has_ts_create();
  inline void clear_has_ts_create();
  inline void set_has_ac();
  inline void clear_has_ac();
  inline void set_has_ac_inc();
  inline void clear_has_ac_inc();
  inline void set_has_ac_inc_yd();
  inline void clear_has_ac_inc_yd();
  inline void set_has_ac_inc_tw();
  inline void clear_has_ac_inc_tw();
  inline void set_has_ac_inc_lw();
  inline void clear_has_ac_inc_lw();
  inline void set_has_ac_inc_tm();
  inline void clear_has_ac_inc_tm();
  inline void set_has_ac_inc_lm();
  inline void clear_has_ac_inc_lm();
  inline void set_has_gain_yd();
  inline void clear_has_gain_yd();
  inline void set_has_gain_tw();
  inline void clear_has_gain_tw();
  inline void set_has_gain_lw();
  inline void clear_has_gain_lw();
  inline void set_has_gain();
  inline void clear_has_gain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 photo_frame_;
  ::std::string* nick_name_;
  ::google::protobuf::int64 per_today_;
  ::google::protobuf::int64 per_yesterday_;
  ::google::protobuf::int64 per_sub_today_;
  ::google::protobuf::int64 per_sub_yesterday_;
  ::google::protobuf::int32 parent_;
  ::google::protobuf::int32 ts_create_;
  ::google::protobuf::int64 per_tw_;
  ::google::protobuf::int64 per_lw_;
  ::google::protobuf::int64 per_sub_tw_;
  ::google::protobuf::int64 per_sub_lw_;
  ::google::protobuf::int32 ac_;
  ::google::protobuf::int32 ac_inc_;
  ::google::protobuf::int32 ac_inc_yd_;
  ::google::protobuf::int32 ac_inc_tw_;
  ::google::protobuf::int32 ac_inc_lw_;
  ::google::protobuf::int32 ac_inc_tm_;
  ::google::protobuf::int64 gain_yd_;
  ::google::protobuf::int64 gain_tw_;
  ::google::protobuf::int64 gain_lw_;
  ::google::protobuf::int64 gain_;
  ::google::protobuf::int32 ac_inc_lm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static msg_performance_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_performance_team : public ::google::protobuf::Message {
 public:
  msg_performance_team();
  virtual ~msg_performance_team();

  msg_performance_team(const msg_performance_team& from);

  inline msg_performance_team& operator=(const msg_performance_team& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_performance_team& default_instance();

  void Swap(msg_performance_team* other);

  // implements Message ----------------------------------------------

  msg_performance_team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_performance_team& from);
  void MergeFrom(const msg_performance_team& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 count_limit = 4;
  inline bool has_count_limit() const;
  inline void clear_count_limit();
  static const int kCountLimitFieldNumber = 4;
  inline ::google::protobuf::int32 count_limit() const;
  inline void set_count_limit(::google::protobuf::int32 value);

  // optional int32 code_tag = 5;
  inline bool has_code_tag() const;
  inline void clear_code_tag();
  static const int kCodeTagFieldNumber = 5;
  inline ::google::protobuf::int32 code_tag() const;
  inline void set_code_tag(::google::protobuf::int32 value);

  // optional int32 ac_inc = 6;
  inline bool has_ac_inc() const;
  inline void clear_ac_inc();
  static const int kAcIncFieldNumber = 6;
  inline ::google::protobuf::int32 ac_inc() const;
  inline void set_ac_inc(::google::protobuf::int32 value);

  // repeated .client2world_protocols.msg_performance_info member_infos = 7;
  inline int member_infos_size() const;
  inline void clear_member_infos();
  static const int kMemberInfosFieldNumber = 7;
  inline const ::client2world_protocols::msg_performance_info& member_infos(int index) const;
  inline ::client2world_protocols::msg_performance_info* mutable_member_infos(int index);
  inline ::client2world_protocols::msg_performance_info* add_member_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info >&
      member_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info >*
      mutable_member_infos();

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_performance_team)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_count_limit();
  inline void clear_has_count_limit();
  inline void set_has_code_tag();
  inline void clear_has_code_tag();
  inline void set_has_ac_inc();
  inline void clear_has_ac_inc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 count_limit_;
  ::google::protobuf::int32 code_tag_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info > member_infos_;
  ::google::protobuf::int32 ac_inc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static msg_performance_team* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_list : public ::google::protobuf::Message {
 public:
  packetc2w_performance_list();
  virtual ~packetc2w_performance_list();

  packetc2w_performance_list(const packetc2w_performance_list& from);

  inline packetc2w_performance_list& operator=(const packetc2w_performance_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_list& default_instance();

  void Swap(packetc2w_performance_list* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_list& from);
  void MergeFrom(const packetc2w_performance_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_list* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_list_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_list_result();
  virtual ~packetw2c_performance_list_result();

  packetw2c_performance_list_result(const packetw2c_performance_list_result& from);

  inline packetw2c_performance_list_result& operator=(const packetw2c_performance_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_list_result& default_instance();

  void Swap(packetw2c_performance_list_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_list_result& from);
  void MergeFrom(const packetw2c_performance_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_list_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.msg_performance_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client2world_protocols::msg_performance_info& info(int index) const;
  inline ::client2world_protocols::msg_performance_info* mutable_info(int index);
  inline ::client2world_protocols::msg_performance_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info > info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_gain : public ::google::protobuf::Message {
 public:
  packetc2w_performance_gain();
  virtual ~packetc2w_performance_gain();

  packetc2w_performance_gain(const packetc2w_performance_gain& from);

  inline packetc2w_performance_gain& operator=(const packetc2w_performance_gain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_gain& default_instance();

  void Swap(packetc2w_performance_gain* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_gain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_gain& from);
  void MergeFrom(const packetc2w_performance_gain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_gain];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_gain)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_gain* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_gain_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_gain_result();
  virtual ~packetw2c_performance_gain_result();

  packetw2c_performance_gain_result(const packetw2c_performance_gain_result& from);

  inline packetw2c_performance_gain_result& operator=(const packetw2c_performance_gain_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_gain_result& default_instance();

  void Swap(packetw2c_performance_gain_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_gain_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_gain_result& from);
  void MergeFrom(const packetw2c_performance_gain_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_gain_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int64 gain = 3;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 3;
  inline ::google::protobuf::int64 gain() const;
  inline void set_gain(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_gain_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gain();
  inline void clear_has_gain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int64 gain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_gain_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_child : public ::google::protobuf::Message {
 public:
  packetc2w_performance_child();
  virtual ~packetc2w_performance_child();

  packetc2w_performance_child(const packetc2w_performance_child& from);

  inline packetc2w_performance_child& operator=(const packetc2w_performance_child& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_child& default_instance();

  void Swap(packetc2w_performance_child* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_child* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_child& from);
  void MergeFrom(const packetc2w_performance_child& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_child];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_child)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_child* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_child_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_child_result();
  virtual ~packetw2c_performance_child_result();

  packetw2c_performance_child_result(const packetw2c_performance_child_result& from);

  inline packetw2c_performance_child_result& operator=(const packetw2c_performance_child_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_child_result& default_instance();

  void Swap(packetw2c_performance_child_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_child_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_child_result& from);
  void MergeFrom(const packetw2c_performance_child_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_child_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .client2world_protocols.msg_performance_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client2world_protocols::msg_performance_info& info() const;
  inline ::client2world_protocols::msg_performance_info* mutable_info();
  inline ::client2world_protocols::msg_performance_info* release_info();
  inline void set_allocated_info(::client2world_protocols::msg_performance_info* info);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_child_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2world_protocols::msg_performance_info* info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_child_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_check_gain : public ::google::protobuf::Message {
 public:
  packetc2w_performance_check_gain();
  virtual ~packetc2w_performance_check_gain();

  packetc2w_performance_check_gain(const packetc2w_performance_check_gain& from);

  inline packetc2w_performance_check_gain& operator=(const packetc2w_performance_check_gain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_check_gain& default_instance();

  void Swap(packetc2w_performance_check_gain* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_check_gain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_check_gain& from);
  void MergeFrom(const packetc2w_performance_check_gain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_check_gain];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_check_gain)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_check_gain* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_check_gain_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_check_gain_result();
  virtual ~packetw2c_performance_check_gain_result();

  packetw2c_performance_check_gain_result(const packetw2c_performance_check_gain_result& from);

  inline packetw2c_performance_check_gain_result& operator=(const packetw2c_performance_check_gain_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_check_gain_result& default_instance();

  void Swap(packetw2c_performance_check_gain_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_check_gain_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_check_gain_result& from);
  void MergeFrom(const packetw2c_performance_check_gain_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_check_gain_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gain = 2;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 2;
  inline ::google::protobuf::int64 gain() const;
  inline void set_gain(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_check_gain_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gain();
  inline void clear_has_gain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gain_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_check_gain_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_team_create : public ::google::protobuf::Message {
 public:
  packetc2w_performance_team_create();
  virtual ~packetc2w_performance_team_create();

  packetc2w_performance_team_create(const packetc2w_performance_team_create& from);

  inline packetc2w_performance_team_create& operator=(const packetc2w_performance_team_create& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_team_create& default_instance();

  void Swap(packetc2w_performance_team_create* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_team_create* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_team_create& from);
  void MergeFrom(const packetc2w_performance_team_create& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_create];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional string nick_name = 3;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_team_create)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 count_;
  ::std::string* nick_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_team_create* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_team_create_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_team_create_result();
  virtual ~packetw2c_performance_team_create_result();

  packetw2c_performance_team_create_result(const packetw2c_performance_team_create_result& from);

  inline packetw2c_performance_team_create_result& operator=(const packetw2c_performance_team_create_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_team_create_result& default_instance();

  void Swap(packetw2c_performance_team_create_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_team_create_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_team_create_result& from);
  void MergeFrom(const packetw2c_performance_team_create_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_create_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 team_id = 3;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional string nick_name = 5;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 5;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional int32 code_tag = 6;
  inline bool has_code_tag() const;
  inline void clear_code_tag();
  static const int kCodeTagFieldNumber = 6;
  inline ::google::protobuf::int32 code_tag() const;
  inline void set_code_tag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_team_create_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_code_tag();
  inline void clear_has_code_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 team_id_;
  ::google::protobuf::int32 count_;
  ::std::string* nick_name_;
  ::google::protobuf::int32 code_tag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_team_create_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_team_list : public ::google::protobuf::Message {
 public:
  packetc2w_performance_team_list();
  virtual ~packetc2w_performance_team_list();

  packetc2w_performance_team_list(const packetc2w_performance_team_list& from);

  inline packetc2w_performance_team_list& operator=(const packetc2w_performance_team_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_team_list& default_instance();

  void Swap(packetc2w_performance_team_list* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_team_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_team_list& from);
  void MergeFrom(const packetc2w_performance_team_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_team_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_team_list* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_team_list_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_team_list_result();
  virtual ~packetw2c_performance_team_list_result();

  packetw2c_performance_team_list_result(const packetw2c_performance_team_list_result& from);

  inline packetw2c_performance_team_list_result& operator=(const packetw2c_performance_team_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_team_list_result& default_instance();

  void Swap(packetw2c_performance_team_list_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_team_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_team_list_result& from);
  void MergeFrom(const packetw2c_performance_team_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_list_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.msg_performance_team teams = 2;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 2;
  inline const ::client2world_protocols::msg_performance_team& teams(int index) const;
  inline ::client2world_protocols::msg_performance_team* mutable_teams(int index);
  inline ::client2world_protocols::msg_performance_team* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_team >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_team >*
      mutable_teams();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_team_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_team > teams_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_team_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_team_info : public ::google::protobuf::Message {
 public:
  packetc2w_performance_team_info();
  virtual ~packetc2w_performance_team_info();

  packetc2w_performance_team_info(const packetc2w_performance_team_info& from);

  inline packetc2w_performance_team_info& operator=(const packetc2w_performance_team_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_team_info& default_instance();

  void Swap(packetc2w_performance_team_info* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_team_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_team_info& from);
  void MergeFrom(const packetc2w_performance_team_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 team_id = 3;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_team_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 team_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_team_info* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_team_info_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_team_info_result();
  virtual ~packetw2c_performance_team_info_result();

  packetw2c_performance_team_info_result(const packetw2c_performance_team_info_result& from);

  inline packetw2c_performance_team_info_result& operator=(const packetw2c_performance_team_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_team_info_result& default_instance();

  void Swap(packetw2c_performance_team_info_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_team_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_team_info_result& from);
  void MergeFrom(const packetw2c_performance_team_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .client2world_protocols.msg_performance_team team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline const ::client2world_protocols::msg_performance_team& team() const;
  inline ::client2world_protocols::msg_performance_team* mutable_team();
  inline ::client2world_protocols::msg_performance_team* release_team();
  inline void set_allocated_team(::client2world_protocols::msg_performance_team* team);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_team_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_team();
  inline void clear_has_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client2world_protocols::msg_performance_team* team_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_team_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_team_update : public ::google::protobuf::Message {
 public:
  packetc2w_performance_team_update();
  virtual ~packetc2w_performance_team_update();

  packetc2w_performance_team_update(const packetc2w_performance_team_update& from);

  inline packetc2w_performance_team_update& operator=(const packetc2w_performance_team_update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_team_update& default_instance();

  void Swap(packetc2w_performance_team_update* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_team_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_team_update& from);
  void MergeFrom(const packetc2w_performance_team_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_update];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 optype = 2;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 2;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // optional int32 team_id = 3;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);

  // optional int32 limit = 4 [default = 0];
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 4;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // optional string nick_name = 5;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 5;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_team_update)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::int32 team_id_;
  ::google::protobuf::int32 limit_;
  ::std::string* nick_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_team_update* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_team_update_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_team_update_result();
  virtual ~packetw2c_performance_team_update_result();

  packetw2c_performance_team_update_result(const packetw2c_performance_team_update_result& from);

  inline packetw2c_performance_team_update_result& operator=(const packetw2c_performance_team_update_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_team_update_result& default_instance();

  void Swap(packetw2c_performance_team_update_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_team_update_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_team_update_result& from);
  void MergeFrom(const packetw2c_performance_team_update_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_update_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 optype = 3;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 3;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // optional int32 team_id = 4;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);

  // optional int32 limit = 5 [default = 0];
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 5;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // optional string nick_name = 6;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 6;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional int32 code_tag = 7;
  inline bool has_code_tag() const;
  inline void clear_code_tag();
  static const int kCodeTagFieldNumber = 7;
  inline ::google::protobuf::int32 code_tag() const;
  inline void set_code_tag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_team_update_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_code_tag();
  inline void clear_has_code_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::int32 team_id_;
  ::std::string* nick_name_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 code_tag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_team_update_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_info : public ::google::protobuf::Message {
 public:
  packetc2w_performance_info();
  virtual ~packetc2w_performance_info();

  packetc2w_performance_info(const packetc2w_performance_info& from);

  inline packetc2w_performance_info& operator=(const packetc2w_performance_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_info& default_instance();

  void Swap(packetc2w_performance_info* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_info& from);
  void MergeFrom(const packetc2w_performance_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_info* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_info_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_info_result();
  virtual ~packetw2c_performance_info_result();

  packetw2c_performance_info_result(const packetw2c_performance_info_result& from);

  inline packetw2c_performance_info_result& operator=(const packetw2c_performance_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_info_result& default_instance();

  void Swap(packetw2c_performance_info_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_info_result& from);
  void MergeFrom(const packetw2c_performance_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 commission_today_team = 2;
  inline bool has_commission_today_team() const;
  inline void clear_commission_today_team();
  static const int kCommissionTodayTeamFieldNumber = 2;
  inline ::google::protobuf::int64 commission_today_team() const;
  inline void set_commission_today_team(::google::protobuf::int64 value);

  // optional int64 commission_today_self = 3;
  inline bool has_commission_today_self() const;
  inline void clear_commission_today_self();
  static const int kCommissionTodaySelfFieldNumber = 3;
  inline ::google::protobuf::int64 commission_today_self() const;
  inline void set_commission_today_self(::google::protobuf::int64 value);

  // optional int64 commission_today_agent = 4;
  inline bool has_commission_today_agent() const;
  inline void clear_commission_today_agent();
  static const int kCommissionTodayAgentFieldNumber = 4;
  inline ::google::protobuf::int64 commission_today_agent() const;
  inline void set_commission_today_agent(::google::protobuf::int64 value);

  // optional int64 commission_yesterday_team = 5;
  inline bool has_commission_yesterday_team() const;
  inline void clear_commission_yesterday_team();
  static const int kCommissionYesterdayTeamFieldNumber = 5;
  inline ::google::protobuf::int64 commission_yesterday_team() const;
  inline void set_commission_yesterday_team(::google::protobuf::int64 value);

  // optional int64 commission_yesterday_self = 6;
  inline bool has_commission_yesterday_self() const;
  inline void clear_commission_yesterday_self();
  static const int kCommissionYesterdaySelfFieldNumber = 6;
  inline ::google::protobuf::int64 commission_yesterday_self() const;
  inline void set_commission_yesterday_self(::google::protobuf::int64 value);

  // optional int64 commission_yesterday_agent = 7;
  inline bool has_commission_yesterday_agent() const;
  inline void clear_commission_yesterday_agent();
  static const int kCommissionYesterdayAgentFieldNumber = 7;
  inline ::google::protobuf::int64 commission_yesterday_agent() const;
  inline void set_commission_yesterday_agent(::google::protobuf::int64 value);

  // optional int64 per_today_team = 8;
  inline bool has_per_today_team() const;
  inline void clear_per_today_team();
  static const int kPerTodayTeamFieldNumber = 8;
  inline ::google::protobuf::int64 per_today_team() const;
  inline void set_per_today_team(::google::protobuf::int64 value);

  // optional int64 per_today_self = 9;
  inline bool has_per_today_self() const;
  inline void clear_per_today_self();
  static const int kPerTodaySelfFieldNumber = 9;
  inline ::google::protobuf::int64 per_today_self() const;
  inline void set_per_today_self(::google::protobuf::int64 value);

  // optional int64 per_today_agent = 10;
  inline bool has_per_today_agent() const;
  inline void clear_per_today_agent();
  static const int kPerTodayAgentFieldNumber = 10;
  inline ::google::protobuf::int64 per_today_agent() const;
  inline void set_per_today_agent(::google::protobuf::int64 value);

  // optional int64 per_yesterday_team = 11;
  inline bool has_per_yesterday_team() const;
  inline void clear_per_yesterday_team();
  static const int kPerYesterdayTeamFieldNumber = 11;
  inline ::google::protobuf::int64 per_yesterday_team() const;
  inline void set_per_yesterday_team(::google::protobuf::int64 value);

  // optional int64 per_yesterday_self = 12;
  inline bool has_per_yesterday_self() const;
  inline void clear_per_yesterday_self();
  static const int kPerYesterdaySelfFieldNumber = 12;
  inline ::google::protobuf::int64 per_yesterday_self() const;
  inline void set_per_yesterday_self(::google::protobuf::int64 value);

  // optional int64 per_yesterday_agent = 13;
  inline bool has_per_yesterday_agent() const;
  inline void clear_per_yesterday_agent();
  static const int kPerYesterdayAgentFieldNumber = 13;
  inline ::google::protobuf::int64 per_yesterday_agent() const;
  inline void set_per_yesterday_agent(::google::protobuf::int64 value);

  // optional int64 per_today = 14;
  inline bool has_per_today() const;
  inline void clear_per_today();
  static const int kPerTodayFieldNumber = 14;
  inline ::google::protobuf::int64 per_today() const;
  inline void set_per_today(::google::protobuf::int64 value);

  // optional int64 per_this_week = 15;
  inline bool has_per_this_week() const;
  inline void clear_per_this_week();
  static const int kPerThisWeekFieldNumber = 15;
  inline ::google::protobuf::int64 per_this_week() const;
  inline void set_per_this_week(::google::protobuf::int64 value);

  // optional int64 rebate_today = 16;
  inline bool has_rebate_today() const;
  inline void clear_rebate_today();
  static const int kRebateTodayFieldNumber = 16;
  inline ::google::protobuf::int64 rebate_today() const;
  inline void set_rebate_today(::google::protobuf::int64 value);

  // optional int64 rebate_this_week = 17;
  inline bool has_rebate_this_week() const;
  inline void clear_rebate_this_week();
  static const int kRebateThisWeekFieldNumber = 17;
  inline ::google::protobuf::int64 rebate_this_week() const;
  inline void set_rebate_this_week(::google::protobuf::int64 value);

  // optional int64 per_b_self_today = 18;
  inline bool has_per_b_self_today() const;
  inline void clear_per_b_self_today();
  static const int kPerBSelfTodayFieldNumber = 18;
  inline ::google::protobuf::int64 per_b_self_today() const;
  inline void set_per_b_self_today(::google::protobuf::int64 value);

  // optional int64 per_b_child_today = 19;
  inline bool has_per_b_child_today() const;
  inline void clear_per_b_child_today();
  static const int kPerBChildTodayFieldNumber = 19;
  inline ::google::protobuf::int64 per_b_child_today() const;
  inline void set_per_b_child_today(::google::protobuf::int64 value);

  // optional int64 per_b_self_yesterday = 20;
  inline bool has_per_b_self_yesterday() const;
  inline void clear_per_b_self_yesterday();
  static const int kPerBSelfYesterdayFieldNumber = 20;
  inline ::google::protobuf::int64 per_b_self_yesterday() const;
  inline void set_per_b_self_yesterday(::google::protobuf::int64 value);

  // optional int64 per_b_child_yesterday = 21;
  inline bool has_per_b_child_yesterday() const;
  inline void clear_per_b_child_yesterday();
  static const int kPerBChildYesterdayFieldNumber = 21;
  inline ::google::protobuf::int64 per_b_child_yesterday() const;
  inline void set_per_b_child_yesterday(::google::protobuf::int64 value);

  // optional int32 ac = 22;
  inline bool has_ac() const;
  inline void clear_ac();
  static const int kAcFieldNumber = 22;
  inline ::google::protobuf::int32 ac() const;
  inline void set_ac(::google::protobuf::int32 value);

  // optional int32 ac_inc = 23;
  inline bool has_ac_inc() const;
  inline void clear_ac_inc();
  static const int kAcIncFieldNumber = 23;
  inline ::google::protobuf::int32 ac_inc() const;
  inline void set_ac_inc(::google::protobuf::int32 value);

  // optional int32 ac_inc_yd = 24;
  inline bool has_ac_inc_yd() const;
  inline void clear_ac_inc_yd();
  static const int kAcIncYdFieldNumber = 24;
  inline ::google::protobuf::int32 ac_inc_yd() const;
  inline void set_ac_inc_yd(::google::protobuf::int32 value);

  // optional int32 ac_inc_tw = 25;
  inline bool has_ac_inc_tw() const;
  inline void clear_ac_inc_tw();
  static const int kAcIncTwFieldNumber = 25;
  inline ::google::protobuf::int32 ac_inc_tw() const;
  inline void set_ac_inc_tw(::google::protobuf::int32 value);

  // optional int32 ac_inc_lw = 26;
  inline bool has_ac_inc_lw() const;
  inline void clear_ac_inc_lw();
  static const int kAcIncLwFieldNumber = 26;
  inline ::google::protobuf::int32 ac_inc_lw() const;
  inline void set_ac_inc_lw(::google::protobuf::int32 value);

  // optional int32 ac_inc_tm = 27;
  inline bool has_ac_inc_tm() const;
  inline void clear_ac_inc_tm();
  static const int kAcIncTmFieldNumber = 27;
  inline ::google::protobuf::int32 ac_inc_tm() const;
  inline void set_ac_inc_tm(::google::protobuf::int32 value);

  // optional int32 ac_inc_lm = 28;
  inline bool has_ac_inc_lm() const;
  inline void clear_ac_inc_lm();
  static const int kAcIncLmFieldNumber = 28;
  inline ::google::protobuf::int32 ac_inc_lm() const;
  inline void set_ac_inc_lm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_commission_today_team();
  inline void clear_has_commission_today_team();
  inline void set_has_commission_today_self();
  inline void clear_has_commission_today_self();
  inline void set_has_commission_today_agent();
  inline void clear_has_commission_today_agent();
  inline void set_has_commission_yesterday_team();
  inline void clear_has_commission_yesterday_team();
  inline void set_has_commission_yesterday_self();
  inline void clear_has_commission_yesterday_self();
  inline void set_has_commission_yesterday_agent();
  inline void clear_has_commission_yesterday_agent();
  inline void set_has_per_today_team();
  inline void clear_has_per_today_team();
  inline void set_has_per_today_self();
  inline void clear_has_per_today_self();
  inline void set_has_per_today_agent();
  inline void clear_has_per_today_agent();
  inline void set_has_per_yesterday_team();
  inline void clear_has_per_yesterday_team();
  inline void set_has_per_yesterday_self();
  inline void clear_has_per_yesterday_self();
  inline void set_has_per_yesterday_agent();
  inline void clear_has_per_yesterday_agent();
  inline void set_has_per_today();
  inline void clear_has_per_today();
  inline void set_has_per_this_week();
  inline void clear_has_per_this_week();
  inline void set_has_rebate_today();
  inline void clear_has_rebate_today();
  inline void set_has_rebate_this_week();
  inline void clear_has_rebate_this_week();
  inline void set_has_per_b_self_today();
  inline void clear_has_per_b_self_today();
  inline void set_has_per_b_child_today();
  inline void clear_has_per_b_child_today();
  inline void set_has_per_b_self_yesterday();
  inline void clear_has_per_b_self_yesterday();
  inline void set_has_per_b_child_yesterday();
  inline void clear_has_per_b_child_yesterday();
  inline void set_has_ac();
  inline void clear_has_ac();
  inline void set_has_ac_inc();
  inline void clear_has_ac_inc();
  inline void set_has_ac_inc_yd();
  inline void clear_has_ac_inc_yd();
  inline void set_has_ac_inc_tw();
  inline void clear_has_ac_inc_tw();
  inline void set_has_ac_inc_lw();
  inline void clear_has_ac_inc_lw();
  inline void set_has_ac_inc_tm();
  inline void clear_has_ac_inc_tm();
  inline void set_has_ac_inc_lm();
  inline void clear_has_ac_inc_lm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 commission_today_team_;
  ::google::protobuf::int64 commission_today_self_;
  ::google::protobuf::int64 commission_today_agent_;
  ::google::protobuf::int64 commission_yesterday_team_;
  ::google::protobuf::int64 commission_yesterday_self_;
  ::google::protobuf::int64 commission_yesterday_agent_;
  ::google::protobuf::int64 per_today_team_;
  ::google::protobuf::int64 per_today_self_;
  ::google::protobuf::int64 per_today_agent_;
  ::google::protobuf::int64 per_yesterday_team_;
  int packet_id_;
  ::google::protobuf::int32 ac_;
  ::google::protobuf::int64 per_yesterday_self_;
  ::google::protobuf::int64 per_yesterday_agent_;
  ::google::protobuf::int64 per_today_;
  ::google::protobuf::int64 per_this_week_;
  ::google::protobuf::int64 rebate_today_;
  ::google::protobuf::int64 rebate_this_week_;
  ::google::protobuf::int64 per_b_self_today_;
  ::google::protobuf::int64 per_b_child_today_;
  ::google::protobuf::int64 per_b_self_yesterday_;
  ::google::protobuf::int64 per_b_child_yesterday_;
  ::google::protobuf::int32 ac_inc_;
  ::google::protobuf::int32 ac_inc_yd_;
  ::google::protobuf::int32 ac_inc_tw_;
  ::google::protobuf::int32 ac_inc_lw_;
  ::google::protobuf::int32 ac_inc_tm_;
  ::google::protobuf::int32 ac_inc_lm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_info_self_today : public ::google::protobuf::Message {
 public:
  packetc2w_performance_info_self_today();
  virtual ~packetc2w_performance_info_self_today();

  packetc2w_performance_info_self_today(const packetc2w_performance_info_self_today& from);

  inline packetc2w_performance_info_self_today& operator=(const packetc2w_performance_info_self_today& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_info_self_today& default_instance();

  void Swap(packetc2w_performance_info_self_today* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_info_self_today* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_info_self_today& from);
  void MergeFrom(const packetc2w_performance_info_self_today& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_today];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_info_self_today)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_info_self_today* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_info_self_today_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_info_self_today_result();
  virtual ~packetw2c_performance_info_self_today_result();

  packetw2c_performance_info_self_today_result(const packetw2c_performance_info_self_today_result& from);

  inline packetw2c_performance_info_self_today_result& operator=(const packetw2c_performance_info_self_today_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_info_self_today_result& default_instance();

  void Swap(packetw2c_performance_info_self_today_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_info_self_today_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_info_self_today_result& from);
  void MergeFrom(const packetw2c_performance_info_self_today_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_today_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_info_self_today_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_info_self_today_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_info_self_yesterday : public ::google::protobuf::Message {
 public:
  packetc2w_performance_info_self_yesterday();
  virtual ~packetc2w_performance_info_self_yesterday();

  packetc2w_performance_info_self_yesterday(const packetc2w_performance_info_self_yesterday& from);

  inline packetc2w_performance_info_self_yesterday& operator=(const packetc2w_performance_info_self_yesterday& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_info_self_yesterday& default_instance();

  void Swap(packetc2w_performance_info_self_yesterday* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_info_self_yesterday* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_info_self_yesterday& from);
  void MergeFrom(const packetc2w_performance_info_self_yesterday& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_yesterday];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_info_self_yesterday)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_info_self_yesterday* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_info_self_yesterday_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_info_self_yesterday_result();
  virtual ~packetw2c_performance_info_self_yesterday_result();

  packetw2c_performance_info_self_yesterday_result(const packetw2c_performance_info_self_yesterday_result& from);

  inline packetw2c_performance_info_self_yesterday_result& operator=(const packetw2c_performance_info_self_yesterday_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_info_self_yesterday_result& default_instance();

  void Swap(packetw2c_performance_info_self_yesterday_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_info_self_yesterday_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_info_self_yesterday_result& from);
  void MergeFrom(const packetw2c_performance_info_self_yesterday_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_yesterday_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_info_self_yesterday_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_info_self_yesterday_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_info_agent_today : public ::google::protobuf::Message {
 public:
  packetc2w_performance_info_agent_today();
  virtual ~packetc2w_performance_info_agent_today();

  packetc2w_performance_info_agent_today(const packetc2w_performance_info_agent_today& from);

  inline packetc2w_performance_info_agent_today& operator=(const packetc2w_performance_info_agent_today& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_info_agent_today& default_instance();

  void Swap(packetc2w_performance_info_agent_today* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_info_agent_today* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_info_agent_today& from);
  void MergeFrom(const packetc2w_performance_info_agent_today& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_today];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_info_agent_today)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_info_agent_today* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_info_agent_today_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_info_agent_today_result();
  virtual ~packetw2c_performance_info_agent_today_result();

  packetw2c_performance_info_agent_today_result(const packetw2c_performance_info_agent_today_result& from);

  inline packetw2c_performance_info_agent_today_result& operator=(const packetw2c_performance_info_agent_today_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_info_agent_today_result& default_instance();

  void Swap(packetw2c_performance_info_agent_today_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_info_agent_today_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_info_agent_today_result& from);
  void MergeFrom(const packetw2c_performance_info_agent_today_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_today_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_info_agent_today_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_info_agent_today_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_performance_info_agent_yesterday : public ::google::protobuf::Message {
 public:
  packetc2w_performance_info_agent_yesterday();
  virtual ~packetc2w_performance_info_agent_yesterday();

  packetc2w_performance_info_agent_yesterday(const packetc2w_performance_info_agent_yesterday& from);

  inline packetc2w_performance_info_agent_yesterday& operator=(const packetc2w_performance_info_agent_yesterday& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_performance_info_agent_yesterday& default_instance();

  void Swap(packetc2w_performance_info_agent_yesterday* other);

  // implements Message ----------------------------------------------

  packetc2w_performance_info_agent_yesterday* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_performance_info_agent_yesterday& from);
  void MergeFrom(const packetc2w_performance_info_agent_yesterday& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_yesterday];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_performance_info_agent_yesterday)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_performance_info_agent_yesterday* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_performance_info_agent_yesterday_result : public ::google::protobuf::Message {
 public:
  packetw2c_performance_info_agent_yesterday_result();
  virtual ~packetw2c_performance_info_agent_yesterday_result();

  packetw2c_performance_info_agent_yesterday_result(const packetw2c_performance_info_agent_yesterday_result& from);

  inline packetw2c_performance_info_agent_yesterday_result& operator=(const packetw2c_performance_info_agent_yesterday_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_performance_info_agent_yesterday_result& default_instance();

  void Swap(packetw2c_performance_info_agent_yesterday_result* other);

  // implements Message ----------------------------------------------

  packetw2c_performance_info_agent_yesterday_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_performance_info_agent_yesterday_result& from);
  void MergeFrom(const packetw2c_performance_info_agent_yesterday_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_yesterday_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_performance_info_agent_yesterday_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fperformance_2eproto();
  friend void protobuf_AssignDesc_client2world_5fperformance_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fperformance_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_performance_info_agent_yesterday_result* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_performance_info

// optional int32 player_id = 1;
inline bool msg_performance_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_performance_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_performance_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_performance_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_performance_info::player_id() const {
  return player_id_;
}
inline void msg_performance_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 photo_frame = 2;
inline bool msg_performance_info::has_photo_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_performance_info::set_has_photo_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_performance_info::clear_has_photo_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_performance_info::clear_photo_frame() {
  photo_frame_ = 0;
  clear_has_photo_frame();
}
inline ::google::protobuf::int32 msg_performance_info::photo_frame() const {
  return photo_frame_;
}
inline void msg_performance_info::set_photo_frame(::google::protobuf::int32 value) {
  set_has_photo_frame();
  photo_frame_ = value;
}

// optional string nick_name = 3;
inline bool msg_performance_info::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_performance_info::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_performance_info::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_performance_info::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& msg_performance_info::nick_name() const {
  return *nick_name_;
}
inline void msg_performance_info::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void msg_performance_info::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void msg_performance_info::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_performance_info::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* msg_performance_info::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_performance_info::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 parent = 4;
inline bool msg_performance_info::has_parent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_performance_info::set_has_parent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_performance_info::clear_has_parent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_performance_info::clear_parent() {
  parent_ = 0;
  clear_has_parent();
}
inline ::google::protobuf::int32 msg_performance_info::parent() const {
  return parent_;
}
inline void msg_performance_info::set_parent(::google::protobuf::int32 value) {
  set_has_parent();
  parent_ = value;
}

// optional int64 per_today = 5;
inline bool msg_performance_info::has_per_today() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_performance_info::set_has_per_today() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_performance_info::clear_has_per_today() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_performance_info::clear_per_today() {
  per_today_ = GOOGLE_LONGLONG(0);
  clear_has_per_today();
}
inline ::google::protobuf::int64 msg_performance_info::per_today() const {
  return per_today_;
}
inline void msg_performance_info::set_per_today(::google::protobuf::int64 value) {
  set_has_per_today();
  per_today_ = value;
}

// optional int64 per_yesterday = 6;
inline bool msg_performance_info::has_per_yesterday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_performance_info::set_has_per_yesterday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_performance_info::clear_has_per_yesterday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_performance_info::clear_per_yesterday() {
  per_yesterday_ = GOOGLE_LONGLONG(0);
  clear_has_per_yesterday();
}
inline ::google::protobuf::int64 msg_performance_info::per_yesterday() const {
  return per_yesterday_;
}
inline void msg_performance_info::set_per_yesterday(::google::protobuf::int64 value) {
  set_has_per_yesterday();
  per_yesterday_ = value;
}

// optional int64 per_sub_today = 7;
inline bool msg_performance_info::has_per_sub_today() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_performance_info::set_has_per_sub_today() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_performance_info::clear_has_per_sub_today() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_performance_info::clear_per_sub_today() {
  per_sub_today_ = GOOGLE_LONGLONG(0);
  clear_has_per_sub_today();
}
inline ::google::protobuf::int64 msg_performance_info::per_sub_today() const {
  return per_sub_today_;
}
inline void msg_performance_info::set_per_sub_today(::google::protobuf::int64 value) {
  set_has_per_sub_today();
  per_sub_today_ = value;
}

// optional int64 per_sub_yesterday = 8;
inline bool msg_performance_info::has_per_sub_yesterday() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_performance_info::set_has_per_sub_yesterday() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_performance_info::clear_has_per_sub_yesterday() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_performance_info::clear_per_sub_yesterday() {
  per_sub_yesterday_ = GOOGLE_LONGLONG(0);
  clear_has_per_sub_yesterday();
}
inline ::google::protobuf::int64 msg_performance_info::per_sub_yesterday() const {
  return per_sub_yesterday_;
}
inline void msg_performance_info::set_per_sub_yesterday(::google::protobuf::int64 value) {
  set_has_per_sub_yesterday();
  per_sub_yesterday_ = value;
}

// optional int64 per_tw = 9;
inline bool msg_performance_info::has_per_tw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_performance_info::set_has_per_tw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_performance_info::clear_has_per_tw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_performance_info::clear_per_tw() {
  per_tw_ = GOOGLE_LONGLONG(0);
  clear_has_per_tw();
}
inline ::google::protobuf::int64 msg_performance_info::per_tw() const {
  return per_tw_;
}
inline void msg_performance_info::set_per_tw(::google::protobuf::int64 value) {
  set_has_per_tw();
  per_tw_ = value;
}

// optional int64 per_lw = 10;
inline bool msg_performance_info::has_per_lw() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_performance_info::set_has_per_lw() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_performance_info::clear_has_per_lw() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_performance_info::clear_per_lw() {
  per_lw_ = GOOGLE_LONGLONG(0);
  clear_has_per_lw();
}
inline ::google::protobuf::int64 msg_performance_info::per_lw() const {
  return per_lw_;
}
inline void msg_performance_info::set_per_lw(::google::protobuf::int64 value) {
  set_has_per_lw();
  per_lw_ = value;
}

// optional int64 per_sub_tw = 11;
inline bool msg_performance_info::has_per_sub_tw() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_performance_info::set_has_per_sub_tw() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_performance_info::clear_has_per_sub_tw() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_performance_info::clear_per_sub_tw() {
  per_sub_tw_ = GOOGLE_LONGLONG(0);
  clear_has_per_sub_tw();
}
inline ::google::protobuf::int64 msg_performance_info::per_sub_tw() const {
  return per_sub_tw_;
}
inline void msg_performance_info::set_per_sub_tw(::google::protobuf::int64 value) {
  set_has_per_sub_tw();
  per_sub_tw_ = value;
}

// optional int64 per_sub_lw = 12;
inline bool msg_performance_info::has_per_sub_lw() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void msg_performance_info::set_has_per_sub_lw() {
  _has_bits_[0] |= 0x00000800u;
}
inline void msg_performance_info::clear_has_per_sub_lw() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void msg_performance_info::clear_per_sub_lw() {
  per_sub_lw_ = GOOGLE_LONGLONG(0);
  clear_has_per_sub_lw();
}
inline ::google::protobuf::int64 msg_performance_info::per_sub_lw() const {
  return per_sub_lw_;
}
inline void msg_performance_info::set_per_sub_lw(::google::protobuf::int64 value) {
  set_has_per_sub_lw();
  per_sub_lw_ = value;
}

// optional int32 ts_create = 13;
inline bool msg_performance_info::has_ts_create() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void msg_performance_info::set_has_ts_create() {
  _has_bits_[0] |= 0x00001000u;
}
inline void msg_performance_info::clear_has_ts_create() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void msg_performance_info::clear_ts_create() {
  ts_create_ = 0;
  clear_has_ts_create();
}
inline ::google::protobuf::int32 msg_performance_info::ts_create() const {
  return ts_create_;
}
inline void msg_performance_info::set_ts_create(::google::protobuf::int32 value) {
  set_has_ts_create();
  ts_create_ = value;
}

// optional int32 ac = 14;
inline bool msg_performance_info::has_ac() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void msg_performance_info::set_has_ac() {
  _has_bits_[0] |= 0x00002000u;
}
inline void msg_performance_info::clear_has_ac() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void msg_performance_info::clear_ac() {
  ac_ = 0;
  clear_has_ac();
}
inline ::google::protobuf::int32 msg_performance_info::ac() const {
  return ac_;
}
inline void msg_performance_info::set_ac(::google::protobuf::int32 value) {
  set_has_ac();
  ac_ = value;
}

// optional int32 ac_inc = 15;
inline bool msg_performance_info::has_ac_inc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void msg_performance_info::set_has_ac_inc() {
  _has_bits_[0] |= 0x00004000u;
}
inline void msg_performance_info::clear_has_ac_inc() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void msg_performance_info::clear_ac_inc() {
  ac_inc_ = 0;
  clear_has_ac_inc();
}
inline ::google::protobuf::int32 msg_performance_info::ac_inc() const {
  return ac_inc_;
}
inline void msg_performance_info::set_ac_inc(::google::protobuf::int32 value) {
  set_has_ac_inc();
  ac_inc_ = value;
}

// optional int32 ac_inc_yd = 16;
inline bool msg_performance_info::has_ac_inc_yd() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void msg_performance_info::set_has_ac_inc_yd() {
  _has_bits_[0] |= 0x00008000u;
}
inline void msg_performance_info::clear_has_ac_inc_yd() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void msg_performance_info::clear_ac_inc_yd() {
  ac_inc_yd_ = 0;
  clear_has_ac_inc_yd();
}
inline ::google::protobuf::int32 msg_performance_info::ac_inc_yd() const {
  return ac_inc_yd_;
}
inline void msg_performance_info::set_ac_inc_yd(::google::protobuf::int32 value) {
  set_has_ac_inc_yd();
  ac_inc_yd_ = value;
}

// optional int32 ac_inc_tw = 17;
inline bool msg_performance_info::has_ac_inc_tw() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void msg_performance_info::set_has_ac_inc_tw() {
  _has_bits_[0] |= 0x00010000u;
}
inline void msg_performance_info::clear_has_ac_inc_tw() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void msg_performance_info::clear_ac_inc_tw() {
  ac_inc_tw_ = 0;
  clear_has_ac_inc_tw();
}
inline ::google::protobuf::int32 msg_performance_info::ac_inc_tw() const {
  return ac_inc_tw_;
}
inline void msg_performance_info::set_ac_inc_tw(::google::protobuf::int32 value) {
  set_has_ac_inc_tw();
  ac_inc_tw_ = value;
}

// optional int32 ac_inc_lw = 18;
inline bool msg_performance_info::has_ac_inc_lw() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void msg_performance_info::set_has_ac_inc_lw() {
  _has_bits_[0] |= 0x00020000u;
}
inline void msg_performance_info::clear_has_ac_inc_lw() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void msg_performance_info::clear_ac_inc_lw() {
  ac_inc_lw_ = 0;
  clear_has_ac_inc_lw();
}
inline ::google::protobuf::int32 msg_performance_info::ac_inc_lw() const {
  return ac_inc_lw_;
}
inline void msg_performance_info::set_ac_inc_lw(::google::protobuf::int32 value) {
  set_has_ac_inc_lw();
  ac_inc_lw_ = value;
}

// optional int32 ac_inc_tm = 19;
inline bool msg_performance_info::has_ac_inc_tm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void msg_performance_info::set_has_ac_inc_tm() {
  _has_bits_[0] |= 0x00040000u;
}
inline void msg_performance_info::clear_has_ac_inc_tm() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void msg_performance_info::clear_ac_inc_tm() {
  ac_inc_tm_ = 0;
  clear_has_ac_inc_tm();
}
inline ::google::protobuf::int32 msg_performance_info::ac_inc_tm() const {
  return ac_inc_tm_;
}
inline void msg_performance_info::set_ac_inc_tm(::google::protobuf::int32 value) {
  set_has_ac_inc_tm();
  ac_inc_tm_ = value;
}

// optional int32 ac_inc_lm = 20;
inline bool msg_performance_info::has_ac_inc_lm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void msg_performance_info::set_has_ac_inc_lm() {
  _has_bits_[0] |= 0x00080000u;
}
inline void msg_performance_info::clear_has_ac_inc_lm() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void msg_performance_info::clear_ac_inc_lm() {
  ac_inc_lm_ = 0;
  clear_has_ac_inc_lm();
}
inline ::google::protobuf::int32 msg_performance_info::ac_inc_lm() const {
  return ac_inc_lm_;
}
inline void msg_performance_info::set_ac_inc_lm(::google::protobuf::int32 value) {
  set_has_ac_inc_lm();
  ac_inc_lm_ = value;
}

// optional int64 gain_yd = 21;
inline bool msg_performance_info::has_gain_yd() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void msg_performance_info::set_has_gain_yd() {
  _has_bits_[0] |= 0x00100000u;
}
inline void msg_performance_info::clear_has_gain_yd() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void msg_performance_info::clear_gain_yd() {
  gain_yd_ = GOOGLE_LONGLONG(0);
  clear_has_gain_yd();
}
inline ::google::protobuf::int64 msg_performance_info::gain_yd() const {
  return gain_yd_;
}
inline void msg_performance_info::set_gain_yd(::google::protobuf::int64 value) {
  set_has_gain_yd();
  gain_yd_ = value;
}

// optional int64 gain_tw = 22;
inline bool msg_performance_info::has_gain_tw() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void msg_performance_info::set_has_gain_tw() {
  _has_bits_[0] |= 0x00200000u;
}
inline void msg_performance_info::clear_has_gain_tw() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void msg_performance_info::clear_gain_tw() {
  gain_tw_ = GOOGLE_LONGLONG(0);
  clear_has_gain_tw();
}
inline ::google::protobuf::int64 msg_performance_info::gain_tw() const {
  return gain_tw_;
}
inline void msg_performance_info::set_gain_tw(::google::protobuf::int64 value) {
  set_has_gain_tw();
  gain_tw_ = value;
}

// optional int64 gain_lw = 23;
inline bool msg_performance_info::has_gain_lw() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void msg_performance_info::set_has_gain_lw() {
  _has_bits_[0] |= 0x00400000u;
}
inline void msg_performance_info::clear_has_gain_lw() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void msg_performance_info::clear_gain_lw() {
  gain_lw_ = GOOGLE_LONGLONG(0);
  clear_has_gain_lw();
}
inline ::google::protobuf::int64 msg_performance_info::gain_lw() const {
  return gain_lw_;
}
inline void msg_performance_info::set_gain_lw(::google::protobuf::int64 value) {
  set_has_gain_lw();
  gain_lw_ = value;
}

// optional int64 gain = 24;
inline bool msg_performance_info::has_gain() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void msg_performance_info::set_has_gain() {
  _has_bits_[0] |= 0x00800000u;
}
inline void msg_performance_info::clear_has_gain() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void msg_performance_info::clear_gain() {
  gain_ = GOOGLE_LONGLONG(0);
  clear_has_gain();
}
inline ::google::protobuf::int64 msg_performance_info::gain() const {
  return gain_;
}
inline void msg_performance_info::set_gain(::google::protobuf::int64 value) {
  set_has_gain();
  gain_ = value;
}

// -------------------------------------------------------------------

// msg_performance_team

// optional int32 id = 1;
inline bool msg_performance_team::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_performance_team::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_performance_team::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_performance_team::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 msg_performance_team::id() const {
  return id_;
}
inline void msg_performance_team::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool msg_performance_team::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_performance_team::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_performance_team::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_performance_team::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& msg_performance_team::name() const {
  return *name_;
}
inline void msg_performance_team::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_performance_team::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_performance_team::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_performance_team::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* msg_performance_team::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_performance_team::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 3;
inline bool msg_performance_team::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_performance_team::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_performance_team::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_performance_team::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 msg_performance_team::count() const {
  return count_;
}
inline void msg_performance_team::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 count_limit = 4;
inline bool msg_performance_team::has_count_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_performance_team::set_has_count_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_performance_team::clear_has_count_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_performance_team::clear_count_limit() {
  count_limit_ = 0;
  clear_has_count_limit();
}
inline ::google::protobuf::int32 msg_performance_team::count_limit() const {
  return count_limit_;
}
inline void msg_performance_team::set_count_limit(::google::protobuf::int32 value) {
  set_has_count_limit();
  count_limit_ = value;
}

// optional int32 code_tag = 5;
inline bool msg_performance_team::has_code_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_performance_team::set_has_code_tag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_performance_team::clear_has_code_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_performance_team::clear_code_tag() {
  code_tag_ = 0;
  clear_has_code_tag();
}
inline ::google::protobuf::int32 msg_performance_team::code_tag() const {
  return code_tag_;
}
inline void msg_performance_team::set_code_tag(::google::protobuf::int32 value) {
  set_has_code_tag();
  code_tag_ = value;
}

// optional int32 ac_inc = 6;
inline bool msg_performance_team::has_ac_inc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_performance_team::set_has_ac_inc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_performance_team::clear_has_ac_inc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_performance_team::clear_ac_inc() {
  ac_inc_ = 0;
  clear_has_ac_inc();
}
inline ::google::protobuf::int32 msg_performance_team::ac_inc() const {
  return ac_inc_;
}
inline void msg_performance_team::set_ac_inc(::google::protobuf::int32 value) {
  set_has_ac_inc();
  ac_inc_ = value;
}

// repeated .client2world_protocols.msg_performance_info member_infos = 7;
inline int msg_performance_team::member_infos_size() const {
  return member_infos_.size();
}
inline void msg_performance_team::clear_member_infos() {
  member_infos_.Clear();
}
inline const ::client2world_protocols::msg_performance_info& msg_performance_team::member_infos(int index) const {
  return member_infos_.Get(index);
}
inline ::client2world_protocols::msg_performance_info* msg_performance_team::mutable_member_infos(int index) {
  return member_infos_.Mutable(index);
}
inline ::client2world_protocols::msg_performance_info* msg_performance_team::add_member_infos() {
  return member_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info >&
msg_performance_team::member_infos() const {
  return member_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info >*
msg_performance_team::mutable_member_infos() {
  return &member_infos_;
}

// -------------------------------------------------------------------

// packetc2w_performance_list

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_list];
inline bool packetc2w_performance_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_list::clear_packet_id() {
  packet_id_ = 5120;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_list::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_list::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_list_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_list_result];
inline bool packetw2c_performance_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_list_result::clear_packet_id() {
  packet_id_ = 7631;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_list_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_list_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client2world_protocols.msg_performance_info info = 2;
inline int packetw2c_performance_list_result::info_size() const {
  return info_.size();
}
inline void packetw2c_performance_list_result::clear_info() {
  info_.Clear();
}
inline const ::client2world_protocols::msg_performance_info& packetw2c_performance_list_result::info(int index) const {
  return info_.Get(index);
}
inline ::client2world_protocols::msg_performance_info* packetw2c_performance_list_result::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::client2world_protocols::msg_performance_info* packetw2c_performance_list_result::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info >&
packetw2c_performance_list_result::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_info >*
packetw2c_performance_list_result::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// packetc2w_performance_gain

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_gain];
inline bool packetc2w_performance_gain::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_gain::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_gain::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_gain::clear_packet_id() {
  packet_id_ = 5121;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_gain::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_gain::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_gain_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_gain_result];
inline bool packetw2c_performance_gain_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_gain_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_gain_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_gain_result::clear_packet_id() {
  packet_id_ = 7632;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_gain_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_gain_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_performance_gain_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_gain_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_gain_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_gain_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_performance_gain_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_performance_gain_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 gain = 3;
inline bool packetw2c_performance_gain_result::has_gain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_performance_gain_result::set_has_gain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_performance_gain_result::clear_has_gain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_performance_gain_result::clear_gain() {
  gain_ = GOOGLE_LONGLONG(0);
  clear_has_gain();
}
inline ::google::protobuf::int64 packetw2c_performance_gain_result::gain() const {
  return gain_;
}
inline void packetw2c_performance_gain_result::set_gain(::google::protobuf::int64 value) {
  set_has_gain();
  gain_ = value;
}

// -------------------------------------------------------------------

// packetc2w_performance_child

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_child];
inline bool packetc2w_performance_child::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_child::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_child::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_child::clear_packet_id() {
  packet_id_ = 5122;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_child::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_child::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 player_id = 2;
inline bool packetc2w_performance_child::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_performance_child::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_performance_child::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_performance_child::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetc2w_performance_child::player_id() const {
  return player_id_;
}
inline void packetc2w_performance_child::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_child_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_child_result];
inline bool packetw2c_performance_child_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_child_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_child_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_child_result::clear_packet_id() {
  packet_id_ = 7633;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_child_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_child_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .client2world_protocols.msg_performance_info info = 2;
inline bool packetw2c_performance_child_result::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_child_result::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_child_result::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_child_result::clear_info() {
  if (info_ != NULL) info_->::client2world_protocols::msg_performance_info::Clear();
  clear_has_info();
}
inline const ::client2world_protocols::msg_performance_info& packetw2c_performance_child_result::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client2world_protocols::msg_performance_info* packetw2c_performance_child_result::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client2world_protocols::msg_performance_info;
  return info_;
}
inline ::client2world_protocols::msg_performance_info* packetw2c_performance_child_result::release_info() {
  clear_has_info();
  ::client2world_protocols::msg_performance_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void packetw2c_performance_child_result::set_allocated_info(::client2world_protocols::msg_performance_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// packetc2w_performance_check_gain

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_check_gain];
inline bool packetc2w_performance_check_gain::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_check_gain::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_check_gain::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_check_gain::clear_packet_id() {
  packet_id_ = 5123;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_check_gain::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_check_gain::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_check_gain_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_check_gain_result];
inline bool packetw2c_performance_check_gain_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_check_gain_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_check_gain_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_check_gain_result::clear_packet_id() {
  packet_id_ = 7634;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_check_gain_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_check_gain_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 gain = 2;
inline bool packetw2c_performance_check_gain_result::has_gain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_check_gain_result::set_has_gain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_check_gain_result::clear_has_gain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_check_gain_result::clear_gain() {
  gain_ = GOOGLE_LONGLONG(0);
  clear_has_gain();
}
inline ::google::protobuf::int64 packetw2c_performance_check_gain_result::gain() const {
  return gain_;
}
inline void packetw2c_performance_check_gain_result::set_gain(::google::protobuf::int64 value) {
  set_has_gain();
  gain_ = value;
}

// -------------------------------------------------------------------

// packetc2w_performance_team_create

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_create];
inline bool packetc2w_performance_team_create::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_team_create::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_team_create::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_team_create::clear_packet_id() {
  packet_id_ = 5124;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_team_create::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_team_create::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 count = 2;
inline bool packetc2w_performance_team_create::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_performance_team_create::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_performance_team_create::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_performance_team_create::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packetc2w_performance_team_create::count() const {
  return count_;
}
inline void packetc2w_performance_team_create::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional string nick_name = 3;
inline bool packetc2w_performance_team_create::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_performance_team_create::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_performance_team_create::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_performance_team_create::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& packetc2w_performance_team_create::nick_name() const {
  return *nick_name_;
}
inline void packetc2w_performance_team_create::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void packetc2w_performance_team_create::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void packetc2w_performance_team_create::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_performance_team_create::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* packetc2w_performance_team_create::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_performance_team_create::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_performance_team_create_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_create_result];
inline bool packetw2c_performance_team_create_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_team_create_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_team_create_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_team_create_result::clear_packet_id() {
  packet_id_ = 7635;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_team_create_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_team_create_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_performance_team_create_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_team_create_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_team_create_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_team_create_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_performance_team_create_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_performance_team_create_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 team_id = 3;
inline bool packetw2c_performance_team_create_result::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_performance_team_create_result::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_performance_team_create_result::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_performance_team_create_result::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 packetw2c_performance_team_create_result::team_id() const {
  return team_id_;
}
inline void packetw2c_performance_team_create_result::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional int32 count = 4;
inline bool packetw2c_performance_team_create_result::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_performance_team_create_result::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_performance_team_create_result::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_performance_team_create_result::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packetw2c_performance_team_create_result::count() const {
  return count_;
}
inline void packetw2c_performance_team_create_result::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional string nick_name = 5;
inline bool packetw2c_performance_team_create_result::has_nick_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_performance_team_create_result::set_has_nick_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_performance_team_create_result::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_performance_team_create_result::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& packetw2c_performance_team_create_result::nick_name() const {
  return *nick_name_;
}
inline void packetw2c_performance_team_create_result::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void packetw2c_performance_team_create_result::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void packetw2c_performance_team_create_result::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_performance_team_create_result::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* packetw2c_performance_team_create_result::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_performance_team_create_result::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 code_tag = 6;
inline bool packetw2c_performance_team_create_result::has_code_tag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_performance_team_create_result::set_has_code_tag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_performance_team_create_result::clear_has_code_tag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_performance_team_create_result::clear_code_tag() {
  code_tag_ = 0;
  clear_has_code_tag();
}
inline ::google::protobuf::int32 packetw2c_performance_team_create_result::code_tag() const {
  return code_tag_;
}
inline void packetw2c_performance_team_create_result::set_code_tag(::google::protobuf::int32 value) {
  set_has_code_tag();
  code_tag_ = value;
}

// -------------------------------------------------------------------

// packetc2w_performance_team_list

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_list];
inline bool packetc2w_performance_team_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_team_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_team_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_team_list::clear_packet_id() {
  packet_id_ = 5125;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_team_list::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_team_list::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_team_list_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_list_result];
inline bool packetw2c_performance_team_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_team_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_team_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_team_list_result::clear_packet_id() {
  packet_id_ = 7636;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_team_list_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_team_list_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client2world_protocols.msg_performance_team teams = 2;
inline int packetw2c_performance_team_list_result::teams_size() const {
  return teams_.size();
}
inline void packetw2c_performance_team_list_result::clear_teams() {
  teams_.Clear();
}
inline const ::client2world_protocols::msg_performance_team& packetw2c_performance_team_list_result::teams(int index) const {
  return teams_.Get(index);
}
inline ::client2world_protocols::msg_performance_team* packetw2c_performance_team_list_result::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::client2world_protocols::msg_performance_team* packetw2c_performance_team_list_result::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_team >&
packetw2c_performance_team_list_result::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_performance_team >*
packetw2c_performance_team_list_result::mutable_teams() {
  return &teams_;
}

// -------------------------------------------------------------------

// packetc2w_performance_team_info

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_info];
inline bool packetc2w_performance_team_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_team_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_team_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_team_info::clear_packet_id() {
  packet_id_ = 5126;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_team_info::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_team_info::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 team_id = 3;
inline bool packetc2w_performance_team_info::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_performance_team_info::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_performance_team_info::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_performance_team_info::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 packetc2w_performance_team_info::team_id() const {
  return team_id_;
}
inline void packetc2w_performance_team_info::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_team_info_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_info_result];
inline bool packetw2c_performance_team_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_team_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_team_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_team_info_result::clear_packet_id() {
  packet_id_ = 7637;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_team_info_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_team_info_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .client2world_protocols.msg_performance_team team = 2;
inline bool packetw2c_performance_team_info_result::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_team_info_result::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_team_info_result::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_team_info_result::clear_team() {
  if (team_ != NULL) team_->::client2world_protocols::msg_performance_team::Clear();
  clear_has_team();
}
inline const ::client2world_protocols::msg_performance_team& packetw2c_performance_team_info_result::team() const {
  return team_ != NULL ? *team_ : *default_instance_->team_;
}
inline ::client2world_protocols::msg_performance_team* packetw2c_performance_team_info_result::mutable_team() {
  set_has_team();
  if (team_ == NULL) team_ = new ::client2world_protocols::msg_performance_team;
  return team_;
}
inline ::client2world_protocols::msg_performance_team* packetw2c_performance_team_info_result::release_team() {
  clear_has_team();
  ::client2world_protocols::msg_performance_team* temp = team_;
  team_ = NULL;
  return temp;
}
inline void packetw2c_performance_team_info_result::set_allocated_team(::client2world_protocols::msg_performance_team* team) {
  delete team_;
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
}

// -------------------------------------------------------------------

// packetc2w_performance_team_update

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_team_update];
inline bool packetc2w_performance_team_update::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_team_update::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_team_update::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_team_update::clear_packet_id() {
  packet_id_ = 5127;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_team_update::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_team_update::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 optype = 2;
inline bool packetc2w_performance_team_update::has_optype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_performance_team_update::set_has_optype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_performance_team_update::clear_has_optype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_performance_team_update::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 packetc2w_performance_team_update::optype() const {
  return optype_;
}
inline void packetc2w_performance_team_update::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
}

// optional int32 team_id = 3;
inline bool packetc2w_performance_team_update::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_performance_team_update::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_performance_team_update::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_performance_team_update::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 packetc2w_performance_team_update::team_id() const {
  return team_id_;
}
inline void packetc2w_performance_team_update::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional int32 limit = 4 [default = 0];
inline bool packetc2w_performance_team_update::has_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_performance_team_update::set_has_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_performance_team_update::clear_has_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_performance_team_update::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 packetc2w_performance_team_update::limit() const {
  return limit_;
}
inline void packetc2w_performance_team_update::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// optional string nick_name = 5;
inline bool packetc2w_performance_team_update::has_nick_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2w_performance_team_update::set_has_nick_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2w_performance_team_update::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2w_performance_team_update::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& packetc2w_performance_team_update::nick_name() const {
  return *nick_name_;
}
inline void packetc2w_performance_team_update::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void packetc2w_performance_team_update::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void packetc2w_performance_team_update::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_performance_team_update::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* packetc2w_performance_team_update::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_performance_team_update::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_performance_team_update_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_team_update_result];
inline bool packetw2c_performance_team_update_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_team_update_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_team_update_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_team_update_result::clear_packet_id() {
  packet_id_ = 7638;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_team_update_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_team_update_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_performance_team_update_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_team_update_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_team_update_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_team_update_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_performance_team_update_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_performance_team_update_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 optype = 3;
inline bool packetw2c_performance_team_update_result::has_optype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_performance_team_update_result::set_has_optype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_performance_team_update_result::clear_has_optype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_performance_team_update_result::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 packetw2c_performance_team_update_result::optype() const {
  return optype_;
}
inline void packetw2c_performance_team_update_result::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
}

// optional int32 team_id = 4;
inline bool packetw2c_performance_team_update_result::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_performance_team_update_result::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_performance_team_update_result::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_performance_team_update_result::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 packetw2c_performance_team_update_result::team_id() const {
  return team_id_;
}
inline void packetw2c_performance_team_update_result::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional int32 limit = 5 [default = 0];
inline bool packetw2c_performance_team_update_result::has_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_performance_team_update_result::set_has_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_performance_team_update_result::clear_has_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_performance_team_update_result::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 packetw2c_performance_team_update_result::limit() const {
  return limit_;
}
inline void packetw2c_performance_team_update_result::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// optional string nick_name = 6;
inline bool packetw2c_performance_team_update_result::has_nick_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_performance_team_update_result::set_has_nick_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_performance_team_update_result::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_performance_team_update_result::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& packetw2c_performance_team_update_result::nick_name() const {
  return *nick_name_;
}
inline void packetw2c_performance_team_update_result::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void packetw2c_performance_team_update_result::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void packetw2c_performance_team_update_result::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_performance_team_update_result::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* packetw2c_performance_team_update_result::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_performance_team_update_result::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 code_tag = 7;
inline bool packetw2c_performance_team_update_result::has_code_tag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetw2c_performance_team_update_result::set_has_code_tag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetw2c_performance_team_update_result::clear_has_code_tag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetw2c_performance_team_update_result::clear_code_tag() {
  code_tag_ = 0;
  clear_has_code_tag();
}
inline ::google::protobuf::int32 packetw2c_performance_team_update_result::code_tag() const {
  return code_tag_;
}
inline void packetw2c_performance_team_update_result::set_code_tag(::google::protobuf::int32 value) {
  set_has_code_tag();
  code_tag_ = value;
}

// -------------------------------------------------------------------

// packetc2w_performance_info

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info];
inline bool packetc2w_performance_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_info::clear_packet_id() {
  packet_id_ = 5128;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_info::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_info::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_info_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_result];
inline bool packetw2c_performance_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_info_result::clear_packet_id() {
  packet_id_ = 7639;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_info_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_info_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 commission_today_team = 2;
inline bool packetw2c_performance_info_result::has_commission_today_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_info_result::set_has_commission_today_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_info_result::clear_has_commission_today_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_info_result::clear_commission_today_team() {
  commission_today_team_ = GOOGLE_LONGLONG(0);
  clear_has_commission_today_team();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::commission_today_team() const {
  return commission_today_team_;
}
inline void packetw2c_performance_info_result::set_commission_today_team(::google::protobuf::int64 value) {
  set_has_commission_today_team();
  commission_today_team_ = value;
}

// optional int64 commission_today_self = 3;
inline bool packetw2c_performance_info_result::has_commission_today_self() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_performance_info_result::set_has_commission_today_self() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_performance_info_result::clear_has_commission_today_self() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_performance_info_result::clear_commission_today_self() {
  commission_today_self_ = GOOGLE_LONGLONG(0);
  clear_has_commission_today_self();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::commission_today_self() const {
  return commission_today_self_;
}
inline void packetw2c_performance_info_result::set_commission_today_self(::google::protobuf::int64 value) {
  set_has_commission_today_self();
  commission_today_self_ = value;
}

// optional int64 commission_today_agent = 4;
inline bool packetw2c_performance_info_result::has_commission_today_agent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_performance_info_result::set_has_commission_today_agent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_performance_info_result::clear_has_commission_today_agent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_performance_info_result::clear_commission_today_agent() {
  commission_today_agent_ = GOOGLE_LONGLONG(0);
  clear_has_commission_today_agent();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::commission_today_agent() const {
  return commission_today_agent_;
}
inline void packetw2c_performance_info_result::set_commission_today_agent(::google::protobuf::int64 value) {
  set_has_commission_today_agent();
  commission_today_agent_ = value;
}

// optional int64 commission_yesterday_team = 5;
inline bool packetw2c_performance_info_result::has_commission_yesterday_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_performance_info_result::set_has_commission_yesterday_team() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_performance_info_result::clear_has_commission_yesterday_team() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_performance_info_result::clear_commission_yesterday_team() {
  commission_yesterday_team_ = GOOGLE_LONGLONG(0);
  clear_has_commission_yesterday_team();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::commission_yesterday_team() const {
  return commission_yesterday_team_;
}
inline void packetw2c_performance_info_result::set_commission_yesterday_team(::google::protobuf::int64 value) {
  set_has_commission_yesterday_team();
  commission_yesterday_team_ = value;
}

// optional int64 commission_yesterday_self = 6;
inline bool packetw2c_performance_info_result::has_commission_yesterday_self() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_performance_info_result::set_has_commission_yesterday_self() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_performance_info_result::clear_has_commission_yesterday_self() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_performance_info_result::clear_commission_yesterday_self() {
  commission_yesterday_self_ = GOOGLE_LONGLONG(0);
  clear_has_commission_yesterday_self();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::commission_yesterday_self() const {
  return commission_yesterday_self_;
}
inline void packetw2c_performance_info_result::set_commission_yesterday_self(::google::protobuf::int64 value) {
  set_has_commission_yesterday_self();
  commission_yesterday_self_ = value;
}

// optional int64 commission_yesterday_agent = 7;
inline bool packetw2c_performance_info_result::has_commission_yesterday_agent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetw2c_performance_info_result::set_has_commission_yesterday_agent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetw2c_performance_info_result::clear_has_commission_yesterday_agent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetw2c_performance_info_result::clear_commission_yesterday_agent() {
  commission_yesterday_agent_ = GOOGLE_LONGLONG(0);
  clear_has_commission_yesterday_agent();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::commission_yesterday_agent() const {
  return commission_yesterday_agent_;
}
inline void packetw2c_performance_info_result::set_commission_yesterday_agent(::google::protobuf::int64 value) {
  set_has_commission_yesterday_agent();
  commission_yesterday_agent_ = value;
}

// optional int64 per_today_team = 8;
inline bool packetw2c_performance_info_result::has_per_today_team() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_today_team() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetw2c_performance_info_result::clear_has_per_today_team() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetw2c_performance_info_result::clear_per_today_team() {
  per_today_team_ = GOOGLE_LONGLONG(0);
  clear_has_per_today_team();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_today_team() const {
  return per_today_team_;
}
inline void packetw2c_performance_info_result::set_per_today_team(::google::protobuf::int64 value) {
  set_has_per_today_team();
  per_today_team_ = value;
}

// optional int64 per_today_self = 9;
inline bool packetw2c_performance_info_result::has_per_today_self() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_today_self() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetw2c_performance_info_result::clear_has_per_today_self() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetw2c_performance_info_result::clear_per_today_self() {
  per_today_self_ = GOOGLE_LONGLONG(0);
  clear_has_per_today_self();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_today_self() const {
  return per_today_self_;
}
inline void packetw2c_performance_info_result::set_per_today_self(::google::protobuf::int64 value) {
  set_has_per_today_self();
  per_today_self_ = value;
}

// optional int64 per_today_agent = 10;
inline bool packetw2c_performance_info_result::has_per_today_agent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_today_agent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void packetw2c_performance_info_result::clear_has_per_today_agent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void packetw2c_performance_info_result::clear_per_today_agent() {
  per_today_agent_ = GOOGLE_LONGLONG(0);
  clear_has_per_today_agent();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_today_agent() const {
  return per_today_agent_;
}
inline void packetw2c_performance_info_result::set_per_today_agent(::google::protobuf::int64 value) {
  set_has_per_today_agent();
  per_today_agent_ = value;
}

// optional int64 per_yesterday_team = 11;
inline bool packetw2c_performance_info_result::has_per_yesterday_team() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_yesterday_team() {
  _has_bits_[0] |= 0x00000400u;
}
inline void packetw2c_performance_info_result::clear_has_per_yesterday_team() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void packetw2c_performance_info_result::clear_per_yesterday_team() {
  per_yesterday_team_ = GOOGLE_LONGLONG(0);
  clear_has_per_yesterday_team();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_yesterday_team() const {
  return per_yesterday_team_;
}
inline void packetw2c_performance_info_result::set_per_yesterday_team(::google::protobuf::int64 value) {
  set_has_per_yesterday_team();
  per_yesterday_team_ = value;
}

// optional int64 per_yesterday_self = 12;
inline bool packetw2c_performance_info_result::has_per_yesterday_self() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_yesterday_self() {
  _has_bits_[0] |= 0x00000800u;
}
inline void packetw2c_performance_info_result::clear_has_per_yesterday_self() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void packetw2c_performance_info_result::clear_per_yesterday_self() {
  per_yesterday_self_ = GOOGLE_LONGLONG(0);
  clear_has_per_yesterday_self();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_yesterday_self() const {
  return per_yesterday_self_;
}
inline void packetw2c_performance_info_result::set_per_yesterday_self(::google::protobuf::int64 value) {
  set_has_per_yesterday_self();
  per_yesterday_self_ = value;
}

// optional int64 per_yesterday_agent = 13;
inline bool packetw2c_performance_info_result::has_per_yesterday_agent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_yesterday_agent() {
  _has_bits_[0] |= 0x00001000u;
}
inline void packetw2c_performance_info_result::clear_has_per_yesterday_agent() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void packetw2c_performance_info_result::clear_per_yesterday_agent() {
  per_yesterday_agent_ = GOOGLE_LONGLONG(0);
  clear_has_per_yesterday_agent();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_yesterday_agent() const {
  return per_yesterday_agent_;
}
inline void packetw2c_performance_info_result::set_per_yesterday_agent(::google::protobuf::int64 value) {
  set_has_per_yesterday_agent();
  per_yesterday_agent_ = value;
}

// optional int64 per_today = 14;
inline bool packetw2c_performance_info_result::has_per_today() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_today() {
  _has_bits_[0] |= 0x00002000u;
}
inline void packetw2c_performance_info_result::clear_has_per_today() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void packetw2c_performance_info_result::clear_per_today() {
  per_today_ = GOOGLE_LONGLONG(0);
  clear_has_per_today();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_today() const {
  return per_today_;
}
inline void packetw2c_performance_info_result::set_per_today(::google::protobuf::int64 value) {
  set_has_per_today();
  per_today_ = value;
}

// optional int64 per_this_week = 15;
inline bool packetw2c_performance_info_result::has_per_this_week() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_this_week() {
  _has_bits_[0] |= 0x00004000u;
}
inline void packetw2c_performance_info_result::clear_has_per_this_week() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void packetw2c_performance_info_result::clear_per_this_week() {
  per_this_week_ = GOOGLE_LONGLONG(0);
  clear_has_per_this_week();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_this_week() const {
  return per_this_week_;
}
inline void packetw2c_performance_info_result::set_per_this_week(::google::protobuf::int64 value) {
  set_has_per_this_week();
  per_this_week_ = value;
}

// optional int64 rebate_today = 16;
inline bool packetw2c_performance_info_result::has_rebate_today() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_rebate_today() {
  _has_bits_[0] |= 0x00008000u;
}
inline void packetw2c_performance_info_result::clear_has_rebate_today() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void packetw2c_performance_info_result::clear_rebate_today() {
  rebate_today_ = GOOGLE_LONGLONG(0);
  clear_has_rebate_today();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::rebate_today() const {
  return rebate_today_;
}
inline void packetw2c_performance_info_result::set_rebate_today(::google::protobuf::int64 value) {
  set_has_rebate_today();
  rebate_today_ = value;
}

// optional int64 rebate_this_week = 17;
inline bool packetw2c_performance_info_result::has_rebate_this_week() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_rebate_this_week() {
  _has_bits_[0] |= 0x00010000u;
}
inline void packetw2c_performance_info_result::clear_has_rebate_this_week() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void packetw2c_performance_info_result::clear_rebate_this_week() {
  rebate_this_week_ = GOOGLE_LONGLONG(0);
  clear_has_rebate_this_week();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::rebate_this_week() const {
  return rebate_this_week_;
}
inline void packetw2c_performance_info_result::set_rebate_this_week(::google::protobuf::int64 value) {
  set_has_rebate_this_week();
  rebate_this_week_ = value;
}

// optional int64 per_b_self_today = 18;
inline bool packetw2c_performance_info_result::has_per_b_self_today() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_b_self_today() {
  _has_bits_[0] |= 0x00020000u;
}
inline void packetw2c_performance_info_result::clear_has_per_b_self_today() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void packetw2c_performance_info_result::clear_per_b_self_today() {
  per_b_self_today_ = GOOGLE_LONGLONG(0);
  clear_has_per_b_self_today();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_b_self_today() const {
  return per_b_self_today_;
}
inline void packetw2c_performance_info_result::set_per_b_self_today(::google::protobuf::int64 value) {
  set_has_per_b_self_today();
  per_b_self_today_ = value;
}

// optional int64 per_b_child_today = 19;
inline bool packetw2c_performance_info_result::has_per_b_child_today() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_b_child_today() {
  _has_bits_[0] |= 0x00040000u;
}
inline void packetw2c_performance_info_result::clear_has_per_b_child_today() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void packetw2c_performance_info_result::clear_per_b_child_today() {
  per_b_child_today_ = GOOGLE_LONGLONG(0);
  clear_has_per_b_child_today();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_b_child_today() const {
  return per_b_child_today_;
}
inline void packetw2c_performance_info_result::set_per_b_child_today(::google::protobuf::int64 value) {
  set_has_per_b_child_today();
  per_b_child_today_ = value;
}

// optional int64 per_b_self_yesterday = 20;
inline bool packetw2c_performance_info_result::has_per_b_self_yesterday() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_b_self_yesterday() {
  _has_bits_[0] |= 0x00080000u;
}
inline void packetw2c_performance_info_result::clear_has_per_b_self_yesterday() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void packetw2c_performance_info_result::clear_per_b_self_yesterday() {
  per_b_self_yesterday_ = GOOGLE_LONGLONG(0);
  clear_has_per_b_self_yesterday();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_b_self_yesterday() const {
  return per_b_self_yesterday_;
}
inline void packetw2c_performance_info_result::set_per_b_self_yesterday(::google::protobuf::int64 value) {
  set_has_per_b_self_yesterday();
  per_b_self_yesterday_ = value;
}

// optional int64 per_b_child_yesterday = 21;
inline bool packetw2c_performance_info_result::has_per_b_child_yesterday() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_per_b_child_yesterday() {
  _has_bits_[0] |= 0x00100000u;
}
inline void packetw2c_performance_info_result::clear_has_per_b_child_yesterday() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void packetw2c_performance_info_result::clear_per_b_child_yesterday() {
  per_b_child_yesterday_ = GOOGLE_LONGLONG(0);
  clear_has_per_b_child_yesterday();
}
inline ::google::protobuf::int64 packetw2c_performance_info_result::per_b_child_yesterday() const {
  return per_b_child_yesterday_;
}
inline void packetw2c_performance_info_result::set_per_b_child_yesterday(::google::protobuf::int64 value) {
  set_has_per_b_child_yesterday();
  per_b_child_yesterday_ = value;
}

// optional int32 ac = 22;
inline bool packetw2c_performance_info_result::has_ac() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_ac() {
  _has_bits_[0] |= 0x00200000u;
}
inline void packetw2c_performance_info_result::clear_has_ac() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void packetw2c_performance_info_result::clear_ac() {
  ac_ = 0;
  clear_has_ac();
}
inline ::google::protobuf::int32 packetw2c_performance_info_result::ac() const {
  return ac_;
}
inline void packetw2c_performance_info_result::set_ac(::google::protobuf::int32 value) {
  set_has_ac();
  ac_ = value;
}

// optional int32 ac_inc = 23;
inline bool packetw2c_performance_info_result::has_ac_inc() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_ac_inc() {
  _has_bits_[0] |= 0x00400000u;
}
inline void packetw2c_performance_info_result::clear_has_ac_inc() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void packetw2c_performance_info_result::clear_ac_inc() {
  ac_inc_ = 0;
  clear_has_ac_inc();
}
inline ::google::protobuf::int32 packetw2c_performance_info_result::ac_inc() const {
  return ac_inc_;
}
inline void packetw2c_performance_info_result::set_ac_inc(::google::protobuf::int32 value) {
  set_has_ac_inc();
  ac_inc_ = value;
}

// optional int32 ac_inc_yd = 24;
inline bool packetw2c_performance_info_result::has_ac_inc_yd() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_ac_inc_yd() {
  _has_bits_[0] |= 0x00800000u;
}
inline void packetw2c_performance_info_result::clear_has_ac_inc_yd() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void packetw2c_performance_info_result::clear_ac_inc_yd() {
  ac_inc_yd_ = 0;
  clear_has_ac_inc_yd();
}
inline ::google::protobuf::int32 packetw2c_performance_info_result::ac_inc_yd() const {
  return ac_inc_yd_;
}
inline void packetw2c_performance_info_result::set_ac_inc_yd(::google::protobuf::int32 value) {
  set_has_ac_inc_yd();
  ac_inc_yd_ = value;
}

// optional int32 ac_inc_tw = 25;
inline bool packetw2c_performance_info_result::has_ac_inc_tw() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_ac_inc_tw() {
  _has_bits_[0] |= 0x01000000u;
}
inline void packetw2c_performance_info_result::clear_has_ac_inc_tw() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void packetw2c_performance_info_result::clear_ac_inc_tw() {
  ac_inc_tw_ = 0;
  clear_has_ac_inc_tw();
}
inline ::google::protobuf::int32 packetw2c_performance_info_result::ac_inc_tw() const {
  return ac_inc_tw_;
}
inline void packetw2c_performance_info_result::set_ac_inc_tw(::google::protobuf::int32 value) {
  set_has_ac_inc_tw();
  ac_inc_tw_ = value;
}

// optional int32 ac_inc_lw = 26;
inline bool packetw2c_performance_info_result::has_ac_inc_lw() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_ac_inc_lw() {
  _has_bits_[0] |= 0x02000000u;
}
inline void packetw2c_performance_info_result::clear_has_ac_inc_lw() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void packetw2c_performance_info_result::clear_ac_inc_lw() {
  ac_inc_lw_ = 0;
  clear_has_ac_inc_lw();
}
inline ::google::protobuf::int32 packetw2c_performance_info_result::ac_inc_lw() const {
  return ac_inc_lw_;
}
inline void packetw2c_performance_info_result::set_ac_inc_lw(::google::protobuf::int32 value) {
  set_has_ac_inc_lw();
  ac_inc_lw_ = value;
}

// optional int32 ac_inc_tm = 27;
inline bool packetw2c_performance_info_result::has_ac_inc_tm() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_ac_inc_tm() {
  _has_bits_[0] |= 0x04000000u;
}
inline void packetw2c_performance_info_result::clear_has_ac_inc_tm() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void packetw2c_performance_info_result::clear_ac_inc_tm() {
  ac_inc_tm_ = 0;
  clear_has_ac_inc_tm();
}
inline ::google::protobuf::int32 packetw2c_performance_info_result::ac_inc_tm() const {
  return ac_inc_tm_;
}
inline void packetw2c_performance_info_result::set_ac_inc_tm(::google::protobuf::int32 value) {
  set_has_ac_inc_tm();
  ac_inc_tm_ = value;
}

// optional int32 ac_inc_lm = 28;
inline bool packetw2c_performance_info_result::has_ac_inc_lm() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void packetw2c_performance_info_result::set_has_ac_inc_lm() {
  _has_bits_[0] |= 0x08000000u;
}
inline void packetw2c_performance_info_result::clear_has_ac_inc_lm() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void packetw2c_performance_info_result::clear_ac_inc_lm() {
  ac_inc_lm_ = 0;
  clear_has_ac_inc_lm();
}
inline ::google::protobuf::int32 packetw2c_performance_info_result::ac_inc_lm() const {
  return ac_inc_lm_;
}
inline void packetw2c_performance_info_result::set_ac_inc_lm(::google::protobuf::int32 value) {
  set_has_ac_inc_lm();
  ac_inc_lm_ = value;
}

// -------------------------------------------------------------------

// packetc2w_performance_info_self_today

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_today];
inline bool packetc2w_performance_info_self_today::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_info_self_today::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_info_self_today::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_info_self_today::clear_packet_id() {
  packet_id_ = 5129;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_info_self_today::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_info_self_today::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_info_self_today_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_today_result];
inline bool packetw2c_performance_info_self_today_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_info_self_today_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_info_self_today_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_info_self_today_result::clear_packet_id() {
  packet_id_ = 7640;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_info_self_today_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_info_self_today_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_performance_info_self_today_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_info_self_today_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_info_self_today_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_info_self_today_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_performance_info_self_today_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_performance_info_self_today_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2w_performance_info_self_yesterday

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_self_yesterday];
inline bool packetc2w_performance_info_self_yesterday::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_info_self_yesterday::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_info_self_yesterday::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_info_self_yesterday::clear_packet_id() {
  packet_id_ = 5130;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_info_self_yesterday::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_info_self_yesterday::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_info_self_yesterday_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_self_yesterday_result];
inline bool packetw2c_performance_info_self_yesterday_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_info_self_yesterday_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_info_self_yesterday_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_info_self_yesterday_result::clear_packet_id() {
  packet_id_ = 7641;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_info_self_yesterday_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_info_self_yesterday_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_performance_info_self_yesterday_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_info_self_yesterday_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_info_self_yesterday_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_info_self_yesterday_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_performance_info_self_yesterday_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_performance_info_self_yesterday_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2w_performance_info_agent_today

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_today];
inline bool packetc2w_performance_info_agent_today::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_info_agent_today::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_info_agent_today::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_info_agent_today::clear_packet_id() {
  packet_id_ = 5131;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_info_agent_today::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_info_agent_today::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_info_agent_today_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_today_result];
inline bool packetw2c_performance_info_agent_today_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_info_agent_today_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_info_agent_today_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_info_agent_today_result::clear_packet_id() {
  packet_id_ = 7642;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_info_agent_today_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_info_agent_today_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_performance_info_agent_today_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_info_agent_today_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_info_agent_today_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_info_agent_today_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_performance_info_agent_today_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_performance_info_agent_today_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2w_performance_info_agent_yesterday

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_performance_info_agent_yesterday];
inline bool packetc2w_performance_info_agent_yesterday::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_performance_info_agent_yesterday::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_performance_info_agent_yesterday::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_performance_info_agent_yesterday::clear_packet_id() {
  packet_id_ = 5132;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_performance_info_agent_yesterday::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_performance_info_agent_yesterday::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetw2c_performance_info_agent_yesterday_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_performance_info_agent_yesterday_result];
inline bool packetw2c_performance_info_agent_yesterday_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_performance_info_agent_yesterday_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_performance_info_agent_yesterday_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_performance_info_agent_yesterday_result::clear_packet_id() {
  packet_id_ = 7643;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_performance_info_agent_yesterday_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_performance_info_agent_yesterday_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_performance_info_agent_yesterday_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_performance_info_agent_yesterday_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_performance_info_agent_yesterday_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_performance_info_agent_yesterday_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_performance_info_agent_yesterday_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_performance_info_agent_yesterday_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fperformance_2eproto__INCLUDED
