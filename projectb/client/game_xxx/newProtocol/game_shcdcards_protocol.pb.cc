// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_shcdcards_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_shcdcards_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_shcdcards_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_cards_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_cards_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_banker_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_banker_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_result_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_result_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_prepare_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_prepare_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_bet_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_bet_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_sync_scene_bet_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_sync_scene_bet_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_deal_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_deal_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_scene_result_into_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_scene_result_into_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bet_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bet_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_continue_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_continue_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_continue_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_continue_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_game_control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_game_control_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_debuginfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_infoex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_infoex_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_all_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_all_bet_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fshcdcards_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_shcdcards_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  msg_cards_info_descriptor_ = file->message_type(0);
  static const int msg_cards_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cards_info, cards_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cards_info, cards_value_),
  };
  msg_cards_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_cards_info_descriptor_,
      msg_cards_info::default_instance_,
      msg_cards_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cards_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cards_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_cards_info));
  msg_player_info_descriptor_ = file->message_type(1);
  static const int msg_player_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, vip_level_),
  };
  msg_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_info_descriptor_,
      msg_player_info::default_instance_,
      msg_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_info));
  msg_banker_info_descriptor_ = file->message_type(2);
  static const int msg_banker_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_banker_info, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_banker_info, max_bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_banker_info, can_snatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_banker_info, snatch_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_banker_info, snatch_player_id_),
  };
  msg_banker_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_banker_info_descriptor_,
      msg_banker_info::default_instance_,
      msg_banker_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_banker_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_banker_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_banker_info));
  msg_bet_info_descriptor_ = file->message_type(3);
  static const int msg_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, self_bet_golds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, total_bet_golds_),
  };
  msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_info_descriptor_,
      msg_bet_info::default_instance_,
      msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_info));
  msg_result_info_descriptor_ = file->message_type(4);
  static const int msg_result_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, self_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, banker_win_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, self_win_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, self_is_bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, self_bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, self_king_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, self_bet_win_gold_),
  };
  msg_result_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_result_info_descriptor_,
      msg_result_info::default_instance_,
      msg_result_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_result_info));
  msg_scene_info_descriptor_ = file->message_type(5);
  static const int msg_scene_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, scene_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, count_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, banker_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, bet_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, cards_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, max_bet_gold_),
  };
  msg_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_scene_info_descriptor_,
      msg_scene_info::default_instance_,
      msg_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_scene_info));
  packetc2l_get_scene_info_descriptor_ = file->message_type(6);
  static const int packetc2l_get_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, packet_id_),
  };
  packetc2l_get_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_scene_info_descriptor_,
      packetc2l_get_scene_info::default_instance_,
      packetc2l_get_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_scene_info));
  packetl2c_get_scene_info_result_descriptor_ = file->message_type(7);
  static const int packetl2c_get_scene_info_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, scene_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, history_infos_),
  };
  packetl2c_get_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_scene_info_result_descriptor_,
      packetl2c_get_scene_info_result::default_instance_,
      packetl2c_get_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_scene_info_result));
  packetl2c_bc_scene_prepare_into_descriptor_ = file->message_type(8);
  static const int packetl2c_bc_scene_prepare_into_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, count_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, banker_info_),
  };
  packetl2c_bc_scene_prepare_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_prepare_into_descriptor_,
      packetl2c_bc_scene_prepare_into::default_instance_,
      packetl2c_bc_scene_prepare_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_prepare_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_prepare_into));
  packetl2c_bc_scene_bet_into_descriptor_ = file->message_type(9);
  static const int packetl2c_bc_scene_bet_into_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, count_down_),
  };
  packetl2c_bc_scene_bet_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_bet_into_descriptor_,
      packetl2c_bc_scene_bet_into::default_instance_,
      packetl2c_bc_scene_bet_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_bet_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_bet_into));
  packetl2c_bc_sync_scene_bet_into_descriptor_ = file->message_type(10);
  static const int packetl2c_bc_sync_scene_bet_into_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, bet_golds_),
  };
  packetl2c_bc_sync_scene_bet_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_sync_scene_bet_into_descriptor_,
      packetl2c_bc_sync_scene_bet_into::default_instance_,
      packetl2c_bc_sync_scene_bet_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_sync_scene_bet_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_sync_scene_bet_into));
  packetl2c_bc_scene_deal_into_descriptor_ = file->message_type(11);
  static const int packetl2c_bc_scene_deal_into_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, count_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, cards_info_),
  };
  packetl2c_bc_scene_deal_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_deal_into_descriptor_,
      packetl2c_bc_scene_deal_into::default_instance_,
      packetl2c_bc_scene_deal_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_deal_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_deal_into));
  packetl2c_bc_scene_result_into_descriptor_ = file->message_type(12);
  static const int packetl2c_bc_scene_result_into_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, count_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, result_info_),
  };
  packetl2c_bc_scene_result_into_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_scene_result_into_descriptor_,
      packetl2c_bc_scene_result_into::default_instance_,
      packetl2c_bc_scene_result_into_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_scene_result_into, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_scene_result_into));
  packetc2l_ask_bet_info_descriptor_ = file->message_type(13);
  static const int packetc2l_ask_bet_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, bet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, bet_gold_),
  };
  packetc2l_ask_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_bet_info_descriptor_,
      packetc2l_ask_bet_info::default_instance_,
      packetc2l_ask_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_bet_info));
  packetl2c_bet_info_result_descriptor_ = file->message_type(14);
  static const int packetl2c_bet_info_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, bet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, bet_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, self_gold_),
  };
  packetl2c_bet_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bet_info_result_descriptor_,
      packetl2c_bet_info_result::default_instance_,
      packetl2c_bet_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bet_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bet_info_result));
  packetc2l_ask_continue_bet_descriptor_ = file->message_type(15);
  static const int packetc2l_ask_continue_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_continue_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_continue_bet, bet_golds_),
  };
  packetc2l_ask_continue_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_continue_bet_descriptor_,
      packetc2l_ask_continue_bet::default_instance_,
      packetc2l_ask_continue_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_continue_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_continue_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_continue_bet));
  packetl2c_continue_bet_result_descriptor_ = file->message_type(16);
  static const int packetl2c_continue_bet_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, bet_golds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, self_gold_),
  };
  packetl2c_continue_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_continue_bet_result_descriptor_,
      packetl2c_continue_bet_result::default_instance_,
      packetl2c_continue_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_continue_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_continue_bet_result));
  packetc2l_game_control_descriptor_ = file->message_type(17);
  static const int packetc2l_game_control_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, control_),
  };
  packetc2l_game_control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_game_control_descriptor_,
      packetc2l_game_control::default_instance_,
      packetc2l_game_control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_game_control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_game_control));
  packetl2c_bc_debuginfo_descriptor_ = file->message_type(18);
  static const int packetl2c_bc_debuginfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, total_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, debug_infos_),
  };
  packetl2c_bc_debuginfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_debuginfo_descriptor_,
      packetl2c_bc_debuginfo::default_instance_,
      packetl2c_bc_debuginfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_debuginfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_debuginfo));
  msg_bet_infoex_descriptor_ = file->message_type(19);
  static const int msg_bet_infoex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_infoex, bet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_infoex, bet_count_),
  };
  msg_bet_infoex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_infoex_descriptor_,
      msg_bet_infoex::default_instance_,
      msg_bet_infoex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_infoex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_infoex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_infoex));
  gm_msg_bet_info_descriptor_ = file->message_type(20);
  static const int gm_msg_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, bet_info_),
  };
  gm_msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_msg_bet_info_descriptor_,
      gm_msg_bet_info::default_instance_,
      gm_msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_msg_bet_info));
  packetl2c_notice_all_bet_info_descriptor_ = file->message_type(21);
  static const int packetl2c_notice_all_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, bet_info_list_),
  };
  packetl2c_notice_all_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_all_bet_info_descriptor_,
      packetl2c_notice_all_bet_info::default_instance_,
      packetl2c_notice_all_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_all_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_all_bet_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fshcdcards_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_cards_info_descriptor_, &msg_cards_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_info_descriptor_, &msg_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_banker_info_descriptor_, &msg_banker_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_info_descriptor_, &msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_result_info_descriptor_, &msg_result_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_scene_info_descriptor_, &msg_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_scene_info_descriptor_, &packetc2l_get_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_scene_info_result_descriptor_, &packetl2c_get_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_prepare_into_descriptor_, &packetl2c_bc_scene_prepare_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_bet_into_descriptor_, &packetl2c_bc_scene_bet_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_sync_scene_bet_into_descriptor_, &packetl2c_bc_sync_scene_bet_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_deal_into_descriptor_, &packetl2c_bc_scene_deal_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_scene_result_into_descriptor_, &packetl2c_bc_scene_result_into::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_bet_info_descriptor_, &packetc2l_ask_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bet_info_result_descriptor_, &packetl2c_bet_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_continue_bet_descriptor_, &packetc2l_ask_continue_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_continue_bet_result_descriptor_, &packetl2c_continue_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_game_control_descriptor_, &packetc2l_game_control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_debuginfo_descriptor_, &packetl2c_bc_debuginfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_infoex_descriptor_, &msg_bet_infoex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_msg_bet_info_descriptor_, &gm_msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_all_bet_info_descriptor_, &packetl2c_notice_all_bet_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fshcdcards_5fprotocol_2eproto() {
  delete msg_cards_info::default_instance_;
  delete msg_cards_info_reflection_;
  delete msg_player_info::default_instance_;
  delete msg_player_info_reflection_;
  delete msg_banker_info::default_instance_;
  delete msg_banker_info_reflection_;
  delete msg_bet_info::default_instance_;
  delete msg_bet_info_reflection_;
  delete msg_result_info::default_instance_;
  delete msg_result_info_reflection_;
  delete msg_scene_info::default_instance_;
  delete msg_scene_info_reflection_;
  delete packetc2l_get_scene_info::default_instance_;
  delete packetc2l_get_scene_info_reflection_;
  delete packetl2c_get_scene_info_result::default_instance_;
  delete packetl2c_get_scene_info_result_reflection_;
  delete packetl2c_bc_scene_prepare_into::default_instance_;
  delete packetl2c_bc_scene_prepare_into_reflection_;
  delete packetl2c_bc_scene_bet_into::default_instance_;
  delete packetl2c_bc_scene_bet_into_reflection_;
  delete packetl2c_bc_sync_scene_bet_into::default_instance_;
  delete packetl2c_bc_sync_scene_bet_into_reflection_;
  delete packetl2c_bc_scene_deal_into::default_instance_;
  delete packetl2c_bc_scene_deal_into_reflection_;
  delete packetl2c_bc_scene_result_into::default_instance_;
  delete packetl2c_bc_scene_result_into_reflection_;
  delete packetc2l_ask_bet_info::default_instance_;
  delete packetc2l_ask_bet_info_reflection_;
  delete packetl2c_bet_info_result::default_instance_;
  delete packetl2c_bet_info_result_reflection_;
  delete packetc2l_ask_continue_bet::default_instance_;
  delete packetc2l_ask_continue_bet_reflection_;
  delete packetl2c_continue_bet_result::default_instance_;
  delete packetl2c_continue_bet_result_reflection_;
  delete packetc2l_game_control::default_instance_;
  delete packetc2l_game_control_reflection_;
  delete packetl2c_bc_debuginfo::default_instance_;
  delete packetl2c_bc_debuginfo_reflection_;
  delete msg_bet_infoex::default_instance_;
  delete msg_bet_infoex_reflection_;
  delete gm_msg_bet_info::default_instance_;
  delete gm_msg_bet_info_reflection_;
  delete packetl2c_notice_all_bet_info::default_instance_;
  delete packetl2c_notice_all_bet_info_reflection_;
}

void protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_shcdcards_protocols::protobuf_AddDesc_game_5fshcdcards_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035game_shcdcards_protocol.proto\022\030game_sh"
    "cdcards_protocols\032\030game_shcdcards_def.pr"
    "oto\032\022msg_type_def.proto\"9\n\016msg_cards_inf"
    "o\022\022\n\ncards_type\030\001 \001(\005\022\023\n\013cards_value\030\002 \001"
    "(\005\"\236\001\n\017msg_player_info\022\021\n\tplayer_id\030\001 \001("
    "\005\022\023\n\013player_name\030\002 \001(\t\022\022\n\nhead_frame\030\003 \001"
    "(\005\022\023\n\013head_custom\030\004 \001(\t\022\023\n\013player_gold\030\005"
    " \001(\003\022\022\n\nplayer_sex\030\006 \001(\005\022\021\n\tvip_level\030\007 "
    "\001(\005\"\254\001\n\017msg_banker_info\022>\n\013player_info\030\001"
    " \001(\0132).game_shcdcards_protocols.msg_play"
    "er_info\022\024\n\014max_bet_gold\030\002 \001(\003\022\022\n\ncan_sna"
    "tch\030\003 \001(\010\022\025\n\rsnatch_ticket\030\004 \001(\005\022\030\n\020snat"
    "ch_player_id\030\005 \001(\005\"\?\n\014msg_bet_info\022\026\n\016se"
    "lf_bet_golds\030\001 \003(\003\022\027\n\017total_bet_golds\030\002 "
    "\003(\003\"\263\001\n\017msg_result_info\022\021\n\tself_gold\030\001 \001"
    "(\003\022\027\n\017banker_win_gold\030\002 \001(\003\022\025\n\rself_win_"
    "gold\030\003 \001(\003\022\023\n\013self_is_bet\030\004 \001(\010\022\025\n\rself_"
    "bet_gold\030\005 \001(\003\022\026\n\016self_king_gold\030\006 \001(\003\022\031"
    "\n\021self_bet_win_gold\030\007 \001(\003\"\327\002\n\016msg_scene_"
    "info\022\016\n\006roomid\030\001 \001(\005\022\023\n\013scene_state\030\002 \001("
    "\005\022\022\n\ncount_down\030\003 \001(\005\022>\n\013banker_info\030\004 \001"
    "(\0132).game_shcdcards_protocols.msg_banker"
    "_info\0228\n\010bet_info\030\005 \001(\0132&.game_shcdcards"
    "_protocols.msg_bet_info\022<\n\ncards_info\030\006 "
    "\001(\0132(.game_shcdcards_protocols.msg_cards"
    "_info\022>\n\013result_info\030\007 \001(\0132).game_shcdca"
    "rds_protocols.msg_result_info\022\024\n\014max_bet"
    "_gold\030\010 \001(\003\"t\n\030packetc2l_get_scene_info\022"
    "X\n\tpacket_id\030\001 \001(\0162+.game_shcdcards_prot"
    "ocols.e_server_msg_type:\030e_mst_c2l_get_s"
    "cene_info\"\201\002\n\037packetl2c_get_scene_info_r"
    "esult\022_\n\tpacket_id\030\001 \001(\0162+.game_shcdcard"
    "s_protocols.e_server_msg_type:\037e_mst_l2c"
    "_get_scene_info_result\022<\n\nscene_info\030\002 \001"
    "(\0132(.game_shcdcards_protocols.msg_scene_"
    "info\022\?\n\rhistory_infos\030\003 \003(\0132(.game_shcdc"
    "ards_protocols.msg_cards_info\"\326\001\n\037packet"
    "l2c_bc_scene_prepare_into\022_\n\tpacket_id\030\001"
    " \001(\0162+.game_shcdcards_protocols.e_server"
    "_msg_type:\037e_mst_l2c_bc_scene_prepare_in"
    "to\022\022\n\ncount_down\030\002 \001(\005\022>\n\013banker_info\030\003 "
    "\001(\0132).game_shcdcards_protocols.msg_banke"
    "r_info\"\216\001\n\033packetl2c_bc_scene_bet_into\022["
    "\n\tpacket_id\030\001 \001(\0162+.game_shcdcards_proto"
    "cols.e_server_msg_type:\033e_mst_l2c_bc_sce"
    "ne_bet_into\022\022\n\ncount_down\030\002 \001(\005\"\227\001\n pack"
    "etl2c_bc_sync_scene_bet_into\022`\n\tpacket_i"
    "d\030\001 \001(\0162+.game_shcdcards_protocols.e_ser"
    "ver_msg_type: e_mst_l2c_bc_sync_scene_be"
    "t_into\022\021\n\tbet_golds\030\004 \003(\005\"\316\001\n\034packetl2c_"
    "bc_scene_deal_into\022\\\n\tpacket_id\030\001 \001(\0162+."
    "game_shcdcards_protocols.e_server_msg_ty"
    "pe:\034e_mst_l2c_bc_scene_deal_into\022\022\n\ncoun"
    "t_down\030\002 \001(\005\022<\n\ncards_info\030\003 \001(\0132(.game_"
    "shcdcards_protocols.msg_cards_info\"\324\001\n\036p"
    "acketl2c_bc_scene_result_into\022^\n\tpacket_"
    "id\030\001 \001(\0162+.game_shcdcards_protocols.e_se"
    "rver_msg_type:\036e_mst_l2c_bc_scene_result"
    "_into\022\022\n\ncount_down\030\002 \001(\005\022>\n\013result_info"
    "\030\003 \001(\0132).game_shcdcards_protocols.msg_re"
    "sult_info\"\225\001\n\026packetc2l_ask_bet_info\022V\n\t"
    "packet_id\030\001 \001(\0162+.game_shcdcards_protoco"
    "ls.e_server_msg_type:\026e_mst_c2l_ask_bet_"
    "info\022\021\n\tbet_index\030\002 \001(\005\022\020\n\010bet_gold\030\003 \001("
    "\005\"\352\001\n\031packetl2c_bet_info_result\022Y\n\tpacke"
    "t_id\030\001 \001(\0162+.game_shcdcards_protocols.e_"
    "server_msg_type:\031e_mst_l2c_bet_info_resu"
    "lt\022:\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_"
    "result_def:\ne_rmt_fail\022\021\n\tbet_index\030\003 \001("
    "\005\022\020\n\010bet_gold\030\004 \001(\005\022\021\n\tself_gold\030\005 \001(\003\"\213"
    "\001\n\032packetc2l_ask_continue_bet\022Z\n\tpacket_"
    "id\030\001 \001(\0162+.game_shcdcards_protocols.e_se"
    "rver_msg_type:\032e_mst_c2l_ask_continue_be"
    "t\022\021\n\tbet_golds\030\002 \003(\005\"\340\001\n\035packetl2c_conti"
    "nue_bet_result\022]\n\tpacket_id\030\001 \001(\0162+.game"
    "_shcdcards_protocols.e_server_msg_type:\035"
    "e_mst_l2c_continue_bet_result\022:\n\006result\030"
    "\002 \001(\0162\036.msg_type_def.e_msg_result_def:\ne"
    "_rmt_fail\022\021\n\tbet_golds\030\003 \003(\005\022\021\n\tself_gol"
    "d\030\004 \001(\003\"\204\001\n\026packetc2l_game_control\022V\n\tpa"
    "cket_id\030\001 \001(\0162+.game_shcdcards_protocols"
    ".e_server_msg_type:\026e_mst_c2l_game_contr"
    "ol\022\022\n\007control\030\002 \001(\005:\0010\"\340\001\n\026packetl2c_bc_"
    "debuginfo\022V\n\tpacket_id\030\001 \001(\0162+.game_shcd"
    "cards_protocols.e_server_msg_type:\026e_mst"
    "_l2c_bc_debuginfo\022\021\n\tplayer_id\030\002 \001(\005\022\027\n\014"
    "total_profit\030\003 \001(\003:\0010\022\026\n\013total_stock\030\004 \001"
    "(\003:\0010\022\025\n\ntotal_Rate\030\006 \001(\003:\0010\022\023\n\013debug_in"
    "fos\030\005 \001(\t\"6\n\016msg_bet_infoex\022\021\n\tbet_index"
    "\030\001 \001(\005\022\021\n\tbet_count\030\002 \001(\003\"\215\001\n\017gm_msg_bet"
    "_info\022>\n\013player_info\030\001 \001(\0132).game_shcdca"
    "rds_protocols.msg_player_info\022:\n\010bet_inf"
    "o\030\002 \003(\0132(.game_shcdcards_protocols.msg_b"
    "et_infoex\"\303\001\n\035packetl2c_notice_all_bet_i"
    "nfo\022`\n\tpacket_id\030\001 \001(\0162+.game_shcdcards_"
    "protocols.e_server_msg_type: e_mst_l2c_n"
    "otice_gm_all_bet_info\022@\n\rbet_info_list\030\002"
    " \003(\0132).game_shcdcards_protocols.gm_msg_b"
    "et_info", 3927);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_shcdcards_protocol.proto", &protobuf_RegisterTypes);
  msg_cards_info::default_instance_ = new msg_cards_info();
  msg_player_info::default_instance_ = new msg_player_info();
  msg_banker_info::default_instance_ = new msg_banker_info();
  msg_bet_info::default_instance_ = new msg_bet_info();
  msg_result_info::default_instance_ = new msg_result_info();
  msg_scene_info::default_instance_ = new msg_scene_info();
  packetc2l_get_scene_info::default_instance_ = new packetc2l_get_scene_info();
  packetl2c_get_scene_info_result::default_instance_ = new packetl2c_get_scene_info_result();
  packetl2c_bc_scene_prepare_into::default_instance_ = new packetl2c_bc_scene_prepare_into();
  packetl2c_bc_scene_bet_into::default_instance_ = new packetl2c_bc_scene_bet_into();
  packetl2c_bc_sync_scene_bet_into::default_instance_ = new packetl2c_bc_sync_scene_bet_into();
  packetl2c_bc_scene_deal_into::default_instance_ = new packetl2c_bc_scene_deal_into();
  packetl2c_bc_scene_result_into::default_instance_ = new packetl2c_bc_scene_result_into();
  packetc2l_ask_bet_info::default_instance_ = new packetc2l_ask_bet_info();
  packetl2c_bet_info_result::default_instance_ = new packetl2c_bet_info_result();
  packetc2l_ask_continue_bet::default_instance_ = new packetc2l_ask_continue_bet();
  packetl2c_continue_bet_result::default_instance_ = new packetl2c_continue_bet_result();
  packetc2l_game_control::default_instance_ = new packetc2l_game_control();
  packetl2c_bc_debuginfo::default_instance_ = new packetl2c_bc_debuginfo();
  msg_bet_infoex::default_instance_ = new msg_bet_infoex();
  gm_msg_bet_info::default_instance_ = new gm_msg_bet_info();
  packetl2c_notice_all_bet_info::default_instance_ = new packetl2c_notice_all_bet_info();
  msg_cards_info::default_instance_->InitAsDefaultInstance();
  msg_player_info::default_instance_->InitAsDefaultInstance();
  msg_banker_info::default_instance_->InitAsDefaultInstance();
  msg_bet_info::default_instance_->InitAsDefaultInstance();
  msg_result_info::default_instance_->InitAsDefaultInstance();
  msg_scene_info::default_instance_->InitAsDefaultInstance();
  packetc2l_get_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_prepare_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_bet_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_sync_scene_bet_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_deal_into::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_scene_result_into::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bet_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_continue_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_continue_bet_result::default_instance_->InitAsDefaultInstance();
  packetc2l_game_control::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_debuginfo::default_instance_->InitAsDefaultInstance();
  msg_bet_infoex::default_instance_->InitAsDefaultInstance();
  gm_msg_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_all_bet_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fshcdcards_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fshcdcards_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fshcdcards_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fshcdcards_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_cards_info::kCardsTypeFieldNumber;
const int msg_cards_info::kCardsValueFieldNumber;
#endif  // !_MSC_VER

msg_cards_info::msg_cards_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_cards_info::InitAsDefaultInstance() {
}

msg_cards_info::msg_cards_info(const msg_cards_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_cards_info::SharedCtor() {
  _cached_size_ = 0;
  cards_type_ = 0;
  cards_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_cards_info::~msg_cards_info() {
  SharedDtor();
}

void msg_cards_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_cards_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_cards_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_cards_info_descriptor_;
}

const msg_cards_info& msg_cards_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

msg_cards_info* msg_cards_info::default_instance_ = NULL;

msg_cards_info* msg_cards_info::New() const {
  return new msg_cards_info;
}

void msg_cards_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cards_type_ = 0;
    cards_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_cards_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cards_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_type_)));
          set_has_cards_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards_value;
        break;
      }

      // optional int32 cards_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_value_)));
          set_has_cards_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_cards_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cards_type = 1;
  if (has_cards_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cards_type(), output);
  }

  // optional int32 cards_value = 2;
  if (has_cards_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cards_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_cards_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cards_type = 1;
  if (has_cards_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cards_type(), target);
  }

  // optional int32 cards_value = 2;
  if (has_cards_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cards_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_cards_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cards_type = 1;
    if (has_cards_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_type());
    }

    // optional int32 cards_value = 2;
    if (has_cards_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_cards_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_cards_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_cards_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_cards_info::MergeFrom(const msg_cards_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cards_type()) {
      set_cards_type(from.cards_type());
    }
    if (from.has_cards_value()) {
      set_cards_value(from.cards_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_cards_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_cards_info::CopyFrom(const msg_cards_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_cards_info::IsInitialized() const {

  return true;
}

void msg_cards_info::Swap(msg_cards_info* other) {
  if (other != this) {
    std::swap(cards_type_, other->cards_type_);
    std::swap(cards_value_, other->cards_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_cards_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_cards_info_descriptor_;
  metadata.reflection = msg_cards_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_info::kPlayerIdFieldNumber;
const int msg_player_info::kPlayerNameFieldNumber;
const int msg_player_info::kHeadFrameFieldNumber;
const int msg_player_info::kHeadCustomFieldNumber;
const int msg_player_info::kPlayerGoldFieldNumber;
const int msg_player_info::kPlayerSexFieldNumber;
const int msg_player_info::kVipLevelFieldNumber;
#endif  // !_MSC_VER

msg_player_info::msg_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_info::InitAsDefaultInstance() {
}

msg_player_info::msg_player_info(const msg_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_frame_ = 0;
  head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  vip_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_info::~msg_player_info() {
  SharedDtor();
}

void msg_player_info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_info_descriptor_;
}

const msg_player_info& msg_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

msg_player_info* msg_player_info::default_instance_ = NULL;

msg_player_info* msg_player_info::New() const {
  return new msg_player_info;
}

void msg_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    head_frame_ = 0;
    if (has_head_custom()) {
      if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
        head_custom_->clear();
      }
    }
    player_gold_ = GOOGLE_LONGLONG(0);
    player_sex_ = 0;
    vip_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_frame;
        break;
      }

      // optional int32 head_frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_frame_)));
          set_has_head_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head_custom;
        break;
      }

      // optional string head_custom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head_custom().data(), this->head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->head_frame(), output);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_sex(), output);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional int32 head_frame = 3;
  if (has_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->head_frame(), target);
  }

  // optional string head_custom = 4;
  if (has_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_custom().data(), this->head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_sex(), target);
  }

  // optional int32 vip_level = 7;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional int32 head_frame = 3;
    if (has_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_frame());
    }

    // optional string head_custom = 4;
    if (has_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 6;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 vip_level = 7;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_info::MergeFrom(const msg_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_head_frame()) {
      set_head_frame(from.head_frame());
    }
    if (from.has_head_custom()) {
      set_head_custom(from.head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_info::CopyFrom(const msg_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_info::IsInitialized() const {

  return true;
}

void msg_player_info::Swap(msg_player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(head_frame_, other->head_frame_);
    std::swap(head_custom_, other->head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_info_descriptor_;
  metadata.reflection = msg_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_banker_info::kPlayerInfoFieldNumber;
const int msg_banker_info::kMaxBetGoldFieldNumber;
const int msg_banker_info::kCanSnatchFieldNumber;
const int msg_banker_info::kSnatchTicketFieldNumber;
const int msg_banker_info::kSnatchPlayerIdFieldNumber;
#endif  // !_MSC_VER

msg_banker_info::msg_banker_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_banker_info::InitAsDefaultInstance() {
  player_info_ = const_cast< ::game_shcdcards_protocols::msg_player_info*>(&::game_shcdcards_protocols::msg_player_info::default_instance());
}

msg_banker_info::msg_banker_info(const msg_banker_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_banker_info::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  max_bet_gold_ = GOOGLE_LONGLONG(0);
  can_snatch_ = false;
  snatch_ticket_ = 0;
  snatch_player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_banker_info::~msg_banker_info() {
  SharedDtor();
}

void msg_banker_info::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void msg_banker_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_banker_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_banker_info_descriptor_;
}

const msg_banker_info& msg_banker_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

msg_banker_info* msg_banker_info::default_instance_ = NULL;

msg_banker_info* msg_banker_info::New() const {
  return new msg_banker_info;
}

void msg_banker_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::game_shcdcards_protocols::msg_player_info::Clear();
    }
    max_bet_gold_ = GOOGLE_LONGLONG(0);
    can_snatch_ = false;
    snatch_ticket_ = 0;
    snatch_player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_banker_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.msg_player_info player_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_bet_gold;
        break;
      }

      // optional int64 max_bet_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_bet_gold_)));
          set_has_max_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_snatch;
        break;
      }

      // optional bool can_snatch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_snatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_snatch_)));
          set_has_can_snatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_snatch_ticket;
        break;
      }

      // optional int32 snatch_ticket = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snatch_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snatch_ticket_)));
          set_has_snatch_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_snatch_player_id;
        break;
      }

      // optional int32 snatch_player_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snatch_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snatch_player_id_)));
          set_has_snatch_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_banker_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.msg_player_info player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // optional int64 max_bet_gold = 2;
  if (has_max_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_bet_gold(), output);
  }

  // optional bool can_snatch = 3;
  if (has_can_snatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_snatch(), output);
  }

  // optional int32 snatch_ticket = 4;
  if (has_snatch_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->snatch_ticket(), output);
  }

  // optional int32 snatch_player_id = 5;
  if (has_snatch_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->snatch_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_banker_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.msg_player_info player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // optional int64 max_bet_gold = 2;
  if (has_max_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_bet_gold(), target);
  }

  // optional bool can_snatch = 3;
  if (has_can_snatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_snatch(), target);
  }

  // optional int32 snatch_ticket = 4;
  if (has_snatch_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->snatch_ticket(), target);
  }

  // optional int32 snatch_player_id = 5;
  if (has_snatch_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->snatch_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_banker_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.msg_player_info player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

    // optional int64 max_bet_gold = 2;
    if (has_max_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_bet_gold());
    }

    // optional bool can_snatch = 3;
    if (has_can_snatch()) {
      total_size += 1 + 1;
    }

    // optional int32 snatch_ticket = 4;
    if (has_snatch_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snatch_ticket());
    }

    // optional int32 snatch_player_id = 5;
    if (has_snatch_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snatch_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_banker_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_banker_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_banker_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_banker_info::MergeFrom(const msg_banker_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::game_shcdcards_protocols::msg_player_info::MergeFrom(from.player_info());
    }
    if (from.has_max_bet_gold()) {
      set_max_bet_gold(from.max_bet_gold());
    }
    if (from.has_can_snatch()) {
      set_can_snatch(from.can_snatch());
    }
    if (from.has_snatch_ticket()) {
      set_snatch_ticket(from.snatch_ticket());
    }
    if (from.has_snatch_player_id()) {
      set_snatch_player_id(from.snatch_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_banker_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_banker_info::CopyFrom(const msg_banker_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_banker_info::IsInitialized() const {

  return true;
}

void msg_banker_info::Swap(msg_banker_info* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    std::swap(max_bet_gold_, other->max_bet_gold_);
    std::swap(can_snatch_, other->can_snatch_);
    std::swap(snatch_ticket_, other->snatch_ticket_);
    std::swap(snatch_player_id_, other->snatch_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_banker_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_banker_info_descriptor_;
  metadata.reflection = msg_banker_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_info::kSelfBetGoldsFieldNumber;
const int msg_bet_info::kTotalBetGoldsFieldNumber;
#endif  // !_MSC_VER

msg_bet_info::msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_bet_info::InitAsDefaultInstance() {
}

msg_bet_info::msg_bet_info(const msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_info::~msg_bet_info() {
  SharedDtor();
}

void msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_info_descriptor_;
}

const msg_bet_info& msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

msg_bet_info* msg_bet_info::default_instance_ = NULL;

msg_bet_info* msg_bet_info::New() const {
  return new msg_bet_info;
}

void msg_bet_info::Clear() {
  self_bet_golds_.Clear();
  total_bet_golds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 self_bet_golds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_bet_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_self_bet_golds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_self_bet_golds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_self_bet_golds;
        if (input->ExpectTag(16)) goto parse_total_bet_golds;
        break;
      }

      // repeated int64 total_bet_golds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bet_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_total_bet_golds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_total_bet_golds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_bet_golds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 self_bet_golds = 1;
  for (int i = 0; i < this->self_bet_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->self_bet_golds(i), output);
  }

  // repeated int64 total_bet_golds = 2;
  for (int i = 0; i < this->total_bet_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->total_bet_golds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 self_bet_golds = 1;
  for (int i = 0; i < this->self_bet_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->self_bet_golds(i), target);
  }

  // repeated int64 total_bet_golds = 2;
  for (int i = 0; i < this->total_bet_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->total_bet_golds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_bet_info::ByteSize() const {
  int total_size = 0;

  // repeated int64 self_bet_golds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->self_bet_golds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->self_bet_golds(i));
    }
    total_size += 1 * this->self_bet_golds_size() + data_size;
  }

  // repeated int64 total_bet_golds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_bet_golds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->total_bet_golds(i));
    }
    total_size += 1 * this->total_bet_golds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_info::MergeFrom(const msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  self_bet_golds_.MergeFrom(from.self_bet_golds_);
  total_bet_golds_.MergeFrom(from.total_bet_golds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_info::CopyFrom(const msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_info::IsInitialized() const {

  return true;
}

void msg_bet_info::Swap(msg_bet_info* other) {
  if (other != this) {
    self_bet_golds_.Swap(&other->self_bet_golds_);
    total_bet_golds_.Swap(&other->total_bet_golds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_info_descriptor_;
  metadata.reflection = msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_result_info::kSelfGoldFieldNumber;
const int msg_result_info::kBankerWinGoldFieldNumber;
const int msg_result_info::kSelfWinGoldFieldNumber;
const int msg_result_info::kSelfIsBetFieldNumber;
const int msg_result_info::kSelfBetGoldFieldNumber;
const int msg_result_info::kSelfKingGoldFieldNumber;
const int msg_result_info::kSelfBetWinGoldFieldNumber;
#endif  // !_MSC_VER

msg_result_info::msg_result_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_result_info::InitAsDefaultInstance() {
}

msg_result_info::msg_result_info(const msg_result_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_result_info::SharedCtor() {
  _cached_size_ = 0;
  self_gold_ = GOOGLE_LONGLONG(0);
  banker_win_gold_ = GOOGLE_LONGLONG(0);
  self_win_gold_ = GOOGLE_LONGLONG(0);
  self_is_bet_ = false;
  self_bet_gold_ = GOOGLE_LONGLONG(0);
  self_king_gold_ = GOOGLE_LONGLONG(0);
  self_bet_win_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_result_info::~msg_result_info() {
  SharedDtor();
}

void msg_result_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_result_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_result_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_result_info_descriptor_;
}

const msg_result_info& msg_result_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

msg_result_info* msg_result_info::default_instance_ = NULL;

msg_result_info* msg_result_info::New() const {
  return new msg_result_info;
}

void msg_result_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    self_gold_ = GOOGLE_LONGLONG(0);
    banker_win_gold_ = GOOGLE_LONGLONG(0);
    self_win_gold_ = GOOGLE_LONGLONG(0);
    self_is_bet_ = false;
    self_bet_gold_ = GOOGLE_LONGLONG(0);
    self_king_gold_ = GOOGLE_LONGLONG(0);
    self_bet_win_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_result_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 self_gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_gold_)));
          set_has_self_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_win_gold;
        break;
      }

      // optional int64 banker_win_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_win_gold_)));
          set_has_banker_win_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_self_win_gold;
        break;
      }

      // optional int64 self_win_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_win_gold_)));
          set_has_self_win_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_is_bet;
        break;
      }

      // optional bool self_is_bet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_is_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_is_bet_)));
          set_has_self_is_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_self_bet_gold;
        break;
      }

      // optional int64 self_bet_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_bet_gold_)));
          set_has_self_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_self_king_gold;
        break;
      }

      // optional int64 self_king_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_king_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_king_gold_)));
          set_has_self_king_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_self_bet_win_gold;
        break;
      }

      // optional int64 self_bet_win_gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_bet_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_bet_win_gold_)));
          set_has_self_bet_win_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_result_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 self_gold = 1;
  if (has_self_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->self_gold(), output);
  }

  // optional int64 banker_win_gold = 2;
  if (has_banker_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->banker_win_gold(), output);
  }

  // optional int64 self_win_gold = 3;
  if (has_self_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->self_win_gold(), output);
  }

  // optional bool self_is_bet = 4;
  if (has_self_is_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->self_is_bet(), output);
  }

  // optional int64 self_bet_gold = 5;
  if (has_self_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->self_bet_gold(), output);
  }

  // optional int64 self_king_gold = 6;
  if (has_self_king_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->self_king_gold(), output);
  }

  // optional int64 self_bet_win_gold = 7;
  if (has_self_bet_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->self_bet_win_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_result_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 self_gold = 1;
  if (has_self_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->self_gold(), target);
  }

  // optional int64 banker_win_gold = 2;
  if (has_banker_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->banker_win_gold(), target);
  }

  // optional int64 self_win_gold = 3;
  if (has_self_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->self_win_gold(), target);
  }

  // optional bool self_is_bet = 4;
  if (has_self_is_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->self_is_bet(), target);
  }

  // optional int64 self_bet_gold = 5;
  if (has_self_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->self_bet_gold(), target);
  }

  // optional int64 self_king_gold = 6;
  if (has_self_king_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->self_king_gold(), target);
  }

  // optional int64 self_bet_win_gold = 7;
  if (has_self_bet_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->self_bet_win_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_result_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 self_gold = 1;
    if (has_self_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_gold());
    }

    // optional int64 banker_win_gold = 2;
    if (has_banker_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_win_gold());
    }

    // optional int64 self_win_gold = 3;
    if (has_self_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_win_gold());
    }

    // optional bool self_is_bet = 4;
    if (has_self_is_bet()) {
      total_size += 1 + 1;
    }

    // optional int64 self_bet_gold = 5;
    if (has_self_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_bet_gold());
    }

    // optional int64 self_king_gold = 6;
    if (has_self_king_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_king_gold());
    }

    // optional int64 self_bet_win_gold = 7;
    if (has_self_bet_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_bet_win_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_result_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_result_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_result_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_result_info::MergeFrom(const msg_result_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_gold()) {
      set_self_gold(from.self_gold());
    }
    if (from.has_banker_win_gold()) {
      set_banker_win_gold(from.banker_win_gold());
    }
    if (from.has_self_win_gold()) {
      set_self_win_gold(from.self_win_gold());
    }
    if (from.has_self_is_bet()) {
      set_self_is_bet(from.self_is_bet());
    }
    if (from.has_self_bet_gold()) {
      set_self_bet_gold(from.self_bet_gold());
    }
    if (from.has_self_king_gold()) {
      set_self_king_gold(from.self_king_gold());
    }
    if (from.has_self_bet_win_gold()) {
      set_self_bet_win_gold(from.self_bet_win_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_result_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_result_info::CopyFrom(const msg_result_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_result_info::IsInitialized() const {

  return true;
}

void msg_result_info::Swap(msg_result_info* other) {
  if (other != this) {
    std::swap(self_gold_, other->self_gold_);
    std::swap(banker_win_gold_, other->banker_win_gold_);
    std::swap(self_win_gold_, other->self_win_gold_);
    std::swap(self_is_bet_, other->self_is_bet_);
    std::swap(self_bet_gold_, other->self_bet_gold_);
    std::swap(self_king_gold_, other->self_king_gold_);
    std::swap(self_bet_win_gold_, other->self_bet_win_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_result_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_result_info_descriptor_;
  metadata.reflection = msg_result_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_scene_info::kRoomidFieldNumber;
const int msg_scene_info::kSceneStateFieldNumber;
const int msg_scene_info::kCountDownFieldNumber;
const int msg_scene_info::kBankerInfoFieldNumber;
const int msg_scene_info::kBetInfoFieldNumber;
const int msg_scene_info::kCardsInfoFieldNumber;
const int msg_scene_info::kResultInfoFieldNumber;
const int msg_scene_info::kMaxBetGoldFieldNumber;
#endif  // !_MSC_VER

msg_scene_info::msg_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_scene_info::InitAsDefaultInstance() {
  banker_info_ = const_cast< ::game_shcdcards_protocols::msg_banker_info*>(&::game_shcdcards_protocols::msg_banker_info::default_instance());
  bet_info_ = const_cast< ::game_shcdcards_protocols::msg_bet_info*>(&::game_shcdcards_protocols::msg_bet_info::default_instance());
  cards_info_ = const_cast< ::game_shcdcards_protocols::msg_cards_info*>(&::game_shcdcards_protocols::msg_cards_info::default_instance());
  result_info_ = const_cast< ::game_shcdcards_protocols::msg_result_info*>(&::game_shcdcards_protocols::msg_result_info::default_instance());
}

msg_scene_info::msg_scene_info(const msg_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_scene_info::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  scene_state_ = 0;
  count_down_ = 0;
  banker_info_ = NULL;
  bet_info_ = NULL;
  cards_info_ = NULL;
  result_info_ = NULL;
  max_bet_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_scene_info::~msg_scene_info() {
  SharedDtor();
}

void msg_scene_info::SharedDtor() {
  if (this != default_instance_) {
    delete banker_info_;
    delete bet_info_;
    delete cards_info_;
    delete result_info_;
  }
}

void msg_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_scene_info_descriptor_;
}

const msg_scene_info& msg_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

msg_scene_info* msg_scene_info::default_instance_ = NULL;

msg_scene_info* msg_scene_info::New() const {
  return new msg_scene_info;
}

void msg_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    scene_state_ = 0;
    count_down_ = 0;
    if (has_banker_info()) {
      if (banker_info_ != NULL) banker_info_->::game_shcdcards_protocols::msg_banker_info::Clear();
    }
    if (has_bet_info()) {
      if (bet_info_ != NULL) bet_info_->::game_shcdcards_protocols::msg_bet_info::Clear();
    }
    if (has_cards_info()) {
      if (cards_info_ != NULL) cards_info_->::game_shcdcards_protocols::msg_cards_info::Clear();
    }
    if (has_result_info()) {
      if (result_info_ != NULL) result_info_->::game_shcdcards_protocols::msg_result_info::Clear();
    }
    max_bet_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_state;
        break;
      }

      // optional int32 scene_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_state_)));
          set_has_scene_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_banker_info;
        break;
      }

      // optional .game_shcdcards_protocols.msg_banker_info banker_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banker_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banker_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bet_info;
        break;
      }

      // optional .game_shcdcards_protocols.msg_bet_info bet_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cards_info;
        break;
      }

      // optional .game_shcdcards_protocols.msg_cards_info cards_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_result_info;
        break;
      }

      // optional .game_shcdcards_protocols.msg_result_info result_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_bet_gold;
        break;
      }

      // optional int64 max_bet_gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_bet_gold_)));
          set_has_max_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 scene_state = 2;
  if (has_scene_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_state(), output);
  }

  // optional int32 count_down = 3;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count_down(), output);
  }

  // optional .game_shcdcards_protocols.msg_banker_info banker_info = 4;
  if (has_banker_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->banker_info(), output);
  }

  // optional .game_shcdcards_protocols.msg_bet_info bet_info = 5;
  if (has_bet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bet_info(), output);
  }

  // optional .game_shcdcards_protocols.msg_cards_info cards_info = 6;
  if (has_cards_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cards_info(), output);
  }

  // optional .game_shcdcards_protocols.msg_result_info result_info = 7;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->result_info(), output);
  }

  // optional int64 max_bet_gold = 8;
  if (has_max_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->max_bet_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 scene_state = 2;
  if (has_scene_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_state(), target);
  }

  // optional int32 count_down = 3;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count_down(), target);
  }

  // optional .game_shcdcards_protocols.msg_banker_info banker_info = 4;
  if (has_banker_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->banker_info(), target);
  }

  // optional .game_shcdcards_protocols.msg_bet_info bet_info = 5;
  if (has_bet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bet_info(), target);
  }

  // optional .game_shcdcards_protocols.msg_cards_info cards_info = 6;
  if (has_cards_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cards_info(), target);
  }

  // optional .game_shcdcards_protocols.msg_result_info result_info = 7;
  if (has_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->result_info(), target);
  }

  // optional int64 max_bet_gold = 8;
  if (has_max_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->max_bet_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 scene_state = 2;
    if (has_scene_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_state());
    }

    // optional int32 count_down = 3;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

    // optional .game_shcdcards_protocols.msg_banker_info banker_info = 4;
    if (has_banker_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banker_info());
    }

    // optional .game_shcdcards_protocols.msg_bet_info bet_info = 5;
    if (has_bet_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bet_info());
    }

    // optional .game_shcdcards_protocols.msg_cards_info cards_info = 6;
    if (has_cards_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards_info());
    }

    // optional .game_shcdcards_protocols.msg_result_info result_info = 7;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result_info());
    }

    // optional int64 max_bet_gold = 8;
    if (has_max_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_bet_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_scene_info::MergeFrom(const msg_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_scene_state()) {
      set_scene_state(from.scene_state());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
    if (from.has_banker_info()) {
      mutable_banker_info()->::game_shcdcards_protocols::msg_banker_info::MergeFrom(from.banker_info());
    }
    if (from.has_bet_info()) {
      mutable_bet_info()->::game_shcdcards_protocols::msg_bet_info::MergeFrom(from.bet_info());
    }
    if (from.has_cards_info()) {
      mutable_cards_info()->::game_shcdcards_protocols::msg_cards_info::MergeFrom(from.cards_info());
    }
    if (from.has_result_info()) {
      mutable_result_info()->::game_shcdcards_protocols::msg_result_info::MergeFrom(from.result_info());
    }
    if (from.has_max_bet_gold()) {
      set_max_bet_gold(from.max_bet_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_scene_info::CopyFrom(const msg_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_scene_info::IsInitialized() const {

  return true;
}

void msg_scene_info::Swap(msg_scene_info* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(scene_state_, other->scene_state_);
    std::swap(count_down_, other->count_down_);
    std::swap(banker_info_, other->banker_info_);
    std::swap(bet_info_, other->bet_info_);
    std::swap(cards_info_, other->cards_info_);
    std::swap(result_info_, other->result_info_);
    std::swap(max_bet_gold_, other->max_bet_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_scene_info_descriptor_;
  metadata.reflection = msg_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_scene_info::packetc2l_get_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_get_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_scene_info::packetc2l_get_scene_info(const packetc2l_get_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_get_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_scene_info::~packetc2l_get_scene_info() {
  SharedDtor();
}

void packetc2l_get_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_scene_info_descriptor_;
}

const packetc2l_get_scene_info& packetc2l_get_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_scene_info* packetc2l_get_scene_info::default_instance_ = NULL;

packetc2l_get_scene_info* packetc2l_get_scene_info::New() const {
  return new packetc2l_get_scene_info;
}

void packetc2l_get_scene_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_get_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_get_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_get_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_scene_info::MergeFrom(const packetc2l_get_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_scene_info::CopyFrom(const packetc2l_get_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_scene_info::Swap(packetc2l_get_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_scene_info_result::kSceneInfoFieldNumber;
const int packetl2c_get_scene_info_result::kHistoryInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_get_scene_info_result::InitAsDefaultInstance() {
  scene_info_ = const_cast< ::game_shcdcards_protocols::msg_scene_info*>(&::game_shcdcards_protocols::msg_scene_info::default_instance());
}

packetl2c_get_scene_info_result::packetl2c_get_scene_info_result(const packetl2c_get_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  scene_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_scene_info_result::~packetl2c_get_scene_info_result() {
  SharedDtor();
}

void packetl2c_get_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info_;
  }
}

void packetl2c_get_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_scene_info_result_descriptor_;
}

const packetl2c_get_scene_info_result& packetl2c_get_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::default_instance_ = NULL;

packetl2c_get_scene_info_result* packetl2c_get_scene_info_result::New() const {
  return new packetl2c_get_scene_info_result;
}

void packetl2c_get_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15001;
    if (has_scene_info()) {
      if (scene_info_ != NULL) scene_info_->::game_shcdcards_protocols::msg_scene_info::Clear();
    }
  }
  history_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene_info;
        break;
      }

      // optional .game_shcdcards_protocols.msg_scene_info scene_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_history_infos;
        break;
      }

      // repeated .game_shcdcards_protocols.msg_cards_info history_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_history_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_get_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_shcdcards_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scene_info(), output);
  }

  // repeated .game_shcdcards_protocols.msg_cards_info history_infos = 3;
  for (int i = 0; i < this->history_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_get_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_shcdcards_protocols.msg_scene_info scene_info = 2;
  if (has_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scene_info(), target);
  }

  // repeated .game_shcdcards_protocols.msg_cards_info history_infos = 3;
  for (int i = 0; i < this->history_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->history_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_get_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_scene_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_shcdcards_protocols.msg_scene_info scene_info = 2;
    if (has_scene_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info());
    }

  }
  // repeated .game_shcdcards_protocols.msg_cards_info history_infos = 3;
  total_size += 1 * this->history_infos_size();
  for (int i = 0; i < this->history_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_scene_info_result::MergeFrom(const packetl2c_get_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_infos_.MergeFrom(from.history_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_scene_info()) {
      mutable_scene_info()->::game_shcdcards_protocols::msg_scene_info::MergeFrom(from.scene_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_scene_info_result::CopyFrom(const packetl2c_get_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_scene_info_result::Swap(packetl2c_get_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(scene_info_, other->scene_info_);
    history_infos_.Swap(&other->history_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_prepare_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_prepare_into::kCountDownFieldNumber;
const int packetl2c_bc_scene_prepare_into::kBankerInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_prepare_into::packetl2c_bc_scene_prepare_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_prepare_into::InitAsDefaultInstance() {
  banker_info_ = const_cast< ::game_shcdcards_protocols::msg_banker_info*>(&::game_shcdcards_protocols::msg_banker_info::default_instance());
}

packetl2c_bc_scene_prepare_into::packetl2c_bc_scene_prepare_into(const packetl2c_bc_scene_prepare_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_prepare_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15050;
  count_down_ = 0;
  banker_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_prepare_into::~packetl2c_bc_scene_prepare_into() {
  SharedDtor();
}

void packetl2c_bc_scene_prepare_into::SharedDtor() {
  if (this != default_instance_) {
    delete banker_info_;
  }
}

void packetl2c_bc_scene_prepare_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_prepare_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_prepare_into_descriptor_;
}

const packetl2c_bc_scene_prepare_into& packetl2c_bc_scene_prepare_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_prepare_into* packetl2c_bc_scene_prepare_into::default_instance_ = NULL;

packetl2c_bc_scene_prepare_into* packetl2c_bc_scene_prepare_into::New() const {
  return new packetl2c_bc_scene_prepare_into;
}

void packetl2c_bc_scene_prepare_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15050;
    count_down_ = 0;
    if (has_banker_info()) {
      if (banker_info_ != NULL) banker_info_->::game_shcdcards_protocols::msg_banker_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_prepare_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_banker_info;
        break;
      }

      // optional .game_shcdcards_protocols.msg_banker_info banker_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banker_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banker_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_prepare_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down(), output);
  }

  // optional .game_shcdcards_protocols.msg_banker_info banker_info = 3;
  if (has_banker_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->banker_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_prepare_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down(), target);
  }

  // optional .game_shcdcards_protocols.msg_banker_info banker_info = 3;
  if (has_banker_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->banker_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_prepare_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_prepare_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 count_down = 2;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

    // optional .game_shcdcards_protocols.msg_banker_info banker_info = 3;
    if (has_banker_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banker_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_prepare_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_prepare_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_prepare_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_prepare_into::MergeFrom(const packetl2c_bc_scene_prepare_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
    if (from.has_banker_info()) {
      mutable_banker_info()->::game_shcdcards_protocols::msg_banker_info::MergeFrom(from.banker_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_prepare_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_prepare_into::CopyFrom(const packetl2c_bc_scene_prepare_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_prepare_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_prepare_into::Swap(packetl2c_bc_scene_prepare_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(count_down_, other->count_down_);
    std::swap(banker_info_, other->banker_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_prepare_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_prepare_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_prepare_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_bet_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_bet_into::kCountDownFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_bet_into::packetl2c_bc_scene_bet_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_bet_into::InitAsDefaultInstance() {
}

packetl2c_bc_scene_bet_into::packetl2c_bc_scene_bet_into(const packetl2c_bc_scene_bet_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_bet_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15051;
  count_down_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_bet_into::~packetl2c_bc_scene_bet_into() {
  SharedDtor();
}

void packetl2c_bc_scene_bet_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_scene_bet_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_bet_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_bet_into_descriptor_;
}

const packetl2c_bc_scene_bet_into& packetl2c_bc_scene_bet_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_bet_into* packetl2c_bc_scene_bet_into::default_instance_ = NULL;

packetl2c_bc_scene_bet_into* packetl2c_bc_scene_bet_into::New() const {
  return new packetl2c_bc_scene_bet_into;
}

void packetl2c_bc_scene_bet_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15051;
    count_down_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_bet_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_bet_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_bet_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_bet_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_bet_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 count_down = 2;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_bet_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_bet_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_bet_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_bet_into::MergeFrom(const packetl2c_bc_scene_bet_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_bet_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_bet_into::CopyFrom(const packetl2c_bc_scene_bet_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_bet_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_bet_into::Swap(packetl2c_bc_scene_bet_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(count_down_, other->count_down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_bet_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_bet_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_bet_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_sync_scene_bet_into::kPacketIdFieldNumber;
const int packetl2c_bc_sync_scene_bet_into::kBetGoldsFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_sync_scene_bet_into::packetl2c_bc_sync_scene_bet_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_sync_scene_bet_into::InitAsDefaultInstance() {
}

packetl2c_bc_sync_scene_bet_into::packetl2c_bc_sync_scene_bet_into(const packetl2c_bc_sync_scene_bet_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_sync_scene_bet_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15052;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_sync_scene_bet_into::~packetl2c_bc_sync_scene_bet_into() {
  SharedDtor();
}

void packetl2c_bc_sync_scene_bet_into::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_sync_scene_bet_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_sync_scene_bet_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_sync_scene_bet_into_descriptor_;
}

const packetl2c_bc_sync_scene_bet_into& packetl2c_bc_sync_scene_bet_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_sync_scene_bet_into* packetl2c_bc_sync_scene_bet_into::default_instance_ = NULL;

packetl2c_bc_sync_scene_bet_into* packetl2c_bc_sync_scene_bet_into::New() const {
  return new packetl2c_bc_sync_scene_bet_into;
}

void packetl2c_bc_sync_scene_bet_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15052;
  }
  bet_golds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_sync_scene_bet_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bet_golds;
        break;
      }

      // repeated int32 bet_golds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_bet_golds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bet_golds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bet_golds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_sync_scene_bet_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 bet_golds = 4;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->bet_golds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_sync_scene_bet_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 bet_golds = 4;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->bet_golds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_sync_scene_bet_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_sync_scene_bet_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated int32 bet_golds = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->bet_golds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bet_golds(i));
    }
    total_size += 1 * this->bet_golds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_sync_scene_bet_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_sync_scene_bet_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_sync_scene_bet_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_sync_scene_bet_into::MergeFrom(const packetl2c_bc_sync_scene_bet_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_golds_.MergeFrom(from.bet_golds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_sync_scene_bet_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_sync_scene_bet_into::CopyFrom(const packetl2c_bc_sync_scene_bet_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_sync_scene_bet_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_sync_scene_bet_into::Swap(packetl2c_bc_sync_scene_bet_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_golds_.Swap(&other->bet_golds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_sync_scene_bet_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_sync_scene_bet_into_descriptor_;
  metadata.reflection = packetl2c_bc_sync_scene_bet_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_deal_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_deal_into::kCountDownFieldNumber;
const int packetl2c_bc_scene_deal_into::kCardsInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_deal_into::packetl2c_bc_scene_deal_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_deal_into::InitAsDefaultInstance() {
  cards_info_ = const_cast< ::game_shcdcards_protocols::msg_cards_info*>(&::game_shcdcards_protocols::msg_cards_info::default_instance());
}

packetl2c_bc_scene_deal_into::packetl2c_bc_scene_deal_into(const packetl2c_bc_scene_deal_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_deal_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15053;
  count_down_ = 0;
  cards_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_deal_into::~packetl2c_bc_scene_deal_into() {
  SharedDtor();
}

void packetl2c_bc_scene_deal_into::SharedDtor() {
  if (this != default_instance_) {
    delete cards_info_;
  }
}

void packetl2c_bc_scene_deal_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_deal_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_deal_into_descriptor_;
}

const packetl2c_bc_scene_deal_into& packetl2c_bc_scene_deal_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_deal_into* packetl2c_bc_scene_deal_into::default_instance_ = NULL;

packetl2c_bc_scene_deal_into* packetl2c_bc_scene_deal_into::New() const {
  return new packetl2c_bc_scene_deal_into;
}

void packetl2c_bc_scene_deal_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15053;
    count_down_ = 0;
    if (has_cards_info()) {
      if (cards_info_ != NULL) cards_info_->::game_shcdcards_protocols::msg_cards_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_deal_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards_info;
        break;
      }

      // optional .game_shcdcards_protocols.msg_cards_info cards_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_deal_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down(), output);
  }

  // optional .game_shcdcards_protocols.msg_cards_info cards_info = 3;
  if (has_cards_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_deal_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down(), target);
  }

  // optional .game_shcdcards_protocols.msg_cards_info cards_info = 3;
  if (has_cards_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_deal_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_deal_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 count_down = 2;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

    // optional .game_shcdcards_protocols.msg_cards_info cards_info = 3;
    if (has_cards_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_deal_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_deal_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_deal_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_deal_into::MergeFrom(const packetl2c_bc_scene_deal_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
    if (from.has_cards_info()) {
      mutable_cards_info()->::game_shcdcards_protocols::msg_cards_info::MergeFrom(from.cards_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_deal_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_deal_into::CopyFrom(const packetl2c_bc_scene_deal_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_deal_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_deal_into::Swap(packetl2c_bc_scene_deal_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(count_down_, other->count_down_);
    std::swap(cards_info_, other->cards_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_deal_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_deal_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_deal_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_scene_result_into::kPacketIdFieldNumber;
const int packetl2c_bc_scene_result_into::kCountDownFieldNumber;
const int packetl2c_bc_scene_result_into::kResultInfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_scene_result_into::packetl2c_bc_scene_result_into()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_scene_result_into::InitAsDefaultInstance() {
  result_info_ = const_cast< ::game_shcdcards_protocols::msg_result_info*>(&::game_shcdcards_protocols::msg_result_info::default_instance());
}

packetl2c_bc_scene_result_into::packetl2c_bc_scene_result_into(const packetl2c_bc_scene_result_into& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_scene_result_into::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15054;
  count_down_ = 0;
  result_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_scene_result_into::~packetl2c_bc_scene_result_into() {
  SharedDtor();
}

void packetl2c_bc_scene_result_into::SharedDtor() {
  if (this != default_instance_) {
    delete result_info_;
  }
}

void packetl2c_bc_scene_result_into::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_scene_result_into::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_scene_result_into_descriptor_;
}

const packetl2c_bc_scene_result_into& packetl2c_bc_scene_result_into::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_scene_result_into* packetl2c_bc_scene_result_into::default_instance_ = NULL;

packetl2c_bc_scene_result_into* packetl2c_bc_scene_result_into::New() const {
  return new packetl2c_bc_scene_result_into;
}

void packetl2c_bc_scene_result_into::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15054;
    count_down_ = 0;
    if (has_result_info()) {
      if (result_info_ != NULL) result_info_->::game_shcdcards_protocols::msg_result_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_scene_result_into::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }

      // optional .game_shcdcards_protocols.msg_result_info result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_scene_result_into::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down(), output);
  }

  // optional .game_shcdcards_protocols.msg_result_info result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_scene_result_into::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down(), target);
  }

  // optional .game_shcdcards_protocols.msg_result_info result_info = 3;
  if (has_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_scene_result_into::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_scene_result_into];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 count_down = 2;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

    // optional .game_shcdcards_protocols.msg_result_info result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_scene_result_into::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_scene_result_into* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_scene_result_into*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_scene_result_into::MergeFrom(const packetl2c_bc_scene_result_into& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
    if (from.has_result_info()) {
      mutable_result_info()->::game_shcdcards_protocols::msg_result_info::MergeFrom(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_scene_result_into::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_scene_result_into::CopyFrom(const packetl2c_bc_scene_result_into& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_scene_result_into::IsInitialized() const {

  return true;
}

void packetl2c_bc_scene_result_into::Swap(packetl2c_bc_scene_result_into* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(count_down_, other->count_down_);
    std::swap(result_info_, other->result_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_scene_result_into::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_scene_result_into_descriptor_;
  metadata.reflection = packetl2c_bc_scene_result_into_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_bet_info::kPacketIdFieldNumber;
const int packetc2l_ask_bet_info::kBetIndexFieldNumber;
const int packetc2l_ask_bet_info::kBetGoldFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_bet_info::packetc2l_ask_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_bet_info::InitAsDefaultInstance() {
}

packetc2l_ask_bet_info::packetc2l_ask_bet_info(const packetc2l_ask_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  bet_index_ = 0;
  bet_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_bet_info::~packetc2l_ask_bet_info() {
  SharedDtor();
}

void packetc2l_ask_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_bet_info_descriptor_;
}

const packetc2l_ask_bet_info& packetc2l_ask_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_bet_info* packetc2l_ask_bet_info::default_instance_ = NULL;

packetc2l_ask_bet_info* packetc2l_ask_bet_info::New() const {
  return new packetc2l_ask_bet_info;
}

void packetc2l_ask_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10011;
    bet_index_ = 0;
    bet_gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_index;
        break;
      }

      // optional int32 bet_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_index_)));
          set_has_bet_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_gold;
        break;
      }

      // optional int32 bet_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 bet_index = 2;
  if (has_bet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bet_index(), output);
  }

  // optional int32 bet_gold = 3;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bet_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 bet_index = 2;
  if (has_bet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bet_index(), target);
  }

  // optional int32 bet_gold = 3;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bet_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 bet_index = 2;
    if (has_bet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_index());
    }

    // optional int32 bet_gold = 3;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_bet_info::MergeFrom(const packetc2l_ask_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_bet_index()) {
      set_bet_index(from.bet_index());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_bet_info::CopyFrom(const packetc2l_ask_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_bet_info::IsInitialized() const {

  return true;
}

void packetc2l_ask_bet_info::Swap(packetc2l_ask_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(bet_index_, other->bet_index_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_bet_info_descriptor_;
  metadata.reflection = packetc2l_ask_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bet_info_result::kPacketIdFieldNumber;
const int packetl2c_bet_info_result::kResultFieldNumber;
const int packetl2c_bet_info_result::kBetIndexFieldNumber;
const int packetl2c_bet_info_result::kBetGoldFieldNumber;
const int packetl2c_bet_info_result::kSelfGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_bet_info_result::packetl2c_bet_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bet_info_result::InitAsDefaultInstance() {
}

packetl2c_bet_info_result::packetl2c_bet_info_result(const packetl2c_bet_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bet_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15011;
  result_ = 2;
  bet_index_ = 0;
  bet_gold_ = 0;
  self_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bet_info_result::~packetl2c_bet_info_result() {
  SharedDtor();
}

void packetl2c_bet_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bet_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bet_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bet_info_result_descriptor_;
}

const packetl2c_bet_info_result& packetl2c_bet_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bet_info_result* packetl2c_bet_info_result::default_instance_ = NULL;

packetl2c_bet_info_result* packetl2c_bet_info_result::New() const {
  return new packetl2c_bet_info_result;
}

void packetl2c_bet_info_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15011;
    result_ = 2;
    bet_index_ = 0;
    bet_gold_ = 0;
    self_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bet_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_index;
        break;
      }

      // optional int32 bet_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_index_)));
          set_has_bet_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bet_gold;
        break;
      }

      // optional int32 bet_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_gold_)));
          set_has_bet_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_self_gold;
        break;
      }

      // optional int64 self_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_gold_)));
          set_has_self_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bet_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 bet_index = 3;
  if (has_bet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bet_index(), output);
  }

  // optional int32 bet_gold = 4;
  if (has_bet_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bet_gold(), output);
  }

  // optional int64 self_gold = 5;
  if (has_self_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->self_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bet_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 bet_index = 3;
  if (has_bet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bet_index(), target);
  }

  // optional int32 bet_gold = 4;
  if (has_bet_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bet_gold(), target);
  }

  // optional int64 self_gold = 5;
  if (has_self_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->self_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bet_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 bet_index = 3;
    if (has_bet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_index());
    }

    // optional int32 bet_gold = 4;
    if (has_bet_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_gold());
    }

    // optional int64 self_gold = 5;
    if (has_self_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bet_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bet_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bet_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bet_info_result::MergeFrom(const packetl2c_bet_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bet_index()) {
      set_bet_index(from.bet_index());
    }
    if (from.has_bet_gold()) {
      set_bet_gold(from.bet_gold());
    }
    if (from.has_self_gold()) {
      set_self_gold(from.self_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bet_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bet_info_result::CopyFrom(const packetl2c_bet_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bet_info_result::IsInitialized() const {

  return true;
}

void packetl2c_bet_info_result::Swap(packetl2c_bet_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(bet_index_, other->bet_index_);
    std::swap(bet_gold_, other->bet_gold_);
    std::swap(self_gold_, other->self_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bet_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bet_info_result_descriptor_;
  metadata.reflection = packetl2c_bet_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_continue_bet::kPacketIdFieldNumber;
const int packetc2l_ask_continue_bet::kBetGoldsFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_continue_bet::packetc2l_ask_continue_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_ask_continue_bet::InitAsDefaultInstance() {
}

packetc2l_ask_continue_bet::packetc2l_ask_continue_bet(const packetc2l_ask_continue_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_ask_continue_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10012;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_continue_bet::~packetc2l_ask_continue_bet() {
  SharedDtor();
}

void packetc2l_ask_continue_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_continue_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_continue_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_continue_bet_descriptor_;
}

const packetc2l_ask_continue_bet& packetc2l_ask_continue_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_continue_bet* packetc2l_ask_continue_bet::default_instance_ = NULL;

packetc2l_ask_continue_bet* packetc2l_ask_continue_bet::New() const {
  return new packetc2l_ask_continue_bet;
}

void packetc2l_ask_continue_bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10012;
  }
  bet_golds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_continue_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_golds;
        break;
      }

      // repeated int32 bet_golds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_bet_golds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bet_golds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_golds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_ask_continue_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 bet_golds = 2;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->bet_golds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_ask_continue_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 bet_golds = 2;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->bet_golds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_ask_continue_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_continue_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated int32 bet_golds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bet_golds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bet_golds(i));
    }
    total_size += 1 * this->bet_golds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_continue_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_continue_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_continue_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_continue_bet::MergeFrom(const packetc2l_ask_continue_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_golds_.MergeFrom(from.bet_golds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_continue_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_continue_bet::CopyFrom(const packetc2l_ask_continue_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_continue_bet::IsInitialized() const {

  return true;
}

void packetc2l_ask_continue_bet::Swap(packetc2l_ask_continue_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_golds_.Swap(&other->bet_golds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_continue_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_continue_bet_descriptor_;
  metadata.reflection = packetc2l_ask_continue_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_continue_bet_result::kPacketIdFieldNumber;
const int packetl2c_continue_bet_result::kResultFieldNumber;
const int packetl2c_continue_bet_result::kBetGoldsFieldNumber;
const int packetl2c_continue_bet_result::kSelfGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_continue_bet_result::packetl2c_continue_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_continue_bet_result::InitAsDefaultInstance() {
}

packetl2c_continue_bet_result::packetl2c_continue_bet_result(const packetl2c_continue_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_continue_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15012;
  result_ = 2;
  self_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_continue_bet_result::~packetl2c_continue_bet_result() {
  SharedDtor();
}

void packetl2c_continue_bet_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_continue_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_continue_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_continue_bet_result_descriptor_;
}

const packetl2c_continue_bet_result& packetl2c_continue_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_continue_bet_result* packetl2c_continue_bet_result::default_instance_ = NULL;

packetl2c_continue_bet_result* packetl2c_continue_bet_result::New() const {
  return new packetl2c_continue_bet_result;
}

void packetl2c_continue_bet_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15012;
    result_ = 2;
    self_gold_ = GOOGLE_LONGLONG(0);
  }
  bet_golds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_continue_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_golds;
        break;
      }

      // repeated int32 bet_golds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_golds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_bet_golds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bet_golds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet_golds;
        if (input->ExpectTag(32)) goto parse_self_gold;
        break;
      }

      // optional int64 self_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_gold_)));
          set_has_self_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_continue_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // repeated int32 bet_golds = 3;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->bet_golds(i), output);
  }

  // optional int64 self_gold = 4;
  if (has_self_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->self_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_continue_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // repeated int32 bet_golds = 3;
  for (int i = 0; i < this->bet_golds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->bet_golds(i), target);
  }

  // optional int64 self_gold = 4;
  if (has_self_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->self_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_continue_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_continue_bet_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 self_gold = 4;
    if (has_self_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_gold());
    }

  }
  // repeated int32 bet_golds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bet_golds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bet_golds(i));
    }
    total_size += 1 * this->bet_golds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_continue_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_continue_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_continue_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_continue_bet_result::MergeFrom(const packetl2c_continue_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_golds_.MergeFrom(from.bet_golds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_self_gold()) {
      set_self_gold(from.self_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_continue_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_continue_bet_result::CopyFrom(const packetl2c_continue_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_continue_bet_result::IsInitialized() const {

  return true;
}

void packetl2c_continue_bet_result::Swap(packetl2c_continue_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    bet_golds_.Swap(&other->bet_golds_);
    std::swap(self_gold_, other->self_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_continue_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_continue_bet_result_descriptor_;
  metadata.reflection = packetl2c_continue_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_game_control::kPacketIdFieldNumber;
const int packetc2l_game_control::kControlFieldNumber;
#endif  // !_MSC_VER

packetc2l_game_control::packetc2l_game_control()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2l_game_control::InitAsDefaultInstance() {
}

packetc2l_game_control::packetc2l_game_control(const packetc2l_game_control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2l_game_control::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10013;
  control_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_game_control::~packetc2l_game_control() {
  SharedDtor();
}

void packetc2l_game_control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_game_control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_game_control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_game_control_descriptor_;
}

const packetc2l_game_control& packetc2l_game_control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_game_control* packetc2l_game_control::default_instance_ = NULL;

packetc2l_game_control* packetc2l_game_control::New() const {
  return new packetc2l_game_control;
}

void packetc2l_game_control::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10013;
    control_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_game_control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_control;
        break;
      }

      // optional int32 control = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_)));
          set_has_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2l_game_control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 control = 2 [default = 0];
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->control(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2l_game_control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 control = 2 [default = 0];
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->control(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2l_game_control::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_game_control];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 control = 2 [default = 0];
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_game_control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_game_control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_game_control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_game_control::MergeFrom(const packetc2l_game_control& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_control()) {
      set_control(from.control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_game_control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_game_control::CopyFrom(const packetc2l_game_control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_game_control::IsInitialized() const {

  return true;
}

void packetc2l_game_control::Swap(packetc2l_game_control* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(control_, other->control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_game_control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_game_control_descriptor_;
  metadata.reflection = packetc2l_game_control_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_debuginfo::kPacketIdFieldNumber;
const int packetl2c_bc_debuginfo::kPlayerIdFieldNumber;
const int packetl2c_bc_debuginfo::kTotalProfitFieldNumber;
const int packetl2c_bc_debuginfo::kTotalStockFieldNumber;
const int packetl2c_bc_debuginfo::kTotalRateFieldNumber;
const int packetl2c_bc_debuginfo::kDebugInfosFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_bc_debuginfo::InitAsDefaultInstance() {
}

packetl2c_bc_debuginfo::packetl2c_bc_debuginfo(const packetl2c_bc_debuginfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15013;
  player_id_ = 0;
  total_profit_ = GOOGLE_LONGLONG(0);
  total_stock_ = GOOGLE_LONGLONG(0);
  total_rate_ = GOOGLE_LONGLONG(0);
  debug_infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_debuginfo::~packetl2c_bc_debuginfo() {
  SharedDtor();
}

void packetl2c_bc_debuginfo::SharedDtor() {
  if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_infos_;
  }
  if (this != default_instance_) {
  }
}

void packetl2c_bc_debuginfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_debuginfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_debuginfo_descriptor_;
}

const packetl2c_bc_debuginfo& packetl2c_bc_debuginfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::default_instance_ = NULL;

packetl2c_bc_debuginfo* packetl2c_bc_debuginfo::New() const {
  return new packetl2c_bc_debuginfo;
}

void packetl2c_bc_debuginfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15013;
    player_id_ = 0;
    total_profit_ = GOOGLE_LONGLONG(0);
    total_stock_ = GOOGLE_LONGLONG(0);
    total_rate_ = GOOGLE_LONGLONG(0);
    if (has_debug_infos()) {
      if (debug_infos_ != &::google::protobuf::internal::kEmptyString) {
        debug_infos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_debuginfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_profit;
        break;
      }

      // optional int64 total_profit = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_profit_)));
          set_has_total_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_stock;
        break;
      }

      // optional int64 total_stock = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_stock_)));
          set_has_total_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_debug_infos;
        break;
      }

      // optional string debug_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_infos().data(), this->debug_infos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_Rate;
        break;
      }

      // optional int64 total_Rate = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_rate_)));
          set_has_total_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_bc_debuginfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_profit(), output);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_stock(), output);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->debug_infos(), output);
  }

  // optional int64 total_Rate = 6 [default = 0];
  if (has_total_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_bc_debuginfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int64 total_profit = 3 [default = 0];
  if (has_total_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_profit(), target);
  }

  // optional int64 total_stock = 4 [default = 0];
  if (has_total_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_stock(), target);
  }

  // optional string debug_infos = 5;
  if (has_debug_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_infos().data(), this->debug_infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug_infos(), target);
  }

  // optional int64 total_Rate = 6 [default = 0];
  if (has_total_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_bc_debuginfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_debuginfo];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int64 total_profit = 3 [default = 0];
    if (has_total_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_profit());
    }

    // optional int64 total_stock = 4 [default = 0];
    if (has_total_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_stock());
    }

    // optional int64 total_Rate = 6 [default = 0];
    if (has_total_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_rate());
    }

    // optional string debug_infos = 5;
    if (has_debug_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_debuginfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_debuginfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_debuginfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_debuginfo::MergeFrom(const packetl2c_bc_debuginfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_total_profit()) {
      set_total_profit(from.total_profit());
    }
    if (from.has_total_stock()) {
      set_total_stock(from.total_stock());
    }
    if (from.has_total_rate()) {
      set_total_rate(from.total_rate());
    }
    if (from.has_debug_infos()) {
      set_debug_infos(from.debug_infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_debuginfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_debuginfo::CopyFrom(const packetl2c_bc_debuginfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_debuginfo::IsInitialized() const {

  return true;
}

void packetl2c_bc_debuginfo::Swap(packetl2c_bc_debuginfo* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(total_profit_, other->total_profit_);
    std::swap(total_stock_, other->total_stock_);
    std::swap(total_rate_, other->total_rate_);
    std::swap(debug_infos_, other->debug_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_debuginfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_debuginfo_descriptor_;
  metadata.reflection = packetl2c_bc_debuginfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_infoex::kBetIndexFieldNumber;
const int msg_bet_infoex::kBetCountFieldNumber;
#endif  // !_MSC_VER

msg_bet_infoex::msg_bet_infoex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_bet_infoex::InitAsDefaultInstance() {
}

msg_bet_infoex::msg_bet_infoex(const msg_bet_infoex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_bet_infoex::SharedCtor() {
  _cached_size_ = 0;
  bet_index_ = 0;
  bet_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_infoex::~msg_bet_infoex() {
  SharedDtor();
}

void msg_bet_infoex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_infoex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_infoex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_infoex_descriptor_;
}

const msg_bet_infoex& msg_bet_infoex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

msg_bet_infoex* msg_bet_infoex::default_instance_ = NULL;

msg_bet_infoex* msg_bet_infoex::New() const {
  return new msg_bet_infoex;
}

void msg_bet_infoex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bet_index_ = 0;
    bet_count_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_infoex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bet_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_index_)));
          set_has_bet_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bet_count;
        break;
      }

      // optional int64 bet_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_bet_infoex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bet_index = 1;
  if (has_bet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bet_index(), output);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_bet_infoex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bet_index = 1;
  if (has_bet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bet_index(), target);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_bet_infoex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bet_index = 1;
    if (has_bet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_index());
    }

    // optional int64 bet_count = 2;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_infoex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_infoex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_infoex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_infoex::MergeFrom(const msg_bet_infoex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bet_index()) {
      set_bet_index(from.bet_index());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_infoex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_infoex::CopyFrom(const msg_bet_infoex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_infoex::IsInitialized() const {

  return true;
}

void msg_bet_infoex::Swap(msg_bet_infoex* other) {
  if (other != this) {
    std::swap(bet_index_, other->bet_index_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_infoex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_infoex_descriptor_;
  metadata.reflection = msg_bet_infoex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_msg_bet_info::kPlayerInfoFieldNumber;
const int gm_msg_bet_info::kBetInfoFieldNumber;
#endif  // !_MSC_VER

gm_msg_bet_info::gm_msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_msg_bet_info::InitAsDefaultInstance() {
  player_info_ = const_cast< ::game_shcdcards_protocols::msg_player_info*>(&::game_shcdcards_protocols::msg_player_info::default_instance());
}

gm_msg_bet_info::gm_msg_bet_info(const gm_msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_msg_bet_info::~gm_msg_bet_info() {
  SharedDtor();
}

void gm_msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void gm_msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_msg_bet_info_descriptor_;
}

const gm_msg_bet_info& gm_msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

gm_msg_bet_info* gm_msg_bet_info::default_instance_ = NULL;

gm_msg_bet_info* gm_msg_bet_info::New() const {
  return new gm_msg_bet_info;
}

void gm_msg_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::game_shcdcards_protocols::msg_player_info::Clear();
    }
  }
  bet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.msg_player_info player_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info;
        break;
      }

      // repeated .game_shcdcards_protocols.msg_bet_infoex bet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.msg_player_info player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // repeated .game_shcdcards_protocols.msg_bet_infoex bet_info = 2;
  for (int i = 0; i < this->bet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.msg_player_info player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // repeated .game_shcdcards_protocols.msg_bet_infoex bet_info = 2;
  for (int i = 0; i < this->bet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_msg_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.msg_player_info player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  // repeated .game_shcdcards_protocols.msg_bet_infoex bet_info = 2;
  total_size += 1 * this->bet_info_size();
  for (int i = 0; i < this->bet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_msg_bet_info::MergeFrom(const gm_msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_.MergeFrom(from.bet_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::game_shcdcards_protocols::msg_player_info::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_msg_bet_info::CopyFrom(const gm_msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_msg_bet_info::IsInitialized() const {

  return true;
}

void gm_msg_bet_info::Swap(gm_msg_bet_info* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    bet_info_.Swap(&other->bet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_msg_bet_info_descriptor_;
  metadata.reflection = gm_msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_all_bet_info::kPacketIdFieldNumber;
const int packetl2c_notice_all_bet_info::kBetInfoListFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_all_bet_info::packetl2c_notice_all_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2c_notice_all_bet_info::InitAsDefaultInstance() {
}

packetl2c_notice_all_bet_info::packetl2c_notice_all_bet_info(const packetl2c_notice_all_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2c_notice_all_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15014;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_all_bet_info::~packetl2c_notice_all_bet_info() {
  SharedDtor();
}

void packetl2c_notice_all_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_all_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_all_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_all_bet_info_descriptor_;
}

const packetl2c_notice_all_bet_info& packetl2c_notice_all_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshcdcards_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_all_bet_info* packetl2c_notice_all_bet_info::default_instance_ = NULL;

packetl2c_notice_all_bet_info* packetl2c_notice_all_bet_info::New() const {
  return new packetl2c_notice_all_bet_info;
}

void packetl2c_notice_all_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15014;
  }
  bet_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_all_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_shcdcards_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_shcdcards_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        break;
      }

      // repeated .game_shcdcards_protocols.gm_msg_bet_info bet_info_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2c_notice_all_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_shcdcards_protocols.gm_msg_bet_info bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2c_notice_all_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_shcdcards_protocols.gm_msg_bet_info bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2c_notice_all_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_shcdcards_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_shcdcards_protocols.gm_msg_bet_info bet_info_list = 2;
  total_size += 1 * this->bet_info_list_size();
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_all_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_all_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_all_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_all_bet_info::MergeFrom(const packetl2c_notice_all_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_list_.MergeFrom(from.bet_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_all_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_all_bet_info::CopyFrom(const packetl2c_notice_all_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_all_bet_info::IsInitialized() const {

  return true;
}

void packetl2c_notice_all_bet_info::Swap(packetl2c_notice_all_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_info_list_.Swap(&other->bet_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_all_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_all_bet_info_descriptor_;
  metadata.reflection = packetl2c_notice_all_bet_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_shcdcards_protocols

// @@protoc_insertion_point(global_scope)
