// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_player_quest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_player_quest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_get_questlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_get_questlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_get_questlist_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_get_questlist_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_receive_questreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_receive_questreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_receive_questreward_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_receive_questreward_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_change_quest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_change_quest_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_notify_task_reflush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_notify_task_reflush_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_wechat_share_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_wechat_share_task_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto() {
  protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_player_quest.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_get_questlist_descriptor_ = file->message_type(0);
  static const int packetc2w_get_questlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_questlist, packet_id_),
  };
  packetc2w_get_questlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_get_questlist_descriptor_,
      packetc2w_get_questlist::default_instance_,
      packetc2w_get_questlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_questlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_questlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_get_questlist));
  packetw2c_get_questlist_result_descriptor_ = file->message_type(1);
  static const int packetw2c_get_questlist_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, questlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, is_new_),
  };
  packetw2c_get_questlist_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_get_questlist_result_descriptor_,
      packetw2c_get_questlist_result::default_instance_,
      packetw2c_get_questlist_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_get_questlist_result));
  packetc2w_receive_questreward_descriptor_ = file->message_type(2);
  static const int packetc2w_receive_questreward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_questreward, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_questreward, questid_),
  };
  packetc2w_receive_questreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_receive_questreward_descriptor_,
      packetc2w_receive_questreward::default_instance_,
      packetc2w_receive_questreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_questreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_questreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_receive_questreward));
  packetw2c_receive_questreward_result_descriptor_ = file->message_type(3);
  static const int packetw2c_receive_questreward_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, result_),
  };
  packetw2c_receive_questreward_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_receive_questreward_result_descriptor_,
      packetw2c_receive_questreward_result::default_instance_,
      packetw2c_receive_questreward_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_receive_questreward_result));
  packetw2c_change_quest_descriptor_ = file->message_type(4);
  static const int packetw2c_change_quest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_quest, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_quest, qinfo_),
  };
  packetw2c_change_quest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_change_quest_descriptor_,
      packetw2c_change_quest::default_instance_,
      packetw2c_change_quest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_quest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_quest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_change_quest));
  packetw2c_notify_task_reflush_descriptor_ = file->message_type(5);
  static const int packetw2c_notify_task_reflush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_task_reflush, packet_id_),
  };
  packetw2c_notify_task_reflush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_notify_task_reflush_descriptor_,
      packetw2c_notify_task_reflush::default_instance_,
      packetw2c_notify_task_reflush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_task_reflush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify_task_reflush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_notify_task_reflush));
  packetc2w_wechat_share_task_descriptor_ = file->message_type(6);
  static const int packetc2w_wechat_share_task_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_wechat_share_task, packet_id_),
  };
  packetc2w_wechat_share_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_wechat_share_task_descriptor_,
      packetc2w_wechat_share_task::default_instance_,
      packetc2w_wechat_share_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_wechat_share_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_wechat_share_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_wechat_share_task));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_get_questlist_descriptor_, &packetc2w_get_questlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_get_questlist_result_descriptor_, &packetw2c_get_questlist_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_receive_questreward_descriptor_, &packetc2w_receive_questreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_receive_questreward_result_descriptor_, &packetw2c_receive_questreward_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_change_quest_descriptor_, &packetw2c_change_quest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_notify_task_reflush_descriptor_, &packetw2c_notify_task_reflush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_wechat_share_task_descriptor_, &packetc2w_wechat_share_task::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto() {
  delete packetc2w_get_questlist::default_instance_;
  delete packetc2w_get_questlist_reflection_;
  delete packetw2c_get_questlist_result::default_instance_;
  delete packetw2c_get_questlist_result_reflection_;
  delete packetc2w_receive_questreward::default_instance_;
  delete packetc2w_receive_questreward_reflection_;
  delete packetw2c_receive_questreward_result::default_instance_;
  delete packetw2c_receive_questreward_result_reflection_;
  delete packetw2c_change_quest::default_instance_;
  delete packetw2c_change_quest_reflection_;
  delete packetw2c_notify_task_reflush::default_instance_;
  delete packetw2c_notify_task_reflush_reflection_;
  delete packetc2w_wechat_share_task::default_instance_;
  delete packetc2w_wechat_share_task_reflection_;
}

void protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037client2world_player_quest.proto\022\026clien"
    "t2world_protocols\032\033client2world_msg_type"
    ".proto\032\022msg_type_def.proto\032\022msg_info_def"
    ".proto\"p\n\027packetc2w_get_questlist\022U\n\tpac"
    "ket_id\030\001 \001(\0162).client2world_protocols.e_"
    "server_msg_type:\027e_mst_c2w_get_questlist"
    "\"\277\001\n\036packetw2c_get_questlist_result\022\\\n\tp"
    "acket_id\030\001 \001(\0162).client2world_protocols."
    "e_server_msg_type:\036e_mst_w2c_get_questli"
    "st_result\022/\n\tquestlist\030\002 \003(\0132\034.msg_info_"
    "def.msg_quest_info\022\016\n\006is_new\030\003 \001(\010\"\215\001\n\035p"
    "acketc2w_receive_questreward\022[\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:\035e_mst_c2w_receive_questrewar"
    "d\022\017\n\007questid\030\002 \001(\005\"\321\001\n$packetw2c_receive"
    "_questreward_result\022Z\n\tpacket_id\030\001 \001(\0162)"
    ".client2world_protocols.e_server_msg_typ"
    "e:\034e_mst_w2c_questreward_result\022\017\n\007quest"
    "id\030\002 \001(\005\022<\n\006result\030\003 \001(\0162\036.msg_type_def."
    "e_msg_result_def:\014e_rmt_unknow\"\233\001\n\026packe"
    "tw2c_change_quest\022T\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\026e_mst_w2c_change_quest\022+\n\005qinfo\030\003 \001(\0132\034"
    ".msg_info_def.msg_quest_info\"|\n\035packetw2"
    "c_notify_task_reflush\022[\n\tpacket_id\030\001 \001(\016"
    "2).client2world_protocols.e_server_msg_t"
    "ype:\035e_mst_w2c_notify_task_reflush\"x\n\033pa"
    "cketc2w_wechat_share_task\022Y\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type:\033e_mst_c2w_wechat_share_task", 1196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_player_quest.proto", &protobuf_RegisterTypes);
  packetc2w_get_questlist::default_instance_ = new packetc2w_get_questlist();
  packetw2c_get_questlist_result::default_instance_ = new packetw2c_get_questlist_result();
  packetc2w_receive_questreward::default_instance_ = new packetc2w_receive_questreward();
  packetw2c_receive_questreward_result::default_instance_ = new packetw2c_receive_questreward_result();
  packetw2c_change_quest::default_instance_ = new packetw2c_change_quest();
  packetw2c_notify_task_reflush::default_instance_ = new packetw2c_notify_task_reflush();
  packetc2w_wechat_share_task::default_instance_ = new packetc2w_wechat_share_task();
  packetc2w_get_questlist::default_instance_->InitAsDefaultInstance();
  packetw2c_get_questlist_result::default_instance_->InitAsDefaultInstance();
  packetc2w_receive_questreward::default_instance_->InitAsDefaultInstance();
  packetw2c_receive_questreward_result::default_instance_->InitAsDefaultInstance();
  packetw2c_change_quest::default_instance_->InitAsDefaultInstance();
  packetw2c_notify_task_reflush::default_instance_->InitAsDefaultInstance();
  packetc2w_wechat_share_task::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fplayer_5fquest_2eproto {
  StaticDescriptorInitializer_client2world_5fplayer_5fquest_2eproto() {
    protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  }
} static_descriptor_initializer_client2world_5fplayer_5fquest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_get_questlist::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_get_questlist::packetc2w_get_questlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_get_questlist::InitAsDefaultInstance() {
}

packetc2w_get_questlist::packetc2w_get_questlist(const packetc2w_get_questlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_get_questlist::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5058;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_get_questlist::~packetc2w_get_questlist() {
  SharedDtor();
}

void packetc2w_get_questlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_get_questlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_get_questlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_get_questlist_descriptor_;
}

const packetc2w_get_questlist& packetc2w_get_questlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetc2w_get_questlist* packetc2w_get_questlist::default_instance_ = NULL;

packetc2w_get_questlist* packetc2w_get_questlist::New() const {
  return new packetc2w_get_questlist;
}

void packetc2w_get_questlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5058;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_get_questlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_get_questlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_get_questlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_get_questlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_get_questlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_get_questlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_get_questlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_get_questlist::MergeFrom(const packetc2w_get_questlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_get_questlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_get_questlist::CopyFrom(const packetc2w_get_questlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_get_questlist::IsInitialized() const {

  return true;
}

void packetc2w_get_questlist::Swap(packetc2w_get_questlist* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_get_questlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_get_questlist_descriptor_;
  metadata.reflection = packetc2w_get_questlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_get_questlist_result::kPacketIdFieldNumber;
const int packetw2c_get_questlist_result::kQuestlistFieldNumber;
const int packetw2c_get_questlist_result::kIsNewFieldNumber;
#endif  // !_MSC_VER

packetw2c_get_questlist_result::packetw2c_get_questlist_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_get_questlist_result::InitAsDefaultInstance() {
}

packetw2c_get_questlist_result::packetw2c_get_questlist_result(const packetw2c_get_questlist_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_get_questlist_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7561;
  is_new_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_get_questlist_result::~packetw2c_get_questlist_result() {
  SharedDtor();
}

void packetw2c_get_questlist_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_get_questlist_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_get_questlist_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_get_questlist_result_descriptor_;
}

const packetw2c_get_questlist_result& packetw2c_get_questlist_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetw2c_get_questlist_result* packetw2c_get_questlist_result::default_instance_ = NULL;

packetw2c_get_questlist_result* packetw2c_get_questlist_result::New() const {
  return new packetw2c_get_questlist_result;
}

void packetw2c_get_questlist_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7561;
    is_new_ = false;
  }
  questlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_get_questlist_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_questlist;
        break;
      }

      // repeated .msg_info_def.msg_quest_info questlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_questlist;
        if (input->ExpectTag(24)) goto parse_is_new;
        break;
      }

      // optional bool is_new = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_get_questlist_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .msg_info_def.msg_quest_info questlist = 2;
  for (int i = 0; i < this->questlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->questlist(i), output);
  }

  // optional bool is_new = 3;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_new(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_get_questlist_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .msg_info_def.msg_quest_info questlist = 2;
  for (int i = 0; i < this->questlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->questlist(i), target);
  }

  // optional bool is_new = 3;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_new(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_get_questlist_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool is_new = 3;
    if (has_is_new()) {
      total_size += 1 + 1;
    }

  }
  // repeated .msg_info_def.msg_quest_info questlist = 2;
  total_size += 1 * this->questlist_size();
  for (int i = 0; i < this->questlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_get_questlist_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_get_questlist_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_get_questlist_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_get_questlist_result::MergeFrom(const packetw2c_get_questlist_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  questlist_.MergeFrom(from.questlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_get_questlist_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_get_questlist_result::CopyFrom(const packetw2c_get_questlist_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_get_questlist_result::IsInitialized() const {

  return true;
}

void packetw2c_get_questlist_result::Swap(packetw2c_get_questlist_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    questlist_.Swap(&other->questlist_);
    std::swap(is_new_, other->is_new_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_get_questlist_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_get_questlist_result_descriptor_;
  metadata.reflection = packetw2c_get_questlist_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_receive_questreward::kPacketIdFieldNumber;
const int packetc2w_receive_questreward::kQuestidFieldNumber;
#endif  // !_MSC_VER

packetc2w_receive_questreward::packetc2w_receive_questreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_receive_questreward::InitAsDefaultInstance() {
}

packetc2w_receive_questreward::packetc2w_receive_questreward(const packetc2w_receive_questreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_receive_questreward::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5059;
  questid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_receive_questreward::~packetc2w_receive_questreward() {
  SharedDtor();
}

void packetc2w_receive_questreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_receive_questreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_receive_questreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_receive_questreward_descriptor_;
}

const packetc2w_receive_questreward& packetc2w_receive_questreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetc2w_receive_questreward* packetc2w_receive_questreward::default_instance_ = NULL;

packetc2w_receive_questreward* packetc2w_receive_questreward::New() const {
  return new packetc2w_receive_questreward;
}

void packetc2w_receive_questreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5059;
    questid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_receive_questreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_questid;
        break;
      }

      // optional int32 questid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_receive_questreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 questid = 2;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_receive_questreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 questid = 2;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_receive_questreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 questid = 2;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_receive_questreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_receive_questreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_receive_questreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_receive_questreward::MergeFrom(const packetc2w_receive_questreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_receive_questreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_receive_questreward::CopyFrom(const packetc2w_receive_questreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_receive_questreward::IsInitialized() const {

  return true;
}

void packetc2w_receive_questreward::Swap(packetc2w_receive_questreward* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_receive_questreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_receive_questreward_descriptor_;
  metadata.reflection = packetc2w_receive_questreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_receive_questreward_result::kPacketIdFieldNumber;
const int packetw2c_receive_questreward_result::kQuestidFieldNumber;
const int packetw2c_receive_questreward_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_receive_questreward_result::packetw2c_receive_questreward_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_receive_questreward_result::InitAsDefaultInstance() {
}

packetw2c_receive_questreward_result::packetw2c_receive_questreward_result(const packetw2c_receive_questreward_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_receive_questreward_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7562;
  questid_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_receive_questreward_result::~packetw2c_receive_questreward_result() {
  SharedDtor();
}

void packetw2c_receive_questreward_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_receive_questreward_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_receive_questreward_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_receive_questreward_result_descriptor_;
}

const packetw2c_receive_questreward_result& packetw2c_receive_questreward_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetw2c_receive_questreward_result* packetw2c_receive_questreward_result::default_instance_ = NULL;

packetw2c_receive_questreward_result* packetw2c_receive_questreward_result::New() const {
  return new packetw2c_receive_questreward_result;
}

void packetw2c_receive_questreward_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7562;
    questid_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_receive_questreward_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_questid;
        break;
      }

      // optional int32 questid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_unknow];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_receive_questreward_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 questid = 2;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->questid(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_unknow];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_receive_questreward_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 questid = 2;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->questid(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_unknow];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_receive_questreward_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 questid = 2;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_unknow];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_receive_questreward_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_receive_questreward_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_receive_questreward_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_receive_questreward_result::MergeFrom(const packetw2c_receive_questreward_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_receive_questreward_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_receive_questreward_result::CopyFrom(const packetw2c_receive_questreward_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_receive_questreward_result::IsInitialized() const {

  return true;
}

void packetw2c_receive_questreward_result::Swap(packetw2c_receive_questreward_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(questid_, other->questid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_receive_questreward_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_receive_questreward_result_descriptor_;
  metadata.reflection = packetw2c_receive_questreward_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_change_quest::kPacketIdFieldNumber;
const int packetw2c_change_quest::kQinfoFieldNumber;
#endif  // !_MSC_VER

packetw2c_change_quest::packetw2c_change_quest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_change_quest::InitAsDefaultInstance() {
  qinfo_ = const_cast< ::msg_info_def::msg_quest_info*>(&::msg_info_def::msg_quest_info::default_instance());
}

packetw2c_change_quest::packetw2c_change_quest(const packetw2c_change_quest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_change_quest::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7563;
  qinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_change_quest::~packetw2c_change_quest() {
  SharedDtor();
}

void packetw2c_change_quest::SharedDtor() {
  if (this != default_instance_) {
    delete qinfo_;
  }
}

void packetw2c_change_quest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_change_quest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_change_quest_descriptor_;
}

const packetw2c_change_quest& packetw2c_change_quest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetw2c_change_quest* packetw2c_change_quest::default_instance_ = NULL;

packetw2c_change_quest* packetw2c_change_quest::New() const {
  return new packetw2c_change_quest;
}

void packetw2c_change_quest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7563;
    if (has_qinfo()) {
      if (qinfo_ != NULL) qinfo_->::msg_info_def::msg_quest_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_change_quest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_qinfo;
        break;
      }

      // optional .msg_info_def.msg_quest_info qinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_change_quest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_info_def.msg_quest_info qinfo = 3;
  if (has_qinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->qinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_change_quest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_info_def.msg_quest_info qinfo = 3;
  if (has_qinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->qinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_change_quest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_info_def.msg_quest_info qinfo = 3;
    if (has_qinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_change_quest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_change_quest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_change_quest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_change_quest::MergeFrom(const packetw2c_change_quest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_qinfo()) {
      mutable_qinfo()->::msg_info_def::msg_quest_info::MergeFrom(from.qinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_change_quest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_change_quest::CopyFrom(const packetw2c_change_quest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_change_quest::IsInitialized() const {

  return true;
}

void packetw2c_change_quest::Swap(packetw2c_change_quest* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(qinfo_, other->qinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_change_quest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_change_quest_descriptor_;
  metadata.reflection = packetw2c_change_quest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_notify_task_reflush::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_notify_task_reflush::packetw2c_notify_task_reflush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2c_notify_task_reflush::InitAsDefaultInstance() {
}

packetw2c_notify_task_reflush::packetw2c_notify_task_reflush(const packetw2c_notify_task_reflush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2c_notify_task_reflush::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7609;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_notify_task_reflush::~packetw2c_notify_task_reflush() {
  SharedDtor();
}

void packetw2c_notify_task_reflush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_notify_task_reflush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_notify_task_reflush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_notify_task_reflush_descriptor_;
}

const packetw2c_notify_task_reflush& packetw2c_notify_task_reflush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetw2c_notify_task_reflush* packetw2c_notify_task_reflush::default_instance_ = NULL;

packetw2c_notify_task_reflush* packetw2c_notify_task_reflush::New() const {
  return new packetw2c_notify_task_reflush;
}

void packetw2c_notify_task_reflush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7609;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_notify_task_reflush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_task_reflush];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2c_notify_task_reflush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_task_reflush];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2c_notify_task_reflush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_task_reflush];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2c_notify_task_reflush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify_task_reflush];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_notify_task_reflush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_notify_task_reflush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_notify_task_reflush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_notify_task_reflush::MergeFrom(const packetw2c_notify_task_reflush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_notify_task_reflush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_notify_task_reflush::CopyFrom(const packetw2c_notify_task_reflush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_notify_task_reflush::IsInitialized() const {

  return true;
}

void packetw2c_notify_task_reflush::Swap(packetw2c_notify_task_reflush* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_notify_task_reflush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_notify_task_reflush_descriptor_;
  metadata.reflection = packetw2c_notify_task_reflush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_wechat_share_task::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_wechat_share_task::packetc2w_wechat_share_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetc2w_wechat_share_task::InitAsDefaultInstance() {
}

packetc2w_wechat_share_task::packetc2w_wechat_share_task(const packetc2w_wechat_share_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetc2w_wechat_share_task::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_wechat_share_task::~packetc2w_wechat_share_task() {
  SharedDtor();
}

void packetc2w_wechat_share_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_wechat_share_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_wechat_share_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_wechat_share_task_descriptor_;
}

const packetc2w_wechat_share_task& packetc2w_wechat_share_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetc2w_wechat_share_task* packetc2w_wechat_share_task::default_instance_ = NULL;

packetc2w_wechat_share_task* packetc2w_wechat_share_task::New() const {
  return new packetc2w_wechat_share_task;
}

void packetc2w_wechat_share_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_wechat_share_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_wechat_share_task];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetc2w_wechat_share_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_wechat_share_task];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetc2w_wechat_share_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_wechat_share_task];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetc2w_wechat_share_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_wechat_share_task];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_wechat_share_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_wechat_share_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_wechat_share_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_wechat_share_task::MergeFrom(const packetc2w_wechat_share_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_wechat_share_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_wechat_share_task::CopyFrom(const packetc2w_wechat_share_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_wechat_share_task::IsInitialized() const {

  return true;
}

void packetc2w_wechat_share_task::Swap(packetc2w_wechat_share_task* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_wechat_share_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_wechat_share_task_descriptor_;
  metadata.reflection = packetc2w_wechat_share_task_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
