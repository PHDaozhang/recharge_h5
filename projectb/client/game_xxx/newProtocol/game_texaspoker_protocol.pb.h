// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_texaspoker_protocol.proto

#ifndef PROTOBUF_game_5ftexaspoker_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5ftexaspoker_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_texaspoker_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_texaspoker_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

class msg_room_info;
class packetc2l_get_room_info;
class packetl2c_get_room_info_result;
class packetc2l_join_table;
class packetl2c_join_table_result;
class packetc2l_leave_table;
class packetl2c_leave_table_result;
class PlayerInfo;
class PlayerBetInfo;
class packetl2c_game_event_notify;
class packetc2l_get_table_scene_info;
class PokerInfo;
class packetl2c_get_table_scene_info_result;
class packetc2l_req_declare;
class packetl2c_req_declare_result;
class GameInfo;
class packetl2c_game_start_notify;
class packetl2c_game_wait_notify;
class BalancePlayerInfo;
class packetl2c_game_end_notify;
class packetc2l_req_sitdown;
class packetl2c_req_sitdown_result;
class packetc2l_req_supply;
class packetl2c_req_supply_result;
class packetc2l_req_chip;
class packetl2c_req_chip_result;
class packetl2c_buy_chip_notify;
class packetc2l_show_poker;
class packetl2c_show_poker_result;
class packetc2l_req_standup;
class packetl2c_req_standup_result;
class packetc2l_check_state;
class packetl2c_check_state_result;

// ===================================================================

class msg_room_info : public ::google::protobuf::Message {
 public:
  msg_room_info();
  virtual ~msg_room_info();

  msg_room_info(const msg_room_info& from);

  inline msg_room_info& operator=(const msg_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_room_info& default_instance();

  void Swap(msg_room_info* other);

  // implements Message ----------------------------------------------

  msg_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_room_info& from);
  void MergeFrom(const msg_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.msg_room_info)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_room_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_info();
  virtual ~packetc2l_get_room_info();

  packetc2l_get_room_info(const packetc2l_get_room_info& from);

  inline packetc2l_get_room_info& operator=(const packetc2l_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_info& default_instance();

  void Swap(packetc2l_get_room_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_info& from);
  void MergeFrom(const packetc2l_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_info_result();
  virtual ~packetl2c_get_room_info_result();

  packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from);

  inline packetl2c_get_room_info_result& operator=(const packetl2c_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_info_result& default_instance();

  void Swap(packetl2c_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_info_result& from);
  void MergeFrom(const packetl2c_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // repeated .game_texaspoker_protocols.msg_room_info room_list = 2;
  inline int room_list_size() const;
  inline void clear_room_list();
  static const int kRoomListFieldNumber = 2;
  inline const ::game_texaspoker_protocols::msg_room_info& room_list(int index) const;
  inline ::game_texaspoker_protocols::msg_room_info* mutable_room_list(int index);
  inline ::game_texaspoker_protocols::msg_room_info* add_room_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::msg_room_info >&
      room_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::msg_room_info >*
      mutable_room_list();

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::msg_room_info > room_list_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_join_table : public ::google::protobuf::Message {
 public:
  packetc2l_join_table();
  virtual ~packetc2l_join_table();

  packetc2l_join_table(const packetc2l_join_table& from);

  inline packetc2l_join_table& operator=(const packetc2l_join_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_join_table& default_instance();

  void Swap(packetc2l_join_table* other);

  // implements Message ----------------------------------------------

  packetc2l_join_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_join_table& from);
  void MergeFrom(const packetc2l_join_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 roomId = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_join_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_join_table* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_join_table_result : public ::google::protobuf::Message {
 public:
  packetl2c_join_table_result();
  virtual ~packetl2c_join_table_result();

  packetl2c_join_table_result(const packetl2c_join_table_result& from);

  inline packetl2c_join_table_result& operator=(const packetl2c_join_table_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_join_table_result& default_instance();

  void Swap(packetl2c_join_table_result* other);

  // implements Message ----------------------------------------------

  packetl2c_join_table_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_join_table_result& from);
  void MergeFrom(const packetl2c_join_table_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_join_table_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_join_table_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_table : public ::google::protobuf::Message {
 public:
  packetc2l_leave_table();
  virtual ~packetc2l_leave_table();

  packetc2l_leave_table(const packetc2l_leave_table& from);

  inline packetc2l_leave_table& operator=(const packetc2l_leave_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_table& default_instance();

  void Swap(packetc2l_leave_table* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_table& from);
  void MergeFrom(const packetc2l_leave_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_leave_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_table* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_table_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_table_result();
  virtual ~packetl2c_leave_table_result();

  packetl2c_leave_table_result(const packetl2c_leave_table_result& from);

  inline packetl2c_leave_table_result& operator=(const packetl2c_leave_table_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_table_result& default_instance();

  void Swap(packetl2c_leave_table_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_table_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_table_result& from);
  void MergeFrom(const packetl2c_leave_table_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 playerGold = 3;
  inline bool has_playergold() const;
  inline void clear_playergold();
  static const int kPlayerGoldFieldNumber = 3;
  inline ::google::protobuf::int32 playergold() const;
  inline void set_playergold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_leave_table_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_playergold();
  inline void clear_has_playergold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 playergold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_table_result* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();

  void Swap(PlayerInfo* other);

  // implements Message ----------------------------------------------

  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int64 curChip = 3;
  inline bool has_curchip() const;
  inline void clear_curchip();
  static const int kCurChipFieldNumber = 3;
  inline ::google::protobuf::int64 curchip() const;
  inline void set_curchip(::google::protobuf::int64 value);

  // optional int64 hasBet = 4;
  inline bool has_hasbet() const;
  inline void clear_hasbet();
  static const int kHasBetFieldNumber = 4;
  inline ::google::protobuf::int64 hasbet() const;
  inline void set_hasbet(::google::protobuf::int64 value);

  // optional int64 hasBetCur = 5;
  inline bool has_hasbetcur() const;
  inline void clear_hasbetcur();
  static const int kHasBetCurFieldNumber = 5;
  inline ::google::protobuf::int64 hasbetcur() const;
  inline void set_hasbetcur(::google::protobuf::int64 value);

  // optional int32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 seat = 7;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 7;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 declareResult = 8;
  inline bool has_declareresult() const;
  inline void clear_declareresult();
  static const int kDeclareResultFieldNumber = 8;
  inline ::google::protobuf::int32 declareresult() const;
  inline void set_declareresult(::google::protobuf::int32 value);

  // optional int32 headFrame = 9;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 9;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);

  // optional string headCustom = 10;
  inline bool has_headcustom() const;
  inline void clear_headcustom();
  static const int kHeadCustomFieldNumber = 10;
  inline const ::std::string& headcustom() const;
  inline void set_headcustom(const ::std::string& value);
  inline void set_headcustom(const char* value);
  inline void set_headcustom(const char* value, size_t size);
  inline ::std::string* mutable_headcustom();
  inline ::std::string* release_headcustom();
  inline void set_allocated_headcustom(::std::string* headcustom);

  // optional int32 sex = 11;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 11;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 vipLevel = 12;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 12;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional bool supply = 13;
  inline bool has_supply() const;
  inline void clear_supply();
  static const int kSupplyFieldNumber = 13;
  inline bool supply() const;
  inline void set_supply(bool value);

  // optional bool supply_done = 14;
  inline bool has_supply_done() const;
  inline void clear_supply_done();
  static const int kSupplyDoneFieldNumber = 14;
  inline bool supply_done() const;
  inline void set_supply_done(bool value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.PlayerInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_curchip();
  inline void clear_has_curchip();
  inline void set_has_hasbet();
  inline void clear_has_hasbet();
  inline void set_has_hasbetcur();
  inline void clear_has_hasbetcur();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_declareresult();
  inline void clear_has_declareresult();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_headcustom();
  inline void clear_has_headcustom();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_supply();
  inline void clear_has_supply();
  inline void set_has_supply_done();
  inline void clear_has_supply_done();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int64 curchip_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 hasbet_;
  ::google::protobuf::int64 hasbetcur_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 declareresult_;
  ::std::string* headcustom_;
  ::google::protobuf::int32 headframe_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 viplevel_;
  bool supply_;
  bool supply_done_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerBetInfo : public ::google::protobuf::Message {
 public:
  PlayerBetInfo();
  virtual ~PlayerBetInfo();

  PlayerBetInfo(const PlayerBetInfo& from);

  inline PlayerBetInfo& operator=(const PlayerBetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBetInfo& default_instance();

  void Swap(PlayerBetInfo* other);

  // implements Message ----------------------------------------------

  PlayerBetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerBetInfo& from);
  void MergeFrom(const PlayerBetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional int64 hasBet = 2;
  inline bool has_hasbet() const;
  inline void clear_hasbet();
  static const int kHasBetFieldNumber = 2;
  inline ::google::protobuf::int64 hasbet() const;
  inline void set_hasbet(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.PlayerBetInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_hasbet();
  inline void clear_has_hasbet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 hasbet_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PlayerBetInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_event_notify : public ::google::protobuf::Message {
 public:
  packetl2c_game_event_notify();
  virtual ~packetl2c_game_event_notify();

  packetl2c_game_event_notify(const packetl2c_game_event_notify& from);

  inline packetl2c_game_event_notify& operator=(const packetl2c_game_event_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_event_notify& default_instance();

  void Swap(packetl2c_game_event_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_game_event_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_event_notify& from);
  void MergeFrom(const packetl2c_game_event_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_event_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 event = 2;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 2;
  inline ::google::protobuf::int32 event() const;
  inline void set_event(::google::protobuf::int32 value);

  // optional .game_texaspoker_protocols.PlayerInfo playerInfo = 3;
  inline bool has_playerinfo() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 3;
  inline const ::game_texaspoker_protocols::PlayerInfo& playerinfo() const;
  inline ::game_texaspoker_protocols::PlayerInfo* mutable_playerinfo();
  inline ::game_texaspoker_protocols::PlayerInfo* release_playerinfo();
  inline void set_allocated_playerinfo(::game_texaspoker_protocols::PlayerInfo* playerinfo);

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 4;
  inline int commonpoker_size() const;
  inline void clear_commonpoker();
  static const int kCommonPokerFieldNumber = 4;
  inline const ::game_texaspoker_protocols::PokerInfo& commonpoker(int index) const;
  inline ::game_texaspoker_protocols::PokerInfo* mutable_commonpoker(int index);
  inline ::game_texaspoker_protocols::PokerInfo* add_commonpoker();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
      commonpoker() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
      mutable_commonpoker();

  // optional int64 curRewardPool = 5;
  inline bool has_currewardpool() const;
  inline void clear_currewardpool();
  static const int kCurRewardPoolFieldNumber = 5;
  inline ::google::protobuf::int64 currewardpool() const;
  inline void set_currewardpool(::google::protobuf::int64 value);

  // optional int64 addBetBaseValue = 6;
  inline bool has_addbetbasevalue() const;
  inline void clear_addbetbasevalue();
  static const int kAddBetBaseValueFieldNumber = 6;
  inline ::google::protobuf::int64 addbetbasevalue() const;
  inline void set_addbetbasevalue(::google::protobuf::int64 value);

  // optional int64 curBet = 7;
  inline bool has_curbet() const;
  inline void clear_curbet();
  static const int kCurBetFieldNumber = 7;
  inline ::google::protobuf::int64 curbet() const;
  inline void set_curbet(::google::protobuf::int64 value);

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 8;
  inline int playerbetinfo_size() const;
  inline void clear_playerbetinfo();
  static const int kPlayerBetInfoFieldNumber = 8;
  inline const ::game_texaspoker_protocols::PlayerBetInfo& playerbetinfo(int index) const;
  inline ::game_texaspoker_protocols::PlayerBetInfo* mutable_playerbetinfo(int index);
  inline ::game_texaspoker_protocols::PlayerBetInfo* add_playerbetinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >&
      playerbetinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >*
      mutable_playerbetinfo();

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_game_event_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_playerinfo();
  inline void clear_has_playerinfo();
  inline void set_has_currewardpool();
  inline void clear_has_currewardpool();
  inline void set_has_addbetbasevalue();
  inline void clear_has_addbetbasevalue();
  inline void set_has_curbet();
  inline void clear_has_curbet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 event_;
  ::game_texaspoker_protocols::PlayerInfo* playerinfo_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo > commonpoker_;
  ::google::protobuf::int64 currewardpool_;
  ::google::protobuf::int64 addbetbasevalue_;
  ::google::protobuf::int64 curbet_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo > playerbetinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_event_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_table_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_table_scene_info();
  virtual ~packetc2l_get_table_scene_info();

  packetc2l_get_table_scene_info(const packetc2l_get_table_scene_info& from);

  inline packetc2l_get_table_scene_info& operator=(const packetc2l_get_table_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_table_scene_info& default_instance();

  void Swap(packetc2l_get_table_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_table_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_table_scene_info& from);
  void MergeFrom(const packetc2l_get_table_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_get_table_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_table_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class PokerInfo : public ::google::protobuf::Message {
 public:
  PokerInfo();
  virtual ~PokerInfo();

  PokerInfo(const PokerInfo& from);

  inline PokerInfo& operator=(const PokerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PokerInfo& default_instance();

  void Swap(PokerInfo* other);

  // implements Message ----------------------------------------------

  PokerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PokerInfo& from);
  void MergeFrom(const PokerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flower = 1;
  inline bool has_flower() const;
  inline void clear_flower();
  static const int kFlowerFieldNumber = 1;
  inline ::google::protobuf::int32 flower() const;
  inline void set_flower(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.PokerInfo)
 private:
  inline void set_has_flower();
  inline void clear_has_flower();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 flower_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PokerInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_table_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_table_scene_info_result();
  virtual ~packetl2c_get_table_scene_info_result();

  packetl2c_get_table_scene_info_result(const packetl2c_get_table_scene_info_result& from);

  inline packetl2c_get_table_scene_info_result& operator=(const packetl2c_get_table_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_table_scene_info_result& default_instance();

  void Swap(packetl2c_get_table_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_table_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_table_scene_info_result& from);
  void MergeFrom(const packetl2c_get_table_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_table_scene_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 roomId = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 tableId = 3;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIdFieldNumber = 3;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 gameState = 4;
  inline bool has_gamestate() const;
  inline void clear_gamestate();
  static const int kGameStateFieldNumber = 4;
  inline ::google::protobuf::int32 gamestate() const;
  inline void set_gamestate(::google::protobuf::int32 value);

  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 5;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 5;
  inline const ::game_texaspoker_protocols::PlayerInfo& playerlist(int index) const;
  inline ::game_texaspoker_protocols::PlayerInfo* mutable_playerlist(int index);
  inline ::game_texaspoker_protocols::PlayerInfo* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >*
      mutable_playerlist();

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 6;
  inline int commonpoker_size() const;
  inline void clear_commonpoker();
  static const int kCommonPokerFieldNumber = 6;
  inline const ::game_texaspoker_protocols::PokerInfo& commonpoker(int index) const;
  inline ::game_texaspoker_protocols::PokerInfo* mutable_commonpoker(int index);
  inline ::game_texaspoker_protocols::PokerInfo* add_commonpoker();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
      commonpoker() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
      mutable_commonpoker();

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 7;
  inline int backpoker_size() const;
  inline void clear_backpoker();
  static const int kBackPokerFieldNumber = 7;
  inline const ::game_texaspoker_protocols::PokerInfo& backpoker(int index) const;
  inline ::game_texaspoker_protocols::PokerInfo* mutable_backpoker(int index);
  inline ::game_texaspoker_protocols::PokerInfo* add_backpoker();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
      backpoker() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
      mutable_backpoker();

  // optional int64 smallBlindBet = 8;
  inline bool has_smallblindbet() const;
  inline void clear_smallblindbet();
  static const int kSmallBlindBetFieldNumber = 8;
  inline ::google::protobuf::int64 smallblindbet() const;
  inline void set_smallblindbet(::google::protobuf::int64 value);

  // optional int64 fullBlindBet = 9;
  inline bool has_fullblindbet() const;
  inline void clear_fullblindbet();
  static const int kFullBlindBetFieldNumber = 9;
  inline ::google::protobuf::int64 fullblindbet() const;
  inline void set_fullblindbet(::google::protobuf::int64 value);

  // optional int32 waitDeclareTime = 10;
  inline bool has_waitdeclaretime() const;
  inline void clear_waitdeclaretime();
  static const int kWaitDeclareTimeFieldNumber = 10;
  inline ::google::protobuf::int32 waitdeclaretime() const;
  inline void set_waitdeclaretime(::google::protobuf::int32 value);

  // optional int64 curRewardPool = 11;
  inline bool has_currewardpool() const;
  inline void clear_currewardpool();
  static const int kCurRewardPoolFieldNumber = 11;
  inline ::google::protobuf::int64 currewardpool() const;
  inline void set_currewardpool(::google::protobuf::int64 value);

  // optional int64 addBetBaseValue = 12;
  inline bool has_addbetbasevalue() const;
  inline void clear_addbetbasevalue();
  static const int kAddBetBaseValueFieldNumber = 12;
  inline ::google::protobuf::int64 addbetbasevalue() const;
  inline void set_addbetbasevalue(::google::protobuf::int64 value);

  // optional int64 curBet = 13;
  inline bool has_curbet() const;
  inline void clear_curbet();
  static const int kCurBetFieldNumber = 13;
  inline ::google::protobuf::int64 curbet() const;
  inline void set_curbet(::google::protobuf::int64 value);

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 14;
  inline int playerbetinfo_size() const;
  inline void clear_playerbetinfo();
  static const int kPlayerBetInfoFieldNumber = 14;
  inline const ::game_texaspoker_protocols::PlayerBetInfo& playerbetinfo(int index) const;
  inline ::game_texaspoker_protocols::PlayerBetInfo* mutable_playerbetinfo(int index);
  inline ::game_texaspoker_protocols::PlayerBetInfo* add_playerbetinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >&
      playerbetinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >*
      mutable_playerbetinfo();

  // optional .game_texaspoker_protocols.GameInfo gameInfo = 15;
  inline bool has_gameinfo() const;
  inline void clear_gameinfo();
  static const int kGameInfoFieldNumber = 15;
  inline const ::game_texaspoker_protocols::GameInfo& gameinfo() const;
  inline ::game_texaspoker_protocols::GameInfo* mutable_gameinfo();
  inline ::game_texaspoker_protocols::GameInfo* release_gameinfo();
  inline void set_allocated_gameinfo(::game_texaspoker_protocols::GameInfo* gameinfo);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_get_table_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_gamestate();
  inline void clear_has_gamestate();
  inline void set_has_smallblindbet();
  inline void clear_has_smallblindbet();
  inline void set_has_fullblindbet();
  inline void clear_has_fullblindbet();
  inline void set_has_waitdeclaretime();
  inline void clear_has_waitdeclaretime();
  inline void set_has_currewardpool();
  inline void clear_has_currewardpool();
  inline void set_has_addbetbasevalue();
  inline void clear_has_addbetbasevalue();
  inline void set_has_curbet();
  inline void clear_has_curbet();
  inline void set_has_gameinfo();
  inline void clear_has_gameinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 gamestate_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo > playerlist_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo > commonpoker_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo > backpoker_;
  ::google::protobuf::int64 smallblindbet_;
  ::google::protobuf::int64 fullblindbet_;
  ::google::protobuf::int64 currewardpool_;
  ::google::protobuf::int64 addbetbasevalue_;
  ::google::protobuf::int64 curbet_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo > playerbetinfo_;
  ::game_texaspoker_protocols::GameInfo* gameinfo_;
  ::google::protobuf::int32 waitdeclaretime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_table_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_req_declare : public ::google::protobuf::Message {
 public:
  packetc2l_req_declare();
  virtual ~packetc2l_req_declare();

  packetc2l_req_declare(const packetc2l_req_declare& from);

  inline packetc2l_req_declare& operator=(const packetc2l_req_declare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_req_declare& default_instance();

  void Swap(packetc2l_req_declare* other);

  // implements Message ----------------------------------------------

  packetc2l_req_declare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_req_declare& from);
  void MergeFrom(const packetc2l_req_declare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_declare];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 declareSel = 2;
  inline bool has_declaresel() const;
  inline void clear_declaresel();
  static const int kDeclareSelFieldNumber = 2;
  inline ::google::protobuf::int32 declaresel() const;
  inline void set_declaresel(::google::protobuf::int32 value);

  // optional int32 param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_req_declare)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_declaresel();
  inline void clear_has_declaresel();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 declaresel_;
  ::google::protobuf::int32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_req_declare* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_req_declare_result : public ::google::protobuf::Message {
 public:
  packetl2c_req_declare_result();
  virtual ~packetl2c_req_declare_result();

  packetl2c_req_declare_result(const packetl2c_req_declare_result& from);

  inline packetl2c_req_declare_result& operator=(const packetl2c_req_declare_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_req_declare_result& default_instance();

  void Swap(packetl2c_req_declare_result* other);

  // implements Message ----------------------------------------------

  packetl2c_req_declare_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_req_declare_result& from);
  void MergeFrom(const packetl2c_req_declare_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_declare_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 curChip = 3;
  inline bool has_curchip() const;
  inline void clear_curchip();
  static const int kCurChipFieldNumber = 3;
  inline ::google::protobuf::int32 curchip() const;
  inline void set_curchip(::google::protobuf::int32 value);

  // optional int32 hasBet = 4;
  inline bool has_hasbet() const;
  inline void clear_hasbet();
  static const int kHasBetFieldNumber = 4;
  inline ::google::protobuf::int32 hasbet() const;
  inline void set_hasbet(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_req_declare_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_curchip();
  inline void clear_has_curchip();
  inline void set_has_hasbet();
  inline void clear_has_hasbet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 curchip_;
  ::google::protobuf::int32 hasbet_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_req_declare_result* default_instance_;
};
// -------------------------------------------------------------------

class GameInfo : public ::google::protobuf::Message {
 public:
  GameInfo();
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfo& default_instance();

  void Swap(GameInfo* other);

  // implements Message ----------------------------------------------

  GameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bankerSeat = 1;
  inline bool has_bankerseat() const;
  inline void clear_bankerseat();
  static const int kBankerSeatFieldNumber = 1;
  inline ::google::protobuf::int32 bankerseat() const;
  inline void set_bankerseat(::google::protobuf::int32 value);

  // optional int32 smallBlindSeat = 2;
  inline bool has_smallblindseat() const;
  inline void clear_smallblindseat();
  static const int kSmallBlindSeatFieldNumber = 2;
  inline ::google::protobuf::int32 smallblindseat() const;
  inline void set_smallblindseat(::google::protobuf::int32 value);

  // optional int32 bigBlindSeat = 3;
  inline bool has_bigblindseat() const;
  inline void clear_bigblindseat();
  static const int kBigBlindSeatFieldNumber = 3;
  inline ::google::protobuf::int32 bigblindseat() const;
  inline void set_bigblindseat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.GameInfo)
 private:
  inline void set_has_bankerseat();
  inline void clear_has_bankerseat();
  inline void set_has_smallblindseat();
  inline void clear_has_smallblindseat();
  inline void set_has_bigblindseat();
  inline void clear_has_bigblindseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bankerseat_;
  ::google::protobuf::int32 smallblindseat_;
  ::google::protobuf::int32 bigblindseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static GameInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_start_notify : public ::google::protobuf::Message {
 public:
  packetl2c_game_start_notify();
  virtual ~packetl2c_game_start_notify();

  packetl2c_game_start_notify(const packetl2c_game_start_notify& from);

  inline packetl2c_game_start_notify& operator=(const packetl2c_game_start_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_start_notify& default_instance();

  void Swap(packetl2c_game_start_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_game_start_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_start_notify& from);
  void MergeFrom(const packetl2c_game_start_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional .game_texaspoker_protocols.GameInfo gameInfo = 2;
  inline bool has_gameinfo() const;
  inline void clear_gameinfo();
  static const int kGameInfoFieldNumber = 2;
  inline const ::game_texaspoker_protocols::GameInfo& gameinfo() const;
  inline ::game_texaspoker_protocols::GameInfo* mutable_gameinfo();
  inline ::game_texaspoker_protocols::GameInfo* release_gameinfo();
  inline void set_allocated_gameinfo(::game_texaspoker_protocols::GameInfo* gameinfo);

  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 3;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 3;
  inline const ::game_texaspoker_protocols::PlayerInfo& playerlist(int index) const;
  inline ::game_texaspoker_protocols::PlayerInfo* mutable_playerlist(int index);
  inline ::game_texaspoker_protocols::PlayerInfo* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >*
      mutable_playerlist();

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 4;
  inline int backpoker_size() const;
  inline void clear_backpoker();
  static const int kBackPokerFieldNumber = 4;
  inline const ::game_texaspoker_protocols::PokerInfo& backpoker(int index) const;
  inline ::game_texaspoker_protocols::PokerInfo* mutable_backpoker(int index);
  inline ::game_texaspoker_protocols::PokerInfo* add_backpoker();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
      backpoker() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
      mutable_backpoker();

  // optional int64 curRewardPool = 5;
  inline bool has_currewardpool() const;
  inline void clear_currewardpool();
  static const int kCurRewardPoolFieldNumber = 5;
  inline ::google::protobuf::int64 currewardpool() const;
  inline void set_currewardpool(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_game_start_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gameinfo();
  inline void clear_has_gameinfo();
  inline void set_has_currewardpool();
  inline void clear_has_currewardpool();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game_texaspoker_protocols::GameInfo* gameinfo_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo > playerlist_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo > backpoker_;
  ::google::protobuf::int64 currewardpool_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_start_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_wait_notify : public ::google::protobuf::Message {
 public:
  packetl2c_game_wait_notify();
  virtual ~packetl2c_game_wait_notify();

  packetl2c_game_wait_notify(const packetl2c_game_wait_notify& from);

  inline packetl2c_game_wait_notify& operator=(const packetl2c_game_wait_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_wait_notify& default_instance();

  void Swap(packetl2c_game_wait_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_game_wait_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_wait_notify& from);
  void MergeFrom(const packetl2c_game_wait_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_wait_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_game_wait_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_wait_notify* default_instance_;
};
// -------------------------------------------------------------------

class BalancePlayerInfo : public ::google::protobuf::Message {
 public:
  BalancePlayerInfo();
  virtual ~BalancePlayerInfo();

  BalancePlayerInfo(const BalancePlayerInfo& from);

  inline BalancePlayerInfo& operator=(const BalancePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BalancePlayerInfo& default_instance();

  void Swap(BalancePlayerInfo* other);

  // implements Message ----------------------------------------------

  BalancePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BalancePlayerInfo& from);
  void MergeFrom(const BalancePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated .game_texaspoker_protocols.PokerInfo backPoker = 3;
  inline int backpoker_size() const;
  inline void clear_backpoker();
  static const int kBackPokerFieldNumber = 3;
  inline const ::game_texaspoker_protocols::PokerInfo& backpoker(int index) const;
  inline ::game_texaspoker_protocols::PokerInfo* mutable_backpoker(int index);
  inline ::game_texaspoker_protocols::PokerInfo* add_backpoker();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
      backpoker() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
      mutable_backpoker();

  // repeated .game_texaspoker_protocols.PokerInfo selPoker = 4;
  inline int selpoker_size() const;
  inline void clear_selpoker();
  static const int kSelPokerFieldNumber = 4;
  inline const ::game_texaspoker_protocols::PokerInfo& selpoker(int index) const;
  inline ::game_texaspoker_protocols::PokerInfo* mutable_selpoker(int index);
  inline ::game_texaspoker_protocols::PokerInfo* add_selpoker();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
      selpoker() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
      mutable_selpoker();

  // optional int32 pokerType = 5;
  inline bool has_pokertype() const;
  inline void clear_pokertype();
  static const int kPokerTypeFieldNumber = 5;
  inline ::google::protobuf::int32 pokertype() const;
  inline void set_pokertype(::google::protobuf::int32 value);

  // optional int32 winReward = 6;
  inline bool has_winreward() const;
  inline void clear_winreward();
  static const int kWinRewardFieldNumber = 6;
  inline ::google::protobuf::int32 winreward() const;
  inline void set_winreward(::google::protobuf::int32 value);

  // optional bool isAbandon = 7;
  inline bool has_isabandon() const;
  inline void clear_isabandon();
  static const int kIsAbandonFieldNumber = 7;
  inline bool isabandon() const;
  inline void set_isabandon(bool value);

  // optional bool isWinner = 8;
  inline bool has_iswinner() const;
  inline void clear_iswinner();
  static const int kIsWinnerFieldNumber = 8;
  inline bool iswinner() const;
  inline void set_iswinner(bool value);

  // optional bool isShowPoker = 9;
  inline bool has_isshowpoker() const;
  inline void clear_isshowpoker();
  static const int kIsShowPokerFieldNumber = 9;
  inline bool isshowpoker() const;
  inline void set_isshowpoker(bool value);

  // optional int32 rank = 10;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 10;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.BalancePlayerInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_pokertype();
  inline void clear_has_pokertype();
  inline void set_has_winreward();
  inline void clear_has_winreward();
  inline void set_has_isabandon();
  inline void clear_has_isabandon();
  inline void set_has_iswinner();
  inline void clear_has_iswinner();
  inline void set_has_isshowpoker();
  inline void clear_has_isshowpoker();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo > backpoker_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo > selpoker_;
  ::google::protobuf::int32 pokertype_;
  ::google::protobuf::int32 winreward_;
  bool isabandon_;
  bool iswinner_;
  bool isshowpoker_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static BalancePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_end_notify : public ::google::protobuf::Message {
 public:
  packetl2c_game_end_notify();
  virtual ~packetl2c_game_end_notify();

  packetl2c_game_end_notify(const packetl2c_game_end_notify& from);

  inline packetl2c_game_end_notify& operator=(const packetl2c_game_end_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_end_notify& default_instance();

  void Swap(packetl2c_game_end_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_game_end_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_end_notify& from);
  void MergeFrom(const packetl2c_game_end_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int64 curRewardPool = 2;
  inline bool has_currewardpool() const;
  inline void clear_currewardpool();
  static const int kCurRewardPoolFieldNumber = 2;
  inline ::google::protobuf::int64 currewardpool() const;
  inline void set_currewardpool(::google::protobuf::int64 value);

  // repeated .game_texaspoker_protocols.BalancePlayerInfo playerList = 3;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 3;
  inline const ::game_texaspoker_protocols::BalancePlayerInfo& playerlist(int index) const;
  inline ::game_texaspoker_protocols::BalancePlayerInfo* mutable_playerlist(int index);
  inline ::game_texaspoker_protocols::BalancePlayerInfo* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::BalancePlayerInfo >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::BalancePlayerInfo >*
      mutable_playerlist();

  // optional bool isAllAbandon = 4;
  inline bool has_isallabandon() const;
  inline void clear_isallabandon();
  static const int kIsAllAbandonFieldNumber = 4;
  inline bool isallabandon() const;
  inline void set_isallabandon(bool value);

  // repeated .game_texaspoker_protocols.PokerInfo commonPoker = 5;
  inline int commonpoker_size() const;
  inline void clear_commonpoker();
  static const int kCommonPokerFieldNumber = 5;
  inline const ::game_texaspoker_protocols::PokerInfo& commonpoker(int index) const;
  inline ::game_texaspoker_protocols::PokerInfo* mutable_commonpoker(int index);
  inline ::game_texaspoker_protocols::PokerInfo* add_commonpoker();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
      commonpoker() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
      mutable_commonpoker();

  // repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 6;
  inline int playerbetinfo_size() const;
  inline void clear_playerbetinfo();
  static const int kPlayerBetInfoFieldNumber = 6;
  inline const ::game_texaspoker_protocols::PlayerBetInfo& playerbetinfo(int index) const;
  inline ::game_texaspoker_protocols::PlayerBetInfo* mutable_playerbetinfo(int index);
  inline ::game_texaspoker_protocols::PlayerBetInfo* add_playerbetinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >&
      playerbetinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >*
      mutable_playerbetinfo();

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_game_end_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_currewardpool();
  inline void clear_has_currewardpool();
  inline void set_has_isallabandon();
  inline void clear_has_isallabandon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 currewardpool_;
  int packet_id_;
  bool isallabandon_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::BalancePlayerInfo > playerlist_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo > commonpoker_;
  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo > playerbetinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_end_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_req_sitdown : public ::google::protobuf::Message {
 public:
  packetc2l_req_sitdown();
  virtual ~packetc2l_req_sitdown();

  packetc2l_req_sitdown(const packetc2l_req_sitdown& from);

  inline packetc2l_req_sitdown& operator=(const packetc2l_req_sitdown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_req_sitdown& default_instance();

  void Swap(packetc2l_req_sitdown* other);

  // implements Message ----------------------------------------------

  packetc2l_req_sitdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_req_sitdown& from);
  void MergeFrom(const packetc2l_req_sitdown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_sitdown];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_req_sitdown)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_req_sitdown* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_req_sitdown_result : public ::google::protobuf::Message {
 public:
  packetl2c_req_sitdown_result();
  virtual ~packetl2c_req_sitdown_result();

  packetl2c_req_sitdown_result(const packetl2c_req_sitdown_result& from);

  inline packetl2c_req_sitdown_result& operator=(const packetl2c_req_sitdown_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_req_sitdown_result& default_instance();

  void Swap(packetl2c_req_sitdown_result* other);

  // implements Message ----------------------------------------------

  packetl2c_req_sitdown_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_req_sitdown_result& from);
  void MergeFrom(const packetl2c_req_sitdown_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_sitdown_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_req_sitdown_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_req_sitdown_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_req_supply : public ::google::protobuf::Message {
 public:
  packetc2l_req_supply();
  virtual ~packetc2l_req_supply();

  packetc2l_req_supply(const packetc2l_req_supply& from);

  inline packetc2l_req_supply& operator=(const packetc2l_req_supply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_req_supply& default_instance();

  void Swap(packetc2l_req_supply* other);

  // implements Message ----------------------------------------------

  packetc2l_req_supply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_req_supply& from);
  void MergeFrom(const packetc2l_req_supply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_supply];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional bool auto = 2;
  inline bool has_auto_() const;
  inline void clear_auto_();
  static const int kAutoFieldNumber = 2;
  inline bool auto_() const;
  inline void set_auto_(bool value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_req_supply)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_auto_();
  inline void clear_has_auto_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool auto__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_req_supply* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_req_supply_result : public ::google::protobuf::Message {
 public:
  packetl2c_req_supply_result();
  virtual ~packetl2c_req_supply_result();

  packetl2c_req_supply_result(const packetl2c_req_supply_result& from);

  inline packetl2c_req_supply_result& operator=(const packetl2c_req_supply_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_req_supply_result& default_instance();

  void Swap(packetl2c_req_supply_result* other);

  // implements Message ----------------------------------------------

  packetl2c_req_supply_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_req_supply_result& from);
  void MergeFrom(const packetl2c_req_supply_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_supply_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional bool auto = 2;
  inline bool has_auto_() const;
  inline void clear_auto_();
  static const int kAutoFieldNumber = 2;
  inline bool auto_() const;
  inline void set_auto_(bool value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_req_supply_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_auto_();
  inline void clear_has_auto_();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool auto__;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_req_supply_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_req_chip : public ::google::protobuf::Message {
 public:
  packetc2l_req_chip();
  virtual ~packetc2l_req_chip();

  packetc2l_req_chip(const packetc2l_req_chip& from);

  inline packetc2l_req_chip& operator=(const packetc2l_req_chip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_req_chip& default_instance();

  void Swap(packetc2l_req_chip* other);

  // implements Message ----------------------------------------------

  packetc2l_req_chip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_req_chip& from);
  void MergeFrom(const packetc2l_req_chip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_chip];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 chip = 2;
  inline bool has_chip() const;
  inline void clear_chip();
  static const int kChipFieldNumber = 2;
  inline ::google::protobuf::int32 chip() const;
  inline void set_chip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_req_chip)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chip();
  inline void clear_has_chip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_req_chip* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_req_chip_result : public ::google::protobuf::Message {
 public:
  packetl2c_req_chip_result();
  virtual ~packetl2c_req_chip_result();

  packetl2c_req_chip_result(const packetl2c_req_chip_result& from);

  inline packetl2c_req_chip_result& operator=(const packetl2c_req_chip_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_req_chip_result& default_instance();

  void Swap(packetl2c_req_chip_result* other);

  // implements Message ----------------------------------------------

  packetl2c_req_chip_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_req_chip_result& from);
  void MergeFrom(const packetl2c_req_chip_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_chip_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_req_chip_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_req_chip_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_buy_chip_notify : public ::google::protobuf::Message {
 public:
  packetl2c_buy_chip_notify();
  virtual ~packetl2c_buy_chip_notify();

  packetl2c_buy_chip_notify(const packetl2c_buy_chip_notify& from);

  inline packetl2c_buy_chip_notify& operator=(const packetl2c_buy_chip_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_buy_chip_notify& default_instance();

  void Swap(packetl2c_buy_chip_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_buy_chip_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_buy_chip_notify& from);
  void MergeFrom(const packetl2c_buy_chip_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_buy_chip_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // repeated .game_texaspoker_protocols.PlayerInfo playerList = 2;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 2;
  inline const ::game_texaspoker_protocols::PlayerInfo& playerlist(int index) const;
  inline ::game_texaspoker_protocols::PlayerInfo* mutable_playerlist(int index);
  inline ::game_texaspoker_protocols::PlayerInfo* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >*
      mutable_playerlist();

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_buy_chip_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo > playerlist_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_buy_chip_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_show_poker : public ::google::protobuf::Message {
 public:
  packetc2l_show_poker();
  virtual ~packetc2l_show_poker();

  packetc2l_show_poker(const packetc2l_show_poker& from);

  inline packetc2l_show_poker& operator=(const packetc2l_show_poker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_show_poker& default_instance();

  void Swap(packetc2l_show_poker* other);

  // implements Message ----------------------------------------------

  packetc2l_show_poker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_show_poker& from);
  void MergeFrom(const packetc2l_show_poker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_poker];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional bool isShow = 2;
  inline bool has_isshow() const;
  inline void clear_isshow();
  static const int kIsShowFieldNumber = 2;
  inline bool isshow() const;
  inline void set_isshow(bool value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_show_poker)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_isshow();
  inline void clear_has_isshow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool isshow_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_show_poker* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_show_poker_result : public ::google::protobuf::Message {
 public:
  packetl2c_show_poker_result();
  virtual ~packetl2c_show_poker_result();

  packetl2c_show_poker_result(const packetl2c_show_poker_result& from);

  inline packetl2c_show_poker_result& operator=(const packetl2c_show_poker_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_show_poker_result& default_instance();

  void Swap(packetl2c_show_poker_result* other);

  // implements Message ----------------------------------------------

  packetl2c_show_poker_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_show_poker_result& from);
  void MergeFrom(const packetl2c_show_poker_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_show_poker_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_show_poker_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_show_poker_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_req_standup : public ::google::protobuf::Message {
 public:
  packetc2l_req_standup();
  virtual ~packetc2l_req_standup();

  packetc2l_req_standup(const packetc2l_req_standup& from);

  inline packetc2l_req_standup& operator=(const packetc2l_req_standup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_req_standup& default_instance();

  void Swap(packetc2l_req_standup* other);

  // implements Message ----------------------------------------------

  packetc2l_req_standup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_req_standup& from);
  void MergeFrom(const packetc2l_req_standup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_standup];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_req_standup)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_req_standup* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_req_standup_result : public ::google::protobuf::Message {
 public:
  packetl2c_req_standup_result();
  virtual ~packetl2c_req_standup_result();

  packetl2c_req_standup_result(const packetl2c_req_standup_result& from);

  inline packetl2c_req_standup_result& operator=(const packetl2c_req_standup_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_req_standup_result& default_instance();

  void Swap(packetl2c_req_standup_result* other);

  // implements Message ----------------------------------------------

  packetl2c_req_standup_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_req_standup_result& from);
  void MergeFrom(const packetl2c_req_standup_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_standup_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_req_standup_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_req_standup_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_texaspoker_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_texaspoker_protocols::e_server_msg_type value);

  // optional bool is_intable = 2 [default = false];
  inline bool has_is_intable() const;
  inline void clear_is_intable();
  static const int kIsIntableFieldNumber = 2;
  inline bool is_intable() const;
  inline void set_is_intable(bool value);

  // @@protoc_insertion_point(class_scope:game_texaspoker_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_is_intable();
  inline void clear_has_is_intable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool is_intable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5ftexaspoker_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5ftexaspoker_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_room_info

// optional int32 roomid = 1;
inline bool msg_room_info::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_room_info::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_room_info::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_room_info::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_room_info::roomid() const {
  return roomid_;
}
inline void msg_room_info::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_room_info

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
inline bool packetc2l_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_info::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_get_room_info::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_info::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_room_info_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
inline bool packetl2c_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_get_room_info_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_info_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_texaspoker_protocols.msg_room_info room_list = 2;
inline int packetl2c_get_room_info_result::room_list_size() const {
  return room_list_.size();
}
inline void packetl2c_get_room_info_result::clear_room_list() {
  room_list_.Clear();
}
inline const ::game_texaspoker_protocols::msg_room_info& packetl2c_get_room_info_result::room_list(int index) const {
  return room_list_.Get(index);
}
inline ::game_texaspoker_protocols::msg_room_info* packetl2c_get_room_info_result::mutable_room_list(int index) {
  return room_list_.Mutable(index);
}
inline ::game_texaspoker_protocols::msg_room_info* packetl2c_get_room_info_result::add_room_list() {
  return room_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::msg_room_info >&
packetl2c_get_room_info_result::room_list() const {
  return room_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::msg_room_info >*
packetl2c_get_room_info_result::mutable_room_list() {
  return &room_list_;
}

// -------------------------------------------------------------------

// packetc2l_join_table

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_join_table];
inline bool packetc2l_join_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_join_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_join_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_join_table::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_join_table::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_join_table::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 roomId = 2;
inline bool packetc2l_join_table::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_join_table::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_join_table::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_join_table::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 packetc2l_join_table::roomid() const {
  return roomid_;
}
inline void packetc2l_join_table::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// packetl2c_join_table_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_join_table_result];
inline bool packetl2c_join_table_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_join_table_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_join_table_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_join_table_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_join_table_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_join_table_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_join_table_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_join_table_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_join_table_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_join_table_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_join_table_result::result() const {
  return result_;
}
inline void packetl2c_join_table_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_table

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_table];
inline bool packetc2l_leave_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_table::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_leave_table::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_table::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_table_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_table_result];
inline bool packetl2c_leave_table_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_table_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_table_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_table_result::clear_packet_id() {
  packet_id_ = 15003;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_leave_table_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_table_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_leave_table_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_table_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_table_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_table_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_leave_table_result::result() const {
  return result_;
}
inline void packetl2c_leave_table_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 playerGold = 3;
inline bool packetl2c_leave_table_result::has_playergold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_leave_table_result::set_has_playergold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_leave_table_result::clear_has_playergold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_leave_table_result::clear_playergold() {
  playergold_ = 0;
  clear_has_playergold();
}
inline ::google::protobuf::int32 packetl2c_leave_table_result::playergold() const {
  return playergold_;
}
inline void packetl2c_leave_table_result::set_playergold(::google::protobuf::int32 value) {
  set_has_playergold();
  playergold_ = value;
}

// -------------------------------------------------------------------

// PlayerInfo

// optional int32 playerId = 1;
inline bool PlayerInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 PlayerInfo::playerid() const {
  return playerid_;
}
inline void PlayerInfo::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string nickName = 2;
inline bool PlayerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& PlayerInfo::nickname() const {
  return *nickname_;
}
inline void PlayerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PlayerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PlayerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* PlayerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 curChip = 3;
inline bool PlayerInfo::has_curchip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfo::set_has_curchip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfo::clear_has_curchip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfo::clear_curchip() {
  curchip_ = GOOGLE_LONGLONG(0);
  clear_has_curchip();
}
inline ::google::protobuf::int64 PlayerInfo::curchip() const {
  return curchip_;
}
inline void PlayerInfo::set_curchip(::google::protobuf::int64 value) {
  set_has_curchip();
  curchip_ = value;
}

// optional int64 hasBet = 4;
inline bool PlayerInfo::has_hasbet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfo::set_has_hasbet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfo::clear_has_hasbet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfo::clear_hasbet() {
  hasbet_ = GOOGLE_LONGLONG(0);
  clear_has_hasbet();
}
inline ::google::protobuf::int64 PlayerInfo::hasbet() const {
  return hasbet_;
}
inline void PlayerInfo::set_hasbet(::google::protobuf::int64 value) {
  set_has_hasbet();
  hasbet_ = value;
}

// optional int64 hasBetCur = 5;
inline bool PlayerInfo::has_hasbetcur() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfo::set_has_hasbetcur() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfo::clear_has_hasbetcur() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfo::clear_hasbetcur() {
  hasbetcur_ = GOOGLE_LONGLONG(0);
  clear_has_hasbetcur();
}
inline ::google::protobuf::int64 PlayerInfo::hasbetcur() const {
  return hasbetcur_;
}
inline void PlayerInfo::set_hasbetcur(::google::protobuf::int64 value) {
  set_has_hasbetcur();
  hasbetcur_ = value;
}

// optional int32 state = 6;
inline bool PlayerInfo::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInfo::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 PlayerInfo::state() const {
  return state_;
}
inline void PlayerInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 seat = 7;
inline bool PlayerInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 PlayerInfo::seat() const {
  return seat_;
}
inline void PlayerInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 declareResult = 8;
inline bool PlayerInfo::has_declareresult() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerInfo::set_has_declareresult() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerInfo::clear_has_declareresult() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerInfo::clear_declareresult() {
  declareresult_ = 0;
  clear_has_declareresult();
}
inline ::google::protobuf::int32 PlayerInfo::declareresult() const {
  return declareresult_;
}
inline void PlayerInfo::set_declareresult(::google::protobuf::int32 value) {
  set_has_declareresult();
  declareresult_ = value;
}

// optional int32 headFrame = 9;
inline bool PlayerInfo::has_headframe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerInfo::set_has_headframe() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerInfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerInfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 PlayerInfo::headframe() const {
  return headframe_;
}
inline void PlayerInfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// optional string headCustom = 10;
inline bool PlayerInfo::has_headcustom() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerInfo::set_has_headcustom() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerInfo::clear_has_headcustom() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerInfo::clear_headcustom() {
  if (headcustom_ != &::google::protobuf::internal::kEmptyString) {
    headcustom_->clear();
  }
  clear_has_headcustom();
}
inline const ::std::string& PlayerInfo::headcustom() const {
  return *headcustom_;
}
inline void PlayerInfo::set_headcustom(const ::std::string& value) {
  set_has_headcustom();
  if (headcustom_ == &::google::protobuf::internal::kEmptyString) {
    headcustom_ = new ::std::string;
  }
  headcustom_->assign(value);
}
inline void PlayerInfo::set_headcustom(const char* value) {
  set_has_headcustom();
  if (headcustom_ == &::google::protobuf::internal::kEmptyString) {
    headcustom_ = new ::std::string;
  }
  headcustom_->assign(value);
}
inline void PlayerInfo::set_headcustom(const char* value, size_t size) {
  set_has_headcustom();
  if (headcustom_ == &::google::protobuf::internal::kEmptyString) {
    headcustom_ = new ::std::string;
  }
  headcustom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_headcustom() {
  set_has_headcustom();
  if (headcustom_ == &::google::protobuf::internal::kEmptyString) {
    headcustom_ = new ::std::string;
  }
  return headcustom_;
}
inline ::std::string* PlayerInfo::release_headcustom() {
  clear_has_headcustom();
  if (headcustom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headcustom_;
    headcustom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerInfo::set_allocated_headcustom(::std::string* headcustom) {
  if (headcustom_ != &::google::protobuf::internal::kEmptyString) {
    delete headcustom_;
  }
  if (headcustom) {
    set_has_headcustom();
    headcustom_ = headcustom;
  } else {
    clear_has_headcustom();
    headcustom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 11;
inline bool PlayerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 PlayerInfo::sex() const {
  return sex_;
}
inline void PlayerInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 vipLevel = 12;
inline bool PlayerInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 PlayerInfo::viplevel() const {
  return viplevel_;
}
inline void PlayerInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional bool supply = 13;
inline bool PlayerInfo::has_supply() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerInfo::set_has_supply() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerInfo::clear_has_supply() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerInfo::clear_supply() {
  supply_ = false;
  clear_has_supply();
}
inline bool PlayerInfo::supply() const {
  return supply_;
}
inline void PlayerInfo::set_supply(bool value) {
  set_has_supply();
  supply_ = value;
}

// optional bool supply_done = 14;
inline bool PlayerInfo::has_supply_done() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerInfo::set_has_supply_done() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerInfo::clear_has_supply_done() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerInfo::clear_supply_done() {
  supply_done_ = false;
  clear_has_supply_done();
}
inline bool PlayerInfo::supply_done() const {
  return supply_done_;
}
inline void PlayerInfo::set_supply_done(bool value) {
  set_has_supply_done();
  supply_done_ = value;
}

// -------------------------------------------------------------------

// PlayerBetInfo

// optional int32 playerId = 1;
inline bool PlayerBetInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerBetInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerBetInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerBetInfo::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 PlayerBetInfo::playerid() const {
  return playerid_;
}
inline void PlayerBetInfo::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int64 hasBet = 2;
inline bool PlayerBetInfo::has_hasbet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerBetInfo::set_has_hasbet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerBetInfo::clear_has_hasbet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerBetInfo::clear_hasbet() {
  hasbet_ = GOOGLE_LONGLONG(0);
  clear_has_hasbet();
}
inline ::google::protobuf::int64 PlayerBetInfo::hasbet() const {
  return hasbet_;
}
inline void PlayerBetInfo::set_hasbet(::google::protobuf::int64 value) {
  set_has_hasbet();
  hasbet_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_event_notify

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_event_notify];
inline bool packetl2c_game_event_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_event_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_event_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_event_notify::clear_packet_id() {
  packet_id_ = 15005;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_game_event_notify::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_event_notify::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 event = 2;
inline bool packetl2c_game_event_notify::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_event_notify::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_event_notify::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_event_notify::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::google::protobuf::int32 packetl2c_game_event_notify::event() const {
  return event_;
}
inline void packetl2c_game_event_notify::set_event(::google::protobuf::int32 value) {
  set_has_event();
  event_ = value;
}

// optional .game_texaspoker_protocols.PlayerInfo playerInfo = 3;
inline bool packetl2c_game_event_notify::has_playerinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_game_event_notify::set_has_playerinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_game_event_notify::clear_has_playerinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_game_event_notify::clear_playerinfo() {
  if (playerinfo_ != NULL) playerinfo_->::game_texaspoker_protocols::PlayerInfo::Clear();
  clear_has_playerinfo();
}
inline const ::game_texaspoker_protocols::PlayerInfo& packetl2c_game_event_notify::playerinfo() const {
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
inline ::game_texaspoker_protocols::PlayerInfo* packetl2c_game_event_notify::mutable_playerinfo() {
  set_has_playerinfo();
  if (playerinfo_ == NULL) playerinfo_ = new ::game_texaspoker_protocols::PlayerInfo;
  return playerinfo_;
}
inline ::game_texaspoker_protocols::PlayerInfo* packetl2c_game_event_notify::release_playerinfo() {
  clear_has_playerinfo();
  ::game_texaspoker_protocols::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
inline void packetl2c_game_event_notify::set_allocated_playerinfo(::game_texaspoker_protocols::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    set_has_playerinfo();
  } else {
    clear_has_playerinfo();
  }
}

// repeated .game_texaspoker_protocols.PokerInfo commonPoker = 4;
inline int packetl2c_game_event_notify::commonpoker_size() const {
  return commonpoker_.size();
}
inline void packetl2c_game_event_notify::clear_commonpoker() {
  commonpoker_.Clear();
}
inline const ::game_texaspoker_protocols::PokerInfo& packetl2c_game_event_notify::commonpoker(int index) const {
  return commonpoker_.Get(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_game_event_notify::mutable_commonpoker(int index) {
  return commonpoker_.Mutable(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_game_event_notify::add_commonpoker() {
  return commonpoker_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
packetl2c_game_event_notify::commonpoker() const {
  return commonpoker_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
packetl2c_game_event_notify::mutable_commonpoker() {
  return &commonpoker_;
}

// optional int64 curRewardPool = 5;
inline bool packetl2c_game_event_notify::has_currewardpool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_game_event_notify::set_has_currewardpool() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_game_event_notify::clear_has_currewardpool() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_game_event_notify::clear_currewardpool() {
  currewardpool_ = GOOGLE_LONGLONG(0);
  clear_has_currewardpool();
}
inline ::google::protobuf::int64 packetl2c_game_event_notify::currewardpool() const {
  return currewardpool_;
}
inline void packetl2c_game_event_notify::set_currewardpool(::google::protobuf::int64 value) {
  set_has_currewardpool();
  currewardpool_ = value;
}

// optional int64 addBetBaseValue = 6;
inline bool packetl2c_game_event_notify::has_addbetbasevalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_game_event_notify::set_has_addbetbasevalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_game_event_notify::clear_has_addbetbasevalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_game_event_notify::clear_addbetbasevalue() {
  addbetbasevalue_ = GOOGLE_LONGLONG(0);
  clear_has_addbetbasevalue();
}
inline ::google::protobuf::int64 packetl2c_game_event_notify::addbetbasevalue() const {
  return addbetbasevalue_;
}
inline void packetl2c_game_event_notify::set_addbetbasevalue(::google::protobuf::int64 value) {
  set_has_addbetbasevalue();
  addbetbasevalue_ = value;
}

// optional int64 curBet = 7;
inline bool packetl2c_game_event_notify::has_curbet() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_game_event_notify::set_has_curbet() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_game_event_notify::clear_has_curbet() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_game_event_notify::clear_curbet() {
  curbet_ = GOOGLE_LONGLONG(0);
  clear_has_curbet();
}
inline ::google::protobuf::int64 packetl2c_game_event_notify::curbet() const {
  return curbet_;
}
inline void packetl2c_game_event_notify::set_curbet(::google::protobuf::int64 value) {
  set_has_curbet();
  curbet_ = value;
}

// repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 8;
inline int packetl2c_game_event_notify::playerbetinfo_size() const {
  return playerbetinfo_.size();
}
inline void packetl2c_game_event_notify::clear_playerbetinfo() {
  playerbetinfo_.Clear();
}
inline const ::game_texaspoker_protocols::PlayerBetInfo& packetl2c_game_event_notify::playerbetinfo(int index) const {
  return playerbetinfo_.Get(index);
}
inline ::game_texaspoker_protocols::PlayerBetInfo* packetl2c_game_event_notify::mutable_playerbetinfo(int index) {
  return playerbetinfo_.Mutable(index);
}
inline ::game_texaspoker_protocols::PlayerBetInfo* packetl2c_game_event_notify::add_playerbetinfo() {
  return playerbetinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >&
packetl2c_game_event_notify::playerbetinfo() const {
  return playerbetinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >*
packetl2c_game_event_notify::mutable_playerbetinfo() {
  return &playerbetinfo_;
}

// -------------------------------------------------------------------

// packetc2l_get_table_scene_info

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
inline bool packetc2l_get_table_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_table_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_table_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_table_scene_info::clear_packet_id() {
  packet_id_ = 10004;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_get_table_scene_info::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_table_scene_info::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// PokerInfo

// optional int32 flower = 1;
inline bool PokerInfo::has_flower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PokerInfo::set_has_flower() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PokerInfo::clear_has_flower() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PokerInfo::clear_flower() {
  flower_ = 0;
  clear_has_flower();
}
inline ::google::protobuf::int32 PokerInfo::flower() const {
  return flower_;
}
inline void PokerInfo::set_flower(::google::protobuf::int32 value) {
  set_has_flower();
  flower_ = value;
}

// optional int32 value = 2;
inline bool PokerInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PokerInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PokerInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PokerInfo::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 PokerInfo::value() const {
  return value_;
}
inline void PokerInfo::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// packetl2c_get_table_scene_info_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_table_scene_info_result];
inline bool packetl2c_get_table_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_table_scene_info_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_get_table_scene_info_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_table_scene_info_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 roomId = 2;
inline bool packetl2c_get_table_scene_info_result::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_table_scene_info_result::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 packetl2c_get_table_scene_info_result::roomid() const {
  return roomid_;
}
inline void packetl2c_get_table_scene_info_result::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 tableId = 3;
inline bool packetl2c_get_table_scene_info_result::has_tableid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_tableid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_get_table_scene_info_result::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 packetl2c_get_table_scene_info_result::tableid() const {
  return tableid_;
}
inline void packetl2c_get_table_scene_info_result::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 gameState = 4;
inline bool packetl2c_get_table_scene_info_result::has_gamestate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_gamestate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_gamestate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_get_table_scene_info_result::clear_gamestate() {
  gamestate_ = 0;
  clear_has_gamestate();
}
inline ::google::protobuf::int32 packetl2c_get_table_scene_info_result::gamestate() const {
  return gamestate_;
}
inline void packetl2c_get_table_scene_info_result::set_gamestate(::google::protobuf::int32 value) {
  set_has_gamestate();
  gamestate_ = value;
}

// repeated .game_texaspoker_protocols.PlayerInfo playerList = 5;
inline int packetl2c_get_table_scene_info_result::playerlist_size() const {
  return playerlist_.size();
}
inline void packetl2c_get_table_scene_info_result::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::game_texaspoker_protocols::PlayerInfo& packetl2c_get_table_scene_info_result::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline ::game_texaspoker_protocols::PlayerInfo* packetl2c_get_table_scene_info_result::mutable_playerlist(int index) {
  return playerlist_.Mutable(index);
}
inline ::game_texaspoker_protocols::PlayerInfo* packetl2c_get_table_scene_info_result::add_playerlist() {
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >&
packetl2c_get_table_scene_info_result::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >*
packetl2c_get_table_scene_info_result::mutable_playerlist() {
  return &playerlist_;
}

// repeated .game_texaspoker_protocols.PokerInfo commonPoker = 6;
inline int packetl2c_get_table_scene_info_result::commonpoker_size() const {
  return commonpoker_.size();
}
inline void packetl2c_get_table_scene_info_result::clear_commonpoker() {
  commonpoker_.Clear();
}
inline const ::game_texaspoker_protocols::PokerInfo& packetl2c_get_table_scene_info_result::commonpoker(int index) const {
  return commonpoker_.Get(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_get_table_scene_info_result::mutable_commonpoker(int index) {
  return commonpoker_.Mutable(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_get_table_scene_info_result::add_commonpoker() {
  return commonpoker_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
packetl2c_get_table_scene_info_result::commonpoker() const {
  return commonpoker_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
packetl2c_get_table_scene_info_result::mutable_commonpoker() {
  return &commonpoker_;
}

// repeated .game_texaspoker_protocols.PokerInfo backPoker = 7;
inline int packetl2c_get_table_scene_info_result::backpoker_size() const {
  return backpoker_.size();
}
inline void packetl2c_get_table_scene_info_result::clear_backpoker() {
  backpoker_.Clear();
}
inline const ::game_texaspoker_protocols::PokerInfo& packetl2c_get_table_scene_info_result::backpoker(int index) const {
  return backpoker_.Get(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_get_table_scene_info_result::mutable_backpoker(int index) {
  return backpoker_.Mutable(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_get_table_scene_info_result::add_backpoker() {
  return backpoker_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
packetl2c_get_table_scene_info_result::backpoker() const {
  return backpoker_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
packetl2c_get_table_scene_info_result::mutable_backpoker() {
  return &backpoker_;
}

// optional int64 smallBlindBet = 8;
inline bool packetl2c_get_table_scene_info_result::has_smallblindbet() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_smallblindbet() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_smallblindbet() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_get_table_scene_info_result::clear_smallblindbet() {
  smallblindbet_ = GOOGLE_LONGLONG(0);
  clear_has_smallblindbet();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_info_result::smallblindbet() const {
  return smallblindbet_;
}
inline void packetl2c_get_table_scene_info_result::set_smallblindbet(::google::protobuf::int64 value) {
  set_has_smallblindbet();
  smallblindbet_ = value;
}

// optional int64 fullBlindBet = 9;
inline bool packetl2c_get_table_scene_info_result::has_fullblindbet() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_fullblindbet() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_fullblindbet() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetl2c_get_table_scene_info_result::clear_fullblindbet() {
  fullblindbet_ = GOOGLE_LONGLONG(0);
  clear_has_fullblindbet();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_info_result::fullblindbet() const {
  return fullblindbet_;
}
inline void packetl2c_get_table_scene_info_result::set_fullblindbet(::google::protobuf::int64 value) {
  set_has_fullblindbet();
  fullblindbet_ = value;
}

// optional int32 waitDeclareTime = 10;
inline bool packetl2c_get_table_scene_info_result::has_waitdeclaretime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_waitdeclaretime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_waitdeclaretime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void packetl2c_get_table_scene_info_result::clear_waitdeclaretime() {
  waitdeclaretime_ = 0;
  clear_has_waitdeclaretime();
}
inline ::google::protobuf::int32 packetl2c_get_table_scene_info_result::waitdeclaretime() const {
  return waitdeclaretime_;
}
inline void packetl2c_get_table_scene_info_result::set_waitdeclaretime(::google::protobuf::int32 value) {
  set_has_waitdeclaretime();
  waitdeclaretime_ = value;
}

// optional int64 curRewardPool = 11;
inline bool packetl2c_get_table_scene_info_result::has_currewardpool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_currewardpool() {
  _has_bits_[0] |= 0x00000400u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_currewardpool() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void packetl2c_get_table_scene_info_result::clear_currewardpool() {
  currewardpool_ = GOOGLE_LONGLONG(0);
  clear_has_currewardpool();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_info_result::currewardpool() const {
  return currewardpool_;
}
inline void packetl2c_get_table_scene_info_result::set_currewardpool(::google::protobuf::int64 value) {
  set_has_currewardpool();
  currewardpool_ = value;
}

// optional int64 addBetBaseValue = 12;
inline bool packetl2c_get_table_scene_info_result::has_addbetbasevalue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_addbetbasevalue() {
  _has_bits_[0] |= 0x00000800u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_addbetbasevalue() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void packetl2c_get_table_scene_info_result::clear_addbetbasevalue() {
  addbetbasevalue_ = GOOGLE_LONGLONG(0);
  clear_has_addbetbasevalue();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_info_result::addbetbasevalue() const {
  return addbetbasevalue_;
}
inline void packetl2c_get_table_scene_info_result::set_addbetbasevalue(::google::protobuf::int64 value) {
  set_has_addbetbasevalue();
  addbetbasevalue_ = value;
}

// optional int64 curBet = 13;
inline bool packetl2c_get_table_scene_info_result::has_curbet() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_curbet() {
  _has_bits_[0] |= 0x00001000u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_curbet() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void packetl2c_get_table_scene_info_result::clear_curbet() {
  curbet_ = GOOGLE_LONGLONG(0);
  clear_has_curbet();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_info_result::curbet() const {
  return curbet_;
}
inline void packetl2c_get_table_scene_info_result::set_curbet(::google::protobuf::int64 value) {
  set_has_curbet();
  curbet_ = value;
}

// repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 14;
inline int packetl2c_get_table_scene_info_result::playerbetinfo_size() const {
  return playerbetinfo_.size();
}
inline void packetl2c_get_table_scene_info_result::clear_playerbetinfo() {
  playerbetinfo_.Clear();
}
inline const ::game_texaspoker_protocols::PlayerBetInfo& packetl2c_get_table_scene_info_result::playerbetinfo(int index) const {
  return playerbetinfo_.Get(index);
}
inline ::game_texaspoker_protocols::PlayerBetInfo* packetl2c_get_table_scene_info_result::mutable_playerbetinfo(int index) {
  return playerbetinfo_.Mutable(index);
}
inline ::game_texaspoker_protocols::PlayerBetInfo* packetl2c_get_table_scene_info_result::add_playerbetinfo() {
  return playerbetinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >&
packetl2c_get_table_scene_info_result::playerbetinfo() const {
  return playerbetinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >*
packetl2c_get_table_scene_info_result::mutable_playerbetinfo() {
  return &playerbetinfo_;
}

// optional .game_texaspoker_protocols.GameInfo gameInfo = 15;
inline bool packetl2c_get_table_scene_info_result::has_gameinfo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void packetl2c_get_table_scene_info_result::set_has_gameinfo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void packetl2c_get_table_scene_info_result::clear_has_gameinfo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void packetl2c_get_table_scene_info_result::clear_gameinfo() {
  if (gameinfo_ != NULL) gameinfo_->::game_texaspoker_protocols::GameInfo::Clear();
  clear_has_gameinfo();
}
inline const ::game_texaspoker_protocols::GameInfo& packetl2c_get_table_scene_info_result::gameinfo() const {
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance_->gameinfo_;
}
inline ::game_texaspoker_protocols::GameInfo* packetl2c_get_table_scene_info_result::mutable_gameinfo() {
  set_has_gameinfo();
  if (gameinfo_ == NULL) gameinfo_ = new ::game_texaspoker_protocols::GameInfo;
  return gameinfo_;
}
inline ::game_texaspoker_protocols::GameInfo* packetl2c_get_table_scene_info_result::release_gameinfo() {
  clear_has_gameinfo();
  ::game_texaspoker_protocols::GameInfo* temp = gameinfo_;
  gameinfo_ = NULL;
  return temp;
}
inline void packetl2c_get_table_scene_info_result::set_allocated_gameinfo(::game_texaspoker_protocols::GameInfo* gameinfo) {
  delete gameinfo_;
  gameinfo_ = gameinfo;
  if (gameinfo) {
    set_has_gameinfo();
  } else {
    clear_has_gameinfo();
  }
}

// -------------------------------------------------------------------

// packetc2l_req_declare

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_declare];
inline bool packetc2l_req_declare::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_req_declare::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_req_declare::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_req_declare::clear_packet_id() {
  packet_id_ = 10005;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_req_declare::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_req_declare::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 declareSel = 2;
inline bool packetc2l_req_declare::has_declaresel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_req_declare::set_has_declaresel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_req_declare::clear_has_declaresel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_req_declare::clear_declaresel() {
  declaresel_ = 0;
  clear_has_declaresel();
}
inline ::google::protobuf::int32 packetc2l_req_declare::declaresel() const {
  return declaresel_;
}
inline void packetc2l_req_declare::set_declaresel(::google::protobuf::int32 value) {
  set_has_declaresel();
  declaresel_ = value;
}

// optional int32 param = 3;
inline bool packetc2l_req_declare::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2l_req_declare::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2l_req_declare::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2l_req_declare::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 packetc2l_req_declare::param() const {
  return param_;
}
inline void packetc2l_req_declare::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// packetl2c_req_declare_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_declare_result];
inline bool packetl2c_req_declare_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_req_declare_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_req_declare_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_req_declare_result::clear_packet_id() {
  packet_id_ = 15006;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_req_declare_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_req_declare_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_req_declare_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_req_declare_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_req_declare_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_req_declare_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_req_declare_result::result() const {
  return result_;
}
inline void packetl2c_req_declare_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 curChip = 3;
inline bool packetl2c_req_declare_result::has_curchip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_req_declare_result::set_has_curchip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_req_declare_result::clear_has_curchip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_req_declare_result::clear_curchip() {
  curchip_ = 0;
  clear_has_curchip();
}
inline ::google::protobuf::int32 packetl2c_req_declare_result::curchip() const {
  return curchip_;
}
inline void packetl2c_req_declare_result::set_curchip(::google::protobuf::int32 value) {
  set_has_curchip();
  curchip_ = value;
}

// optional int32 hasBet = 4;
inline bool packetl2c_req_declare_result::has_hasbet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_req_declare_result::set_has_hasbet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_req_declare_result::clear_has_hasbet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_req_declare_result::clear_hasbet() {
  hasbet_ = 0;
  clear_has_hasbet();
}
inline ::google::protobuf::int32 packetl2c_req_declare_result::hasbet() const {
  return hasbet_;
}
inline void packetl2c_req_declare_result::set_hasbet(::google::protobuf::int32 value) {
  set_has_hasbet();
  hasbet_ = value;
}

// -------------------------------------------------------------------

// GameInfo

// optional int32 bankerSeat = 1;
inline bool GameInfo::has_bankerseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInfo::set_has_bankerseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInfo::clear_has_bankerseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInfo::clear_bankerseat() {
  bankerseat_ = 0;
  clear_has_bankerseat();
}
inline ::google::protobuf::int32 GameInfo::bankerseat() const {
  return bankerseat_;
}
inline void GameInfo::set_bankerseat(::google::protobuf::int32 value) {
  set_has_bankerseat();
  bankerseat_ = value;
}

// optional int32 smallBlindSeat = 2;
inline bool GameInfo::has_smallblindseat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInfo::set_has_smallblindseat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInfo::clear_has_smallblindseat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInfo::clear_smallblindseat() {
  smallblindseat_ = 0;
  clear_has_smallblindseat();
}
inline ::google::protobuf::int32 GameInfo::smallblindseat() const {
  return smallblindseat_;
}
inline void GameInfo::set_smallblindseat(::google::protobuf::int32 value) {
  set_has_smallblindseat();
  smallblindseat_ = value;
}

// optional int32 bigBlindSeat = 3;
inline bool GameInfo::has_bigblindseat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInfo::set_has_bigblindseat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInfo::clear_has_bigblindseat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInfo::clear_bigblindseat() {
  bigblindseat_ = 0;
  clear_has_bigblindseat();
}
inline ::google::protobuf::int32 GameInfo::bigblindseat() const {
  return bigblindseat_;
}
inline void GameInfo::set_bigblindseat(::google::protobuf::int32 value) {
  set_has_bigblindseat();
  bigblindseat_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_start_notify

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start_notify];
inline bool packetl2c_game_start_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_start_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_start_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_start_notify::clear_packet_id() {
  packet_id_ = 15007;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_game_start_notify::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_start_notify::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_texaspoker_protocols.GameInfo gameInfo = 2;
inline bool packetl2c_game_start_notify::has_gameinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_start_notify::set_has_gameinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_start_notify::clear_has_gameinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_start_notify::clear_gameinfo() {
  if (gameinfo_ != NULL) gameinfo_->::game_texaspoker_protocols::GameInfo::Clear();
  clear_has_gameinfo();
}
inline const ::game_texaspoker_protocols::GameInfo& packetl2c_game_start_notify::gameinfo() const {
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance_->gameinfo_;
}
inline ::game_texaspoker_protocols::GameInfo* packetl2c_game_start_notify::mutable_gameinfo() {
  set_has_gameinfo();
  if (gameinfo_ == NULL) gameinfo_ = new ::game_texaspoker_protocols::GameInfo;
  return gameinfo_;
}
inline ::game_texaspoker_protocols::GameInfo* packetl2c_game_start_notify::release_gameinfo() {
  clear_has_gameinfo();
  ::game_texaspoker_protocols::GameInfo* temp = gameinfo_;
  gameinfo_ = NULL;
  return temp;
}
inline void packetl2c_game_start_notify::set_allocated_gameinfo(::game_texaspoker_protocols::GameInfo* gameinfo) {
  delete gameinfo_;
  gameinfo_ = gameinfo;
  if (gameinfo) {
    set_has_gameinfo();
  } else {
    clear_has_gameinfo();
  }
}

// repeated .game_texaspoker_protocols.PlayerInfo playerList = 3;
inline int packetl2c_game_start_notify::playerlist_size() const {
  return playerlist_.size();
}
inline void packetl2c_game_start_notify::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::game_texaspoker_protocols::PlayerInfo& packetl2c_game_start_notify::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline ::game_texaspoker_protocols::PlayerInfo* packetl2c_game_start_notify::mutable_playerlist(int index) {
  return playerlist_.Mutable(index);
}
inline ::game_texaspoker_protocols::PlayerInfo* packetl2c_game_start_notify::add_playerlist() {
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >&
packetl2c_game_start_notify::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >*
packetl2c_game_start_notify::mutable_playerlist() {
  return &playerlist_;
}

// repeated .game_texaspoker_protocols.PokerInfo backPoker = 4;
inline int packetl2c_game_start_notify::backpoker_size() const {
  return backpoker_.size();
}
inline void packetl2c_game_start_notify::clear_backpoker() {
  backpoker_.Clear();
}
inline const ::game_texaspoker_protocols::PokerInfo& packetl2c_game_start_notify::backpoker(int index) const {
  return backpoker_.Get(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_game_start_notify::mutable_backpoker(int index) {
  return backpoker_.Mutable(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_game_start_notify::add_backpoker() {
  return backpoker_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
packetl2c_game_start_notify::backpoker() const {
  return backpoker_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
packetl2c_game_start_notify::mutable_backpoker() {
  return &backpoker_;
}

// optional int64 curRewardPool = 5;
inline bool packetl2c_game_start_notify::has_currewardpool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_game_start_notify::set_has_currewardpool() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_game_start_notify::clear_has_currewardpool() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_game_start_notify::clear_currewardpool() {
  currewardpool_ = GOOGLE_LONGLONG(0);
  clear_has_currewardpool();
}
inline ::google::protobuf::int64 packetl2c_game_start_notify::currewardpool() const {
  return currewardpool_;
}
inline void packetl2c_game_start_notify::set_currewardpool(::google::protobuf::int64 value) {
  set_has_currewardpool();
  currewardpool_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_wait_notify

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_wait_notify];
inline bool packetl2c_game_wait_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_wait_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_wait_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_wait_notify::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_game_wait_notify::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_wait_notify::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// BalancePlayerInfo

// optional int32 playerId = 1;
inline bool BalancePlayerInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BalancePlayerInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BalancePlayerInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BalancePlayerInfo::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 BalancePlayerInfo::playerid() const {
  return playerid_;
}
inline void BalancePlayerInfo::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 seat = 2;
inline bool BalancePlayerInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BalancePlayerInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BalancePlayerInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BalancePlayerInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 BalancePlayerInfo::seat() const {
  return seat_;
}
inline void BalancePlayerInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated .game_texaspoker_protocols.PokerInfo backPoker = 3;
inline int BalancePlayerInfo::backpoker_size() const {
  return backpoker_.size();
}
inline void BalancePlayerInfo::clear_backpoker() {
  backpoker_.Clear();
}
inline const ::game_texaspoker_protocols::PokerInfo& BalancePlayerInfo::backpoker(int index) const {
  return backpoker_.Get(index);
}
inline ::game_texaspoker_protocols::PokerInfo* BalancePlayerInfo::mutable_backpoker(int index) {
  return backpoker_.Mutable(index);
}
inline ::game_texaspoker_protocols::PokerInfo* BalancePlayerInfo::add_backpoker() {
  return backpoker_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
BalancePlayerInfo::backpoker() const {
  return backpoker_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
BalancePlayerInfo::mutable_backpoker() {
  return &backpoker_;
}

// repeated .game_texaspoker_protocols.PokerInfo selPoker = 4;
inline int BalancePlayerInfo::selpoker_size() const {
  return selpoker_.size();
}
inline void BalancePlayerInfo::clear_selpoker() {
  selpoker_.Clear();
}
inline const ::game_texaspoker_protocols::PokerInfo& BalancePlayerInfo::selpoker(int index) const {
  return selpoker_.Get(index);
}
inline ::game_texaspoker_protocols::PokerInfo* BalancePlayerInfo::mutable_selpoker(int index) {
  return selpoker_.Mutable(index);
}
inline ::game_texaspoker_protocols::PokerInfo* BalancePlayerInfo::add_selpoker() {
  return selpoker_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
BalancePlayerInfo::selpoker() const {
  return selpoker_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
BalancePlayerInfo::mutable_selpoker() {
  return &selpoker_;
}

// optional int32 pokerType = 5;
inline bool BalancePlayerInfo::has_pokertype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BalancePlayerInfo::set_has_pokertype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BalancePlayerInfo::clear_has_pokertype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BalancePlayerInfo::clear_pokertype() {
  pokertype_ = 0;
  clear_has_pokertype();
}
inline ::google::protobuf::int32 BalancePlayerInfo::pokertype() const {
  return pokertype_;
}
inline void BalancePlayerInfo::set_pokertype(::google::protobuf::int32 value) {
  set_has_pokertype();
  pokertype_ = value;
}

// optional int32 winReward = 6;
inline bool BalancePlayerInfo::has_winreward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BalancePlayerInfo::set_has_winreward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BalancePlayerInfo::clear_has_winreward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BalancePlayerInfo::clear_winreward() {
  winreward_ = 0;
  clear_has_winreward();
}
inline ::google::protobuf::int32 BalancePlayerInfo::winreward() const {
  return winreward_;
}
inline void BalancePlayerInfo::set_winreward(::google::protobuf::int32 value) {
  set_has_winreward();
  winreward_ = value;
}

// optional bool isAbandon = 7;
inline bool BalancePlayerInfo::has_isabandon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BalancePlayerInfo::set_has_isabandon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BalancePlayerInfo::clear_has_isabandon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BalancePlayerInfo::clear_isabandon() {
  isabandon_ = false;
  clear_has_isabandon();
}
inline bool BalancePlayerInfo::isabandon() const {
  return isabandon_;
}
inline void BalancePlayerInfo::set_isabandon(bool value) {
  set_has_isabandon();
  isabandon_ = value;
}

// optional bool isWinner = 8;
inline bool BalancePlayerInfo::has_iswinner() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BalancePlayerInfo::set_has_iswinner() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BalancePlayerInfo::clear_has_iswinner() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BalancePlayerInfo::clear_iswinner() {
  iswinner_ = false;
  clear_has_iswinner();
}
inline bool BalancePlayerInfo::iswinner() const {
  return iswinner_;
}
inline void BalancePlayerInfo::set_iswinner(bool value) {
  set_has_iswinner();
  iswinner_ = value;
}

// optional bool isShowPoker = 9;
inline bool BalancePlayerInfo::has_isshowpoker() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BalancePlayerInfo::set_has_isshowpoker() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BalancePlayerInfo::clear_has_isshowpoker() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BalancePlayerInfo::clear_isshowpoker() {
  isshowpoker_ = false;
  clear_has_isshowpoker();
}
inline bool BalancePlayerInfo::isshowpoker() const {
  return isshowpoker_;
}
inline void BalancePlayerInfo::set_isshowpoker(bool value) {
  set_has_isshowpoker();
  isshowpoker_ = value;
}

// optional int32 rank = 10;
inline bool BalancePlayerInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BalancePlayerInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BalancePlayerInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BalancePlayerInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 BalancePlayerInfo::rank() const {
  return rank_;
}
inline void BalancePlayerInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_end_notify

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end_notify];
inline bool packetl2c_game_end_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_end_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_end_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_end_notify::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_game_end_notify::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_end_notify::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 curRewardPool = 2;
inline bool packetl2c_game_end_notify::has_currewardpool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_end_notify::set_has_currewardpool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_end_notify::clear_has_currewardpool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_end_notify::clear_currewardpool() {
  currewardpool_ = GOOGLE_LONGLONG(0);
  clear_has_currewardpool();
}
inline ::google::protobuf::int64 packetl2c_game_end_notify::currewardpool() const {
  return currewardpool_;
}
inline void packetl2c_game_end_notify::set_currewardpool(::google::protobuf::int64 value) {
  set_has_currewardpool();
  currewardpool_ = value;
}

// repeated .game_texaspoker_protocols.BalancePlayerInfo playerList = 3;
inline int packetl2c_game_end_notify::playerlist_size() const {
  return playerlist_.size();
}
inline void packetl2c_game_end_notify::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::game_texaspoker_protocols::BalancePlayerInfo& packetl2c_game_end_notify::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline ::game_texaspoker_protocols::BalancePlayerInfo* packetl2c_game_end_notify::mutable_playerlist(int index) {
  return playerlist_.Mutable(index);
}
inline ::game_texaspoker_protocols::BalancePlayerInfo* packetl2c_game_end_notify::add_playerlist() {
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::BalancePlayerInfo >&
packetl2c_game_end_notify::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::BalancePlayerInfo >*
packetl2c_game_end_notify::mutable_playerlist() {
  return &playerlist_;
}

// optional bool isAllAbandon = 4;
inline bool packetl2c_game_end_notify::has_isallabandon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_game_end_notify::set_has_isallabandon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_game_end_notify::clear_has_isallabandon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_game_end_notify::clear_isallabandon() {
  isallabandon_ = false;
  clear_has_isallabandon();
}
inline bool packetl2c_game_end_notify::isallabandon() const {
  return isallabandon_;
}
inline void packetl2c_game_end_notify::set_isallabandon(bool value) {
  set_has_isallabandon();
  isallabandon_ = value;
}

// repeated .game_texaspoker_protocols.PokerInfo commonPoker = 5;
inline int packetl2c_game_end_notify::commonpoker_size() const {
  return commonpoker_.size();
}
inline void packetl2c_game_end_notify::clear_commonpoker() {
  commonpoker_.Clear();
}
inline const ::game_texaspoker_protocols::PokerInfo& packetl2c_game_end_notify::commonpoker(int index) const {
  return commonpoker_.Get(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_game_end_notify::mutable_commonpoker(int index) {
  return commonpoker_.Mutable(index);
}
inline ::game_texaspoker_protocols::PokerInfo* packetl2c_game_end_notify::add_commonpoker() {
  return commonpoker_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >&
packetl2c_game_end_notify::commonpoker() const {
  return commonpoker_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PokerInfo >*
packetl2c_game_end_notify::mutable_commonpoker() {
  return &commonpoker_;
}

// repeated .game_texaspoker_protocols.PlayerBetInfo playerBetInfo = 6;
inline int packetl2c_game_end_notify::playerbetinfo_size() const {
  return playerbetinfo_.size();
}
inline void packetl2c_game_end_notify::clear_playerbetinfo() {
  playerbetinfo_.Clear();
}
inline const ::game_texaspoker_protocols::PlayerBetInfo& packetl2c_game_end_notify::playerbetinfo(int index) const {
  return playerbetinfo_.Get(index);
}
inline ::game_texaspoker_protocols::PlayerBetInfo* packetl2c_game_end_notify::mutable_playerbetinfo(int index) {
  return playerbetinfo_.Mutable(index);
}
inline ::game_texaspoker_protocols::PlayerBetInfo* packetl2c_game_end_notify::add_playerbetinfo() {
  return playerbetinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >&
packetl2c_game_end_notify::playerbetinfo() const {
  return playerbetinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerBetInfo >*
packetl2c_game_end_notify::mutable_playerbetinfo() {
  return &playerbetinfo_;
}

// -------------------------------------------------------------------

// packetc2l_req_sitdown

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_sitdown];
inline bool packetc2l_req_sitdown::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_req_sitdown::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_req_sitdown::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_req_sitdown::clear_packet_id() {
  packet_id_ = 10006;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_req_sitdown::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_req_sitdown::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_req_sitdown_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_sitdown_result];
inline bool packetl2c_req_sitdown_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_req_sitdown_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_req_sitdown_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_req_sitdown_result::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_req_sitdown_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_req_sitdown_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_req_sitdown_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_req_sitdown_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_req_sitdown_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_req_sitdown_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_req_sitdown_result::result() const {
  return result_;
}
inline void packetl2c_req_sitdown_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_req_supply

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_supply];
inline bool packetc2l_req_supply::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_req_supply::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_req_supply::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_req_supply::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_req_supply::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_req_supply::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool auto = 2;
inline bool packetc2l_req_supply::has_auto_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_req_supply::set_has_auto_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_req_supply::clear_has_auto_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_req_supply::clear_auto_() {
  auto__ = false;
  clear_has_auto_();
}
inline bool packetc2l_req_supply::auto_() const {
  return auto__;
}
inline void packetc2l_req_supply::set_auto_(bool value) {
  set_has_auto_();
  auto__ = value;
}

// -------------------------------------------------------------------

// packetl2c_req_supply_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_supply_result];
inline bool packetl2c_req_supply_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_req_supply_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_req_supply_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_req_supply_result::clear_packet_id() {
  packet_id_ = 15015;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_req_supply_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_req_supply_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool auto = 2;
inline bool packetl2c_req_supply_result::has_auto_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_req_supply_result::set_has_auto_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_req_supply_result::clear_has_auto_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_req_supply_result::clear_auto_() {
  auto__ = false;
  clear_has_auto_();
}
inline bool packetl2c_req_supply_result::auto_() const {
  return auto__;
}
inline void packetl2c_req_supply_result::set_auto_(bool value) {
  set_has_auto_();
  auto__ = value;
}

// optional int32 result = 3;
inline bool packetl2c_req_supply_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_req_supply_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_req_supply_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_req_supply_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_req_supply_result::result() const {
  return result_;
}
inline void packetl2c_req_supply_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_req_chip

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_chip];
inline bool packetc2l_req_chip::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_req_chip::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_req_chip::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_req_chip::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_req_chip::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_req_chip::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chip = 2;
inline bool packetc2l_req_chip::has_chip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_req_chip::set_has_chip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_req_chip::clear_has_chip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_req_chip::clear_chip() {
  chip_ = 0;
  clear_has_chip();
}
inline ::google::protobuf::int32 packetc2l_req_chip::chip() const {
  return chip_;
}
inline void packetc2l_req_chip::set_chip(::google::protobuf::int32 value) {
  set_has_chip();
  chip_ = value;
}

// -------------------------------------------------------------------

// packetl2c_req_chip_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_chip_result];
inline bool packetl2c_req_chip_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_req_chip_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_req_chip_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_req_chip_result::clear_packet_id() {
  packet_id_ = 15016;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_req_chip_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_req_chip_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_req_chip_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_req_chip_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_req_chip_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_req_chip_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_req_chip_result::result() const {
  return result_;
}
inline void packetl2c_req_chip_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetl2c_buy_chip_notify

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_buy_chip_notify];
inline bool packetl2c_buy_chip_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_buy_chip_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_buy_chip_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_buy_chip_notify::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_buy_chip_notify::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_buy_chip_notify::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_texaspoker_protocols.PlayerInfo playerList = 2;
inline int packetl2c_buy_chip_notify::playerlist_size() const {
  return playerlist_.size();
}
inline void packetl2c_buy_chip_notify::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::game_texaspoker_protocols::PlayerInfo& packetl2c_buy_chip_notify::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline ::game_texaspoker_protocols::PlayerInfo* packetl2c_buy_chip_notify::mutable_playerlist(int index) {
  return playerlist_.Mutable(index);
}
inline ::game_texaspoker_protocols::PlayerInfo* packetl2c_buy_chip_notify::add_playerlist() {
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >&
packetl2c_buy_chip_notify::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_texaspoker_protocols::PlayerInfo >*
packetl2c_buy_chip_notify::mutable_playerlist() {
  return &playerlist_;
}

// -------------------------------------------------------------------

// packetc2l_show_poker

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_show_poker];
inline bool packetc2l_show_poker::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_show_poker::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_show_poker::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_show_poker::clear_packet_id() {
  packet_id_ = 10007;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_show_poker::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_show_poker::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool isShow = 2;
inline bool packetc2l_show_poker::has_isshow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_show_poker::set_has_isshow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_show_poker::clear_has_isshow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_show_poker::clear_isshow() {
  isshow_ = false;
  clear_has_isshow();
}
inline bool packetc2l_show_poker::isshow() const {
  return isshow_;
}
inline void packetc2l_show_poker::set_isshow(bool value) {
  set_has_isshow();
  isshow_ = value;
}

// -------------------------------------------------------------------

// packetl2c_show_poker_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_show_poker_result];
inline bool packetl2c_show_poker_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_show_poker_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_show_poker_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_show_poker_result::clear_packet_id() {
  packet_id_ = 15012;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_show_poker_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_show_poker_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_show_poker_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_show_poker_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_show_poker_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_show_poker_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_show_poker_result::result() const {
  return result_;
}
inline void packetl2c_show_poker_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_req_standup

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_req_standup];
inline bool packetc2l_req_standup::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_req_standup::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_req_standup::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_req_standup::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_req_standup::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_req_standup::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_req_standup_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_req_standup_result];
inline bool packetl2c_req_standup_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_req_standup_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_req_standup_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_req_standup_result::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_req_standup_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_req_standup_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2;
inline bool packetl2c_req_standup_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_req_standup_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_req_standup_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_req_standup_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_req_standup_result::result() const {
  return result_;
}
inline void packetl2c_req_standup_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_texaspoker_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15014;
  clear_has_packet_id();
}
inline ::game_texaspoker_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  return static_cast< ::game_texaspoker_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_texaspoker_protocols::e_server_msg_type value) {
  assert(::game_texaspoker_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool is_intable = 2 [default = false];
inline bool packetl2c_check_state_result::has_is_intable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_is_intable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_is_intable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_is_intable() {
  is_intable_ = false;
  clear_has_is_intable();
}
inline bool packetl2c_check_state_result::is_intable() const {
  return is_intable_;
}
inline void packetl2c_check_state_result::set_is_intable(bool value) {
  set_has_is_intable();
  is_intable_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_texaspoker_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5ftexaspoker_5fprotocol_2eproto__INCLUDED
