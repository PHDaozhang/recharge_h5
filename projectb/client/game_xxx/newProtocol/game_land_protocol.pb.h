// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_land_protocol.proto

#ifndef PROTOBUF_game_5fland_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fland_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_land_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_land_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

class msg_player_info;
class packetc2l_check_state;
class packetl2c_check_state_result;
class packetc2l_get_scene_info;
class msg_room_scene_info;
class msg_score_scene_info;
class msg_times_scene_info;
class msg_playing_scene_info;
class packetl2c_scene_info_result;
class packetc2l_enter_room;
class packetl2c_enter_room_result;
class packetc2l_leave_room;
class packetl2c_leave_room_result;
class packetc2l_user_trustee;
class packetl2c_user_trustee_notify;
class packetc2l_ready;
class packetl2c_send_all_playerinfos;
class packetl2c_send_all_card;
class packetc2l_land_score;
class packetl2c_land_score;
class packetl2c_game_start;
class packetc2l_times;
class packetl2c_times_notify;
class packetl2c_really_game_start;
class packetc2l_out_card;
class packetl2c_out_card;
class packetl2c_pass_card;
class packetl2c_game_end;
class packetl2c_game_notify;
class packetc2l_report;
class packetl2c_report_res;

// ===================================================================

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional int32 head_frame = 3;
  inline bool has_head_frame() const;
  inline void clear_head_frame();
  static const int kHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 head_frame() const;
  inline void set_head_frame(::google::protobuf::int32 value);

  // optional string head_custom = 4;
  inline bool has_head_custom() const;
  inline void clear_head_custom();
  static const int kHeadCustomFieldNumber = 4;
  inline const ::std::string& head_custom() const;
  inline void set_head_custom(const ::std::string& value);
  inline void set_head_custom(const char* value);
  inline void set_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_head_custom();
  inline ::std::string* release_head_custom();
  inline void set_allocated_head_custom(::std::string* head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_sex = 6;
  inline bool has_player_sex() const;
  inline void clear_player_sex();
  static const int kPlayerSexFieldNumber = 6;
  inline ::google::protobuf::int32 player_sex() const;
  inline void set_player_sex(::google::protobuf::int32 value);

  // optional int32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_head_frame();
  inline void clear_has_head_frame();
  inline void set_has_head_custom();
  inline void clear_has_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_sex();
  inline void clear_has_player_sex();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 head_frame_;
  ::std::string* head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_sex_;
  ::google::protobuf::int32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_scene_info();
  virtual ~packetc2l_get_scene_info();

  packetc2l_get_scene_info(const packetc2l_get_scene_info& from);

  inline packetc2l_get_scene_info& operator=(const packetc2l_get_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_scene_info& default_instance();

  void Swap(packetc2l_get_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_scene_info& from);
  void MergeFrom(const packetc2l_get_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_get_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_room_scene_info : public ::google::protobuf::Message {
 public:
  msg_room_scene_info();
  virtual ~msg_room_scene_info();

  msg_room_scene_info(const msg_room_scene_info& from);

  inline msg_room_scene_info& operator=(const msg_room_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_room_scene_info& default_instance();

  void Swap(msg_room_scene_info* other);

  // implements Message ----------------------------------------------

  msg_room_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_room_scene_info& from);
  void MergeFrom(const msg_room_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ready = 1;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 1;
  inline bool ready() const;
  inline void set_ready(bool value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.msg_room_scene_info)
 private:
  inline void set_has_ready();
  inline void clear_has_ready();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ready_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_room_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_score_scene_info : public ::google::protobuf::Message {
 public:
  msg_score_scene_info();
  virtual ~msg_score_scene_info();

  msg_score_scene_info(const msg_score_scene_info& from);

  inline msg_score_scene_info& operator=(const msg_score_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_score_scene_info& default_instance();

  void Swap(msg_score_scene_info* other);

  // implements Message ----------------------------------------------

  msg_score_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_score_scene_info& from);
  void MergeFrom(const msg_score_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 current_user = 1;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 1;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // optional int32 remain_seconds = 2;
  inline bool has_remain_seconds() const;
  inline void clear_remain_seconds();
  static const int kRemainSecondsFieldNumber = 2;
  inline ::google::protobuf::int32 remain_seconds() const;
  inline void set_remain_seconds(::google::protobuf::int32 value);

  // repeated int32 score_info = 3;
  inline int score_info_size() const;
  inline void clear_score_info();
  static const int kScoreInfoFieldNumber = 3;
  inline ::google::protobuf::int32 score_info(int index) const;
  inline void set_score_info(int index, ::google::protobuf::int32 value);
  inline void add_score_info(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score_info() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score_info();

  // repeated bool user_trustee = 4;
  inline int user_trustee_size() const;
  inline void clear_user_trustee();
  static const int kUserTrusteeFieldNumber = 4;
  inline bool user_trustee(int index) const;
  inline void set_user_trustee(int index, bool value);
  inline void add_user_trustee(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      user_trustee() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_user_trustee();

  // repeated int32 cards_info = 5;
  inline int cards_info_size() const;
  inline void clear_cards_info();
  static const int kCardsInfoFieldNumber = 5;
  inline ::google::protobuf::int32 cards_info(int index) const;
  inline void set_cards_info(int index, ::google::protobuf::int32 value);
  inline void add_cards_info(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_info() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_info();

  // @@protoc_insertion_point(class_scope:game_land_protocols.msg_score_scene_info)
 private:
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_remain_seconds();
  inline void clear_has_remain_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 current_user_;
  ::google::protobuf::int32 remain_seconds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_info_;
  ::google::protobuf::RepeatedField< bool > user_trustee_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_score_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_times_scene_info : public ::google::protobuf::Message {
 public:
  msg_times_scene_info();
  virtual ~msg_times_scene_info();

  msg_times_scene_info(const msg_times_scene_info& from);

  inline msg_times_scene_info& operator=(const msg_times_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_times_scene_info& default_instance();

  void Swap(msg_times_scene_info* other);

  // implements Message ----------------------------------------------

  msg_times_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_times_scene_info& from);
  void MergeFrom(const msg_times_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 remain_seconds = 1;
  inline bool has_remain_seconds() const;
  inline void clear_remain_seconds();
  static const int kRemainSecondsFieldNumber = 1;
  inline ::google::protobuf::int32 remain_seconds() const;
  inline void set_remain_seconds(::google::protobuf::int32 value);

  // repeated bool user_trustee = 2;
  inline int user_trustee_size() const;
  inline void clear_user_trustee();
  static const int kUserTrusteeFieldNumber = 2;
  inline bool user_trustee(int index) const;
  inline void set_user_trustee(int index, bool value);
  inline void add_user_trustee(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      user_trustee() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_user_trustee();

  // repeated int32 cards_info = 3;
  inline int cards_info_size() const;
  inline void clear_cards_info();
  static const int kCardsInfoFieldNumber = 3;
  inline ::google::protobuf::int32 cards_info(int index) const;
  inline void set_cards_info(int index, ::google::protobuf::int32 value);
  inline void add_cards_info(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_info() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_info();

  // optional int32 land_user = 4;
  inline bool has_land_user() const;
  inline void clear_land_user();
  static const int kLandUserFieldNumber = 4;
  inline ::google::protobuf::int32 land_user() const;
  inline void set_land_user(::google::protobuf::int32 value);

  // optional int32 land_score = 5;
  inline bool has_land_score() const;
  inline void clear_land_score();
  static const int kLandScoreFieldNumber = 5;
  inline ::google::protobuf::int32 land_score() const;
  inline void set_land_score(::google::protobuf::int32 value);

  // repeated int32 back_card = 6;
  inline int back_card_size() const;
  inline void clear_back_card();
  static const int kBackCardFieldNumber = 6;
  inline ::google::protobuf::int32 back_card(int index) const;
  inline void set_back_card(int index, ::google::protobuf::int32 value);
  inline void add_back_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      back_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_back_card();

  // @@protoc_insertion_point(class_scope:game_land_protocols.msg_times_scene_info)
 private:
  inline void set_has_remain_seconds();
  inline void clear_has_remain_seconds();
  inline void set_has_land_user();
  inline void clear_has_land_user();
  inline void set_has_land_score();
  inline void clear_has_land_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > user_trustee_;
  ::google::protobuf::int32 remain_seconds_;
  ::google::protobuf::int32 land_user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > back_card_;
  ::google::protobuf::int32 land_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_times_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_playing_scene_info : public ::google::protobuf::Message {
 public:
  msg_playing_scene_info();
  virtual ~msg_playing_scene_info();

  msg_playing_scene_info(const msg_playing_scene_info& from);

  inline msg_playing_scene_info& operator=(const msg_playing_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_playing_scene_info& default_instance();

  void Swap(msg_playing_scene_info* other);

  // implements Message ----------------------------------------------

  msg_playing_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_playing_scene_info& from);
  void MergeFrom(const msg_playing_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 land_chair_id = 1;
  inline bool has_land_chair_id() const;
  inline void clear_land_chair_id();
  static const int kLandChairIdFieldNumber = 1;
  inline ::google::protobuf::int32 land_chair_id() const;
  inline void set_land_chair_id(::google::protobuf::int32 value);

  // optional int32 land_score = 2;
  inline bool has_land_score() const;
  inline void clear_land_score();
  static const int kLandScoreFieldNumber = 2;
  inline ::google::protobuf::int32 land_score() const;
  inline void set_land_score(::google::protobuf::int32 value);

  // optional int32 current_user = 3;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 3;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // optional int32 remain_seconds = 4;
  inline bool has_remain_seconds() const;
  inline void clear_remain_seconds();
  static const int kRemainSecondsFieldNumber = 4;
  inline ::google::protobuf::int32 remain_seconds() const;
  inline void set_remain_seconds(::google::protobuf::int32 value);

  // repeated bool user_trustee = 5;
  inline int user_trustee_size() const;
  inline void clear_user_trustee();
  static const int kUserTrusteeFieldNumber = 5;
  inline bool user_trustee(int index) const;
  inline void set_user_trustee(int index, bool value);
  inline void add_user_trustee(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      user_trustee() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_user_trustee();

  // repeated int32 remain_card_cnt = 6;
  inline int remain_card_cnt_size() const;
  inline void clear_remain_card_cnt();
  static const int kRemainCardCntFieldNumber = 6;
  inline ::google::protobuf::int32 remain_card_cnt(int index) const;
  inline void set_remain_card_cnt(int index, ::google::protobuf::int32 value);
  inline void add_remain_card_cnt(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remain_card_cnt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remain_card_cnt();

  // repeated int32 back_card = 7;
  inline int back_card_size() const;
  inline void clear_back_card();
  static const int kBackCardFieldNumber = 7;
  inline ::google::protobuf::int32 back_card(int index) const;
  inline void set_back_card(int index, ::google::protobuf::int32 value);
  inline void add_back_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      back_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_back_card();

  // repeated int32 cards_info = 8;
  inline int cards_info_size() const;
  inline void clear_cards_info();
  static const int kCardsInfoFieldNumber = 8;
  inline ::google::protobuf::int32 cards_info(int index) const;
  inline void set_cards_info(int index, ::google::protobuf::int32 value);
  inline void add_cards_info(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_info() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_info();

  // repeated int32 turn_cards1 = 9;
  inline int turn_cards1_size() const;
  inline void clear_turn_cards1();
  static const int kTurnCards1FieldNumber = 9;
  inline ::google::protobuf::int32 turn_cards1(int index) const;
  inline void set_turn_cards1(int index, ::google::protobuf::int32 value);
  inline void add_turn_cards1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      turn_cards1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_turn_cards1();

  // repeated int32 turn_cards2 = 10;
  inline int turn_cards2_size() const;
  inline void clear_turn_cards2();
  static const int kTurnCards2FieldNumber = 10;
  inline ::google::protobuf::int32 turn_cards2(int index) const;
  inline void set_turn_cards2(int index, ::google::protobuf::int32 value);
  inline void add_turn_cards2(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      turn_cards2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_turn_cards2();

  // repeated int32 turn_cards3 = 11;
  inline int turn_cards3_size() const;
  inline void clear_turn_cards3();
  static const int kTurnCards3FieldNumber = 11;
  inline ::google::protobuf::int32 turn_cards3(int index) const;
  inline void set_turn_cards3(int index, ::google::protobuf::int32 value);
  inline void add_turn_cards3(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      turn_cards3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_turn_cards3();

  // optional bool new_turn = 12;
  inline bool has_new_turn() const;
  inline void clear_new_turn();
  static const int kNewTurnFieldNumber = 12;
  inline bool new_turn() const;
  inline void set_new_turn(bool value);

  // optional int32 bomb_time = 13;
  inline bool has_bomb_time() const;
  inline void clear_bomb_time();
  static const int kBombTimeFieldNumber = 13;
  inline ::google::protobuf::int32 bomb_time() const;
  inline void set_bomb_time(::google::protobuf::int32 value);

  // repeated int32 out_cards = 14;
  inline int out_cards_size() const;
  inline void clear_out_cards();
  static const int kOutCardsFieldNumber = 14;
  inline ::google::protobuf::int32 out_cards(int index) const;
  inline void set_out_cards(int index, ::google::protobuf::int32 value);
  inline void add_out_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      out_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_out_cards();

  // optional int32 score_times = 15;
  inline bool has_score_times() const;
  inline void clear_score_times();
  static const int kScoreTimesFieldNumber = 15;
  inline ::google::protobuf::int32 score_times() const;
  inline void set_score_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.msg_playing_scene_info)
 private:
  inline void set_has_land_chair_id();
  inline void clear_has_land_chair_id();
  inline void set_has_land_score();
  inline void clear_has_land_score();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_remain_seconds();
  inline void clear_has_remain_seconds();
  inline void set_has_new_turn();
  inline void clear_has_new_turn();
  inline void set_has_bomb_time();
  inline void clear_has_bomb_time();
  inline void set_has_score_times();
  inline void clear_has_score_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 land_chair_id_;
  ::google::protobuf::int32 land_score_;
  ::google::protobuf::int32 current_user_;
  ::google::protobuf::int32 remain_seconds_;
  ::google::protobuf::RepeatedField< bool > user_trustee_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remain_card_cnt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > back_card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > turn_cards1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > turn_cards2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > turn_cards3_;
  bool new_turn_;
  ::google::protobuf::int32 bomb_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > out_cards_;
  ::google::protobuf::int32 score_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_playing_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_scene_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_scene_info_result();
  virtual ~packetl2c_scene_info_result();

  packetl2c_scene_info_result(const packetl2c_scene_info_result& from);

  inline packetl2c_scene_info_result& operator=(const packetl2c_scene_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_scene_info_result& default_instance();

  void Swap(packetl2c_scene_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_scene_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_scene_info_result& from);
  void MergeFrom(const packetl2c_scene_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // optional .game_land_protocols.msg_room_scene_info scene_info1 = 3;
  inline bool has_scene_info1() const;
  inline void clear_scene_info1();
  static const int kSceneInfo1FieldNumber = 3;
  inline const ::game_land_protocols::msg_room_scene_info& scene_info1() const;
  inline ::game_land_protocols::msg_room_scene_info* mutable_scene_info1();
  inline ::game_land_protocols::msg_room_scene_info* release_scene_info1();
  inline void set_allocated_scene_info1(::game_land_protocols::msg_room_scene_info* scene_info1);

  // optional .game_land_protocols.msg_score_scene_info scene_info2 = 4;
  inline bool has_scene_info2() const;
  inline void clear_scene_info2();
  static const int kSceneInfo2FieldNumber = 4;
  inline const ::game_land_protocols::msg_score_scene_info& scene_info2() const;
  inline ::game_land_protocols::msg_score_scene_info* mutable_scene_info2();
  inline ::game_land_protocols::msg_score_scene_info* release_scene_info2();
  inline void set_allocated_scene_info2(::game_land_protocols::msg_score_scene_info* scene_info2);

  // optional .game_land_protocols.msg_playing_scene_info scene_info3 = 5;
  inline bool has_scene_info3() const;
  inline void clear_scene_info3();
  static const int kSceneInfo3FieldNumber = 5;
  inline const ::game_land_protocols::msg_playing_scene_info& scene_info3() const;
  inline ::game_land_protocols::msg_playing_scene_info* mutable_scene_info3();
  inline ::game_land_protocols::msg_playing_scene_info* release_scene_info3();
  inline void set_allocated_scene_info3(::game_land_protocols::msg_playing_scene_info* scene_info3);

  // optional int32 info_type = 6;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 6;
  inline ::google::protobuf::int32 info_type() const;
  inline void set_info_type(::google::protobuf::int32 value);

  // optional .game_land_protocols.packetl2c_game_end scene_info4 = 7;
  inline bool has_scene_info4() const;
  inline void clear_scene_info4();
  static const int kSceneInfo4FieldNumber = 7;
  inline const ::game_land_protocols::packetl2c_game_end& scene_info4() const;
  inline ::game_land_protocols::packetl2c_game_end* mutable_scene_info4();
  inline ::game_land_protocols::packetl2c_game_end* release_scene_info4();
  inline void set_allocated_scene_info4(::game_land_protocols::packetl2c_game_end* scene_info4);

  // optional int32 land_chair_id4 = 8;
  inline bool has_land_chair_id4() const;
  inline void clear_land_chair_id4();
  static const int kLandChairId4FieldNumber = 8;
  inline ::google::protobuf::int32 land_chair_id4() const;
  inline void set_land_chair_id4(::google::protobuf::int32 value);

  // optional int32 land_score4 = 9;
  inline bool has_land_score4() const;
  inline void clear_land_score4();
  static const int kLandScore4FieldNumber = 9;
  inline ::google::protobuf::int32 land_score4() const;
  inline void set_land_score4(::google::protobuf::int32 value);

  // optional int32 score_times4 = 10;
  inline bool has_score_times4() const;
  inline void clear_score_times4();
  static const int kScoreTimes4FieldNumber = 10;
  inline ::google::protobuf::int32 score_times4() const;
  inline void set_score_times4(::google::protobuf::int32 value);

  // optional int32 task_id = 11 [default = -1];
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 11;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // repeated int32 times = 12;
  inline int times_size() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 12;
  inline ::google::protobuf::int32 times(int index) const;
  inline void set_times(int index, ::google::protobuf::int32 value);
  inline void add_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_times();

  // optional .game_land_protocols.msg_times_scene_info scene_info5 = 13;
  inline bool has_scene_info5() const;
  inline void clear_scene_info5();
  static const int kSceneInfo5FieldNumber = 13;
  inline const ::game_land_protocols::msg_times_scene_info& scene_info5() const;
  inline ::game_land_protocols::msg_times_scene_info* mutable_scene_info5();
  inline ::game_land_protocols::msg_times_scene_info* release_scene_info5();
  inline void set_allocated_scene_info5(::game_land_protocols::msg_times_scene_info* scene_info5);

  // optional int32 play_cnt = 14;
  inline bool has_play_cnt() const;
  inline void clear_play_cnt();
  static const int kPlayCntFieldNumber = 14;
  inline ::google::protobuf::int32 play_cnt() const;
  inline void set_play_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_scene_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_scene_info1();
  inline void clear_has_scene_info1();
  inline void set_has_scene_info2();
  inline void clear_has_scene_info2();
  inline void set_has_scene_info3();
  inline void clear_has_scene_info3();
  inline void set_has_info_type();
  inline void clear_has_info_type();
  inline void set_has_scene_info4();
  inline void clear_has_scene_info4();
  inline void set_has_land_chair_id4();
  inline void clear_has_land_chair_id4();
  inline void set_has_land_score4();
  inline void clear_has_land_score4();
  inline void set_has_score_times4();
  inline void clear_has_score_times4();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_scene_info5();
  inline void clear_has_scene_info5();
  inline void set_has_play_cnt();
  inline void clear_has_play_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_type_;
  ::game_land_protocols::msg_room_scene_info* scene_info1_;
  ::game_land_protocols::msg_score_scene_info* scene_info2_;
  ::game_land_protocols::msg_playing_scene_info* scene_info3_;
  ::game_land_protocols::packetl2c_game_end* scene_info4_;
  ::google::protobuf::int32 info_type_;
  ::google::protobuf::int32 land_chair_id4_;
  ::google::protobuf::int32 land_score4_;
  ::google::protobuf::int32 score_times4_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > times_;
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 play_cnt_;
  ::game_land_protocols::msg_times_scene_info* scene_info5_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_scene_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_room : public ::google::protobuf::Message {
 public:
  packetc2l_enter_room();
  virtual ~packetc2l_enter_room();

  packetc2l_enter_room(const packetc2l_enter_room& from);

  inline packetc2l_enter_room& operator=(const packetc2l_enter_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_room& default_instance();

  void Swap(packetc2l_enter_room* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_room& from);
  void MergeFrom(const packetc2l_enter_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_enter_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 room_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_room_result();
  virtual ~packetl2c_enter_room_result();

  packetl2c_enter_room_result(const packetl2c_enter_room_result& from);

  inline packetl2c_enter_room_result& operator=(const packetl2c_enter_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_room_result& default_instance();

  void Swap(packetl2c_enter_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_room_result& from);
  void MergeFrom(const packetl2c_enter_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_enter_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_leave_room : public ::google::protobuf::Message {
 public:
  packetc2l_leave_room();
  virtual ~packetc2l_leave_room();

  packetc2l_leave_room(const packetc2l_leave_room& from);

  inline packetc2l_leave_room& operator=(const packetc2l_leave_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_leave_room& default_instance();

  void Swap(packetc2l_leave_room* other);

  // implements Message ----------------------------------------------

  packetc2l_leave_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_leave_room& from);
  void MergeFrom(const packetc2l_leave_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_leave_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_leave_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_leave_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_leave_room_result();
  virtual ~packetl2c_leave_room_result();

  packetl2c_leave_room_result(const packetl2c_leave_room_result& from);

  inline packetl2c_leave_room_result& operator=(const packetl2c_leave_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_leave_room_result& default_instance();

  void Swap(packetl2c_leave_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_leave_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_leave_room_result& from);
  void MergeFrom(const packetl2c_leave_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int64 player_gold = 2;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 2;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_leave_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 player_gold_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_leave_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_user_trustee : public ::google::protobuf::Message {
 public:
  packetc2l_user_trustee();
  virtual ~packetc2l_user_trustee();

  packetc2l_user_trustee(const packetc2l_user_trustee& from);

  inline packetc2l_user_trustee& operator=(const packetc2l_user_trustee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_user_trustee& default_instance();

  void Swap(packetc2l_user_trustee* other);

  // implements Message ----------------------------------------------

  packetc2l_user_trustee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_user_trustee& from);
  void MergeFrom(const packetc2l_user_trustee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional bool trustee = 2;
  inline bool has_trustee() const;
  inline void clear_trustee();
  static const int kTrusteeFieldNumber = 2;
  inline bool trustee() const;
  inline void set_trustee(bool value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_user_trustee)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_trustee();
  inline void clear_has_trustee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool trustee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_user_trustee* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_user_trustee_notify : public ::google::protobuf::Message {
 public:
  packetl2c_user_trustee_notify();
  virtual ~packetl2c_user_trustee_notify();

  packetl2c_user_trustee_notify(const packetl2c_user_trustee_notify& from);

  inline packetl2c_user_trustee_notify& operator=(const packetl2c_user_trustee_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_user_trustee_notify& default_instance();

  void Swap(packetl2c_user_trustee_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_user_trustee_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_user_trustee_notify& from);
  void MergeFrom(const packetl2c_user_trustee_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 chair_id = 2;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 2;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // optional bool trustee = 3;
  inline bool has_trustee() const;
  inline void clear_trustee();
  static const int kTrusteeFieldNumber = 3;
  inline bool trustee() const;
  inline void set_trustee(bool value);

  // optional int32 remain_seconds = 4;
  inline bool has_remain_seconds() const;
  inline void clear_remain_seconds();
  static const int kRemainSecondsFieldNumber = 4;
  inline ::google::protobuf::int32 remain_seconds() const;
  inline void set_remain_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_user_trustee_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_trustee();
  inline void clear_has_trustee();
  inline void set_has_remain_seconds();
  inline void clear_has_remain_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chair_id_;
  bool trustee_;
  ::google::protobuf::int32 remain_seconds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_user_trustee_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_ready : public ::google::protobuf::Message {
 public:
  packetc2l_ready();
  virtual ~packetc2l_ready();

  packetc2l_ready(const packetc2l_ready& from);

  inline packetc2l_ready& operator=(const packetc2l_ready& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_ready& default_instance();

  void Swap(packetc2l_ready* other);

  // implements Message ----------------------------------------------

  packetc2l_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_ready& from);
  void MergeFrom(const packetc2l_ready& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_ready)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_ready* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_send_all_playerinfos : public ::google::protobuf::Message {
 public:
  packetl2c_send_all_playerinfos();
  virtual ~packetl2c_send_all_playerinfos();

  packetl2c_send_all_playerinfos(const packetl2c_send_all_playerinfos& from);

  inline packetl2c_send_all_playerinfos& operator=(const packetl2c_send_all_playerinfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_send_all_playerinfos& default_instance();

  void Swap(packetl2c_send_all_playerinfos* other);

  // implements Message ----------------------------------------------

  packetl2c_send_all_playerinfos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_send_all_playerinfos& from);
  void MergeFrom(const packetl2c_send_all_playerinfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // repeated .game_land_protocols.msg_player_info player_info = 2;
  inline int player_info_size() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::game_land_protocols::msg_player_info& player_info(int index) const;
  inline ::game_land_protocols::msg_player_info* mutable_player_info(int index);
  inline ::game_land_protocols::msg_player_info* add_player_info();
  inline const ::google::protobuf::RepeatedPtrField< ::game_land_protocols::msg_player_info >&
      player_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_land_protocols::msg_player_info >*
      mutable_player_info();

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_send_all_playerinfos)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game_land_protocols::msg_player_info > player_info_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_send_all_playerinfos* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_send_all_card : public ::google::protobuf::Message {
 public:
  packetl2c_send_all_card();
  virtual ~packetl2c_send_all_card();

  packetl2c_send_all_card(const packetl2c_send_all_card& from);

  inline packetl2c_send_all_card& operator=(const packetl2c_send_all_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_send_all_card& default_instance();

  void Swap(packetl2c_send_all_card* other);

  // implements Message ----------------------------------------------

  packetl2c_send_all_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_send_all_card& from);
  void MergeFrom(const packetl2c_send_all_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 current_user = 2;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 2;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // repeated bool user_trustee = 3;
  inline int user_trustee_size() const;
  inline void clear_user_trustee();
  static const int kUserTrusteeFieldNumber = 3;
  inline bool user_trustee(int index) const;
  inline void set_user_trustee(int index, bool value);
  inline void add_user_trustee(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      user_trustee() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_user_trustee();

  // repeated int32 cards_info = 4;
  inline int cards_info_size() const;
  inline void clear_cards_info();
  static const int kCardsInfoFieldNumber = 4;
  inline ::google::protobuf::int32 cards_info(int index) const;
  inline void set_cards_info(int index, ::google::protobuf::int32 value);
  inline void add_cards_info(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_info() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_info();

  // repeated int32 cards_info2 = 5;
  inline int cards_info2_size() const;
  inline void clear_cards_info2();
  static const int kCardsInfo2FieldNumber = 5;
  inline ::google::protobuf::int32 cards_info2(int index) const;
  inline void set_cards_info2(int index, ::google::protobuf::int32 value);
  inline void add_cards_info2(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_info2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_info2();

  // repeated int32 cards_info3 = 6;
  inline int cards_info3_size() const;
  inline void clear_cards_info3();
  static const int kCardsInfo3FieldNumber = 6;
  inline ::google::protobuf::int32 cards_info3(int index) const;
  inline void set_cards_info3(int index, ::google::protobuf::int32 value);
  inline void add_cards_info3(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_info3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_info3();

  // repeated int32 back_card = 7;
  inline int back_card_size() const;
  inline void clear_back_card();
  static const int kBackCardFieldNumber = 7;
  inline ::google::protobuf::int32 back_card(int index) const;
  inline void set_back_card(int index, ::google::protobuf::int32 value);
  inline void add_back_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      back_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_back_card();

  // optional bool BotBanker = 8;
  inline bool has_botbanker() const;
  inline void clear_botbanker();
  static const int kBotBankerFieldNumber = 8;
  inline bool botbanker() const;
  inline void set_botbanker(bool value);

  // optional int32 room_id = 9;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 9;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 task_id = 10;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 10;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // repeated int32 bot_landlords = 11;
  inline int bot_landlords_size() const;
  inline void clear_bot_landlords();
  static const int kBotLandlordsFieldNumber = 11;
  inline ::google::protobuf::int32 bot_landlords(int index) const;
  inline void set_bot_landlords(int index, ::google::protobuf::int32 value);
  inline void add_bot_landlords(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bot_landlords() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bot_landlords();

  // optional int32 play_cnt = 12;
  inline bool has_play_cnt() const;
  inline void clear_play_cnt();
  static const int kPlayCntFieldNumber = 12;
  inline ::google::protobuf::int32 play_cnt() const;
  inline void set_play_cnt(::google::protobuf::int32 value);

  // optional int32 four_take = 13;
  inline bool has_four_take() const;
  inline void clear_four_take();
  static const int kFourTakeFieldNumber = 13;
  inline ::google::protobuf::int32 four_take() const;
  inline void set_four_take(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_send_all_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_botbanker();
  inline void clear_has_botbanker();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_play_cnt();
  inline void clear_has_play_cnt();
  inline void set_has_four_take();
  inline void clear_has_four_take();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 current_user_;
  ::google::protobuf::RepeatedField< bool > user_trustee_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_info2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_info3_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > back_card_;
  bool botbanker_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bot_landlords_;
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 play_cnt_;
  ::google::protobuf::int32 four_take_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_send_all_card* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_land_score : public ::google::protobuf::Message {
 public:
  packetc2l_land_score();
  virtual ~packetc2l_land_score();

  packetc2l_land_score(const packetc2l_land_score& from);

  inline packetc2l_land_score& operator=(const packetc2l_land_score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_land_score& default_instance();

  void Swap(packetc2l_land_score* other);

  // implements Message ----------------------------------------------

  packetc2l_land_score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_land_score& from);
  void MergeFrom(const packetc2l_land_score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_land_score];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional bool score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline bool score() const;
  inline void set_score(bool value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_land_score)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  bool score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_land_score* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_land_score : public ::google::protobuf::Message {
 public:
  packetl2c_land_score();
  virtual ~packetl2c_land_score();

  packetl2c_land_score(const packetl2c_land_score& from);

  inline packetl2c_land_score& operator=(const packetl2c_land_score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_land_score& default_instance();

  void Swap(packetl2c_land_score* other);

  // implements Message ----------------------------------------------

  packetl2c_land_score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_land_score& from);
  void MergeFrom(const packetl2c_land_score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_land_score];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 land_user = 2;
  inline bool has_land_user() const;
  inline void clear_land_user();
  static const int kLandUserFieldNumber = 2;
  inline ::google::protobuf::int32 land_user() const;
  inline void set_land_user(::google::protobuf::int32 value);

  // optional int32 current_user = 3;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 3;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // optional int32 land_score = 4;
  inline bool has_land_score() const;
  inline void clear_land_score();
  static const int kLandScoreFieldNumber = 4;
  inline ::google::protobuf::int32 land_score() const;
  inline void set_land_score(::google::protobuf::int32 value);

  // optional int32 current_score = 5;
  inline bool has_current_score() const;
  inline void clear_current_score();
  static const int kCurrentScoreFieldNumber = 5;
  inline ::google::protobuf::int32 current_score() const;
  inline void set_current_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_land_score)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_land_user();
  inline void clear_has_land_user();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_land_score();
  inline void clear_has_land_score();
  inline void set_has_current_score();
  inline void clear_has_current_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 land_user_;
  ::google::protobuf::int32 current_user_;
  ::google::protobuf::int32 land_score_;
  ::google::protobuf::int32 current_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_land_score* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_start : public ::google::protobuf::Message {
 public:
  packetl2c_game_start();
  virtual ~packetl2c_game_start();

  packetl2c_game_start(const packetl2c_game_start& from);

  inline packetl2c_game_start& operator=(const packetl2c_game_start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_start& default_instance();

  void Swap(packetl2c_game_start* other);

  // implements Message ----------------------------------------------

  packetl2c_game_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_start& from);
  void MergeFrom(const packetl2c_game_start& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 land_user = 2;
  inline bool has_land_user() const;
  inline void clear_land_user();
  static const int kLandUserFieldNumber = 2;
  inline ::google::protobuf::int32 land_user() const;
  inline void set_land_user(::google::protobuf::int32 value);

  // optional int32 land_score = 3;
  inline bool has_land_score() const;
  inline void clear_land_score();
  static const int kLandScoreFieldNumber = 3;
  inline ::google::protobuf::int32 land_score() const;
  inline void set_land_score(::google::protobuf::int32 value);

  // repeated int32 back_card = 4;
  inline int back_card_size() const;
  inline void clear_back_card();
  static const int kBackCardFieldNumber = 4;
  inline ::google::protobuf::int32 back_card(int index) const;
  inline void set_back_card(int index, ::google::protobuf::int32 value);
  inline void add_back_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      back_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_back_card();

  // optional int32 score_times = 5;
  inline bool has_score_times() const;
  inline void clear_score_times();
  static const int kScoreTimesFieldNumber = 5;
  inline ::google::protobuf::int32 score_times() const;
  inline void set_score_times(::google::protobuf::int32 value);

  // optional int32 remain_seconds = 6;
  inline bool has_remain_seconds() const;
  inline void clear_remain_seconds();
  static const int kRemainSecondsFieldNumber = 6;
  inline ::google::protobuf::int32 remain_seconds() const;
  inline void set_remain_seconds(::google::protobuf::int32 value);

  // optional bool need_times = 7;
  inline bool has_need_times() const;
  inline void clear_need_times();
  static const int kNeedTimesFieldNumber = 7;
  inline bool need_times() const;
  inline void set_need_times(bool value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_game_start)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_land_user();
  inline void clear_has_land_user();
  inline void set_has_land_score();
  inline void clear_has_land_score();
  inline void set_has_score_times();
  inline void clear_has_score_times();
  inline void set_has_remain_seconds();
  inline void clear_has_remain_seconds();
  inline void set_has_need_times();
  inline void clear_has_need_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 land_user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > back_card_;
  ::google::protobuf::int32 land_score_;
  ::google::protobuf::int32 score_times_;
  ::google::protobuf::int32 remain_seconds_;
  bool need_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_start* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_times : public ::google::protobuf::Message {
 public:
  packetc2l_times();
  virtual ~packetc2l_times();

  packetc2l_times(const packetc2l_times& from);

  inline packetc2l_times& operator=(const packetc2l_times& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_times& default_instance();

  void Swap(packetc2l_times* other);

  // implements Message ----------------------------------------------

  packetc2l_times* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_times& from);
  void MergeFrom(const packetc2l_times& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_times];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_times)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_times* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_times_notify : public ::google::protobuf::Message {
 public:
  packetl2c_times_notify();
  virtual ~packetl2c_times_notify();

  packetl2c_times_notify(const packetl2c_times_notify& from);

  inline packetl2c_times_notify& operator=(const packetl2c_times_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_times_notify& default_instance();

  void Swap(packetl2c_times_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_times_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_times_notify& from);
  void MergeFrom(const packetl2c_times_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_times_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 chair_idx = 2;
  inline bool has_chair_idx() const;
  inline void clear_chair_idx();
  static const int kChairIdxFieldNumber = 2;
  inline ::google::protobuf::int32 chair_idx() const;
  inline void set_chair_idx(::google::protobuf::int32 value);

  // optional int32 times = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 3;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_times_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chair_idx();
  inline void clear_has_chair_idx();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chair_idx_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_times_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_really_game_start : public ::google::protobuf::Message {
 public:
  packetl2c_really_game_start();
  virtual ~packetl2c_really_game_start();

  packetl2c_really_game_start(const packetl2c_really_game_start& from);

  inline packetl2c_really_game_start& operator=(const packetl2c_really_game_start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_really_game_start& default_instance();

  void Swap(packetl2c_really_game_start* other);

  // implements Message ----------------------------------------------

  packetl2c_really_game_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_really_game_start& from);
  void MergeFrom(const packetl2c_really_game_start& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_really_game_start];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_really_game_start)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_really_game_start* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_out_card : public ::google::protobuf::Message {
 public:
  packetc2l_out_card();
  virtual ~packetc2l_out_card();

  packetc2l_out_card(const packetc2l_out_card& from);

  inline packetc2l_out_card& operator=(const packetc2l_out_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_out_card& default_instance();

  void Swap(packetc2l_out_card* other);

  // implements Message ----------------------------------------------

  packetc2l_out_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_out_card& from);
  void MergeFrom(const packetc2l_out_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // repeated int32 cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_out_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_out_card* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_out_card : public ::google::protobuf::Message {
 public:
  packetl2c_out_card();
  virtual ~packetl2c_out_card();

  packetl2c_out_card(const packetl2c_out_card& from);

  inline packetl2c_out_card& operator=(const packetl2c_out_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_out_card& default_instance();

  void Swap(packetl2c_out_card* other);

  // implements Message ----------------------------------------------

  packetl2c_out_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_out_card& from);
  void MergeFrom(const packetl2c_out_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 out_card_user = 2;
  inline bool has_out_card_user() const;
  inline void clear_out_card_user();
  static const int kOutCardUserFieldNumber = 2;
  inline ::google::protobuf::int32 out_card_user() const;
  inline void set_out_card_user(::google::protobuf::int32 value);

  // optional int32 current_user = 3;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 3;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // optional int32 bomb_time = 4;
  inline bool has_bomb_time() const;
  inline void clear_bomb_time();
  static const int kBombTimeFieldNumber = 4;
  inline ::google::protobuf::int32 bomb_time() const;
  inline void set_bomb_time(::google::protobuf::int32 value);

  // repeated int32 cards = 5;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 5;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_out_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_out_card_user();
  inline void clear_has_out_card_user();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_bomb_time();
  inline void clear_has_bomb_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 out_card_user_;
  ::google::protobuf::int32 current_user_;
  ::google::protobuf::int32 bomb_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_out_card* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_pass_card : public ::google::protobuf::Message {
 public:
  packetl2c_pass_card();
  virtual ~packetl2c_pass_card();

  packetl2c_pass_card(const packetl2c_pass_card& from);

  inline packetl2c_pass_card& operator=(const packetl2c_pass_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_pass_card& default_instance();

  void Swap(packetl2c_pass_card* other);

  // implements Message ----------------------------------------------

  packetl2c_pass_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_pass_card& from);
  void MergeFrom(const packetl2c_pass_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 pass_card_user = 2;
  inline bool has_pass_card_user() const;
  inline void clear_pass_card_user();
  static const int kPassCardUserFieldNumber = 2;
  inline ::google::protobuf::int32 pass_card_user() const;
  inline void set_pass_card_user(::google::protobuf::int32 value);

  // optional int32 current_user = 3;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 3;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // optional bool new_turn = 4;
  inline bool has_new_turn() const;
  inline void clear_new_turn();
  static const int kNewTurnFieldNumber = 4;
  inline bool new_turn() const;
  inline void set_new_turn(bool value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_pass_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_pass_card_user();
  inline void clear_has_pass_card_user();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_new_turn();
  inline void clear_has_new_turn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 pass_card_user_;
  ::google::protobuf::int32 current_user_;
  bool new_turn_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_pass_card* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_end : public ::google::protobuf::Message {
 public:
  packetl2c_game_end();
  virtual ~packetl2c_game_end();

  packetl2c_game_end(const packetl2c_game_end& from);

  inline packetl2c_game_end& operator=(const packetl2c_game_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_end& default_instance();

  void Swap(packetl2c_game_end* other);

  // implements Message ----------------------------------------------

  packetl2c_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_end& from);
  void MergeFrom(const packetl2c_game_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // repeated int32 bomb_time = 2;
  inline int bomb_time_size() const;
  inline void clear_bomb_time();
  static const int kBombTimeFieldNumber = 2;
  inline ::google::protobuf::int32 bomb_time(int index) const;
  inline void set_bomb_time(int index, ::google::protobuf::int32 value);
  inline void add_bomb_time(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bomb_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bomb_time();

  // repeated int32 game_score = 3;
  inline int game_score_size() const;
  inline void clear_game_score();
  static const int kGameScoreFieldNumber = 3;
  inline ::google::protobuf::int32 game_score(int index) const;
  inline void set_game_score(int index, ::google::protobuf::int32 value);
  inline void add_game_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      game_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_game_score();

  // repeated bool leave_game = 4;
  inline int leave_game_size() const;
  inline void clear_leave_game();
  static const int kLeaveGameFieldNumber = 4;
  inline bool leave_game(int index) const;
  inline void set_leave_game(int index, bool value);
  inline void add_leave_game(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      leave_game() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_leave_game();

  // optional bool spring = 5;
  inline bool has_spring() const;
  inline void clear_spring();
  static const int kSpringFieldNumber = 5;
  inline bool spring() const;
  inline void set_spring(bool value);

  // repeated int32 cards1 = 6;
  inline int cards1_size() const;
  inline void clear_cards1();
  static const int kCards1FieldNumber = 6;
  inline ::google::protobuf::int32 cards1(int index) const;
  inline void set_cards1(int index, ::google::protobuf::int32 value);
  inline void add_cards1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards1();

  // repeated int32 cards2 = 7;
  inline int cards2_size() const;
  inline void clear_cards2();
  static const int kCards2FieldNumber = 7;
  inline ::google::protobuf::int32 cards2(int index) const;
  inline void set_cards2(int index, ::google::protobuf::int32 value);
  inline void add_cards2(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards2();

  // repeated int32 cards3 = 8;
  inline int cards3_size() const;
  inline void clear_cards3();
  static const int kCards3FieldNumber = 8;
  inline ::google::protobuf::int32 cards3(int index) const;
  inline void set_cards3(int index, ::google::protobuf::int32 value);
  inline void add_cards3(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards3();

  // repeated bool limited = 9;
  inline int limited_size() const;
  inline void clear_limited();
  static const int kLimitedFieldNumber = 9;
  inline bool limited(int index) const;
  inline void set_limited(int index, bool value);
  inline void add_limited(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      limited() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_limited();

  // optional int32 task_ok = 10;
  inline bool has_task_ok() const;
  inline void clear_task_ok();
  static const int kTaskOkFieldNumber = 10;
  inline ::google::protobuf::int32 task_ok() const;
  inline void set_task_ok(::google::protobuf::int32 value);

  // repeated bool low_limited = 11;
  inline int low_limited_size() const;
  inline void clear_low_limited();
  static const int kLowLimitedFieldNumber = 11;
  inline bool low_limited(int index) const;
  inline void set_low_limited(int index, bool value);
  inline void add_low_limited(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      low_limited() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_low_limited();

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_game_end)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_spring();
  inline void clear_has_spring();
  inline void set_has_task_ok();
  inline void clear_has_task_ok();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bomb_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > game_score_;
  int packet_id_;
  bool spring_;
  ::google::protobuf::RepeatedField< bool > leave_game_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards3_;
  ::google::protobuf::RepeatedField< bool > limited_;
  ::google::protobuf::RepeatedField< bool > low_limited_;
  ::google::protobuf::int32 task_ok_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_end* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_game_notify : public ::google::protobuf::Message {
 public:
  packetl2c_game_notify();
  virtual ~packetl2c_game_notify();

  packetl2c_game_notify(const packetl2c_game_notify& from);

  inline packetl2c_game_notify& operator=(const packetl2c_game_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_game_notify& default_instance();

  void Swap(packetl2c_game_notify* other);

  // implements Message ----------------------------------------------

  packetl2c_game_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_game_notify& from);
  void MergeFrom(const packetl2c_game_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional .game_land_protocols.e_notify_type notify_type = 2;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 2;
  inline ::game_land_protocols::e_notify_type notify_type() const;
  inline void set_notify_type(::game_land_protocols::e_notify_type value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_game_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  int notify_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_game_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_report : public ::google::protobuf::Message {
 public:
  packetc2l_report();
  virtual ~packetc2l_report();

  packetc2l_report(const packetc2l_report& from);

  inline packetc2l_report& operator=(const packetc2l_report& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_report& default_instance();

  void Swap(packetc2l_report* other);

  // implements Message ----------------------------------------------

  packetc2l_report* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_report& from);
  void MergeFrom(const packetc2l_report& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_report];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 chair_idx = 2;
  inline bool has_chair_idx() const;
  inline void clear_chair_idx();
  static const int kChairIdxFieldNumber = 2;
  inline ::google::protobuf::int32 chair_idx() const;
  inline void set_chair_idx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetc2l_report)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chair_idx();
  inline void clear_has_chair_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chair_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_report* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_report_res : public ::google::protobuf::Message {
 public:
  packetl2c_report_res();
  virtual ~packetl2c_report_res();

  packetl2c_report_res(const packetl2c_report_res& from);

  inline packetl2c_report_res& operator=(const packetl2c_report_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_report_res& default_instance();

  void Swap(packetl2c_report_res* other);

  // implements Message ----------------------------------------------

  packetl2c_report_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_report_res& from);
  void MergeFrom(const packetl2c_report_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_report_res];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_land_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_land_protocols::e_server_msg_type value);

  // optional int32 chair_idx = 2;
  inline bool has_chair_idx() const;
  inline void clear_chair_idx();
  static const int kChairIdxFieldNumber = 2;
  inline ::google::protobuf::int32 chair_idx() const;
  inline void set_chair_idx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_land_protocols.packetl2c_report_res)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_chair_idx();
  inline void clear_has_chair_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 chair_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fland_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fland_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_report_res* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool msg_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& msg_player_info::player_name() const {
  return *player_name_;
}
inline void msg_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void msg_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* msg_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_frame = 3;
inline bool msg_player_info::has_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_head_frame() {
  head_frame_ = 0;
  clear_has_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::head_frame() const {
  return head_frame_;
}
inline void msg_player_info::set_head_frame(::google::protobuf::int32 value) {
  set_has_head_frame();
  head_frame_ = value;
}

// optional string head_custom = 4;
inline bool msg_player_info::has_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_head_custom() {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    head_custom_->clear();
  }
  clear_has_head_custom();
}
inline const ::std::string& msg_player_info::head_custom() const {
  return *head_custom_;
}
inline void msg_player_info::set_head_custom(const ::std::string& value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(value);
}
inline void msg_player_info::set_head_custom(const char* value, size_t size) {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  head_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_player_info::mutable_head_custom() {
  set_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    head_custom_ = new ::std::string;
  }
  return head_custom_;
}
inline ::std::string* msg_player_info::release_head_custom() {
  clear_has_head_custom();
  if (head_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_custom_;
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_player_info::set_allocated_head_custom(::std::string* head_custom) {
  if (head_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete head_custom_;
  }
  if (head_custom) {
    set_has_head_custom();
    head_custom_ = head_custom;
  } else {
    clear_has_head_custom();
    head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 player_gold = 5;
inline bool msg_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_info::player_gold() const {
  return player_gold_;
}
inline void msg_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// optional int32 player_sex = 6;
inline bool msg_player_info::has_player_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_player_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_player_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_player_sex() {
  player_sex_ = 0;
  clear_has_player_sex();
}
inline ::google::protobuf::int32 msg_player_info::player_sex() const {
  return player_sex_;
}
inline void msg_player_info::set_player_sex(::google::protobuf::int32 value) {
  set_has_player_sex();
  player_sex_ = value;
}

// optional int32 vip_level = 7;
inline bool msg_player_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 msg_player_info::vip_level() const {
  return vip_level_;
}
inline void msg_player_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool packetl2c_check_state_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetl2c_check_state_result::result() const {
  return result_;
}
inline void packetl2c_check_state_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_get_scene_info

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_scene_info];
inline bool packetc2l_get_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_scene_info::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_get_scene_info::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_scene_info::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// msg_room_scene_info

// optional bool ready = 1;
inline bool msg_room_scene_info::has_ready() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_room_scene_info::set_has_ready() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_room_scene_info::clear_has_ready() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_room_scene_info::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
inline bool msg_room_scene_info::ready() const {
  return ready_;
}
inline void msg_room_scene_info::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
}

// -------------------------------------------------------------------

// msg_score_scene_info

// optional int32 current_user = 1;
inline bool msg_score_scene_info::has_current_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_score_scene_info::set_has_current_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_score_scene_info::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_score_scene_info::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 msg_score_scene_info::current_user() const {
  return current_user_;
}
inline void msg_score_scene_info::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional int32 remain_seconds = 2;
inline bool msg_score_scene_info::has_remain_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_score_scene_info::set_has_remain_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_score_scene_info::clear_has_remain_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_score_scene_info::clear_remain_seconds() {
  remain_seconds_ = 0;
  clear_has_remain_seconds();
}
inline ::google::protobuf::int32 msg_score_scene_info::remain_seconds() const {
  return remain_seconds_;
}
inline void msg_score_scene_info::set_remain_seconds(::google::protobuf::int32 value) {
  set_has_remain_seconds();
  remain_seconds_ = value;
}

// repeated int32 score_info = 3;
inline int msg_score_scene_info::score_info_size() const {
  return score_info_.size();
}
inline void msg_score_scene_info::clear_score_info() {
  score_info_.Clear();
}
inline ::google::protobuf::int32 msg_score_scene_info::score_info(int index) const {
  return score_info_.Get(index);
}
inline void msg_score_scene_info::set_score_info(int index, ::google::protobuf::int32 value) {
  score_info_.Set(index, value);
}
inline void msg_score_scene_info::add_score_info(::google::protobuf::int32 value) {
  score_info_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_score_scene_info::score_info() const {
  return score_info_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_score_scene_info::mutable_score_info() {
  return &score_info_;
}

// repeated bool user_trustee = 4;
inline int msg_score_scene_info::user_trustee_size() const {
  return user_trustee_.size();
}
inline void msg_score_scene_info::clear_user_trustee() {
  user_trustee_.Clear();
}
inline bool msg_score_scene_info::user_trustee(int index) const {
  return user_trustee_.Get(index);
}
inline void msg_score_scene_info::set_user_trustee(int index, bool value) {
  user_trustee_.Set(index, value);
}
inline void msg_score_scene_info::add_user_trustee(bool value) {
  user_trustee_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
msg_score_scene_info::user_trustee() const {
  return user_trustee_;
}
inline ::google::protobuf::RepeatedField< bool >*
msg_score_scene_info::mutable_user_trustee() {
  return &user_trustee_;
}

// repeated int32 cards_info = 5;
inline int msg_score_scene_info::cards_info_size() const {
  return cards_info_.size();
}
inline void msg_score_scene_info::clear_cards_info() {
  cards_info_.Clear();
}
inline ::google::protobuf::int32 msg_score_scene_info::cards_info(int index) const {
  return cards_info_.Get(index);
}
inline void msg_score_scene_info::set_cards_info(int index, ::google::protobuf::int32 value) {
  cards_info_.Set(index, value);
}
inline void msg_score_scene_info::add_cards_info(::google::protobuf::int32 value) {
  cards_info_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_score_scene_info::cards_info() const {
  return cards_info_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_score_scene_info::mutable_cards_info() {
  return &cards_info_;
}

// -------------------------------------------------------------------

// msg_times_scene_info

// optional int32 remain_seconds = 1;
inline bool msg_times_scene_info::has_remain_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_times_scene_info::set_has_remain_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_times_scene_info::clear_has_remain_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_times_scene_info::clear_remain_seconds() {
  remain_seconds_ = 0;
  clear_has_remain_seconds();
}
inline ::google::protobuf::int32 msg_times_scene_info::remain_seconds() const {
  return remain_seconds_;
}
inline void msg_times_scene_info::set_remain_seconds(::google::protobuf::int32 value) {
  set_has_remain_seconds();
  remain_seconds_ = value;
}

// repeated bool user_trustee = 2;
inline int msg_times_scene_info::user_trustee_size() const {
  return user_trustee_.size();
}
inline void msg_times_scene_info::clear_user_trustee() {
  user_trustee_.Clear();
}
inline bool msg_times_scene_info::user_trustee(int index) const {
  return user_trustee_.Get(index);
}
inline void msg_times_scene_info::set_user_trustee(int index, bool value) {
  user_trustee_.Set(index, value);
}
inline void msg_times_scene_info::add_user_trustee(bool value) {
  user_trustee_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
msg_times_scene_info::user_trustee() const {
  return user_trustee_;
}
inline ::google::protobuf::RepeatedField< bool >*
msg_times_scene_info::mutable_user_trustee() {
  return &user_trustee_;
}

// repeated int32 cards_info = 3;
inline int msg_times_scene_info::cards_info_size() const {
  return cards_info_.size();
}
inline void msg_times_scene_info::clear_cards_info() {
  cards_info_.Clear();
}
inline ::google::protobuf::int32 msg_times_scene_info::cards_info(int index) const {
  return cards_info_.Get(index);
}
inline void msg_times_scene_info::set_cards_info(int index, ::google::protobuf::int32 value) {
  cards_info_.Set(index, value);
}
inline void msg_times_scene_info::add_cards_info(::google::protobuf::int32 value) {
  cards_info_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_times_scene_info::cards_info() const {
  return cards_info_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_times_scene_info::mutable_cards_info() {
  return &cards_info_;
}

// optional int32 land_user = 4;
inline bool msg_times_scene_info::has_land_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_times_scene_info::set_has_land_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_times_scene_info::clear_has_land_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_times_scene_info::clear_land_user() {
  land_user_ = 0;
  clear_has_land_user();
}
inline ::google::protobuf::int32 msg_times_scene_info::land_user() const {
  return land_user_;
}
inline void msg_times_scene_info::set_land_user(::google::protobuf::int32 value) {
  set_has_land_user();
  land_user_ = value;
}

// optional int32 land_score = 5;
inline bool msg_times_scene_info::has_land_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_times_scene_info::set_has_land_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_times_scene_info::clear_has_land_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_times_scene_info::clear_land_score() {
  land_score_ = 0;
  clear_has_land_score();
}
inline ::google::protobuf::int32 msg_times_scene_info::land_score() const {
  return land_score_;
}
inline void msg_times_scene_info::set_land_score(::google::protobuf::int32 value) {
  set_has_land_score();
  land_score_ = value;
}

// repeated int32 back_card = 6;
inline int msg_times_scene_info::back_card_size() const {
  return back_card_.size();
}
inline void msg_times_scene_info::clear_back_card() {
  back_card_.Clear();
}
inline ::google::protobuf::int32 msg_times_scene_info::back_card(int index) const {
  return back_card_.Get(index);
}
inline void msg_times_scene_info::set_back_card(int index, ::google::protobuf::int32 value) {
  back_card_.Set(index, value);
}
inline void msg_times_scene_info::add_back_card(::google::protobuf::int32 value) {
  back_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_times_scene_info::back_card() const {
  return back_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_times_scene_info::mutable_back_card() {
  return &back_card_;
}

// -------------------------------------------------------------------

// msg_playing_scene_info

// optional int32 land_chair_id = 1;
inline bool msg_playing_scene_info::has_land_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_playing_scene_info::set_has_land_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_playing_scene_info::clear_has_land_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_playing_scene_info::clear_land_chair_id() {
  land_chair_id_ = 0;
  clear_has_land_chair_id();
}
inline ::google::protobuf::int32 msg_playing_scene_info::land_chair_id() const {
  return land_chair_id_;
}
inline void msg_playing_scene_info::set_land_chair_id(::google::protobuf::int32 value) {
  set_has_land_chair_id();
  land_chair_id_ = value;
}

// optional int32 land_score = 2;
inline bool msg_playing_scene_info::has_land_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_playing_scene_info::set_has_land_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_playing_scene_info::clear_has_land_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_playing_scene_info::clear_land_score() {
  land_score_ = 0;
  clear_has_land_score();
}
inline ::google::protobuf::int32 msg_playing_scene_info::land_score() const {
  return land_score_;
}
inline void msg_playing_scene_info::set_land_score(::google::protobuf::int32 value) {
  set_has_land_score();
  land_score_ = value;
}

// optional int32 current_user = 3;
inline bool msg_playing_scene_info::has_current_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_playing_scene_info::set_has_current_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_playing_scene_info::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_playing_scene_info::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 msg_playing_scene_info::current_user() const {
  return current_user_;
}
inline void msg_playing_scene_info::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional int32 remain_seconds = 4;
inline bool msg_playing_scene_info::has_remain_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_playing_scene_info::set_has_remain_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_playing_scene_info::clear_has_remain_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_playing_scene_info::clear_remain_seconds() {
  remain_seconds_ = 0;
  clear_has_remain_seconds();
}
inline ::google::protobuf::int32 msg_playing_scene_info::remain_seconds() const {
  return remain_seconds_;
}
inline void msg_playing_scene_info::set_remain_seconds(::google::protobuf::int32 value) {
  set_has_remain_seconds();
  remain_seconds_ = value;
}

// repeated bool user_trustee = 5;
inline int msg_playing_scene_info::user_trustee_size() const {
  return user_trustee_.size();
}
inline void msg_playing_scene_info::clear_user_trustee() {
  user_trustee_.Clear();
}
inline bool msg_playing_scene_info::user_trustee(int index) const {
  return user_trustee_.Get(index);
}
inline void msg_playing_scene_info::set_user_trustee(int index, bool value) {
  user_trustee_.Set(index, value);
}
inline void msg_playing_scene_info::add_user_trustee(bool value) {
  user_trustee_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
msg_playing_scene_info::user_trustee() const {
  return user_trustee_;
}
inline ::google::protobuf::RepeatedField< bool >*
msg_playing_scene_info::mutable_user_trustee() {
  return &user_trustee_;
}

// repeated int32 remain_card_cnt = 6;
inline int msg_playing_scene_info::remain_card_cnt_size() const {
  return remain_card_cnt_.size();
}
inline void msg_playing_scene_info::clear_remain_card_cnt() {
  remain_card_cnt_.Clear();
}
inline ::google::protobuf::int32 msg_playing_scene_info::remain_card_cnt(int index) const {
  return remain_card_cnt_.Get(index);
}
inline void msg_playing_scene_info::set_remain_card_cnt(int index, ::google::protobuf::int32 value) {
  remain_card_cnt_.Set(index, value);
}
inline void msg_playing_scene_info::add_remain_card_cnt(::google::protobuf::int32 value) {
  remain_card_cnt_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_playing_scene_info::remain_card_cnt() const {
  return remain_card_cnt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_playing_scene_info::mutable_remain_card_cnt() {
  return &remain_card_cnt_;
}

// repeated int32 back_card = 7;
inline int msg_playing_scene_info::back_card_size() const {
  return back_card_.size();
}
inline void msg_playing_scene_info::clear_back_card() {
  back_card_.Clear();
}
inline ::google::protobuf::int32 msg_playing_scene_info::back_card(int index) const {
  return back_card_.Get(index);
}
inline void msg_playing_scene_info::set_back_card(int index, ::google::protobuf::int32 value) {
  back_card_.Set(index, value);
}
inline void msg_playing_scene_info::add_back_card(::google::protobuf::int32 value) {
  back_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_playing_scene_info::back_card() const {
  return back_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_playing_scene_info::mutable_back_card() {
  return &back_card_;
}

// repeated int32 cards_info = 8;
inline int msg_playing_scene_info::cards_info_size() const {
  return cards_info_.size();
}
inline void msg_playing_scene_info::clear_cards_info() {
  cards_info_.Clear();
}
inline ::google::protobuf::int32 msg_playing_scene_info::cards_info(int index) const {
  return cards_info_.Get(index);
}
inline void msg_playing_scene_info::set_cards_info(int index, ::google::protobuf::int32 value) {
  cards_info_.Set(index, value);
}
inline void msg_playing_scene_info::add_cards_info(::google::protobuf::int32 value) {
  cards_info_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_playing_scene_info::cards_info() const {
  return cards_info_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_playing_scene_info::mutable_cards_info() {
  return &cards_info_;
}

// repeated int32 turn_cards1 = 9;
inline int msg_playing_scene_info::turn_cards1_size() const {
  return turn_cards1_.size();
}
inline void msg_playing_scene_info::clear_turn_cards1() {
  turn_cards1_.Clear();
}
inline ::google::protobuf::int32 msg_playing_scene_info::turn_cards1(int index) const {
  return turn_cards1_.Get(index);
}
inline void msg_playing_scene_info::set_turn_cards1(int index, ::google::protobuf::int32 value) {
  turn_cards1_.Set(index, value);
}
inline void msg_playing_scene_info::add_turn_cards1(::google::protobuf::int32 value) {
  turn_cards1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_playing_scene_info::turn_cards1() const {
  return turn_cards1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_playing_scene_info::mutable_turn_cards1() {
  return &turn_cards1_;
}

// repeated int32 turn_cards2 = 10;
inline int msg_playing_scene_info::turn_cards2_size() const {
  return turn_cards2_.size();
}
inline void msg_playing_scene_info::clear_turn_cards2() {
  turn_cards2_.Clear();
}
inline ::google::protobuf::int32 msg_playing_scene_info::turn_cards2(int index) const {
  return turn_cards2_.Get(index);
}
inline void msg_playing_scene_info::set_turn_cards2(int index, ::google::protobuf::int32 value) {
  turn_cards2_.Set(index, value);
}
inline void msg_playing_scene_info::add_turn_cards2(::google::protobuf::int32 value) {
  turn_cards2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_playing_scene_info::turn_cards2() const {
  return turn_cards2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_playing_scene_info::mutable_turn_cards2() {
  return &turn_cards2_;
}

// repeated int32 turn_cards3 = 11;
inline int msg_playing_scene_info::turn_cards3_size() const {
  return turn_cards3_.size();
}
inline void msg_playing_scene_info::clear_turn_cards3() {
  turn_cards3_.Clear();
}
inline ::google::protobuf::int32 msg_playing_scene_info::turn_cards3(int index) const {
  return turn_cards3_.Get(index);
}
inline void msg_playing_scene_info::set_turn_cards3(int index, ::google::protobuf::int32 value) {
  turn_cards3_.Set(index, value);
}
inline void msg_playing_scene_info::add_turn_cards3(::google::protobuf::int32 value) {
  turn_cards3_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_playing_scene_info::turn_cards3() const {
  return turn_cards3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_playing_scene_info::mutable_turn_cards3() {
  return &turn_cards3_;
}

// optional bool new_turn = 12;
inline bool msg_playing_scene_info::has_new_turn() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void msg_playing_scene_info::set_has_new_turn() {
  _has_bits_[0] |= 0x00000800u;
}
inline void msg_playing_scene_info::clear_has_new_turn() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void msg_playing_scene_info::clear_new_turn() {
  new_turn_ = false;
  clear_has_new_turn();
}
inline bool msg_playing_scene_info::new_turn() const {
  return new_turn_;
}
inline void msg_playing_scene_info::set_new_turn(bool value) {
  set_has_new_turn();
  new_turn_ = value;
}

// optional int32 bomb_time = 13;
inline bool msg_playing_scene_info::has_bomb_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void msg_playing_scene_info::set_has_bomb_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void msg_playing_scene_info::clear_has_bomb_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void msg_playing_scene_info::clear_bomb_time() {
  bomb_time_ = 0;
  clear_has_bomb_time();
}
inline ::google::protobuf::int32 msg_playing_scene_info::bomb_time() const {
  return bomb_time_;
}
inline void msg_playing_scene_info::set_bomb_time(::google::protobuf::int32 value) {
  set_has_bomb_time();
  bomb_time_ = value;
}

// repeated int32 out_cards = 14;
inline int msg_playing_scene_info::out_cards_size() const {
  return out_cards_.size();
}
inline void msg_playing_scene_info::clear_out_cards() {
  out_cards_.Clear();
}
inline ::google::protobuf::int32 msg_playing_scene_info::out_cards(int index) const {
  return out_cards_.Get(index);
}
inline void msg_playing_scene_info::set_out_cards(int index, ::google::protobuf::int32 value) {
  out_cards_.Set(index, value);
}
inline void msg_playing_scene_info::add_out_cards(::google::protobuf::int32 value) {
  out_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_playing_scene_info::out_cards() const {
  return out_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_playing_scene_info::mutable_out_cards() {
  return &out_cards_;
}

// optional int32 score_times = 15;
inline bool msg_playing_scene_info::has_score_times() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void msg_playing_scene_info::set_has_score_times() {
  _has_bits_[0] |= 0x00004000u;
}
inline void msg_playing_scene_info::clear_has_score_times() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void msg_playing_scene_info::clear_score_times() {
  score_times_ = 0;
  clear_has_score_times();
}
inline ::google::protobuf::int32 msg_playing_scene_info::score_times() const {
  return score_times_;
}
inline void msg_playing_scene_info::set_score_times(::google::protobuf::int32 value) {
  set_has_score_times();
  score_times_ = value;
}

// -------------------------------------------------------------------

// packetl2c_scene_info_result

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_scene_info_result];
inline bool packetl2c_scene_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_scene_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_scene_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_scene_info_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_scene_info_result::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_scene_info_result::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_type = 2;
inline bool packetl2c_scene_info_result::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_scene_info_result::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_scene_info_result::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_scene_info_result::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::room_type() const {
  return room_type_;
}
inline void packetl2c_scene_info_result::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// optional .game_land_protocols.msg_room_scene_info scene_info1 = 3;
inline bool packetl2c_scene_info_result::has_scene_info1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_scene_info_result::set_has_scene_info1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_scene_info_result::clear_has_scene_info1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_scene_info_result::clear_scene_info1() {
  if (scene_info1_ != NULL) scene_info1_->::game_land_protocols::msg_room_scene_info::Clear();
  clear_has_scene_info1();
}
inline const ::game_land_protocols::msg_room_scene_info& packetl2c_scene_info_result::scene_info1() const {
  return scene_info1_ != NULL ? *scene_info1_ : *default_instance_->scene_info1_;
}
inline ::game_land_protocols::msg_room_scene_info* packetl2c_scene_info_result::mutable_scene_info1() {
  set_has_scene_info1();
  if (scene_info1_ == NULL) scene_info1_ = new ::game_land_protocols::msg_room_scene_info;
  return scene_info1_;
}
inline ::game_land_protocols::msg_room_scene_info* packetl2c_scene_info_result::release_scene_info1() {
  clear_has_scene_info1();
  ::game_land_protocols::msg_room_scene_info* temp = scene_info1_;
  scene_info1_ = NULL;
  return temp;
}
inline void packetl2c_scene_info_result::set_allocated_scene_info1(::game_land_protocols::msg_room_scene_info* scene_info1) {
  delete scene_info1_;
  scene_info1_ = scene_info1;
  if (scene_info1) {
    set_has_scene_info1();
  } else {
    clear_has_scene_info1();
  }
}

// optional .game_land_protocols.msg_score_scene_info scene_info2 = 4;
inline bool packetl2c_scene_info_result::has_scene_info2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_scene_info_result::set_has_scene_info2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_scene_info_result::clear_has_scene_info2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_scene_info_result::clear_scene_info2() {
  if (scene_info2_ != NULL) scene_info2_->::game_land_protocols::msg_score_scene_info::Clear();
  clear_has_scene_info2();
}
inline const ::game_land_protocols::msg_score_scene_info& packetl2c_scene_info_result::scene_info2() const {
  return scene_info2_ != NULL ? *scene_info2_ : *default_instance_->scene_info2_;
}
inline ::game_land_protocols::msg_score_scene_info* packetl2c_scene_info_result::mutable_scene_info2() {
  set_has_scene_info2();
  if (scene_info2_ == NULL) scene_info2_ = new ::game_land_protocols::msg_score_scene_info;
  return scene_info2_;
}
inline ::game_land_protocols::msg_score_scene_info* packetl2c_scene_info_result::release_scene_info2() {
  clear_has_scene_info2();
  ::game_land_protocols::msg_score_scene_info* temp = scene_info2_;
  scene_info2_ = NULL;
  return temp;
}
inline void packetl2c_scene_info_result::set_allocated_scene_info2(::game_land_protocols::msg_score_scene_info* scene_info2) {
  delete scene_info2_;
  scene_info2_ = scene_info2;
  if (scene_info2) {
    set_has_scene_info2();
  } else {
    clear_has_scene_info2();
  }
}

// optional .game_land_protocols.msg_playing_scene_info scene_info3 = 5;
inline bool packetl2c_scene_info_result::has_scene_info3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_scene_info_result::set_has_scene_info3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_scene_info_result::clear_has_scene_info3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_scene_info_result::clear_scene_info3() {
  if (scene_info3_ != NULL) scene_info3_->::game_land_protocols::msg_playing_scene_info::Clear();
  clear_has_scene_info3();
}
inline const ::game_land_protocols::msg_playing_scene_info& packetl2c_scene_info_result::scene_info3() const {
  return scene_info3_ != NULL ? *scene_info3_ : *default_instance_->scene_info3_;
}
inline ::game_land_protocols::msg_playing_scene_info* packetl2c_scene_info_result::mutable_scene_info3() {
  set_has_scene_info3();
  if (scene_info3_ == NULL) scene_info3_ = new ::game_land_protocols::msg_playing_scene_info;
  return scene_info3_;
}
inline ::game_land_protocols::msg_playing_scene_info* packetl2c_scene_info_result::release_scene_info3() {
  clear_has_scene_info3();
  ::game_land_protocols::msg_playing_scene_info* temp = scene_info3_;
  scene_info3_ = NULL;
  return temp;
}
inline void packetl2c_scene_info_result::set_allocated_scene_info3(::game_land_protocols::msg_playing_scene_info* scene_info3) {
  delete scene_info3_;
  scene_info3_ = scene_info3;
  if (scene_info3) {
    set_has_scene_info3();
  } else {
    clear_has_scene_info3();
  }
}

// optional int32 info_type = 6;
inline bool packetl2c_scene_info_result::has_info_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_scene_info_result::set_has_info_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_scene_info_result::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_scene_info_result::clear_info_type() {
  info_type_ = 0;
  clear_has_info_type();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::info_type() const {
  return info_type_;
}
inline void packetl2c_scene_info_result::set_info_type(::google::protobuf::int32 value) {
  set_has_info_type();
  info_type_ = value;
}

// optional .game_land_protocols.packetl2c_game_end scene_info4 = 7;
inline bool packetl2c_scene_info_result::has_scene_info4() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_scene_info_result::set_has_scene_info4() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_scene_info_result::clear_has_scene_info4() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_scene_info_result::clear_scene_info4() {
  if (scene_info4_ != NULL) scene_info4_->::game_land_protocols::packetl2c_game_end::Clear();
  clear_has_scene_info4();
}
inline const ::game_land_protocols::packetl2c_game_end& packetl2c_scene_info_result::scene_info4() const {
  return scene_info4_ != NULL ? *scene_info4_ : *default_instance_->scene_info4_;
}
inline ::game_land_protocols::packetl2c_game_end* packetl2c_scene_info_result::mutable_scene_info4() {
  set_has_scene_info4();
  if (scene_info4_ == NULL) scene_info4_ = new ::game_land_protocols::packetl2c_game_end;
  return scene_info4_;
}
inline ::game_land_protocols::packetl2c_game_end* packetl2c_scene_info_result::release_scene_info4() {
  clear_has_scene_info4();
  ::game_land_protocols::packetl2c_game_end* temp = scene_info4_;
  scene_info4_ = NULL;
  return temp;
}
inline void packetl2c_scene_info_result::set_allocated_scene_info4(::game_land_protocols::packetl2c_game_end* scene_info4) {
  delete scene_info4_;
  scene_info4_ = scene_info4;
  if (scene_info4) {
    set_has_scene_info4();
  } else {
    clear_has_scene_info4();
  }
}

// optional int32 land_chair_id4 = 8;
inline bool packetl2c_scene_info_result::has_land_chair_id4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_scene_info_result::set_has_land_chair_id4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_scene_info_result::clear_has_land_chair_id4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_scene_info_result::clear_land_chair_id4() {
  land_chair_id4_ = 0;
  clear_has_land_chair_id4();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::land_chair_id4() const {
  return land_chair_id4_;
}
inline void packetl2c_scene_info_result::set_land_chair_id4(::google::protobuf::int32 value) {
  set_has_land_chair_id4();
  land_chair_id4_ = value;
}

// optional int32 land_score4 = 9;
inline bool packetl2c_scene_info_result::has_land_score4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetl2c_scene_info_result::set_has_land_score4() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetl2c_scene_info_result::clear_has_land_score4() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetl2c_scene_info_result::clear_land_score4() {
  land_score4_ = 0;
  clear_has_land_score4();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::land_score4() const {
  return land_score4_;
}
inline void packetl2c_scene_info_result::set_land_score4(::google::protobuf::int32 value) {
  set_has_land_score4();
  land_score4_ = value;
}

// optional int32 score_times4 = 10;
inline bool packetl2c_scene_info_result::has_score_times4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void packetl2c_scene_info_result::set_has_score_times4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void packetl2c_scene_info_result::clear_has_score_times4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void packetl2c_scene_info_result::clear_score_times4() {
  score_times4_ = 0;
  clear_has_score_times4();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::score_times4() const {
  return score_times4_;
}
inline void packetl2c_scene_info_result::set_score_times4(::google::protobuf::int32 value) {
  set_has_score_times4();
  score_times4_ = value;
}

// optional int32 task_id = 11 [default = -1];
inline bool packetl2c_scene_info_result::has_task_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void packetl2c_scene_info_result::set_has_task_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void packetl2c_scene_info_result::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void packetl2c_scene_info_result::clear_task_id() {
  task_id_ = -1;
  clear_has_task_id();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::task_id() const {
  return task_id_;
}
inline void packetl2c_scene_info_result::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// repeated int32 times = 12;
inline int packetl2c_scene_info_result::times_size() const {
  return times_.size();
}
inline void packetl2c_scene_info_result::clear_times() {
  times_.Clear();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::times(int index) const {
  return times_.Get(index);
}
inline void packetl2c_scene_info_result::set_times(int index, ::google::protobuf::int32 value) {
  times_.Set(index, value);
}
inline void packetl2c_scene_info_result::add_times(::google::protobuf::int32 value) {
  times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_scene_info_result::times() const {
  return times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_scene_info_result::mutable_times() {
  return &times_;
}

// optional .game_land_protocols.msg_times_scene_info scene_info5 = 13;
inline bool packetl2c_scene_info_result::has_scene_info5() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void packetl2c_scene_info_result::set_has_scene_info5() {
  _has_bits_[0] |= 0x00001000u;
}
inline void packetl2c_scene_info_result::clear_has_scene_info5() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void packetl2c_scene_info_result::clear_scene_info5() {
  if (scene_info5_ != NULL) scene_info5_->::game_land_protocols::msg_times_scene_info::Clear();
  clear_has_scene_info5();
}
inline const ::game_land_protocols::msg_times_scene_info& packetl2c_scene_info_result::scene_info5() const {
  return scene_info5_ != NULL ? *scene_info5_ : *default_instance_->scene_info5_;
}
inline ::game_land_protocols::msg_times_scene_info* packetl2c_scene_info_result::mutable_scene_info5() {
  set_has_scene_info5();
  if (scene_info5_ == NULL) scene_info5_ = new ::game_land_protocols::msg_times_scene_info;
  return scene_info5_;
}
inline ::game_land_protocols::msg_times_scene_info* packetl2c_scene_info_result::release_scene_info5() {
  clear_has_scene_info5();
  ::game_land_protocols::msg_times_scene_info* temp = scene_info5_;
  scene_info5_ = NULL;
  return temp;
}
inline void packetl2c_scene_info_result::set_allocated_scene_info5(::game_land_protocols::msg_times_scene_info* scene_info5) {
  delete scene_info5_;
  scene_info5_ = scene_info5;
  if (scene_info5) {
    set_has_scene_info5();
  } else {
    clear_has_scene_info5();
  }
}

// optional int32 play_cnt = 14;
inline bool packetl2c_scene_info_result::has_play_cnt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void packetl2c_scene_info_result::set_has_play_cnt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void packetl2c_scene_info_result::clear_has_play_cnt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void packetl2c_scene_info_result::clear_play_cnt() {
  play_cnt_ = 0;
  clear_has_play_cnt();
}
inline ::google::protobuf::int32 packetl2c_scene_info_result::play_cnt() const {
  return play_cnt_;
}
inline void packetl2c_scene_info_result::set_play_cnt(::google::protobuf::int32 value) {
  set_has_play_cnt();
  play_cnt_ = value;
}

// -------------------------------------------------------------------

// packetc2l_enter_room

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
inline bool packetc2l_enter_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_room::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_enter_room::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_room::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 room_type = 2;
inline bool packetc2l_enter_room::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_room::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_room::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_room::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 packetc2l_enter_room::room_type() const {
  return room_type_;
}
inline void packetc2l_enter_room::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// -------------------------------------------------------------------

// packetl2c_enter_room_result

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
inline bool packetl2c_enter_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_room_result::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_enter_room_result::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_room_result::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetl2c_enter_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_room_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_enter_room_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_enter_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2l_leave_room

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
inline bool packetc2l_leave_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_leave_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_leave_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_leave_room::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_leave_room::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_leave_room::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_leave_room_result

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
inline bool packetl2c_leave_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_leave_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_leave_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_leave_room_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_leave_room_result::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_leave_room_result::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int64 player_gold = 2;
inline bool packetl2c_leave_room_result::has_player_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_leave_room_result::set_has_player_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_leave_room_result::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_leave_room_result::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 packetl2c_leave_room_result::player_gold() const {
  return player_gold_;
}
inline void packetl2c_leave_room_result::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// -------------------------------------------------------------------

// packetc2l_user_trustee

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_user_trustee];
inline bool packetc2l_user_trustee::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_user_trustee::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_user_trustee::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_user_trustee::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_user_trustee::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_user_trustee::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool trustee = 2;
inline bool packetc2l_user_trustee::has_trustee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_user_trustee::set_has_trustee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_user_trustee::clear_has_trustee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_user_trustee::clear_trustee() {
  trustee_ = false;
  clear_has_trustee();
}
inline bool packetc2l_user_trustee::trustee() const {
  return trustee_;
}
inline void packetc2l_user_trustee::set_trustee(bool value) {
  set_has_trustee();
  trustee_ = value;
}

// -------------------------------------------------------------------

// packetl2c_user_trustee_notify

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_user_trustee];
inline bool packetl2c_user_trustee_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_user_trustee_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_user_trustee_notify::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_user_trustee_notify::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_user_trustee_notify::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chair_id = 2;
inline bool packetl2c_user_trustee_notify::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_user_trustee_notify::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_user_trustee_notify::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 packetl2c_user_trustee_notify::chair_id() const {
  return chair_id_;
}
inline void packetl2c_user_trustee_notify::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional bool trustee = 3;
inline bool packetl2c_user_trustee_notify::has_trustee() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_trustee() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_user_trustee_notify::clear_has_trustee() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_user_trustee_notify::clear_trustee() {
  trustee_ = false;
  clear_has_trustee();
}
inline bool packetl2c_user_trustee_notify::trustee() const {
  return trustee_;
}
inline void packetl2c_user_trustee_notify::set_trustee(bool value) {
  set_has_trustee();
  trustee_ = value;
}

// optional int32 remain_seconds = 4;
inline bool packetl2c_user_trustee_notify::has_remain_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_user_trustee_notify::set_has_remain_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_user_trustee_notify::clear_has_remain_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_user_trustee_notify::clear_remain_seconds() {
  remain_seconds_ = 0;
  clear_has_remain_seconds();
}
inline ::google::protobuf::int32 packetl2c_user_trustee_notify::remain_seconds() const {
  return remain_seconds_;
}
inline void packetl2c_user_trustee_notify::set_remain_seconds(::google::protobuf::int32 value) {
  set_has_remain_seconds();
  remain_seconds_ = value;
}

// -------------------------------------------------------------------

// packetc2l_ready

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ready];
inline bool packetc2l_ready::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_ready::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_ready::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_ready::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_ready::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_ready::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetl2c_send_all_playerinfos

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_playerinfos];
inline bool packetl2c_send_all_playerinfos::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_send_all_playerinfos::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_send_all_playerinfos::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_send_all_playerinfos::clear_packet_id() {
  packet_id_ = 15017;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_send_all_playerinfos::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_send_all_playerinfos::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .game_land_protocols.msg_player_info player_info = 2;
inline int packetl2c_send_all_playerinfos::player_info_size() const {
  return player_info_.size();
}
inline void packetl2c_send_all_playerinfos::clear_player_info() {
  player_info_.Clear();
}
inline const ::game_land_protocols::msg_player_info& packetl2c_send_all_playerinfos::player_info(int index) const {
  return player_info_.Get(index);
}
inline ::game_land_protocols::msg_player_info* packetl2c_send_all_playerinfos::mutable_player_info(int index) {
  return player_info_.Mutable(index);
}
inline ::game_land_protocols::msg_player_info* packetl2c_send_all_playerinfos::add_player_info() {
  return player_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_land_protocols::msg_player_info >&
packetl2c_send_all_playerinfos::player_info() const {
  return player_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_land_protocols::msg_player_info >*
packetl2c_send_all_playerinfos::mutable_player_info() {
  return &player_info_;
}

// -------------------------------------------------------------------

// packetl2c_send_all_card

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_send_all_card];
inline bool packetl2c_send_all_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_send_all_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_send_all_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_send_all_card::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_send_all_card::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_send_all_card::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 current_user = 2;
inline bool packetl2c_send_all_card::has_current_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_send_all_card::set_has_current_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_send_all_card::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_send_all_card::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::current_user() const {
  return current_user_;
}
inline void packetl2c_send_all_card::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// repeated bool user_trustee = 3;
inline int packetl2c_send_all_card::user_trustee_size() const {
  return user_trustee_.size();
}
inline void packetl2c_send_all_card::clear_user_trustee() {
  user_trustee_.Clear();
}
inline bool packetl2c_send_all_card::user_trustee(int index) const {
  return user_trustee_.Get(index);
}
inline void packetl2c_send_all_card::set_user_trustee(int index, bool value) {
  user_trustee_.Set(index, value);
}
inline void packetl2c_send_all_card::add_user_trustee(bool value) {
  user_trustee_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
packetl2c_send_all_card::user_trustee() const {
  return user_trustee_;
}
inline ::google::protobuf::RepeatedField< bool >*
packetl2c_send_all_card::mutable_user_trustee() {
  return &user_trustee_;
}

// repeated int32 cards_info = 4;
inline int packetl2c_send_all_card::cards_info_size() const {
  return cards_info_.size();
}
inline void packetl2c_send_all_card::clear_cards_info() {
  cards_info_.Clear();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::cards_info(int index) const {
  return cards_info_.Get(index);
}
inline void packetl2c_send_all_card::set_cards_info(int index, ::google::protobuf::int32 value) {
  cards_info_.Set(index, value);
}
inline void packetl2c_send_all_card::add_cards_info(::google::protobuf::int32 value) {
  cards_info_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_send_all_card::cards_info() const {
  return cards_info_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_send_all_card::mutable_cards_info() {
  return &cards_info_;
}

// repeated int32 cards_info2 = 5;
inline int packetl2c_send_all_card::cards_info2_size() const {
  return cards_info2_.size();
}
inline void packetl2c_send_all_card::clear_cards_info2() {
  cards_info2_.Clear();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::cards_info2(int index) const {
  return cards_info2_.Get(index);
}
inline void packetl2c_send_all_card::set_cards_info2(int index, ::google::protobuf::int32 value) {
  cards_info2_.Set(index, value);
}
inline void packetl2c_send_all_card::add_cards_info2(::google::protobuf::int32 value) {
  cards_info2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_send_all_card::cards_info2() const {
  return cards_info2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_send_all_card::mutable_cards_info2() {
  return &cards_info2_;
}

// repeated int32 cards_info3 = 6;
inline int packetl2c_send_all_card::cards_info3_size() const {
  return cards_info3_.size();
}
inline void packetl2c_send_all_card::clear_cards_info3() {
  cards_info3_.Clear();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::cards_info3(int index) const {
  return cards_info3_.Get(index);
}
inline void packetl2c_send_all_card::set_cards_info3(int index, ::google::protobuf::int32 value) {
  cards_info3_.Set(index, value);
}
inline void packetl2c_send_all_card::add_cards_info3(::google::protobuf::int32 value) {
  cards_info3_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_send_all_card::cards_info3() const {
  return cards_info3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_send_all_card::mutable_cards_info3() {
  return &cards_info3_;
}

// repeated int32 back_card = 7;
inline int packetl2c_send_all_card::back_card_size() const {
  return back_card_.size();
}
inline void packetl2c_send_all_card::clear_back_card() {
  back_card_.Clear();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::back_card(int index) const {
  return back_card_.Get(index);
}
inline void packetl2c_send_all_card::set_back_card(int index, ::google::protobuf::int32 value) {
  back_card_.Set(index, value);
}
inline void packetl2c_send_all_card::add_back_card(::google::protobuf::int32 value) {
  back_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_send_all_card::back_card() const {
  return back_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_send_all_card::mutable_back_card() {
  return &back_card_;
}

// optional bool BotBanker = 8;
inline bool packetl2c_send_all_card::has_botbanker() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetl2c_send_all_card::set_has_botbanker() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetl2c_send_all_card::clear_has_botbanker() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetl2c_send_all_card::clear_botbanker() {
  botbanker_ = false;
  clear_has_botbanker();
}
inline bool packetl2c_send_all_card::botbanker() const {
  return botbanker_;
}
inline void packetl2c_send_all_card::set_botbanker(bool value) {
  set_has_botbanker();
  botbanker_ = value;
}

// optional int32 room_id = 9;
inline bool packetl2c_send_all_card::has_room_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetl2c_send_all_card::set_has_room_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetl2c_send_all_card::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetl2c_send_all_card::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::room_id() const {
  return room_id_;
}
inline void packetl2c_send_all_card::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 task_id = 10;
inline bool packetl2c_send_all_card::has_task_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void packetl2c_send_all_card::set_has_task_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void packetl2c_send_all_card::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void packetl2c_send_all_card::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::task_id() const {
  return task_id_;
}
inline void packetl2c_send_all_card::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// repeated int32 bot_landlords = 11;
inline int packetl2c_send_all_card::bot_landlords_size() const {
  return bot_landlords_.size();
}
inline void packetl2c_send_all_card::clear_bot_landlords() {
  bot_landlords_.Clear();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::bot_landlords(int index) const {
  return bot_landlords_.Get(index);
}
inline void packetl2c_send_all_card::set_bot_landlords(int index, ::google::protobuf::int32 value) {
  bot_landlords_.Set(index, value);
}
inline void packetl2c_send_all_card::add_bot_landlords(::google::protobuf::int32 value) {
  bot_landlords_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_send_all_card::bot_landlords() const {
  return bot_landlords_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_send_all_card::mutable_bot_landlords() {
  return &bot_landlords_;
}

// optional int32 play_cnt = 12;
inline bool packetl2c_send_all_card::has_play_cnt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void packetl2c_send_all_card::set_has_play_cnt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void packetl2c_send_all_card::clear_has_play_cnt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void packetl2c_send_all_card::clear_play_cnt() {
  play_cnt_ = 0;
  clear_has_play_cnt();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::play_cnt() const {
  return play_cnt_;
}
inline void packetl2c_send_all_card::set_play_cnt(::google::protobuf::int32 value) {
  set_has_play_cnt();
  play_cnt_ = value;
}

// optional int32 four_take = 13;
inline bool packetl2c_send_all_card::has_four_take() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void packetl2c_send_all_card::set_has_four_take() {
  _has_bits_[0] |= 0x00001000u;
}
inline void packetl2c_send_all_card::clear_has_four_take() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void packetl2c_send_all_card::clear_four_take() {
  four_take_ = 0;
  clear_has_four_take();
}
inline ::google::protobuf::int32 packetl2c_send_all_card::four_take() const {
  return four_take_;
}
inline void packetl2c_send_all_card::set_four_take(::google::protobuf::int32 value) {
  set_has_four_take();
  four_take_ = value;
}

// -------------------------------------------------------------------

// packetc2l_land_score

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_land_score];
inline bool packetc2l_land_score::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_land_score::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_land_score::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_land_score::clear_packet_id() {
  packet_id_ = 10012;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_land_score::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_land_score::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional bool score = 2;
inline bool packetc2l_land_score::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_land_score::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_land_score::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_land_score::clear_score() {
  score_ = false;
  clear_has_score();
}
inline bool packetc2l_land_score::score() const {
  return score_;
}
inline void packetc2l_land_score::set_score(bool value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// packetl2c_land_score

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_land_score];
inline bool packetl2c_land_score::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_land_score::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_land_score::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_land_score::clear_packet_id() {
  packet_id_ = 15012;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_land_score::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_land_score::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 land_user = 2;
inline bool packetl2c_land_score::has_land_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_land_score::set_has_land_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_land_score::clear_has_land_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_land_score::clear_land_user() {
  land_user_ = 0;
  clear_has_land_user();
}
inline ::google::protobuf::int32 packetl2c_land_score::land_user() const {
  return land_user_;
}
inline void packetl2c_land_score::set_land_user(::google::protobuf::int32 value) {
  set_has_land_user();
  land_user_ = value;
}

// optional int32 current_user = 3;
inline bool packetl2c_land_score::has_current_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_land_score::set_has_current_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_land_score::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_land_score::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 packetl2c_land_score::current_user() const {
  return current_user_;
}
inline void packetl2c_land_score::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional int32 land_score = 4;
inline bool packetl2c_land_score::has_land_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_land_score::set_has_land_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_land_score::clear_has_land_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_land_score::clear_land_score() {
  land_score_ = 0;
  clear_has_land_score();
}
inline ::google::protobuf::int32 packetl2c_land_score::land_score() const {
  return land_score_;
}
inline void packetl2c_land_score::set_land_score(::google::protobuf::int32 value) {
  set_has_land_score();
  land_score_ = value;
}

// optional int32 current_score = 5;
inline bool packetl2c_land_score::has_current_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_land_score::set_has_current_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_land_score::clear_has_current_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_land_score::clear_current_score() {
  current_score_ = 0;
  clear_has_current_score();
}
inline ::google::protobuf::int32 packetl2c_land_score::current_score() const {
  return current_score_;
}
inline void packetl2c_land_score::set_current_score(::google::protobuf::int32 value) {
  set_has_current_score();
  current_score_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_start

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_start];
inline bool packetl2c_game_start::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_start::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_start::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_start::clear_packet_id() {
  packet_id_ = 15013;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_game_start::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_start::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 land_user = 2;
inline bool packetl2c_game_start::has_land_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_start::set_has_land_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_start::clear_has_land_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_start::clear_land_user() {
  land_user_ = 0;
  clear_has_land_user();
}
inline ::google::protobuf::int32 packetl2c_game_start::land_user() const {
  return land_user_;
}
inline void packetl2c_game_start::set_land_user(::google::protobuf::int32 value) {
  set_has_land_user();
  land_user_ = value;
}

// optional int32 land_score = 3;
inline bool packetl2c_game_start::has_land_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_game_start::set_has_land_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_game_start::clear_has_land_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_game_start::clear_land_score() {
  land_score_ = 0;
  clear_has_land_score();
}
inline ::google::protobuf::int32 packetl2c_game_start::land_score() const {
  return land_score_;
}
inline void packetl2c_game_start::set_land_score(::google::protobuf::int32 value) {
  set_has_land_score();
  land_score_ = value;
}

// repeated int32 back_card = 4;
inline int packetl2c_game_start::back_card_size() const {
  return back_card_.size();
}
inline void packetl2c_game_start::clear_back_card() {
  back_card_.Clear();
}
inline ::google::protobuf::int32 packetl2c_game_start::back_card(int index) const {
  return back_card_.Get(index);
}
inline void packetl2c_game_start::set_back_card(int index, ::google::protobuf::int32 value) {
  back_card_.Set(index, value);
}
inline void packetl2c_game_start::add_back_card(::google::protobuf::int32 value) {
  back_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_game_start::back_card() const {
  return back_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_game_start::mutable_back_card() {
  return &back_card_;
}

// optional int32 score_times = 5;
inline bool packetl2c_game_start::has_score_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_game_start::set_has_score_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_game_start::clear_has_score_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_game_start::clear_score_times() {
  score_times_ = 0;
  clear_has_score_times();
}
inline ::google::protobuf::int32 packetl2c_game_start::score_times() const {
  return score_times_;
}
inline void packetl2c_game_start::set_score_times(::google::protobuf::int32 value) {
  set_has_score_times();
  score_times_ = value;
}

// optional int32 remain_seconds = 6;
inline bool packetl2c_game_start::has_remain_seconds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_game_start::set_has_remain_seconds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_game_start::clear_has_remain_seconds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_game_start::clear_remain_seconds() {
  remain_seconds_ = 0;
  clear_has_remain_seconds();
}
inline ::google::protobuf::int32 packetl2c_game_start::remain_seconds() const {
  return remain_seconds_;
}
inline void packetl2c_game_start::set_remain_seconds(::google::protobuf::int32 value) {
  set_has_remain_seconds();
  remain_seconds_ = value;
}

// optional bool need_times = 7;
inline bool packetl2c_game_start::has_need_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_game_start::set_has_need_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_game_start::clear_has_need_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_game_start::clear_need_times() {
  need_times_ = false;
  clear_has_need_times();
}
inline bool packetl2c_game_start::need_times() const {
  return need_times_;
}
inline void packetl2c_game_start::set_need_times(bool value) {
  set_has_need_times();
  need_times_ = value;
}

// -------------------------------------------------------------------

// packetc2l_times

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_times];
inline bool packetc2l_times::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_times::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_times::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_times::clear_packet_id() {
  packet_id_ = 10014;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_times::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_times::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 times = 2;
inline bool packetc2l_times::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_times::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_times::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_times::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 packetc2l_times::times() const {
  return times_;
}
inline void packetc2l_times::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// packetl2c_times_notify

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_times_notify];
inline bool packetl2c_times_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_times_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_times_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_times_notify::clear_packet_id() {
  packet_id_ = 15019;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_times_notify::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_times_notify::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chair_idx = 2;
inline bool packetl2c_times_notify::has_chair_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_times_notify::set_has_chair_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_times_notify::clear_has_chair_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_times_notify::clear_chair_idx() {
  chair_idx_ = 0;
  clear_has_chair_idx();
}
inline ::google::protobuf::int32 packetl2c_times_notify::chair_idx() const {
  return chair_idx_;
}
inline void packetl2c_times_notify::set_chair_idx(::google::protobuf::int32 value) {
  set_has_chair_idx();
  chair_idx_ = value;
}

// optional int32 times = 3;
inline bool packetl2c_times_notify::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_times_notify::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_times_notify::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_times_notify::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 packetl2c_times_notify::times() const {
  return times_;
}
inline void packetl2c_times_notify::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// packetl2c_really_game_start

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_really_game_start];
inline bool packetl2c_really_game_start::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_really_game_start::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_really_game_start::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_really_game_start::clear_packet_id() {
  packet_id_ = 15020;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_really_game_start::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_really_game_start::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// -------------------------------------------------------------------

// packetc2l_out_card

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_out_card];
inline bool packetc2l_out_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_out_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_out_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_out_card::clear_packet_id() {
  packet_id_ = 10013;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_out_card::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_out_card::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int32 cards = 2;
inline int packetc2l_out_card::cards_size() const {
  return cards_.size();
}
inline void packetc2l_out_card::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 packetc2l_out_card::cards(int index) const {
  return cards_.Get(index);
}
inline void packetc2l_out_card::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void packetc2l_out_card::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetc2l_out_card::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetc2l_out_card::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// packetl2c_out_card

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_out_card];
inline bool packetl2c_out_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_out_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_out_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_out_card::clear_packet_id() {
  packet_id_ = 15014;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_out_card::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_out_card::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 out_card_user = 2;
inline bool packetl2c_out_card::has_out_card_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_out_card::set_has_out_card_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_out_card::clear_has_out_card_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_out_card::clear_out_card_user() {
  out_card_user_ = 0;
  clear_has_out_card_user();
}
inline ::google::protobuf::int32 packetl2c_out_card::out_card_user() const {
  return out_card_user_;
}
inline void packetl2c_out_card::set_out_card_user(::google::protobuf::int32 value) {
  set_has_out_card_user();
  out_card_user_ = value;
}

// optional int32 current_user = 3;
inline bool packetl2c_out_card::has_current_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_out_card::set_has_current_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_out_card::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_out_card::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 packetl2c_out_card::current_user() const {
  return current_user_;
}
inline void packetl2c_out_card::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional int32 bomb_time = 4;
inline bool packetl2c_out_card::has_bomb_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_out_card::set_has_bomb_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_out_card::clear_has_bomb_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_out_card::clear_bomb_time() {
  bomb_time_ = 0;
  clear_has_bomb_time();
}
inline ::google::protobuf::int32 packetl2c_out_card::bomb_time() const {
  return bomb_time_;
}
inline void packetl2c_out_card::set_bomb_time(::google::protobuf::int32 value) {
  set_has_bomb_time();
  bomb_time_ = value;
}

// repeated int32 cards = 5;
inline int packetl2c_out_card::cards_size() const {
  return cards_.size();
}
inline void packetl2c_out_card::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 packetl2c_out_card::cards(int index) const {
  return cards_.Get(index);
}
inline void packetl2c_out_card::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void packetl2c_out_card::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_out_card::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_out_card::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// packetl2c_pass_card

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_pass_card];
inline bool packetl2c_pass_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_pass_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_pass_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_pass_card::clear_packet_id() {
  packet_id_ = 15015;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_pass_card::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_pass_card::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 pass_card_user = 2;
inline bool packetl2c_pass_card::has_pass_card_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_pass_card::set_has_pass_card_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_pass_card::clear_has_pass_card_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_pass_card::clear_pass_card_user() {
  pass_card_user_ = 0;
  clear_has_pass_card_user();
}
inline ::google::protobuf::int32 packetl2c_pass_card::pass_card_user() const {
  return pass_card_user_;
}
inline void packetl2c_pass_card::set_pass_card_user(::google::protobuf::int32 value) {
  set_has_pass_card_user();
  pass_card_user_ = value;
}

// optional int32 current_user = 3;
inline bool packetl2c_pass_card::has_current_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_pass_card::set_has_current_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_pass_card::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_pass_card::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 packetl2c_pass_card::current_user() const {
  return current_user_;
}
inline void packetl2c_pass_card::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional bool new_turn = 4;
inline bool packetl2c_pass_card::has_new_turn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_pass_card::set_has_new_turn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_pass_card::clear_has_new_turn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_pass_card::clear_new_turn() {
  new_turn_ = false;
  clear_has_new_turn();
}
inline bool packetl2c_pass_card::new_turn() const {
  return new_turn_;
}
inline void packetl2c_pass_card::set_new_turn(bool value) {
  set_has_new_turn();
  new_turn_ = value;
}

// -------------------------------------------------------------------

// packetl2c_game_end

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_end];
inline bool packetl2c_game_end::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_end::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_end::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_end::clear_packet_id() {
  packet_id_ = 15016;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_game_end::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_end::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated int32 bomb_time = 2;
inline int packetl2c_game_end::bomb_time_size() const {
  return bomb_time_.size();
}
inline void packetl2c_game_end::clear_bomb_time() {
  bomb_time_.Clear();
}
inline ::google::protobuf::int32 packetl2c_game_end::bomb_time(int index) const {
  return bomb_time_.Get(index);
}
inline void packetl2c_game_end::set_bomb_time(int index, ::google::protobuf::int32 value) {
  bomb_time_.Set(index, value);
}
inline void packetl2c_game_end::add_bomb_time(::google::protobuf::int32 value) {
  bomb_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_game_end::bomb_time() const {
  return bomb_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_game_end::mutable_bomb_time() {
  return &bomb_time_;
}

// repeated int32 game_score = 3;
inline int packetl2c_game_end::game_score_size() const {
  return game_score_.size();
}
inline void packetl2c_game_end::clear_game_score() {
  game_score_.Clear();
}
inline ::google::protobuf::int32 packetl2c_game_end::game_score(int index) const {
  return game_score_.Get(index);
}
inline void packetl2c_game_end::set_game_score(int index, ::google::protobuf::int32 value) {
  game_score_.Set(index, value);
}
inline void packetl2c_game_end::add_game_score(::google::protobuf::int32 value) {
  game_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_game_end::game_score() const {
  return game_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_game_end::mutable_game_score() {
  return &game_score_;
}

// repeated bool leave_game = 4;
inline int packetl2c_game_end::leave_game_size() const {
  return leave_game_.size();
}
inline void packetl2c_game_end::clear_leave_game() {
  leave_game_.Clear();
}
inline bool packetl2c_game_end::leave_game(int index) const {
  return leave_game_.Get(index);
}
inline void packetl2c_game_end::set_leave_game(int index, bool value) {
  leave_game_.Set(index, value);
}
inline void packetl2c_game_end::add_leave_game(bool value) {
  leave_game_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
packetl2c_game_end::leave_game() const {
  return leave_game_;
}
inline ::google::protobuf::RepeatedField< bool >*
packetl2c_game_end::mutable_leave_game() {
  return &leave_game_;
}

// optional bool spring = 5;
inline bool packetl2c_game_end::has_spring() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_game_end::set_has_spring() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_game_end::clear_has_spring() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_game_end::clear_spring() {
  spring_ = false;
  clear_has_spring();
}
inline bool packetl2c_game_end::spring() const {
  return spring_;
}
inline void packetl2c_game_end::set_spring(bool value) {
  set_has_spring();
  spring_ = value;
}

// repeated int32 cards1 = 6;
inline int packetl2c_game_end::cards1_size() const {
  return cards1_.size();
}
inline void packetl2c_game_end::clear_cards1() {
  cards1_.Clear();
}
inline ::google::protobuf::int32 packetl2c_game_end::cards1(int index) const {
  return cards1_.Get(index);
}
inline void packetl2c_game_end::set_cards1(int index, ::google::protobuf::int32 value) {
  cards1_.Set(index, value);
}
inline void packetl2c_game_end::add_cards1(::google::protobuf::int32 value) {
  cards1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_game_end::cards1() const {
  return cards1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_game_end::mutable_cards1() {
  return &cards1_;
}

// repeated int32 cards2 = 7;
inline int packetl2c_game_end::cards2_size() const {
  return cards2_.size();
}
inline void packetl2c_game_end::clear_cards2() {
  cards2_.Clear();
}
inline ::google::protobuf::int32 packetl2c_game_end::cards2(int index) const {
  return cards2_.Get(index);
}
inline void packetl2c_game_end::set_cards2(int index, ::google::protobuf::int32 value) {
  cards2_.Set(index, value);
}
inline void packetl2c_game_end::add_cards2(::google::protobuf::int32 value) {
  cards2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_game_end::cards2() const {
  return cards2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_game_end::mutable_cards2() {
  return &cards2_;
}

// repeated int32 cards3 = 8;
inline int packetl2c_game_end::cards3_size() const {
  return cards3_.size();
}
inline void packetl2c_game_end::clear_cards3() {
  cards3_.Clear();
}
inline ::google::protobuf::int32 packetl2c_game_end::cards3(int index) const {
  return cards3_.Get(index);
}
inline void packetl2c_game_end::set_cards3(int index, ::google::protobuf::int32 value) {
  cards3_.Set(index, value);
}
inline void packetl2c_game_end::add_cards3(::google::protobuf::int32 value) {
  cards3_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_game_end::cards3() const {
  return cards3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_game_end::mutable_cards3() {
  return &cards3_;
}

// repeated bool limited = 9;
inline int packetl2c_game_end::limited_size() const {
  return limited_.size();
}
inline void packetl2c_game_end::clear_limited() {
  limited_.Clear();
}
inline bool packetl2c_game_end::limited(int index) const {
  return limited_.Get(index);
}
inline void packetl2c_game_end::set_limited(int index, bool value) {
  limited_.Set(index, value);
}
inline void packetl2c_game_end::add_limited(bool value) {
  limited_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
packetl2c_game_end::limited() const {
  return limited_;
}
inline ::google::protobuf::RepeatedField< bool >*
packetl2c_game_end::mutable_limited() {
  return &limited_;
}

// optional int32 task_ok = 10;
inline bool packetl2c_game_end::has_task_ok() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void packetl2c_game_end::set_has_task_ok() {
  _has_bits_[0] |= 0x00000200u;
}
inline void packetl2c_game_end::clear_has_task_ok() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void packetl2c_game_end::clear_task_ok() {
  task_ok_ = 0;
  clear_has_task_ok();
}
inline ::google::protobuf::int32 packetl2c_game_end::task_ok() const {
  return task_ok_;
}
inline void packetl2c_game_end::set_task_ok(::google::protobuf::int32 value) {
  set_has_task_ok();
  task_ok_ = value;
}

// repeated bool low_limited = 11;
inline int packetl2c_game_end::low_limited_size() const {
  return low_limited_.size();
}
inline void packetl2c_game_end::clear_low_limited() {
  low_limited_.Clear();
}
inline bool packetl2c_game_end::low_limited(int index) const {
  return low_limited_.Get(index);
}
inline void packetl2c_game_end::set_low_limited(int index, bool value) {
  low_limited_.Set(index, value);
}
inline void packetl2c_game_end::add_low_limited(bool value) {
  low_limited_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
packetl2c_game_end::low_limited() const {
  return low_limited_;
}
inline ::google::protobuf::RepeatedField< bool >*
packetl2c_game_end::mutable_low_limited() {
  return &low_limited_;
}

// -------------------------------------------------------------------

// packetl2c_game_notify

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_game_notify];
inline bool packetl2c_game_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_game_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_game_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_game_notify::clear_packet_id() {
  packet_id_ = 15018;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_game_notify::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_game_notify::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional .game_land_protocols.e_notify_type notify_type = 2;
inline bool packetl2c_game_notify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_game_notify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_game_notify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_game_notify::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::game_land_protocols::e_notify_type packetl2c_game_notify::notify_type() const {
  return static_cast< ::game_land_protocols::e_notify_type >(notify_type_);
}
inline void packetl2c_game_notify::set_notify_type(::game_land_protocols::e_notify_type value) {
  assert(::game_land_protocols::e_notify_type_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// -------------------------------------------------------------------

// packetc2l_report

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_report];
inline bool packetc2l_report::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_report::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_report::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_report::clear_packet_id() {
  packet_id_ = 10015;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetc2l_report::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_report::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chair_idx = 2;
inline bool packetc2l_report::has_chair_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_report::set_has_chair_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_report::clear_has_chair_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_report::clear_chair_idx() {
  chair_idx_ = 0;
  clear_has_chair_idx();
}
inline ::google::protobuf::int32 packetc2l_report::chair_idx() const {
  return chair_idx_;
}
inline void packetc2l_report::set_chair_idx(::google::protobuf::int32 value) {
  set_has_chair_idx();
  chair_idx_ = value;
}

// -------------------------------------------------------------------

// packetl2c_report_res

// optional .game_land_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_report_res];
inline bool packetl2c_report_res::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_report_res::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_report_res::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_report_res::clear_packet_id() {
  packet_id_ = 15021;
  clear_has_packet_id();
}
inline ::game_land_protocols::e_server_msg_type packetl2c_report_res::packet_id() const {
  return static_cast< ::game_land_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_report_res::set_packet_id(::game_land_protocols::e_server_msg_type value) {
  assert(::game_land_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 chair_idx = 2;
inline bool packetl2c_report_res::has_chair_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_report_res::set_has_chair_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_report_res::clear_has_chair_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_report_res::clear_chair_idx() {
  chair_idx_ = 0;
  clear_has_chair_idx();
}
inline ::google::protobuf::int32 packetl2c_report_res::chair_idx() const {
  return chair_idx_;
}
inline void packetl2c_report_res::set_chair_idx(::google::protobuf::int32 value) {
  set_has_chair_idx();
  chair_idx_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_land_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fland_5fprotocol_2eproto__INCLUDED
