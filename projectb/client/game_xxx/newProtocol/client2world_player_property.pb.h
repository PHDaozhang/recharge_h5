// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_player_property.proto

#ifndef PROTOBUF_client2world_5fplayer_5fproperty_2eproto__INCLUDED
#define PROTOBUF_client2world_5fplayer_5fproperty_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

class packetc2w_update_nickname;
class packetw2c_update_nickname_result;
class packetc2w_update_sex;
class packetw2c_update_sex_result;
class packetc2w_change_photo_frame;
class packetw2c_change_photo_frame_result;
class packetc2w_req_safebox_log;
class SafeBoxLogInfo;
class packetw2c_req_safebox_log_result;
class packetc2w_update_playerhead;
class packetw2c_update_playerhead_result;

// ===================================================================

class packetc2w_update_nickname : public ::google::protobuf::Message {
 public:
  packetc2w_update_nickname();
  virtual ~packetc2w_update_nickname();

  packetc2w_update_nickname(const packetc2w_update_nickname& from);

  inline packetc2w_update_nickname& operator=(const packetc2w_update_nickname& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_update_nickname& default_instance();

  void Swap(packetc2w_update_nickname* other);

  // implements Message ----------------------------------------------

  packetc2w_update_nickname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_update_nickname& from);
  void MergeFrom(const packetc2w_update_nickname& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_update_nickname)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_update_nickname* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_update_nickname_result : public ::google::protobuf::Message {
 public:
  packetw2c_update_nickname_result();
  virtual ~packetw2c_update_nickname_result();

  packetw2c_update_nickname_result(const packetw2c_update_nickname_result& from);

  inline packetw2c_update_nickname_result& operator=(const packetw2c_update_nickname_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_update_nickname_result& default_instance();

  void Swap(packetw2c_update_nickname_result* other);

  // implements Message ----------------------------------------------

  packetw2c_update_nickname_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_update_nickname_result& from);
  void MergeFrom(const packetw2c_update_nickname_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_update_nickname_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_update_nickname_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_update_sex : public ::google::protobuf::Message {
 public:
  packetc2w_update_sex();
  virtual ~packetc2w_update_sex();

  packetc2w_update_sex(const packetc2w_update_sex& from);

  inline packetc2w_update_sex& operator=(const packetc2w_update_sex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_update_sex& default_instance();

  void Swap(packetc2w_update_sex* other);

  // implements Message ----------------------------------------------

  packetc2w_update_sex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_update_sex& from);
  void MergeFrom(const packetc2w_update_sex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_update_sex)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_update_sex* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_update_sex_result : public ::google::protobuf::Message {
 public:
  packetw2c_update_sex_result();
  virtual ~packetw2c_update_sex_result();

  packetw2c_update_sex_result(const packetw2c_update_sex_result& from);

  inline packetw2c_update_sex_result& operator=(const packetw2c_update_sex_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_update_sex_result& default_instance();

  void Swap(packetw2c_update_sex_result* other);

  // implements Message ----------------------------------------------

  packetw2c_update_sex_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_update_sex_result& from);
  void MergeFrom(const packetw2c_update_sex_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_update_sex_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_update_sex_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_change_photo_frame : public ::google::protobuf::Message {
 public:
  packetc2w_change_photo_frame();
  virtual ~packetc2w_change_photo_frame();

  packetc2w_change_photo_frame(const packetc2w_change_photo_frame& from);

  inline packetc2w_change_photo_frame& operator=(const packetc2w_change_photo_frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_change_photo_frame& default_instance();

  void Swap(packetc2w_change_photo_frame* other);

  // implements Message ----------------------------------------------

  packetc2w_change_photo_frame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_change_photo_frame& from);
  void MergeFrom(const packetc2w_change_photo_frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 photoFrameId = 2;
  inline bool has_photoframeid() const;
  inline void clear_photoframeid();
  static const int kPhotoFrameIdFieldNumber = 2;
  inline ::google::protobuf::int32 photoframeid() const;
  inline void set_photoframeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_change_photo_frame)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_photoframeid();
  inline void clear_has_photoframeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 photoframeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_change_photo_frame* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_change_photo_frame_result : public ::google::protobuf::Message {
 public:
  packetw2c_change_photo_frame_result();
  virtual ~packetw2c_change_photo_frame_result();

  packetw2c_change_photo_frame_result(const packetw2c_change_photo_frame_result& from);

  inline packetw2c_change_photo_frame_result& operator=(const packetw2c_change_photo_frame_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_change_photo_frame_result& default_instance();

  void Swap(packetw2c_change_photo_frame_result* other);

  // implements Message ----------------------------------------------

  packetw2c_change_photo_frame_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_change_photo_frame_result& from);
  void MergeFrom(const packetw2c_change_photo_frame_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 photoFrameId = 2;
  inline bool has_photoframeid() const;
  inline void clear_photoframeid();
  static const int kPhotoFrameIdFieldNumber = 2;
  inline ::google::protobuf::int32 photoframeid() const;
  inline void set_photoframeid(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_change_photo_frame_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_photoframeid();
  inline void clear_has_photoframeid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 photoframeid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_change_photo_frame_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_safebox_log : public ::google::protobuf::Message {
 public:
  packetc2w_req_safebox_log();
  virtual ~packetc2w_req_safebox_log();

  packetc2w_req_safebox_log(const packetc2w_req_safebox_log& from);

  inline packetc2w_req_safebox_log& operator=(const packetc2w_req_safebox_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_safebox_log& default_instance();

  void Swap(packetc2w_req_safebox_log* other);

  // implements Message ----------------------------------------------

  packetc2w_req_safebox_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_safebox_log& from);
  void MergeFrom(const packetc2w_req_safebox_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_safebox_log)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 lasttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_safebox_log* default_instance_;
};
// -------------------------------------------------------------------

class SafeBoxLogInfo : public ::google::protobuf::Message {
 public:
  SafeBoxLogInfo();
  virtual ~SafeBoxLogInfo();

  SafeBoxLogInfo(const SafeBoxLogInfo& from);

  inline SafeBoxLogInfo& operator=(const SafeBoxLogInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeBoxLogInfo& default_instance();

  void Swap(SafeBoxLogInfo* other);

  // implements Message ----------------------------------------------

  SafeBoxLogInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SafeBoxLogInfo& from);
  void MergeFrom(const SafeBoxLogInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 player_gold = 3;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 3;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.SafeBoxLogInfo)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static SafeBoxLogInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_safebox_log_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_safebox_log_result();
  virtual ~packetw2c_req_safebox_log_result();

  packetw2c_req_safebox_log_result(const packetw2c_req_safebox_log_result& from);

  inline packetw2c_req_safebox_log_result& operator=(const packetw2c_req_safebox_log_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_safebox_log_result& default_instance();

  void Swap(packetw2c_req_safebox_log_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_safebox_log_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_safebox_log_result& from);
  void MergeFrom(const packetw2c_req_safebox_log_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
  inline int loglist_size() const;
  inline void clear_loglist();
  static const int kLogListFieldNumber = 2;
  inline const ::client2world_protocols::SafeBoxLogInfo& loglist(int index) const;
  inline ::client2world_protocols::SafeBoxLogInfo* mutable_loglist(int index);
  inline ::client2world_protocols::SafeBoxLogInfo* add_loglist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo >&
      loglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo >*
      mutable_loglist();

  // optional int32 lastTime = 3;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_safebox_log_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo > loglist_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_safebox_log_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_update_playerhead : public ::google::protobuf::Message {
 public:
  packetc2w_update_playerhead();
  virtual ~packetc2w_update_playerhead();

  packetc2w_update_playerhead(const packetc2w_update_playerhead& from);

  inline packetc2w_update_playerhead& operator=(const packetc2w_update_playerhead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_update_playerhead& default_instance();

  void Swap(packetc2w_update_playerhead* other);

  // implements Message ----------------------------------------------

  packetc2w_update_playerhead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_update_playerhead& from);
  void MergeFrom(const packetc2w_update_playerhead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string headstr = 2;
  inline bool has_headstr() const;
  inline void clear_headstr();
  static const int kHeadstrFieldNumber = 2;
  inline const ::std::string& headstr() const;
  inline void set_headstr(const ::std::string& value);
  inline void set_headstr(const char* value);
  inline void set_headstr(const char* value, size_t size);
  inline ::std::string* mutable_headstr();
  inline ::std::string* release_headstr();
  inline void set_allocated_headstr(::std::string* headstr);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_update_playerhead)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_headstr();
  inline void clear_has_headstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* headstr_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_update_playerhead* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_update_playerhead_result : public ::google::protobuf::Message {
 public:
  packetw2c_update_playerhead_result();
  virtual ~packetw2c_update_playerhead_result();

  packetw2c_update_playerhead_result(const packetw2c_update_playerhead_result& from);

  inline packetw2c_update_playerhead_result& operator=(const packetw2c_update_playerhead_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_update_playerhead_result& default_instance();

  void Swap(packetw2c_update_playerhead_result* other);

  // implements Message ----------------------------------------------

  packetw2c_update_playerhead_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_update_playerhead_result& from);
  void MergeFrom(const packetw2c_update_playerhead_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string headstr = 2;
  inline bool has_headstr() const;
  inline void clear_headstr();
  static const int kHeadstrFieldNumber = 2;
  inline const ::std::string& headstr() const;
  inline void set_headstr(const ::std::string& value);
  inline void set_headstr(const char* value);
  inline void set_headstr(const char* value, size_t size);
  inline ::std::string* mutable_headstr();
  inline ::std::string* release_headstr();
  inline void set_allocated_headstr(::std::string* headstr);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_update_playerhead_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_headstr();
  inline void clear_has_headstr();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* headstr_;
  int packet_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_update_playerhead_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_update_nickname

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
inline bool packetc2w_update_nickname::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_update_nickname::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_update_nickname::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_update_nickname::clear_packet_id() {
  packet_id_ = 5011;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_update_nickname::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_update_nickname::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string nickName = 2;
inline bool packetc2w_update_nickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_update_nickname::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_update_nickname::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_update_nickname::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& packetc2w_update_nickname::nickname() const {
  return *nickname_;
}
inline void packetc2w_update_nickname::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void packetc2w_update_nickname::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void packetc2w_update_nickname::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_update_nickname::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* packetc2w_update_nickname::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_update_nickname::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_update_nickname_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
inline bool packetw2c_update_nickname_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_update_nickname_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_update_nickname_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_update_nickname_result::clear_packet_id() {
  packet_id_ = 7510;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_update_nickname_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_update_nickname_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string nickName = 2;
inline bool packetw2c_update_nickname_result::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_update_nickname_result::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_update_nickname_result::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_update_nickname_result::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& packetw2c_update_nickname_result::nickname() const {
  return *nickname_;
}
inline void packetw2c_update_nickname_result::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void packetw2c_update_nickname_result::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void packetw2c_update_nickname_result::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_update_nickname_result::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* packetw2c_update_nickname_result::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_update_nickname_result::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 result = 3;
inline bool packetw2c_update_nickname_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_update_nickname_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_update_nickname_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_update_nickname_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_update_nickname_result::result() const {
  return result_;
}
inline void packetw2c_update_nickname_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2w_update_sex

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
inline bool packetc2w_update_sex::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_update_sex::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_update_sex::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_update_sex::clear_packet_id() {
  packet_id_ = 5012;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_update_sex::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_update_sex::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 sex = 2;
inline bool packetc2w_update_sex::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_update_sex::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_update_sex::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_update_sex::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 packetc2w_update_sex::sex() const {
  return sex_;
}
inline void packetc2w_update_sex::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// -------------------------------------------------------------------

// packetw2c_update_sex_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
inline bool packetw2c_update_sex_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_update_sex_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_update_sex_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_update_sex_result::clear_packet_id() {
  packet_id_ = 7511;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_update_sex_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_update_sex_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 sex = 2;
inline bool packetw2c_update_sex_result::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_update_sex_result::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_update_sex_result::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_update_sex_result::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 packetw2c_update_sex_result::sex() const {
  return sex_;
}
inline void packetw2c_update_sex_result::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 result = 3;
inline bool packetw2c_update_sex_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_update_sex_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_update_sex_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_update_sex_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_update_sex_result::result() const {
  return result_;
}
inline void packetw2c_update_sex_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2w_change_photo_frame

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
inline bool packetc2w_change_photo_frame::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_change_photo_frame::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_change_photo_frame::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_change_photo_frame::clear_packet_id() {
  packet_id_ = 5032;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_change_photo_frame::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_change_photo_frame::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 photoFrameId = 2;
inline bool packetc2w_change_photo_frame::has_photoframeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_change_photo_frame::set_has_photoframeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_change_photo_frame::clear_has_photoframeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_change_photo_frame::clear_photoframeid() {
  photoframeid_ = 0;
  clear_has_photoframeid();
}
inline ::google::protobuf::int32 packetc2w_change_photo_frame::photoframeid() const {
  return photoframeid_;
}
inline void packetc2w_change_photo_frame::set_photoframeid(::google::protobuf::int32 value) {
  set_has_photoframeid();
  photoframeid_ = value;
}

// -------------------------------------------------------------------

// packetw2c_change_photo_frame_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
inline bool packetw2c_change_photo_frame_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_change_photo_frame_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_change_photo_frame_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_change_photo_frame_result::clear_packet_id() {
  packet_id_ = 7534;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_change_photo_frame_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_change_photo_frame_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 photoFrameId = 2;
inline bool packetw2c_change_photo_frame_result::has_photoframeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_change_photo_frame_result::set_has_photoframeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_change_photo_frame_result::clear_has_photoframeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_change_photo_frame_result::clear_photoframeid() {
  photoframeid_ = 0;
  clear_has_photoframeid();
}
inline ::google::protobuf::int32 packetw2c_change_photo_frame_result::photoframeid() const {
  return photoframeid_;
}
inline void packetw2c_change_photo_frame_result::set_photoframeid(::google::protobuf::int32 value) {
  set_has_photoframeid();
  photoframeid_ = value;
}

// optional int32 result = 3;
inline bool packetw2c_change_photo_frame_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_change_photo_frame_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_change_photo_frame_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_change_photo_frame_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_change_photo_frame_result::result() const {
  return result_;
}
inline void packetw2c_change_photo_frame_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetc2w_req_safebox_log

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
inline bool packetc2w_req_safebox_log::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_safebox_log::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_safebox_log::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_safebox_log::clear_packet_id() {
  packet_id_ = 5067;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_safebox_log::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_safebox_log::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 lastTime = 2;
inline bool packetc2w_req_safebox_log::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_safebox_log::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_safebox_log::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_safebox_log::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetc2w_req_safebox_log::lasttime() const {
  return lasttime_;
}
inline void packetc2w_req_safebox_log::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// -------------------------------------------------------------------

// SafeBoxLogInfo

// optional int32 time = 1;
inline bool SafeBoxLogInfo::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafeBoxLogInfo::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SafeBoxLogInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SafeBoxLogInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 SafeBoxLogInfo::time() const {
  return time_;
}
inline void SafeBoxLogInfo::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int64 gold = 2;
inline bool SafeBoxLogInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SafeBoxLogInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SafeBoxLogInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SafeBoxLogInfo::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 SafeBoxLogInfo::gold() const {
  return gold_;
}
inline void SafeBoxLogInfo::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 player_gold = 3;
inline bool SafeBoxLogInfo::has_player_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SafeBoxLogInfo::set_has_player_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SafeBoxLogInfo::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SafeBoxLogInfo::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 SafeBoxLogInfo::player_gold() const {
  return player_gold_;
}
inline void SafeBoxLogInfo::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
}

// -------------------------------------------------------------------

// packetw2c_req_safebox_log_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
inline bool packetw2c_req_safebox_log_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_safebox_log_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_safebox_log_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_safebox_log_result::clear_packet_id() {
  packet_id_ = 7573;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_safebox_log_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_safebox_log_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
inline int packetw2c_req_safebox_log_result::loglist_size() const {
  return loglist_.size();
}
inline void packetw2c_req_safebox_log_result::clear_loglist() {
  loglist_.Clear();
}
inline const ::client2world_protocols::SafeBoxLogInfo& packetw2c_req_safebox_log_result::loglist(int index) const {
  return loglist_.Get(index);
}
inline ::client2world_protocols::SafeBoxLogInfo* packetw2c_req_safebox_log_result::mutable_loglist(int index) {
  return loglist_.Mutable(index);
}
inline ::client2world_protocols::SafeBoxLogInfo* packetw2c_req_safebox_log_result::add_loglist() {
  return loglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo >&
packetw2c_req_safebox_log_result::loglist() const {
  return loglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo >*
packetw2c_req_safebox_log_result::mutable_loglist() {
  return &loglist_;
}

// optional int32 lastTime = 3;
inline bool packetw2c_req_safebox_log_result::has_lasttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_safebox_log_result::set_has_lasttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_safebox_log_result::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_safebox_log_result::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetw2c_req_safebox_log_result::lasttime() const {
  return lasttime_;
}
inline void packetw2c_req_safebox_log_result::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// -------------------------------------------------------------------

// packetc2w_update_playerhead

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
inline bool packetc2w_update_playerhead::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_update_playerhead::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_update_playerhead::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_update_playerhead::clear_packet_id() {
  packet_id_ = 5010;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_update_playerhead::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_update_playerhead::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string headstr = 2;
inline bool packetc2w_update_playerhead::has_headstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_update_playerhead::set_has_headstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_update_playerhead::clear_has_headstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_update_playerhead::clear_headstr() {
  if (headstr_ != &::google::protobuf::internal::kEmptyString) {
    headstr_->clear();
  }
  clear_has_headstr();
}
inline const ::std::string& packetc2w_update_playerhead::headstr() const {
  return *headstr_;
}
inline void packetc2w_update_playerhead::set_headstr(const ::std::string& value) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(value);
}
inline void packetc2w_update_playerhead::set_headstr(const char* value) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(value);
}
inline void packetc2w_update_playerhead::set_headstr(const char* value, size_t size) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetc2w_update_playerhead::mutable_headstr() {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    headstr_ = new ::std::string;
  }
  return headstr_;
}
inline ::std::string* packetc2w_update_playerhead::release_headstr() {
  clear_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headstr_;
    headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetc2w_update_playerhead::set_allocated_headstr(::std::string* headstr) {
  if (headstr_ != &::google::protobuf::internal::kEmptyString) {
    delete headstr_;
  }
  if (headstr) {
    set_has_headstr();
    headstr_ = headstr;
  } else {
    clear_has_headstr();
    headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2c_update_playerhead_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
inline bool packetw2c_update_playerhead_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_update_playerhead_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_update_playerhead_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_update_playerhead_result::clear_packet_id() {
  packet_id_ = 7509;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_update_playerhead_result::packet_id() const {
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_update_playerhead_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string headstr = 2;
inline bool packetw2c_update_playerhead_result::has_headstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_update_playerhead_result::set_has_headstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_update_playerhead_result::clear_has_headstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_update_playerhead_result::clear_headstr() {
  if (headstr_ != &::google::protobuf::internal::kEmptyString) {
    headstr_->clear();
  }
  clear_has_headstr();
}
inline const ::std::string& packetw2c_update_playerhead_result::headstr() const {
  return *headstr_;
}
inline void packetw2c_update_playerhead_result::set_headstr(const ::std::string& value) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(value);
}
inline void packetw2c_update_playerhead_result::set_headstr(const char* value) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(value);
}
inline void packetw2c_update_playerhead_result::set_headstr(const char* value, size_t size) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetw2c_update_playerhead_result::mutable_headstr() {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    headstr_ = new ::std::string;
  }
  return headstr_;
}
inline ::std::string* packetw2c_update_playerhead_result::release_headstr() {
  clear_has_headstr();
  if (headstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headstr_;
    headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetw2c_update_playerhead_result::set_allocated_headstr(::std::string* headstr) {
  if (headstr_ != &::google::protobuf::internal::kEmptyString) {
    delete headstr_;
  }
  if (headstr) {
    set_has_headstr();
    headstr_ = headstr;
  } else {
    clear_has_headstr();
    headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 result = 3;
inline bool packetw2c_update_playerhead_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_update_playerhead_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_update_playerhead_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_update_playerhead_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_update_playerhead_result::result() const {
  return result_;
}
inline void packetw2c_update_playerhead_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fplayer_5fproperty_2eproto__INCLUDED
